{"version":3,"sources":["webpack://astar-kotlin-js/webpack/universalModuleDefinition","webpack://astar-kotlin-js/./kotlin-dce/collections/Maps.kt","webpack://astar-kotlin-js/./kotlin-dce/collections/Collections.kt","webpack://astar-kotlin-js/./kotlin-dce/kotlin/math.kt","webpack://astar-kotlin-js/../src/main/kotlin/astar/AStar.kt","webpack://astar-kotlin-js/./kotlin-dce/util/Standard.kt","webpack://astar-kotlin-js/../src/main/kotlin/astar/Grid.kt","webpack://astar-kotlin-js/../src/main/kotlin/astar/Info.kt","webpack://astar-kotlin-js/./kotlin-dce/generated/_Collections.kt","webpack://astar-kotlin-js/./kotlin-dce/wrapper.js","webpack://astar-kotlin-js/./kotlin-dce/arrayUtils.js","webpack://astar-kotlin-js/./kotlin-dce/callableReferenceUtils.js","webpack://astar-kotlin-js/./kotlin-dce/conversions.js","webpack://astar-kotlin-js/./kotlin-dce/core.js","webpack://astar-kotlin-js/./kotlin-dce/misc.js","webpack://astar-kotlin-js/./kotlin-dce/polyfills.js","webpack://astar-kotlin-js/./kotlin-dce/markerFunctions.js","webpack://astar-kotlin-js/./kotlin-dce/rtti.js","webpack://astar-kotlin-js/./kotlin-dce/long.js","webpack://astar-kotlin-js/./kotlin-dce/runtime/arrayUtils.kt","webpack://astar-kotlin-js/./kotlin-dce/runtime/Enum.kt","webpack://astar-kotlin-js/./kotlin-dce/primitiveCompanionObjects.kt","webpack://astar-kotlin-js/./kotlin-dce/generated/_Arrays.kt","webpack://astar-kotlin-js/./kotlin-dce/generated/_Ranges.kt","webpack://astar-kotlin-js/./kotlin-dce/kotlin/UByte.kt","webpack://astar-kotlin-js/./kotlin-dce/kotlin/UInt.kt","webpack://astar-kotlin-js/./kotlin-dce/kotlin/UShort.kt","webpack://astar-kotlin-js/./kotlin-dce/Ranges.kt","webpack://astar-kotlin-js/./kotlin-dce/collections/Sets.kt","webpack://astar-kotlin-js/./kotlin-dce/text/StringNumberConversions.kt","webpack://astar-kotlin-js/./kotlin-dce/time/Duration.kt","webpack://astar-kotlin-js/./kotlin-dce/kotlin/UnsignedUtils.kt","webpack://astar-kotlin-js/./kotlin-dce/collections/Iterables.kt","webpack://astar-kotlin-js/./kotlin-dce/collections/Sequences.kt","webpack://astar-kotlin-js/./kotlin-dce/util/Preconditions.kt","webpack://astar-kotlin-js/./kotlin-dce/comparisons/Comparisons.kt","webpack://astar-kotlin-js/./kotlin-dce/generated/_ArraysJs.kt","webpack://astar-kotlin-js/./kotlin-dce/generated/_ComparisonsJs.kt","webpack://astar-kotlin-js/./kotlin-dce/kotlin/ULong.kt","webpack://astar-kotlin-js/./kotlin-dce/kotlin/collections.kt","webpack://astar-kotlin-js/./kotlin-dce/collections/Iterators.kt","webpack://astar-kotlin-js/./kotlin-dce/generated/_Comparisons.kt","webpack://astar-kotlin-js/./kotlin-dce/generated/_Maps.kt","webpack://astar-kotlin-js/./kotlin-dce/generated/_OneToManyTitlecaseMappings.kt","webpack://astar-kotlin-js/./kotlin-dce/kotlin/text/char.kt","webpack://astar-kotlin-js/./kotlin-dce/kotlin/text/string.kt","webpack://astar-kotlin-js/./kotlin-dce/text/Char.kt","webpack://astar-kotlin-js/./kotlin-dce/generated/_Sequences.kt","webpack://astar-kotlin-js/./kotlin-dce/generated/_Sets.kt","webpack://astar-kotlin-js/./kotlin-dce/generated/_Strings.kt","webpack://astar-kotlin-js/./kotlin-dce/text/Strings.kt","webpack://astar-kotlin-js/./kotlin-dce/generated/_UArrays.kt","webpack://astar-kotlin-js/./kotlin-dce/generated/_UComparisons.kt","webpack://astar-kotlin-js/./kotlin-dce/kotlin/JsAnnotationsH.kt","webpack://astar-kotlin-js/./kotlin-dce/Iterators.kt","webpack://astar-kotlin-js/./kotlin-dce/ProgressionIterators.kt","webpack://astar-kotlin-js/./kotlin-dce/CharCode.kt","webpack://astar-kotlin-js/./kotlin-dce/Progressions.kt","webpack://astar-kotlin-js/./kotlin-dce/generated/_URanges.kt","webpack://astar-kotlin-js/./kotlin-dce/Collections.kt","webpack://astar-kotlin-js/./kotlin-dce/Range.kt","webpack://astar-kotlin-js/./kotlin-dce/Unit.kt","webpack://astar-kotlin-js/./kotlin-dce/annotation/Annotations.kt","webpack://astar-kotlin-js/./kotlin-dce/internal/InternalAnnotations.kt","webpack://astar-kotlin-js/./kotlin-dce/internal/progressionUtil.kt","webpack://astar-kotlin-js/./kotlin-dce/kotlin/builtins.kt","webpack://astar-kotlin-js/./kotlin-dce/kotlin/coroutines/CoroutineImpl.kt","webpack://astar-kotlin-js/./kotlin-dce/kotlin/charCode_js-v1.kt","webpack://astar-kotlin-js/./kotlin-dce/util/Result.kt","webpack://astar-kotlin-js/./kotlin-dce/coroutines/Continuation.kt","webpack://astar-kotlin-js/./kotlin-dce/kotlin/coroutines/intrinsics/IntrinsicsJs.kt","webpack://astar-kotlin-js/./kotlin-dce/kotlin/currentBeMisc.kt","webpack://astar-kotlin-js/./kotlin-dce/kotlin/exceptions.kt","webpack://astar-kotlin-js/./kotlin-dce/kotlin/jsOperators.kt","webpack://astar-kotlin-js/./kotlin-dce/kotlin/jsTypeOf.kt","webpack://astar-kotlin-js/./kotlin-dce/kotlin/kotlin.kt","webpack://astar-kotlin-js/./kotlin-dce/kotlin/numbers_js-v1.kt","webpack://astar-kotlin-js/./kotlin-dce/kotlin/text/numberConversions_js-v1.kt","webpack://astar-kotlin-js/./kotlin-dce/generated/_CharCategories.kt","webpack://astar-kotlin-js/./kotlin-dce/generated/_CollectionsJs.kt","webpack://astar-kotlin-js/./kotlin-dce/generated/_DigitChars.kt","webpack://astar-kotlin-js/./kotlin-dce/generated/_LetterChars.kt","webpack://astar-kotlin-js/./kotlin-dce/generated/_TitlecaseMappings.kt","webpack://astar-kotlin-js/./kotlin-dce/generated/_UArraysJs.kt","webpack://astar-kotlin-js/./kotlin-dce/generated/_WhitespaceChars.kt","webpack://astar-kotlin-js/./kotlin-dce/kotlin/annotations.kt","webpack://astar-kotlin-js/./kotlin-dce/kotlin/annotationsJVM.kt","webpack://astar-kotlin-js/./kotlin-dce/kotlin/Comparator.kt","webpack://astar-kotlin-js/./kotlin-dce/kotlin/collections/AbstractMutableCollection.kt","webpack://astar-kotlin-js/./kotlin-dce/kotlin/collections/AbstractMutableList.kt","webpack://astar-kotlin-js/./kotlin-dce/kotlin/collections/AbstractMutableMap.kt","webpack://astar-kotlin-js/./kotlin-dce/kotlin/collections/AbstractMutableSet.kt","webpack://astar-kotlin-js/./kotlin-dce/kotlin/collections/ArrayList.kt","webpack://astar-kotlin-js/./kotlin-dce/kotlin/collections/ArraySorting.kt","webpack://astar-kotlin-js/./kotlin-dce/kotlin/collections/EqualityComparator.kt","webpack://astar-kotlin-js/./kotlin-dce/kotlin/collections/HashMap.kt","webpack://astar-kotlin-js/./kotlin-dce/kotlin/collections/HashSet.kt","webpack://astar-kotlin-js/./kotlin-dce/kotlin/collections/InternalHashCodeMap.kt","webpack://astar-kotlin-js/./kotlin-dce/kotlin/collections/InternalStringMap.kt","webpack://astar-kotlin-js/./kotlin-dce/kotlin/collections/LinkedHashMap.kt","webpack://astar-kotlin-js/./kotlin-dce/kotlin/collections/LinkedHashSet.kt","webpack://astar-kotlin-js/./kotlin-dce/kotlin/console.kt","webpack://astar-kotlin-js/./kotlin-dce/kotlin/coroutines/SafeContinuationJs.kt","webpack://astar-kotlin-js/./kotlin-dce/kotlin/collections/InternalMap.kt","webpack://astar-kotlin-js/./kotlin-dce/kotlin/concurrent.kt","webpack://astar-kotlin-js/./kotlin-dce/kotlin/date.kt","webpack://astar-kotlin-js/./kotlin-dce/kotlin/dom/Builders.kt","webpack://astar-kotlin-js/./kotlin-dce/kotlin/dom/Classes.kt","webpack://astar-kotlin-js/./kotlin-dce/kotlin/dom/Dom.kt","webpack://astar-kotlin-js/./kotlin-dce/kotlin/dom/EventListener.kt","webpack://astar-kotlin-js/./kotlin-dce/kotlin/dom/ItemArrayLike.kt","webpack://astar-kotlin-js/./kotlin-dce/kotlin/dom/Mutations.kt","webpack://astar-kotlin-js/./kotlin-dce/kotlin/exceptionUtils.kt","webpack://astar-kotlin-js/./kotlin-dce/kotlin/json.kt","webpack://astar-kotlin-js/./kotlin-dce/kotlin/dynamic.kt","webpack://astar-kotlin-js/./kotlin-dce/kotlin/numbers.kt","webpack://astar-kotlin-js/./kotlin-dce/kotlin/promise.kt","webpack://astar-kotlin-js/./kotlin-dce/kotlin/random/PlatformRandom.kt","webpack://astar-kotlin-js/./kotlin-dce/kotlin/reflect/AssociatedObjects.kt","webpack://astar-kotlin-js/./kotlin-dce/kotlin/reflect/KClassImpl.kt","webpack://astar-kotlin-js/./kotlin-dce/kotlin/reflect/KClassesImpl.kt","webpack://astar-kotlin-js/./kotlin-dce/kotlin/reflect/KTypeImpl.kt","webpack://astar-kotlin-js/./kotlin-dce/kotlin/reflect/KTypeParameterImpl.kt","webpack://astar-kotlin-js/./kotlin-dce/kotlin/reflect/primitives.kt","webpack://astar-kotlin-js/./kotlin-dce/kotlin/reflect/reflection.kt","webpack://astar-kotlin-js/./kotlin-dce/kotlin/regexp.kt","webpack://astar-kotlin-js/./kotlin-dce/kotlin/sequence.kt","webpack://astar-kotlin-js/./kotlin-dce/kotlin/text/CharCategoryJS.kt","webpack://astar-kotlin-js/./kotlin-dce/kotlin/text/CharacterCodingExceptionJs.kt","webpack://astar-kotlin-js/./kotlin-dce/kotlin/text/StringBuilderJs.kt","webpack://astar-kotlin-js/./kotlin-dce/kotlin/text/numberConversions.kt","webpack://astar-kotlin-js/./kotlin-dce/kotlin/text/regex.kt","webpack://astar-kotlin-js/./kotlin-dce/kotlin/text/stringsCode.kt","webpack://astar-kotlin-js/./kotlin-dce/kotlin/text/utf8Encoding.kt","webpack://astar-kotlin-js/./kotlin-dce/kotlin/throwableExtensions.kt","webpack://astar-kotlin-js/./kotlin-dce/kotlin/time/DurationUnit.kt","webpack://astar-kotlin-js/./kotlin-dce/kotlin/time/MonoTimeSource.kt","webpack://astar-kotlin-js/./kotlin-dce/kotlin/time/formatToDecimals.kt","webpack://astar-kotlin-js/./kotlin-dce/kotlinx/dom/Builders.kt","webpack://astar-kotlin-js/./kotlin-dce/kotlinx/dom/Classes.kt","webpack://astar-kotlin-js/./kotlin-dce/text/regex/RegexExtensions.kt","webpack://astar-kotlin-js/./kotlin-dce/org.w3c/org.khronos.webgl.kt","webpack://astar-kotlin-js/./kotlin-dce/org.w3c/org.w3c.dom.clipboard.kt","webpack://astar-kotlin-js/./kotlin-dce/org.w3c/org.w3c.dom.css.kt","webpack://astar-kotlin-js/./kotlin-dce/org.w3c/org.w3c.dom.encryptedmedia.kt","webpack://astar-kotlin-js/./kotlin-dce/org.w3c/org.w3c.dom.events.kt","webpack://astar-kotlin-js/./kotlin-dce/org.w3c/org.w3c.dom.kt","webpack://astar-kotlin-js/./kotlin-dce/org.w3c/org.w3c.fetch.kt","webpack://astar-kotlin-js/./kotlin-dce/org.w3c/org.w3c.dom.mediacapture.kt","webpack://astar-kotlin-js/./kotlin-dce/org.w3c/org.w3c.dom.mediasource.kt","webpack://astar-kotlin-js/./kotlin-dce/org.w3c/org.w3c.dom.pointerevents.kt","webpack://astar-kotlin-js/./kotlin-dce/org.w3c/org.w3c.dom.svg.kt","webpack://astar-kotlin-js/./kotlin-dce/org.w3c/org.w3c.files.kt","webpack://astar-kotlin-js/./kotlin-dce/org.w3c/org.w3c.notifications.kt","webpack://astar-kotlin-js/./kotlin-dce/org.w3c/org.w3c.workers.kt","webpack://astar-kotlin-js/./kotlin-dce/org.w3c/org.w3c.xhr.kt","webpack://astar-kotlin-js/./kotlin-dce/annotations/Experimental.kt","webpack://astar-kotlin-js/./kotlin-dce/annotations/ExperimentalStdlibApi.kt","webpack://astar-kotlin-js/./kotlin-dce/annotations/Inference.kt","webpack://astar-kotlin-js/./kotlin-dce/annotations/Multiplatform.kt","webpack://astar-kotlin-js/./kotlin-dce/annotations/OptIn.kt","webpack://astar-kotlin-js/./kotlin-dce/collections/AbstractCollection.kt","webpack://astar-kotlin-js/./kotlin-dce/collections/AbstractIterator.kt","webpack://astar-kotlin-js/./kotlin-dce/collections/AbstractList.kt","webpack://astar-kotlin-js/./kotlin-dce/collections/AbstractMap.kt","webpack://astar-kotlin-js/./kotlin-dce/collections/AbstractSet.kt","webpack://astar-kotlin-js/./kotlin-dce/collections/ArrayDeque.kt","webpack://astar-kotlin-js/./kotlin-dce/collections/Arrays.kt","webpack://astar-kotlin-js/./kotlin-dce/collections/Grouping.kt","webpack://astar-kotlin-js/./kotlin-dce/collections/IndexedValue.kt","webpack://astar-kotlin-js/./kotlin-dce/collections/MapWithDefault.kt","webpack://astar-kotlin-js/./kotlin-dce/collections/MapAccessors.kt","webpack://astar-kotlin-js/./kotlin-dce/collections/MutableCollections.kt","webpack://astar-kotlin-js/./kotlin-dce/collections/ReversedViews.kt","webpack://astar-kotlin-js/./kotlin-dce/collections/SequenceBuilder.kt","webpack://astar-kotlin-js/./kotlin-dce/collections/SlidingWindow.kt","webpack://astar-kotlin-js/./kotlin-dce/collections/UArraySorting.kt","webpack://astar-kotlin-js/./kotlin-dce/contracts/ContractBuilder.kt","webpack://astar-kotlin-js/./kotlin-dce/coroutines/ContinuationInterceptor.kt","webpack://astar-kotlin-js/./kotlin-dce/coroutines/CoroutineContext.kt","webpack://astar-kotlin-js/./kotlin-dce/coroutines/CoroutineContextImpl.kt","webpack://astar-kotlin-js/./kotlin-dce/coroutines/intrinsics/Intrinsics.kt","webpack://astar-kotlin-js/./kotlin-dce/experimental/inferenceMarker.kt","webpack://astar-kotlin-js/./kotlin-dce/internal/Annotations.kt","webpack://astar-kotlin-js/./kotlin-dce/properties/Delegates.kt","webpack://astar-kotlin-js/./kotlin-dce/experimental/bitwiseOperations.kt","webpack://astar-kotlin-js/./kotlin-dce/properties/ObservableProperty.kt","webpack://astar-kotlin-js/./kotlin-dce/random/Random.kt","webpack://astar-kotlin-js/./kotlin-dce/properties/Interfaces.kt","webpack://astar-kotlin-js/./kotlin-dce/properties/PropertyReferenceDelegates.kt","webpack://astar-kotlin-js/./kotlin-dce/random/URandom.kt","webpack://astar-kotlin-js/./kotlin-dce/random/XorWowRandom.kt","webpack://astar-kotlin-js/./kotlin-dce/ranges/Ranges.kt","webpack://astar-kotlin-js/./kotlin-dce/reflect/KTypeProjection.kt","webpack://astar-kotlin-js/./kotlin-dce/reflect/KVariance.kt","webpack://astar-kotlin-js/./kotlin-dce/text/Appendable.kt","webpack://astar-kotlin-js/./kotlin-dce/text/Indent.kt","webpack://astar-kotlin-js/./kotlin-dce/reflect/typeOf.kt","webpack://astar-kotlin-js/./kotlin-dce/text/StringBuilder.kt","webpack://astar-kotlin-js/./kotlin-dce/text/Typography.kt","webpack://astar-kotlin-js/./kotlin-dce/text/regex/MatchResult.kt","webpack://astar-kotlin-js/./kotlin-dce/time/DurationUnit.kt","webpack://astar-kotlin-js/./kotlin-dce/time/ExperimentalTime.kt","webpack://astar-kotlin-js/./kotlin-dce/time/TimeSource.kt","webpack://astar-kotlin-js/./kotlin-dce/time/TimeSources.kt","webpack://astar-kotlin-js/./kotlin-dce/time/measureTime.kt","webpack://astar-kotlin-js/./kotlin-dce/util/DeepRecursive.kt","webpack://astar-kotlin-js/./kotlin-dce/util/KotlinVersion.kt","webpack://astar-kotlin-js/./kotlin-dce/util/FloorDivMod.kt","webpack://astar-kotlin-js/./kotlin-dce/util/HashCode.kt","webpack://astar-kotlin-js/./kotlin-dce/util/Lazy.kt","webpack://astar-kotlin-js/./kotlin-dce/util/Lateinit.kt","webpack://astar-kotlin-js/./kotlin-dce/util/Numbers.kt","webpack://astar-kotlin-js/./kotlin-dce/util/Tuples.kt","webpack://astar-kotlin-js/./kotlin-dce/util/Suspend.kt","webpack://astar-kotlin-js/./kotlin-dce/kotlin/UByteArray.kt","webpack://astar-kotlin-js/./kotlin-dce/kotlin/UIntArray.kt","webpack://astar-kotlin-js/./kotlin-dce/kotlin/UIntRange.kt","webpack://astar-kotlin-js/./kotlin-dce/kotlin/UIterators.kt","webpack://astar-kotlin-js/./kotlin-dce/kotlin/ULongArray.kt","webpack://astar-kotlin-js/./kotlin-dce/kotlin/ULongRange.kt","webpack://astar-kotlin-js/./kotlin-dce/kotlin/UProgressionUtil.kt","webpack://astar-kotlin-js/./kotlin-dce/kotlin/UMath.kt","webpack://astar-kotlin-js/./kotlin-dce/kotlin/UNumbers.kt","webpack://astar-kotlin-js/./kotlin-dce/kotlin/UShortArray.kt","webpack://astar-kotlin-js/./kotlin-dce/kotlin/UStrings.kt","webpack://astar-kotlin-js/./kotlin-dce/kotlin/annotations/Unsigned.kt","webpack://astar-kotlin-js/./kotlin-dce/generated/_UCollections.kt","webpack://astar-kotlin-js/./kotlin-dce/generated/_USequences.kt","webpack://astar-kotlin-js/./kotlin-dce/kotlin/ExceptionsH.kt","webpack://astar-kotlin-js/./kotlin-dce/kotlin/math_js-v1.kt","webpack://astar-kotlin-js/./kotlin-dce/kotlin/reflection_js-v1.kt","webpack://astar-kotlin-js/./kotlin-dce/generated/_StringsJs.kt","webpack://astar-kotlin-js/./kotlin-dce/kotlin/collections/ArraysJs.kt","webpack://astar-kotlin-js/./kotlin-dce/kotlin/coroutines/cancellation/CancellationException.kt","webpack://astar-kotlin-js/./kotlin-dce/kotlinx/dom/Dom.kt","webpack://astar-kotlin-js/./kotlin-dce/kotlinx/dom/Mutations.kt","webpack://astar-kotlin-js/./kotlin-dce/kotlin/grouping.kt","webpack://astar-kotlin-js/./kotlin-dce/kotlin/reflect/JsClass.kt","webpack://astar-kotlin-js/./kotlin-dce/kotlin/reflect/KTypeHelpers.kt","webpack://astar-kotlin-js/./kotlin-dce/org.w3c/deprecated.kt","webpack://astar-kotlin-js/./kotlin-dce/reflect/KClasses.kt","webpack://astar-kotlin-js/./kotlin-dce/kotlin/MathH.kt","webpack://astar-kotlin-js/./kotlin-dce/kotlin/coroutines/js/internal/EmptyContinuation.kt","webpack://astar-kotlin-js/webpack/bootstrap","webpack://astar-kotlin-js/webpack/startup"],"names":["root","factory","exports","module","define","amd","this","value","answer","isEmpty","iterator","hasNext","minElem","next","minValue","selector","v","e","element","max","b","min","a","Kotlin","_","isBooleanArray","Array","isArray","Int8Array","$type$","isByteArray","isShortArray","Int16Array","isCharArray","Uint16Array","isIntArray","Int32Array","isFloatArray","Float32Array","isDoubleArray","Float64Array","isLongArray","isArrayish","ArrayBuffer","isView","arrayToString","toString","String","fromCharCode","prototype","map","call","join","arrayDeepToString","arr","kotlin","collections","contentDeepToStringImpl","arrayEquals","length","i","n","equals","arrayDeepEquals","contentDeepEqualsImpl","arrayHashCode","result","hashCode","arrayDeepHashCode","contentDeepHashCodeImpl","primitiveArraySort","array","sort","doubleCompareTo","getCallableRef","f","callableName","name","getPropertyCallableRef","getter","get","set","setter","obj","cache","$metadata$","implementedInterface","getPropertyRefMetadata","mutable","immutable","constructor","getPropertyRefClass","propertyRefClassMetadataCache","paramCount","reflect","KMutableProperty0","KProperty0","KMutableProperty1","KProperty1","toShort","toByte","toChar","numberToLong","Long","fromNumber","numberToInt","toInt","doubleToInt","numberToShort","numberToByte","numberToDouble","numberToChar","toBoxedChar","BoxedChar","unboxChar","obj1","obj2","objType","getObjectHashCode","numberHashCode","Number","str","hash","charCodeAt","getStringHashCode","o","buf","bufFloat64","bufFloat32","bufInt32","lowIndex","highIndex","OBJECT_HASH_CODE_PROPERTY_NAME","Math","random","Object","defineProperty","throwMarkerError","Error","imul","isInheritanceFromInterface","ctor","iface","metadata","interfaces","superPrototype","getPrototypeOf","superConstructor","identityHashCode","low_","low","high_","high","IntCache_","fromInt","cachedObj","isNaN","ZERO","TWO_PWR_63_DBL_","MIN_VALUE","MAX_VALUE","negate","TWO_PWR_32_DBL_","fromBits","lowBits","highBits","fromString","radix","opt_radix","charAt","substring","indexOf","radixToPower","pow","size","parseInt","power","multiply","add","TWO_PWR_16_DBL_","TWO_PWR_24_DBL_","TWO_PWR_31_DBL_","TWO_PWR_48_DBL_","TWO_PWR_64_DBL_","ONE","NEG_ONE","TWO_PWR_24_","toNumber","getLowBitsUnsigned","isZero","isNegative","equalsLong","radixLong","div","rem","subtract","remDiv","digits","getHighBits","getLowBits","getNumBitsAbs","val","bit","isOdd","other","notEqualsLong","lessThan","compare","lessThanOrEqual","greaterThan","greaterThanOrEqual","thisNeg","otherNeg","not","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","b00","approx","shiftRight","shiftLeft","res","floor","log2","ceil","log","LN2","delta","approxRes","approxRem","modulo","and","or","xor","numBits","shiftRightUnsigned","compareTo_11rb$","inc","dec","valueOf","unaryPlus","unaryMinus","inv","rangeTo","ranges","LongRange","defineModule","id","declaration","defineInlineFunction","fun","wrapFunction","apply","arguments","isTypeOf","object","type","isInstanceOf","klass","isType","orNull","fn","andPredicate","kotlinModuleMetadata","abiVersion","moduleName","data","suspendCall","coroutineResult","coroutineController","coroutineReceiver","setCoroutineResult","getReifiedTypeParameterKType","getFunctionById","defaultValue","compareTo","typeA","primitiveCompareTo","ia","charInc","charDec","imulEmulated","doubleToBits","doubleToRawBits","NaN","doubleFromBits","floatToBits","floatToRawBits","floatFromBits","doubleSignBit","ensureNotNull","x","throwNPE","startsWith","searchString","position","lastIndexOf","endsWith","subjectString","undefined","lastIndex","sign","trunc","taylor_2_bound","sqrt","taylor_n_bound","upper_taylor_2_bound","upper_taylor_n_bound","sinh","abs","y","exp","y1","isFinite","cosh","tanh","Infinity","asinh","acosh","atanh","log1p","x2","x3","expm1","hypot","log10","LOG10E","LOG2E","clz32","asUint","__proto__","fill","TypeError","O","len","relativeStart","k","end","relativeEnd","finalValue","normalizeOffset","offset","typedArraySlice","begin","subarray","arrays","TypedArray","slice","Function","self","callback","totalOrderComparator","compareFunction","Kind","callGetter","thisObject","propertyName","propertyDescriptor","getOwnPropertyDescriptor","callSetter","proto","kind","OBJECT","klassMetadata","INTERFACE","isNumber","isChar","isComparable","Comparable","isCharSequence","CharSequence","ordinal","init","booleanArray","charArray","longArray","initValue","fillArrayVal","index","getOrNull","predicate","reversed","transform","NoSuchElementException","Random","randomOrNull","single","found","take","emptyList","yielding","list","item","destination","filterNotNullTo","indices","targetIndex","sourceIndex","start","endInclusive","toList","listOf","count","drop","midPoint","reverseIndex","tmp","fromIndex","toIndex","j","copy","compareValues","sortWith","Comparator","sortedWith","asList","sortedArrayWith","comparator","IntRange","coerceAtLeast","mapCapacity","capacity","pair","first","second","keySelector","valueTransform","valueSelector","coerceAtMost","toCollection","toMutableList","asCollection","emptySet","setOf","addAll","key","accumulator","initial","operation","action","maxElem","maxValue","JsMath","sum","collectionSizeOrDefault","arraySize","separator","prefix","postfix","limit","truncated","buffer","emptySequence","IndexOutOfBoundsException","last","hasPrevious","previous","checkIndexOverflow","nextIndex","optimizeReadOnlyList","expectedSize","copyToArray","optimizeReadOnlySet","checkCountOverflow","previousIndex","estimatedSize","minus","elements","step","partialWindows","checkWindowSizeStep","thisSize","windowSize","windowedIterator","MovingSubList","plus","current","entries","maxWithOrNull","minWithOrNull","toUpperCase","uppercase","toLowerCase","titlecaseChar","to","checkStepIsPositive","EMPTY","minimumValue","maximumValue","range","FilteringSequence","it","filter","TakeSequence","sortedList","TransformingSequence","TransformingIndexedSequence","DistinctSequence","sequence","toHashSet","convertToSetForSetOperation","sequenceOf","t1","t2","subSequence","coercedEnd","storage","contentEquals","contentHashCode","reverse","reversedArray","destinationOffset","startIndex","endIndex","arrayCopy","copyOf","newSize","copyOfRange","uintCompare","ulongCompare","CharIterator","IntIterator","LongIterator","getProgressionLastElement","primitiveArrayConcat","longArrayOf","any","UInt","maxOf","c","minOf","NotImplementedError","nextByte","nextChar","nextShort","nextInt","nextLong","nextFloat","nextDouble","nextBoolean","CharProgressionIterator","CharProgression","rangeStart","rangeEnd","IntProgressionIterator","IntProgression","LongProgressionIterator","LongProgression","CharRange","mod","differenceModulo","BooleanIterator","ByteIterator","ShortIterator","FloatIterator","DoubleIterator","context","args","typed","concat","code","currentResult","isFailure","currentException","exceptionOrNull","doResume","outcome","exception","completion","Result","createFailure","intercepted","CoroutineImpl","receiver","param","cause","message","Exception","RuntimeException","src","dst","srcLen","dstLen","source","collection","from","jsClass","bits","checkRadix","ArrayList","AbstractList","fillFrom","arrayCopyResize","booleanArrayOf","charArrayOf","sortArray","naturalOrder","toBase64","fromBase64","decodeVarLenBase64","diff","decodedRangeStart","decodedRangeCategory","comparison","binarySearchRange","ch","categoryValueFrom","resultLength","int","shift","base64","sixBit","bottom","top","middle","needle","decodedRangeLength","getLetterType","lastTwoBits","threshold","distance","uppercaseChar","toArray","copyToArrayImpl","push","collectionsSort","rangeSize","subrange","builderAction","build","checkBuilderCapacity","toMutableMap","isVarargs","throwIndexOverflow","throwCountOverflow","AbstractCollection","AbstractMutableCollection","AbstractMutableList","AbstractMap","AbstractMutableSet","initialCapacity","getStableSortingIsSupported","mergeSort","_stableSortingIsSupported","median","left","leftIndex","rightIndex","right","leftValue","rightValue","target","checkIsMutable","remove","modified","_index","changed","times","newValue","oldValue","clear","iter","entry","modCount","splice","pop","value1","value2","internalMap","equality","InternalHashCodeMap","loadFactor","InternalStringMap","putAll","createJsMap","keys","backingMap","original","stringMapOf","BaseOutput","BufferedOutput","initialResult","createEntrySet","chainOrEntry","chain","isChain","chainSize","keyIndex","itemIndex","state","lastEntry","_head","_tail","node","old","newEntry","block","println","outputStream","write","messageString","console","s","flush","cur","cssClass","cssClasses","event","text","ClassCastException","pairs","POSITIVE_INFINITY","toRawBits","NEGATIVE_INFINITY","round","sin","cos","tan","asin","acos","atan","atan2","withSign","roundToInt","roundToLong","isInfinite","rotateLeft","bitCount","then","onFulfilled","onRejected","hi26","INV_2_26","low27","INV_2_53","KClassImpl","jClass","findAssociatedObject","simpleName","classifier","isMarkedNullable","kClass","variance","prefixString","PrimitiveKClassImpl","functionClasses","arity","getKClassM","getKClass1","jClasses","ErrorKClass","stringClass","SimpleKClassImpl","getCategoryValue","char","category","content","isLowSurrogate","isHighSurrogate","concatToString","string","toInsert","newLength","dstIndex","stringCsq","titlecaseCharImpl","MIN_HIGH_SURROGATE","MAX_HIGH_SURROGATE","MIN_LOW_SURROGATE","MAX_LOW_SURROGATE","isWhitespaceImpl","pattern","options","RegExp","match","toBoolean","toDouble","toDoubleOrNull","reset","exec","input","test","findNext","Regex","replace","replacement","lastStart","sb","foundMatch","nonGlobalOptions","matches","literal","ignoreCase","n1","n2","s1","s2","regionMatches","suffix","regex","thisLower","otherLower","regionMatchesImpl","thisOffset","otherOffset","throwOnMalformed","CharacterCodingException","malformed","byte1","bytes","byte2","byte3","byte4","byteIndex","charIndex","codePointFromSurrogate","codePoint","REPLACEMENT_BYTE_SEQUENCE","byte","stringBuilder","codePointFrom2","REPLACEMENT_CHAR","codePointFrom3","codePointFrom4","ExceptionTraceBuilder","_suppressed","sourceUnit","targetUnit","sourceCompareTarget","scale","isNode","HrTimeSource","MatchGroup","indent","qualifier","shortInfo","stack","stackStart","lineSequence","suppressed","suppressedIndent","commonFrames","lastBreak","preLastBreak","pos","markNow","TimeMark","process","hrtime","AbstractDoubleTimeSource","startedAt","seconds","nanos","performance","now","decimals","toFixed","toLocaleString","json","toExponential","createElement","className","alpha","depth","stencil","antialias","premultipliedAlpha","preserveDrawingBuffer","preferLowPowerToHighPerformance","failIfMajorPerformanceCaveat","statusMessage","bubbles","cancelable","composed","clipboardData","allowWithoutGesture","label","initDataTypes","audioCapabilities","videoCapabilities","distinctiveIdentifier","persistentState","sessionTypes","contentType","robustness","messageType","initDataType","initData","view","detail","relatedTarget","screenX","screenY","clientX","clientY","button","buttons","region","ctrlKey","shiftKey","altKey","metaKey","modifierAltGraph","modifierCapsLock","modifierFn","modifierFnLock","modifierHyper","modifierNumLock","modifierScrollLock","modifierSuper","modifierSymbol","modifierSymbolLock","deltaX","deltaY","deltaZ","deltaMode","isComposing","location","repeat","option","track","flatten","path","fillRule","parentID","cursor","control","role","dataTransfer","oldURL","newURL","persisted","filename","lineno","colno","error","reason","promise","imageOrientation","premultiplyAlpha","colorSpaceConversion","resizeWidth","resizeHeight","resizeQuality","origin","lastEventId","ports","withCredentials","wasClean","credentials","url","storageArea","capture","passive","once","childList","attributes","characterData","subtree","attributeOldValue","characterDataOldValue","attributeFilter","mode","qualifiedName","z","w","width","height","behavior","media","inline","box","relativeTo","fromBox","toBox","aspectRatio","frameRate","facingMode","resizeMode","volume","sampleRate","sampleSize","echoCancellation","autoGainControl","noiseSuppression","latency","channelCount","deviceId","groupId","advanced","video","audio","exact","ideal","pointerId","pressure","tangentialPressure","tiltX","tiltY","twist","pointerType","isPrimary","stroke","markers","clipped","newItem","method","headers","body","referrer","referrerPolicy","redirect","integrity","keepalive","status","statusText","lastModified","dir","lang","tag","image","icon","badge","sound","vibrate","timestamp","renotify","silent","noscreen","requireInteraction","sticky","actions","title","notification","scope","includeUncontrolled","scopes","origins","clientId","isReload","request","response","ignoreSearch","ignoreMethod","ignoreVary","cacheName","lengthComputable","loaded","total","computeNext","otherIterator","elem","elemOther","AbstractSet","ourValue","minCapacity","newCapacity","newElements","internalIndex","removeFirst","internalLastIndex","removeLast","decrementedInternalIndex","decrementedHead","tail","shiftedHead","elementsSize","shiftToBack","elementsToShift","shiftedInternalIndex","shiftToFront","oldElement","newTail","arrayOfNulls","dest","oldCapacity","processed","contentDeepToStringInternal","contentToString","structure","ArrayAsCollection","values","contains","binarySearch","ArithmeticException","sourceIterator","initialValueSelector","safeToConvertToSet","IndexingIterator","IndexedValue","getOrImplicitDefault","property","emptyMap","mapOf","optimizeReadOnlyMap","convertToSetForSetOperationWith","filterInPlace","predicateResultToRemove","writeIndex","readIndex","removeIndex","SequenceBuilderIterator","nextStep","SequenceScope","asSequence","removeAll","reverseElementIndex","reversePositionIndex","throwOnFailure","FlatteningSequence","AbstractIterator","ConstrainedOnceSequence","GeneratorSequence","seedFunction","nextFunction","nextItem","nextState","iterator1","iterator2","itemIterator","nextItemIterator","SubSequence","DropSequence","dropState","DistinctIterator","done","filledSize","pivot","quickSort","selectors","bufferInitialCapacity","isFull","widx","idx","maxCapacity","RingBuffer","previousCompare","nullsFirst","nullsLast","safe","getOrThrow","acc","removed","interceptor","CombinedContext","baseKey","newLeft","NotNullVar","ObservableProperty","initialValue","defaultPlatformRandom","thisRef","until","checkRangeBounds","fastLog2","nLow","nHigh","rnd","doubleFromParts","r1","r","nextDown","steps","remainder","vr","seed","boundsErrorMessage","checkUIntRangeBounds","signedFrom","signedUntil","nextUInt","ULong","checkULongRangeBounds","nextULong","t","v0","takeUpperBits","seed1","seed2","ClosedDoubleRange","that","ClosedFloatRange","isPositive","KTypeProjection","star","digitOf","thisUpper","otherUpper","newIndent","marginPrefix","isBlank","lines","getIndentFunction","isWhitespace","firstNonWhitespaceIndex","line","firstChar","limitBeforeMul","limitForMaxRadix","digit","NumberFormatException","indentCutFunction","startFound","padChar","padStart","chars","strings","indexOfAny","lastIndexOfAny","currentStartIndex","DelimitedRangesSequence","currentIndex","delimiters","findAnyOf","currentOffset","delimiter","isLimited","splitToSequence","trim","trimStart","trimEnd","replaceRange","removeRange","nextSearchIndex","MAX_NANOS","MAX_MILLIS","MAX_NANOS_IN_MILLIS","Duration","durationOfMillis","groupValues","convertDurationUnit","toDuration","unit","durationOfNanos","convertDurationUnitOverflow","maxNsInUnit","valueInNs","durationOfMillisNormalized","millis","normalNanos","normalMillis","nanosToMillis","millisToNanos","normalValue","unitDiscriminator","durationOfNanosNormalized","otherNanos","thisMillis","otherMillis","resultMillis","otherNanoRemainder","remNanos","totalMillis","INFINITE","intScale","coarserUnit","compareBits","hoursComponent","minutesComponent","secondsComponent","nanosecondsComponent","inWholeSeconds","inWholeHours","inWholeMinutes","inWholeNanoseconds","inWholeMilliseconds","absoluteValue","scientific","maxDecimals","absNs","formatScientific","formatUpToDecimals","formatToExactDecimals","shortName","number","hours","nanoseconds","minutes","hasSeconds","hasHours","hasMinutes","nss","duration","AbstractLongTimeSource","AdjustedTimeMark","elapsedNow","mark","adjustment","read","longDelta","newReading","DeepRecursiveScope","UNDEFINED_RESULT","major","minor","patch","cont","currentFunction","q","otherVersion","KotlinVersion","initializer","isInitialized","InitializedLazyImpl","countOneBits","countTrailingZeroBits","takeHighestOneBit","takeLowestOneBit","lazyMessage","Pair","UByte","onFailure","onSuccess","isSuccess","third","UByteIterator","uintDivide","ulongDivide","uintRemainder","ulongRemainder","UIntIterator","UIntProgression","UIntRange","uintToDouble","doubleToUInt","UIntProgressionIterator","nextUByte","nextUShort","ULongIterator","ULongProgression","ulongToDouble","ulongToString","doubleToULong","ULongProgressionIterator","ac","bc","UShort","rotateRight","countLeadingZeroBits","UShortIterator","uradix","beforeAdding","v1","v2","divisor","dividend","quotient","base","takeLast","reverseOrder","sortedArray","IndexingIterable","toMutableSet","maxOrNull","minOrNull","joinTo","elementAt","resultSize","windowed","toLongExactOrNull","toByteExactOrNull","toShortExactOrNull","toIntExactOrNull","DropWhileSequence","IndexingSequence","TakeWhileSequence","MergingSequence","collectionSizeOrNull","UIntArray","ULongArray","UByteArray","UShortArray","booleanArrayIterator","byteArrayIterator","shortArrayIterator","charArrayIterator","intArrayIterator","longArrayIterator","floatArrayIterator","doubleArrayIterator","captureStackTrace","instance","throwable","UnsafeLazyImpl","contentDeepEquals","contentDeepHashCode","contentDeepToString","arrayPlusCollection","fillFromCollection","sortArrayWith","linkedStringMapOf","output","delegate","ownerDocument","appendChild","missingClasses","toSet","nodeType","Node","TEXT_NODE","CDATA_SECTION_NODE","ELEMENT_NODE","EventListenerHandler","handler","hasChildNodes","removeChild","firstChild","createTextNode","NullPointerException","hasOwnProperty","nextUp","newLow","newHigh","getKClass","KTypeImpl","kType","KTypeParameterImpl","upperBounds","kVariance","STAR","intClass","doubleClass","booleanClass","functionClass","booleanArrayClass","charArrayClass","byteArrayClass","shortArrayClass","intArrayClass","longArrayClass","floatArrayClass","doubleArrayClass","arrayClass","anyClass","throwableClass","isLetterImpl","isDigitImpl","isUpperCaseImpl","isLowerCaseImpl","toByteOrNull","numberFormatError","toShortOrNull","toIntOrNull","toLongOrNull","decodeUtf8","throwOnInvalidSequence","encodeUtf8","contentEqualsImpl","contentEqualsIgnoreCaseImpl","STRING_CASE_INSENSITIVE_ORDER","oldChar","newChar","stackTraceToString","listT","listR","filterNotNull","rangeCheck","mid","cmp","midVal","withDefault","MapWithDefaultImpl","MutableMapWithDefaultImpl","toMap","retainNothing","ReversedListReadOnly","ReversedList","constrainOnce","compareValuesByImpl","ReversedComparator","SafeContinuation","createCoroutineUnintercepted","ComparableRange","titlecaseImpl","MIN_SURROGATE","MAX_SURROGATE","replaceIndentByMargin","replaceIndent","padEnd","missingDelimiterValue","removeSurrounding","shortestLength","hasSurrogatePairAt","thisLength","otherLength","rangesDelimitedBy","DeepRecursiveScopeImpl","runCallLoop","toUByteOrNull","toUShortOrNull","toUIntOrNull","toULongOrNull","NodeJsOutput","BufferedOutputToConsoleLog","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__"],"mappings":"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MlFjCuyB,EpMkF2C5iC,KoMlFtC6iC,EpMkFuD7iC,KAAZ,GAbhB,IAAAqQ,GAAU,IAaTA,GoMlFpBuyB,EpMkF8B5iC,KoMlFzB6iC,EpMkF0C7iC,KAAZ,GAbNA,KoMrEnBuQ,EpMqEmCvQ,KAAX,GoMlExE,mBACI,MvLwIsD6hC,GuLxI7CzxC,EAAImgB,GACb,EvLuIsDsxB,GuLvI7C3xC,EAAIqgB,GACb,OvLqDmEV,GuLrDxD+yB,EvLqD0E5iC,KuLrDpE6iC,EvLqDgF7iC,OuLrDtF,EvL+E6C,IAAAy4B,GuL/EnCmK,EvL+E8C5iC,KAAK,SuL/E9C6iC,EvL+E0D7iC,OAb7B,IAAAy4B,GAAW,IAaVA,GuL/EtBmK,EvL+EiC5iC,KAAK,SuL/EjC6iC,EvL+E6C7iC,OAblBA,KAAK,IuLlE3BuQ,EvLkEsCvQ,OuL/DtF,mBAmBI,GAAA0M,EAAO,EADuE,OpMwBZkD,GoMvBlDxH,EpMuBmEpI,KoMvB1DuE,EpMuBsEvE,OoMvB/E,EAAcuE,EpMsDwB,IAAA8L,GoMtDf9L,EpMsDyBvE,KoMtDnB,GAAiBuE,EAAK6D,EpMkWhC,IAAAiI,GoMlWuC3D,IpMsDO1M,KAAZ,GoMrDrE,GAAA0M,EAAO,EAFuE,OpMwBZkD,GoMtBlDxH,EpMsBmEpI,KoMtB1DuE,EpMsBsEvE,OoMtB/E,EAAcuE,EpMwCuB,IAAA8L,GoMxCd9L,EpMwCwBvE,KoMxClB,GAAiBoI,EAAO7D,EpMiWlC,IAAA8L,GoMjWwC,GAAC3D,IpMwCG1M,KAAX,GoMvC5D,MAAa,GAAyB,iBAGlD,mBAmBI,GAAA0M,EAAA,WAAO,EAD2E,OvLQfmD,GuLPnDzH,EvLOqEpI,KuLP5DuE,EvLOwEvE,OuLPjF,EAAcuE,EvLiC0B,IAAAk0B,GuLjCjBl0B,EvLiC4BvE,KAAK,SuLjC3B,GAAiBuE,EAAK6D,EvLyV7B,IAAAqwB,GuLzVoC/rB,IvLiCU1M,OuLhCpF,GAAA0M,EAAA,WAAO,EAF2E,OvLQfmD,GuLNnDzH,EvLMqEpI,KuLN5DuE,EvLMwEvE,OuLNjF,EAAcuE,EvLmByB,IAAAk0B,GuLnBhBl0B,EvLmB2BvE,KAAK,IuLnB1B,GAAiBoI,EAAO7D,EvLwV/B,IAAAk0B,GuLxVsC/rB,EAAD,evLmBO1M,OuLlB1E,MAAa,GAAyB,iBnMlDxB,eAEtB,KAFyD,YAEzD,sBACI,eAGqC,IAAA8iC,GAAO,GAE5C,eAGqC,IAAAA,IAAO,GAE5C,gBAGmC,EAEnC,eAGkC,G,0FkM4EtC,WAAkC,uB,uBAElC,WACI,MAAY,YACZ,GAAI,MAAAzzC,KAAA,OAAS,qB,CACT,IAAK,eAAS,MAAa,KAC3B,gBAAU,OAEV,YtLrC+C,IAAAopC,GsLqC/C,YtLrC0Dz4B,KAAK,IsLqCvD,YtLrCkEA,OsLuC9E,OAAO3Q,G,gHEnHf,4EAOI,OAAOmhB,EAAMpgB,EAAGF,Q,mCAGpB,4EAOI,OAAOsgB,EAAMpgB,EAAGF,Q,mCAGpB,4EAOI,OAAOogB,EAAMlgB,EAAGF,Q,mCAGpB,4EAOI,OAAOogB,EAAMlgB,EAAGF,Q,uCCpCpB,qEAM6C,OAAQ4wC,EtMsRhB,EAAA9gC,W,+CsMpRrC,c5GwCA,W4GxCA,mBAMqD,O5GwCMgL,EAAOlH,M1FsO7B,EAAA9D,W,gDsM5QrC,8EAMsD,OAAQ+gC,EtMsQzB,EAAA/gC,W,4CsMpQrC,uDtM+VA,gBsM/VA,mBAOmD,OtMkWZ,MsMlWoBghC,EtM6PtB,EAAAhhC,Y,2CsM3PrC,sDtMsVA,gBsMtVA,mBAOkD,OtMyVX,MsMzVmBihC,EtMoPrB,EAAAjhC,Y,qCsMlPrC,gDtM6UA,gBsM7UA,qBAcyD,OtMyUlB,MsMzU0B4c,EtMoO5B,EAAA5c,KsMpOuC6c,S,sCAG5E,iDtM4TA,gBsM5TA,qBAc0D,OtMwTnB,MsMxT2BkmB,EtMmN7B,EAAA/iC,KsMnNyC6c,S,uCAG9E,qEAM8C,OAASikB,EzLqNhB,EAAA9gC,W,+CyLnNvC,6EAMsD,OAASgjC,EzL6MxB,EAAAhjC,W,gDyL3MvC,8EAMuD,OAAS+gC,EzLqMzB,EAAA/gC,W,4CyLnMvC,uDzLkSA,iByLlSA,mBAOqD,OzLqSX,MyLrSoBghC,EzL4LvB,EAAAhhC,Y,2CyL1LvC,sDzLyRA,iByLzRA,mBAOoD,OzL4RV,MyL5RmBihC,EzLmLtB,EAAAjhC,Y,oCyLjLvC,gDzLgRA,iByLhRA,qBAc2D,OzL4QjB,MyL5Q0B4c,EzLmK7B,EAAA5c,KyLnKwC6c,S,qCAE/E,c5G6DA,kC7EmMA,iByLhQA,qBAc4D,OzL4PlB,M6EhMuBD,E7EuF1B,EAAA5c,K6EvFqC,G4G5DK6c,S,uCAEjF,cvM2II,oBuMjSJ,gCAsJA,mBAM8C,OAtJOikB,EtMsRhB,IDcE,EAAsB,IAAZ,QCdZ9gC,W,+CsM9HrC,c5G9GA,W4G8GA,mBAMsD,O5G9GKgL,EAAOlH,MiG6FA,I5LiG3B,EAAA9D,M4LjG2D,GAA7C,O,gDWmBrD,cXjBA,6CWiBA,mBAMuD,OXjBkB+gC,EAAP,I5LyF3B,EAAA/gC,W,4CuMtEvC,uDvMkLA,4BuMlLA,mBAOqD,OvMsLZ,MAAW9K,EuMtLS8rC,EvMmFP,IAAZ,e,2CuMjF1C,sDvMyKA,4BuMzKA,mBAOoD,OvM6KX,MAAW9rC,EuM7KQ+rC,EvM0EN,IAAZ,e,qCuMvE1C,gDvMwIA,iBuMxIA,qBAc2D,OvMoIjB,MuMpI0BrkB,EvMqC7B,EAAA5c,KuMrCwC6c,S,sCAE/E,iDvMwHA,iBuMxHA,qBAc4D,OvMoHlB,MuMpH2BkmB,EvMqB9B,EAAA/iC,KuMrB0C6c,S,uCAEjF,crMiEI,oBqMlSJ,gCAiOA,mBAM+C,OAjOMikB,EtMsRhB,ICeE,EAAsB,MAAZ,QDfZ9gC,W,+CsMnDrC,c5GzLA,W4GyLA,mBAMuD,O5GzLIgL,EAAOlH,MiGuKjD,M1LkCwB,EAAA9D,M0LlCU,GAA/C,O,gDWoBJ,cXlBA,6CWkBA,mBAMwD,OXlBoB+gC,EAAT,M1L0B1B,EAAA/gC,W,4CqMNzC,uDrMwGA,8BqMxGA,mBAOuD,OrM4GZ,MAAY/K,EqM5GQ+rC,ErMST,MAAZ,e,2CqMP1C,sDrM+FA,8BqM/FA,mBAOsD,OrMmGX,MAAY/rC,EqMnGOgsC,ErMAR,MAAZ,e,qCqMG1C,gDrM0EA,kBqM1EA,qBAc6D,OrMsEhB,MqMtE0BrkB,ErM3B9B,EAAA5c,KqM2ByC6c,S,sCAElF,iDrM0DA,kBqM1DA,qBAc8D,OrMsDjB,MqMtD2BkmB,ErM3C/B,EAAA/iC,KqM2C2C6c,S,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oBsC,MkCpBpB,EAAK,UAA9B,OjC1D6D,IAAA2xB,GAAA,EAvIP,IAAA3xB,GAAU,IDqN7BA,GAAsB,IkCpBhC3C,ElCoBoB,MCrNmB1N,KDAUtE,ECAOsE,KAAZ,K,iBiCoMzE,cAQI,OjC3OkE4P,GiC2O9DlC,EjC3O+E1N,KiC2OzE,KAAKnH,UjC3OgFmH,OiC2O3F,EAA6B,KAAU4N,MjCrEkB,IAAAo0B,GiCsEtD,EjC7M+C,IAAA3xB,GiC6MtC3C,EjC7MgD1N,KAAiB,IiC6M5D,MjC7M4DA,KAAZ,K,iBiCgNzE,cAQI,OpB/OmE6P,GoB+O/DnC,EpB/OiF1N,KoB+O3E,KAAMnH,UpB/OiFmH,OoB+O7F,EAA8B,KAAW4N,MpBjFkB,OoBkFxD,EpBtNiD,IAAA6qB,GoBsNxC/qB,EpBtNmD1N,KAAK,SAAY,IbgP/Cy4B,GAAW,eAAL,IiC1BtB,MjC0BsBz4B,MAAA,QahPyCA,S,iBoByNxF,cAQI,GhC3QiF,qBA2N/B,MgCgD9C0N,EhChDkC,KAAY,MgCgDxC,KAAO7U,UhChDqB,OgCgDlC,EAAwB,OAAO,KAAU+U,MACjC,MhCfuB,IAAAyC,GAAsB,MgCelD,EhCfsC,MgCepB,EAAK,UAA9B,OjC9F6D,IAAA2xB,GAAA,EAvIP,IAAA3xB,GAAU,ICsN7BA,GAAsB,MgCehC3C,EhCfoB,MDtNmB1N,KCAUtE,EDAOsE,KAAZ,K,yBiCwOzE,cAUI,OjCjRkE4P,GiCiRvD,EjCjRwE5P,KiCiRjE6N,EjCjR6E7N,MiCiRpF,EAAqB6N,EAAkB,G,yBAGtD,cAUI,OpBtRmEgC,GoBsRxD,EpBtR0E7P,KoBsRnE6N,EpBtR+E7N,MoBsRtF,EAAqB6N,EAAkB,G,yBAGtD,cAUI,OlC3TgF,qBAkO9B,IkCyFvC,ElCzF2B,KAAY,IkCyFhCA,ElCzFoB,MkCyF3B,EAAqBA,EAAkB,G,yBAGtD,cAUI,OhChUiF,qBA2N/B,MgCqGvC,EhCrG2B,KAAY,MgCqGhCA,EhCrGoB,MgCqG3B,EAAqBA,EAAkB,G,wBAGtD,cAUI,OjCrUkE+B,GiCqUvD,EjCrUwE5P,KiCqUjE8N,EjCrU6E9N,MiCqUpF,EAAqB8N,EAAkB,G,wBAGtD,cAUI,OpB1UmE+B,GoB0UxD,EpB1U0E7P,KoB0UnE8N,EpB1U+E9N,MoB0UtF,EAAqB8N,EAAkB,G,wBAGtD,cAUI,OlC/WgF,qBAkO9B,IkC6IvC,ElC7I2B,KAAY,IkC6IhCA,ElC7IoB,MkC6I3B,EAAqBA,EAAkB,G,wBAGtD,cAUI,OhCpXiF,qBA2N/B,MgCyJvC,EhCzJ2B,KAAY,MgCyJhCA,EhCzJoB,MgCyJ3B,EAAqBA,EAAkB,G,oBAGtD,gBAUI,GjCzXkE8B,GiCyX9D/B,EjCzX+E7N,KiCyXhE8N,EjCzX4E9N,MiCyX3F,EAA6B,MAAM,GAAyB,kDAAiD8N,EAAjD,yBAAoFD,EAApF,KAChE,OjC1XkE+B,GiC0X9D,EjC1X+E5P,KiC0XxE6N,EjC1XoF7N,MiC0X3F,EAA4B6N,EjC1XkC+B,GiC2X9D,EjC3X+E5P,KiC2XxE8N,EjC3XoF9N,MiC2X3F,EAA4B8N,EACzB,G,oBAGX,gBAUI,GpBjYmE+B,GoBiY/DhC,EpBjYiF7N,KoBiYlE8N,EpBjY8E9N,MoBiY7F,EAA6B,MAAM,GAAyB,kDAAiD8N,EAAjD,yBAAoFD,EAApF,KAChE,OpBlYmEgC,GoBkY/D,EpBlYiF7P,KoBkY1E6N,EpBlYsF7N,MoBkY7F,EAA4B6N,EpBlYmCgC,GoBmY/D,EpBnYiF7P,KoBmY1E8N,EpBnYsF9N,MoBmY7F,EAA4B8N,EACzB,G,oBAGX,gBAUI,GlCzagF,qBAkO9B,IkCuM9CD,ElCvMkC,KAAY,IkCuM/BC,ElCvMmB,MkCuMlC,EAA6B,MAAM,GAAyB,kDAAiDA,EAAjD,yBAAoFD,EAApF,KAChE,OlC1agF,qBAkO9B,IkCwM9C,ElCxMkC,KAAY,IkCwMvCA,ElCxM2B,MkCwMlC,EAA4BA,ElC1agD,qBAkO9B,IkCyM9C,ElCzMkC,KAAY,IkCyMvCC,ElCzM2B,MkCyMlC,EAA4BA,EACzB,G,oBAGX,gBAUI,GhCjbiF,qBA2N/B,MgCsN9CD,EhCtNkC,KAAY,MgCsN/BC,EhCtNmB,MgCsNlC,EAA6B,MAAM,GAAyB,kDAAiDA,EAAjD,yBAAoFD,EAApF,KAChE,OhClbiF,qBA2N/B,MgCuN9C,EhCvNkC,KAAY,MgCuNvCA,EhCvN2B,MgCuNlC,EAA4BA,EhClbiD,qBA2N/B,MgCwN9C,EhCxNkC,KAAY,MgCwNvCC,EhCxN2B,MgCwNlC,EAA4BA,EACzB,G,oBAGX,cAUI,GAAI,SAAAC,EAAA,IACA,OAAY,GAAL,EAAoBA,GAE/B,GAAIA,EAAMxe,UAAW,MAAM,GAAyB,0CAAyCwe,EAAzC,KACpD,OjC7bkE6B,GiC8b9D,EjC9b+E5P,KiC8bxE+N,EAAM3F,MjC9b8EpI,MiC8b3F,EAAsB+N,EAAM3F,MjC9bkCwH,GiC+b9D,EjC/b+E5P,KiC+bxE+N,EAAM1F,ajC/b8ErI,MiC+b3F,EAA6B+N,EAAM1F,aAC3B,G,oBAIhB,cAUI,GAAI,SAAA0F,EAAA,IACA,OAAY,GAAL,EAAqBA,GAEhC,GAAIA,EAAMxe,UAAW,MAAM,GAAyB,0CAAyCwe,EAAzC,KACpD,OpB1cmE8B,GoB2c/D,EpB3ciF7P,KoB2c1E+N,EAAM3F,MpB3cgFpI,MoB2c7F,EAAsB+N,EAAM3F,MpB3cmCyH,GoB4c/D,EpB5ciF7P,KoB4c1E+N,EAAM1F,apB5cgFrI,MoB4c7F,EAA6B+N,EAAM1F,aAC3B,G,e0KlgBhB,YAUoB,MADZ4C,EAAY,UAChB,IAAgB,4B,CAAA,eACZA,E3MoDiD,IAAAoF,G2MpDjDpF,E3MoD2DjL,K2MpDpDhQ,E3MoDoEgQ,KAAX,G2MlDpE,OAAOiL,G,eAGX,YAUoB,MADZA,EAAa,oBACjB,IAAgB,4B,CAAA,eACZA,E9LuCmD,IAAAwtB,G8LvCnDxtB,E9LuC8DjL,KAAK,I8LvC5DhQ,E9LuCuEgQ,O8LrClF,OAAOiL,G,eAGX,YAUoB,MADZA,EAAY,UAChB,IAAgB,4B,CAAA,eACZA,E3MoBiD,IAAAoF,G2MpBjDpF,E3MoB2DjL,KAAgB,IDkO5CqQ,GAAsB,I4MtP9CrgB,E5MsPkC,MClOkCgQ,KAAX,G2MlBpE,OAAOiL,G,eAGX,YAUoB,MADZA,EAAY,UAChB,IAAgB,4B,CAAA,eACZA,E3MIiD,IAAAoF,G2MJjDpF,E3MI2DjL,KAAgB,ICmO5CqQ,GAAsB,M0MvO9CrgB,E1MuOkC,MDnOkCgQ,KAAX,G2MFpE,OAAOiL,G,oCCuCP,mBAAgB,GAAhB,kCANJ,WAMI,G,4CACA,qBAAgC,GAAMqI,EAAtC,kCAPJ,WAOI,G,4CACA,wDAAmD,UAAMA,EAASD,GARtE,WAQI,G,4CACA,qBAAiC,GAAMA,EAAvC,kCATJ,WASI,G,i4EpKnHJ,cAEI,SAD8D/T,EAAN,cAE1BjM,GAF0B,OAAMiM,G,IAS9D,eATwD,OAStC4lC,GAAqB7xC,G,IACvC,YAVwD,OAUzC8xC,GAAkB9xC,G,IACjC,aAXwD,OAWxC+xC,GAAmB/xC,G,IACnC,YAZwD,OAYzCgyC,GAAkBhyC,G,IACjC,WAbwD,OAa1CiyC,GAAiBjyC,G,IAC/B,YAdwD,OAczCkyC,GAAkBlyC,G,IACjC,aAfwD,OAexCmyC,GAAmBnyC,G,IACnC,cAhBwD,OAgBvCoyC,GAAoBpyC,G,QAC7B,MAAM,GAAsB,kDAA+CiM,M,0OA8DvF,WAC8C,MAAM,M,cAEpD,gBAEI,MAAI,iBAAAiR,EACOA,EpByIiF/W,UoBzIrE8V,EAAYC,GAEtB,EAAY,oBAAsBD,EAAYC,I,eAI/D,cAEQ,MAAYm2B,kBAGZ,MAAYA,kBAAkBC,GAErB,EAAT,OAA+C,IAAnD,OAAmDjiB,O,eAIvD,cAGwB,MADpB,EAAgB,IAAhB,MAQA,OANI,EADoB,SAASpQ,EAAY,aAC5B,MAATD,EAAeA,EAAMzhB,WAAgB,KAEzC0hB,EAHJsyB,EAAUtyB,QAAU,EAKpBsyB,EAAUvyB,MAAQA,EAClBuyB,EAAUjyC,KAAO,YACViyC,G,6BAyCX,cAXI,IAiBO,MAAO,UAlBd,EAAY,MAAYzzB,EAAK,QAC7B,QAAUA,EAAV,W,CACI,MAAUA,EAAKzf,GACX,UAAAN,GAGAggB,EAAM1f,GAAKN,EAFXggB,EAAM1f,GAAK,GAASuS,MAAMhT,KAAKG,GAcvC,MATO,GAASigB,OAAOnT,MAAM,GAAUkT,I,uBAY3C,cAWI,MAAqB,UACrB,GAAI,UAAAhiB,SAA4C6R,IAAzB7R,EAAY,O,CAhCnC,IADA,MAAY,MAkCM+hB,EAlCW,QAC7B,QAiCkBA,EAjClB,W,CACI,MAgCcA,EAhCCzf,GACX,UAAAN,GAGAggB,EAAM1f,GAAKN,EAFXggB,EAAM1f,GAAK,GAASuS,MAAMhT,KAAKG,GA8BnC,MAzBG,GAASigB,OAAOnT,MAAM,GAAUkT,GA4BnC,IADA,IAAIxY,EAAO,EACX,QAAUuY,EAAV,W,CACY,IAAoB,EAA5BvY,KAAQ,iBAAoB,EAApBuY,EAAK,GAAe1f,QAApB,QAAR,EAEJ,MAAa,IAAjB,EAAC,YAAa,QU3FQwP,IV4FG7R,EU5FhB,SV4FmB4C,EU3FxB,OV2FqB5C,EU3FF,QV4FnBwJ,EAAO,EACP,IAAK,IAAL,QAAUuY,EAAV,W,CAE0B,MACX,EAFX,EAAUA,EAAK,GACO,EAAJ,EAAI1f,OAAtB,IAAK,IAAL,EAAU,EAAV,QACIO,GAAO,EAAA4G,IAAA,MAAP,IAAiB,EAAImP,GAG7B,OAAO/V,G,iBAIf,WACgC,MAAS,eAAT,EAAhC,GAAE,MAAM,KAAM,WAAkB,OAW5BK,EAAM,OAAWiM,EACVjM,G,cAVX,WAC6B,MAAS,YAAT,EAAsB,IAA/C,YAAY,GAAE,MAAM,KAAM,YAAD,OAQzBA,EAAM,OAAWiM,EACVjM,G,cAPX,WAC6B,MAAS,YAAT,EAA7B,GAAE,MAAM,KAAM,WAAe,OAKzBA,EAAM,OAAWiM,EACVjM,G,wTO/LP,oDAAuB,UAAK,KAAM,MAAlC,G,+CAEA,sDAAwC,eAAK4O,EAAWoR,GAAxD,G,8BAKA,oDAAuB,UAAK,KAAM,MAAlC,G,uDAEA,sDAAwC,eAAKpR,EAAWoR,GAAxD,G,4KAUA,oDAAuB,UAAK,KAAM,MAAlC,G,yCAEA,sDAAwC,eAAKpR,EAAWoR,GAAxD,G,gNAUA,oDAAuB,UAAK,MAA5B,G,wEAIA,oDAAuB,UAAK,KAAM,MAAlC,G,gDACA,sDAAuC,UAAKC,EAAS,MAArD,G,gDACA,sDAAwC,eAAKrR,EAAWoR,GAAxD,G,6HAMA,sDAAwC,eAAKpR,EAAWoR,GAAxD,G,kEAKA,oDAAuB,UAAK,MAA5B,G,yDAKA,oDAAuB,UAAK,MAA5B,G,sDAIA,oDAAuB,UAAK,MAA5B,G,gDAMA,mBAAuB,GAAK,KAA5B,qC,iEAEA,cAAiD,IAAY,EAA7D,wCAAoC,UAAazhB,EAAR0hB,GAAoB,WAAAA,EAAA,WAA7D,G,8EASA,oDAAuB,UAAK,MAA5B,G,+GAKA,sDAAuC,UAAKA,EAAS,MAArD,G,6CACA,sDAAwC,eAAKrR,EAAWoR,GAAxD,G,gFAIA,oDAAuB,UAAK,KAAM,MAAlC,G,6GAEA,sDAAwC,eAAKpR,EAAWoR,GAAxD,G,mFGnEJ,YAG4D,WAAAwyB,GAAelF,I,gBAE3E,cAIwF,WAAAkF,GAAelF,I,gBAEvG,cAKwE,WAAAkF,GAAelF,I,+L2JnDvF,cASI,OAFkB,EAAap/B,cAAc,KAC5B,EAAaA,cAAcY,GACN,GAAW,G,+FCRrD,cAGI,OAAO,M,4CnMQX,cd2nBW,KcrnBgB6E,GdqnBH,GcrnBGA,GdqnBW,OcrnBF,MAAM,IAAA2E,GAA0B,uBAAuB,SAAvB,KAAhE,OdqnB6C,EcrnBtB3E,I,oBAG3B,cd4nBW,KctnBgBA,GdsnBH,GctnBGA,GdsnBW,OctnBF,MAAM,IAAA2E,GAA0B,uBAAuB,SAAvB,KAAhE,OdsnB6C,EctnBtB3E,I,qBAG3B,cd6nBW,KcvnBgBA,GdunBH,GcvnBGA,GdunBW,OcvnBF,MAAM,IAAA2E,GAA0B,uBAAuB,SAAvB,KAAhE,OdunB6C,EcvnBtB3E,I,qBAG3B,cd8nBW,KcxnBgBA,GdwnBH,GcxnBGA,GdwnBW,OcxnBF,MAAM,IAAA2E,GAA0B,uBAAuB,SAAvB,KAAhE,OdwnB6C,EcxnBtB3E,I,qBAG3B,cd+nBW,KcznBgBA,GdynBH,GcznBGA,GdynBW,OcznBF,MAAM,IAAA2E,GAA0B,uBAAuB,SAAvB,KAAhE,OdynB6C,EcznBtB3E,I,qBAG3B,cdgoBW,Kc1nBgBA,Gd0nBH,Gc1nBGA,Gd0nBW,Oc1nBF,MAAM,IAAA2E,GAA0B,uBAAuB,SAAvB,KAAhE,Od0nB6C,Ec1nBtB3E,I,qBAG3B,cdioBW,Kc3nBgBA,Gd2nBH,Gc3nBGA,Gd2nBW,Oc3nBF,MAAM,IAAA2E,GAA0B,uBAAuB,SAAvB,KAAhE,Od2nB6C,Ec3nBtB3E,I,qBAG3B,cdkoBW,Kc5nBgBA,Gd4nBH,Gc5nBGA,Gd4nBW,Oc5nBF,MAAM,IAAA2E,GAA0B,uBAAuB,SAAvB,KAAhE,Od4nB6C,Ec5nBtB3E,I,qBAG3B,cdmoBW,Kc7nBgBA,Gd6nBH,Gc7nBGA,Gd6nBW,Oc7nBF,MAAM,IAAA2E,GAA0B,uBAAuB,SAAvB,KAAhE,Od6nB6C,Ec7nBtB3E,I,uEA2F3B,cAaI,OAAY8+B,EAAL,EAAuBpqC,I,+BAqBlC,YASI,OAAYqqC,EAAL,I,+BAeX,YAYI,OAAYC,EAAL,I,yBAkBX,cAWI,OAAY/2B,EAAL,EAAmBvT,I,yBAG9B,cAWI,OAAYuT,EAAL,EAAmBvT,I,yBAG9B,cAWI,OAAYuT,EAAL,EAAmBvT,I,yBAG9B,cAWI,OAAYuT,EAAL,EAAmBvT,I,yBAG9B,cAWI,OAAYuT,EAAL,EAAmBvT,I,yBAG9B,cAWI,OAAYuT,EAAL,EAAmBvT,I,yBAG9B,cAWI,OAAYuT,EAAL,EAAmBvT,I,yBAG9B,cAWI,OAAYuT,EAAL,EAAmBvT,I,yBAG9B,cAWI,OAAYuT,EAAL,EAAmBvT,I,2BAwH9B,YAOI,OAAYwT,EAAL,I,2BAGX,YAOI,OAAYA,EAAL,I,2BAGX,YAOI,OAAYA,EAAL,I,2BAGX,YAOI,OAAYA,EAAL,I,2BAGX,YAOI,OAAYA,EAAL,I,2BAGX,YAOI,OAAYA,EAAL,I,2BAGX,YAOI,OAAYA,EAAL,I,2BAGX,YAOI,OAAYA,EAAL,I,2BAGX,YAOI,OAAYA,EAAL,I,2BAoFX,YASI,OAAY0jB,EAAL,I,2BAGX,YASI,OAAYA,EAAL,I,2BAGX,YASI,OAAYA,EAAL,I,2BAGX,YASI,OAAYA,EAAL,I,2BAGX,YASI,OAAYA,EAAL,I,2BAGX,YASI,OAAYA,EAAL,I,2BAGX,YASI,OAAYA,EAAL,I,2BAGX,YASI,OAAYA,EAAL,I,2BAGX,YASI,OAAYA,EAAL,I,iGAmYX,YAMW,MAA8B,EAAY3tB,QAAjD,O6B/8BA5R,EAAM,O7B+8BU,e6B98BTA,G,iF7B8iCX,cFhuCI,KE0uCQqc,GAAW,GFxuCf,MAAM,IEwuCc,kCFxuCmB9d,YEyuCpC,MAAyB0iB,GAAgB,EAAM5E,GAAS,GAA/D,O6B1jCArc,EAAM,O7B0jCU,e6BzjCTA,G,2R7BwyCX,uBAWkD,IAAAwV,MAAiB,QAAG,IAAAC,MAAe,UACjF,KAAa,0BAAkBD,EAAWC,EAAS,UAC9C,EAAY7E,KAAKjU,EAAS6Y,EAAWC,I,gBAG9C,uBAWoD,IAAAD,MAAiB,QAAG,IAAAC,MAAe,UACnF,KAAa,0BAAkBD,EAAWC,EAAS,UAC9C,EAAY7E,KAAKjU,EAAS6Y,EAAWC,I,gBAG9C,uBAWsD,IAAAD,MAAiB,QAAG,IAAAC,MAAe,UACrF,KAAa,0BAAkBD,EAAWC,EAAS,UAC9C,EAAY7E,KAAKjU,EAAS6Y,EAAWC,I,gBAG9C,uBAWgD,IAAAD,MAAiB,QAAG,IAAAC,MAAe,UAC/E,KAAa,0BAAkBD,EAAWC,EAAS,UAC9C,EAAY7E,KAAKjU,EAAS6Y,EAAWC,I,0LA2E9C,cAKI,OAAOm9B,GAAoB,EAAMx5B,I,gBAGrC,cAII,OAAOy5B,GAAwB,GAAL,EAAY,SAAOz5B,EAAS7S,KAAhB,GAAuB,EAAK,OAAM6S,I,gBAG5E,cAII,OAAOy5B,GAAwB,GAAL,EAAY,SAAOz5B,EAAS7S,KAAhB,GAAuB,EAAK,OAAM6S,I,gBAG5E,cAII,OAAOy5B,GAAwB,GAAL,EAAY,SAAOz5B,EAAS7S,KAAhB,GAAuB,EAAK,OAAM6S,I,gBAG5E,cAII,OAAOw5B,GAAoB,EAAMx5B,I,gBAGrC,cAII,OAAOy5B,GAAwB,GAAL,EAAY,SAAOz5B,EAAS7S,KAAhB,GAAuB,EAAK,OAAM6S,I,gBAG5E,cAII,OAAOy5B,GAAwB,GAAL,EAAY,SAAOz5B,EAAS7S,KAAhB,GAAuB,EAAK,OAAM6S,I,gBAG5E,cAII,OAAOw5B,GAAoB,EAAMx5B,I,gBAGrC,cAII,OAAOy5B,GAAwB,GAAL,EAAY,SAAOz5B,EAAS7S,KAAhB,GAAuB,EAAK,OAAM6S,I,mGAmK5E,cAMQ,SAAO,GAAG05B,GAAc,EAAMlxB,I,gBAGtC,qBAewD,IAAApM,MAAiB,QAAG,IAAAC,MAAe,UACvF,KAAa,0BAAkBD,EAAWC,EAAS,UACnD,GAAc,EAAMD,EAAWC,EAAS4L,O,mgBC7yD5C,gBAOI,OAAO,GAAMtkB,EAAG,GAAMF,EAAGqgB,K,gBA6D7B,cAQc,MADNtgB,EAAMG,EACV,IAAK,EAAL,MAAUsL,EAAV,WAAiBzL,EAAM,GAAMA,EAAnByL,EAAV,IACA,OAAOzL,G,iBAGX,cAMc,MADNA,EAAMG,EACV,IAAK,EAAL,MAAUsL,EAAV,W,CAAU,MAAAA,EAAV,GAAiBzL,EAxHV+a,EAAO/a,IAwHeA,EAAKF,GAClC,OAAOE,G,iBAGX,cAMc,MADNA,EAAMG,EACV,IAAK,EAAL,MAAUsL,EAAV,W,CAAU,MAAAA,EAAV,GAAiBzL,EAlIV+a,EAAO/a,IAkIeA,EAAKF,GAClC,OAAOE,G,iBAGX,cAMc,MADNA,EAAMG,EACV,IAAK,EAAL,MAAUsL,EAAV,W,CAAU,MAAAA,EAAV,GAAiBzL,EA5IV+a,EAAO/a,IA4IeA,EAAKF,GAClC,OAAOE,G,iBAGX,cAMc,MADNA,EAAMG,EACV,IAAK,EAAL,MAAUsL,EAAV,W,CAAU,MAAAA,EAAV,GAAuB,EAAMzL,EAAZA,EA7IN,kBA6IuBF,IA7IvB,EAAQ,EA6IeA,EAClC,OAAOE,G,iBAGX,cAQc,MADNA,EAAMG,EACV,IAAK,EAAL,MAAUsL,EAAV,W,CAAU,MAAAA,EAAV,GAAiBzL,EA9IV+a,EAAO/a,IA8IeA,EAAKF,GAClC,OAAOE,G,iBAGX,cAQc,MADNA,EAAMG,EACV,IAAK,EAAL,MAAUsL,EAAV,W,CAAU,MAAAA,EAAV,GAAiBzL,EA/IV+a,EAAO/a,IA+IeA,EAAKF,GAClC,OAAOE,G,yDAuEX,gBAOI,OAAO,GAAMG,EAAG,GAAMF,EAAGqgB,K,gBA6D7B,cAQc,MADNpgB,EAAMC,EACV,IAAK,EAAL,MAAUsL,EAAV,WAAiBvL,EAAM,GAAMA,EAAnBuL,EAAV,IACA,OAAOvL,G,iBAGX,cAMc,MADNA,EAAMC,EACV,IAAK,EAAL,MAAUsL,EAAV,W,CAAU,MAAAA,EAAV,GAAiBvL,EAxHV6a,EAAO7a,IAwHeA,EAAKJ,GAClC,OAAOI,G,iBAGX,cAMc,MADNA,EAAMC,EACV,IAAK,EAAL,MAAUsL,EAAV,W,CAAU,MAAAA,EAAV,GAAiBvL,EAlIV6a,EAAO7a,IAkIeA,EAAKJ,GAClC,OAAOI,G,iBAGX,cAMc,MADNA,EAAMC,EACV,IAAK,EAAL,MAAUsL,EAAV,W,CAAU,MAAAA,EAAV,GAAiBvL,EA5IV6a,EAAO7a,IA4IeA,EAAKJ,GAClC,OAAOI,G,iBAGX,cAMc,MADNA,EAAMC,EACV,IAAK,EAAL,MAAUsL,EAAV,W,CAAU,MAAAA,EAAV,GAAuB,EAAMvL,EAAZA,EA7IN,kBA6IuBJ,IA7IvB,EAAQ,EA6IeA,EAClC,OAAOI,G,iBAGX,cAQc,MADNA,EAAMC,EACV,IAAK,EAAL,MAAUsL,EAAV,W,CAAU,MAAAA,EAAV,GAAiBvL,EA9IV6a,EAAO7a,IA8IeA,EAAKJ,GAClC,OAAOI,G,iBAGX,cAQc,MADNA,EAAMC,EACV,IAAK,EAAL,MAAUsL,EAAV,W,CAAU,MAAAA,EAAV,GAAiBvL,EA/IV6a,EAAO7a,IA+IeA,EAAKJ,GAClC,OAAOI,G,sKmMraX,cvLiBW,KuLXgB6W,GvLWH,GuLXGA,GvLWW,OuLXF,MAAM,IAAA2E,GAA0B,yBAAyB,EAAAlZ,OAAzB,KAAhE,OvLW6C,auLXtBuU,I,qDrJJ3B,chCqTe,MgC7SYA,GhC6SH,EAAb,GAAI,IAAc,EgC7SFA,GhCkzHP,GAAR,EAAAgI,WArgHG,EgC7SqB,MAAM,IAAArD,GAA0B,uBAAuB,EAAA/R,KAAvB,KAAhE,OhC6S6C,cgC7StBoN,I,qBAG3B,chCsTe,MgC9SYA,GhC8SH,EAAb,GAAI,IAAc,EgC9SFA,GhC+yHP,GAAR,EAAAgI,WAjgHG,EgC9SqB,MAAM,IAAArD,GAA0B,uBAAuB,EAAA/R,KAAvB,KAAhE,OhC8S6C,cgC9StBoN,I,qBAG3B,chCuTe,MgC/SYA,GhC+SH,EAAb,GAAI,IAAc,EgC/SFA,GhC4yHP,GAAR,EAAAgI,WA7/GG,EgC/SqB,MAAM,IAAArD,GAA0B,uBAAuB,EAAA/R,KAAvB,KAAhE,OhC+S6C,cgC/StBoN,I,qBAG3B,chCwTe,MgChTYA,GhCgTH,EAAb,GAAI,IAAc,EgChTFA,GhCyyHP,GAAR,EAAAgI,WAz/GG,EgChTqB,MAAM,IAAArD,GAA0B,uBAAuB,EAAA/R,KAAvB,KAAhE,OhCgT6C,cgChTtBoN,I,0c5C2L3B,YLjNI,KKyNQ2C,GAAY,GLvNhB,MAAM,GKuNe,iCLvNkB/X,a,yHKmF/C,cAOqB,cAAjB,IAAK,IAAL,EAAc,EAAd,SACI,cAAKoV,EAAS3X,I,0CAYtB,YAIwE,MAAhB,aAAwB,MlC7DrE,G,8PqFzDH,sDAAsC,UAAKupB,EAAMnO,IAAKmO,EAAMvpB,OAA5D,G,+Q+IlBR,cAMoB,MAFhB,GAAI,QAAc,OAAO,EACzB,IAAI2D,EAAS,EACb,IAAK,EAAL,MAAgB,EAAhB,W,CAAgB,QAAhB,GAaIA,GAAS,GAAKA,EAAL,IAXL,MAAAhD,EAAmB,ElKDc,EAAawB,WkKEnCxB,GAA6CmD,EAAhCnD,GAExB,SAAAA,EAAA,IAAmC,GAARA,GAC3B,SAAAA,EAAA,IAAmC,GAARA,GAC3B,SAAAA,EAAA,IAAmC,GAARA,GAC3B,SAAAA,EAAA,IAAmC,GAARA,GAEQiD,EAARjD,IAGtB,EAEb,OAAOgD,G,0M1IoDP,qBAG8C,GAH9C,kCAII,EAAK,eAAO2mB,GAJhB,G,gECtDA,sDAG2C,WAnB/C,WAoBQ,cAAM,GAAgBlN,EAAS7S,MAC/B,iBAAO6S,GALX,G,sHA0DJ,YAKuC,MAA5B,GAAQmN,GAAA,KAAf,OAA2C,Q3FPpC,G,+W+FxBX,YAKmD,MAAxC,GAAcwsB,GAAA,KAArB,OAAuD,Q/FmBhD,G,4RgGDX,Y,mBAUA,WAEIC,GAAOtrB,W,mBAGX,YAEIsrB,GAAO,gBAAQ/yB,I,iBAGnB,YAEI+yB,GAAO,cAAM/yB,I,iCCvFb,sDACyD,UAAKgzB,EAAU,MADxE,G,kGoIRA,mBAAuB,GAAvB,kCAFJ,WAEI,G,sCACA,qBAAuC,GAAMhzB,EAA7C,kCAHJ,WAGI,G,sCACA,wDAAmD,UAAMA,EAASD,GAJtE,WAII,G,sCACA,qBAAiC,GAAMA,EAAvC,kCALJ,WAKI,G,oWhGSJ,gBAQqD,MAA1B,GAAhB,IAAAkzB,eAA8B5yC,EAAM+S,GAA3C,OAAwD,EAAA8/B,YrIoElD,GACC,G,8FsIrFX,crHggIW,IAoGS,EApGT,EAAY,KAoGnB,IAAK,EAAL,MqH7lIqBhrB,ErH6lIrB,W,CAAgB,MqH7lIKA,ErH6lIrB,GqH7lI4C,KrH6lIPxrB,IAAU+X,EAAY,UAAI/X,GqH7lI/D,MrH8lIO+X,EqH7lIP,IAAI0+B,EzI8MqDl3C,U,CgD9ClB,MyF/JnC,EzF+JyD,GAAtB,mByF/Jd,EAAA41B,WzF+Jc,OAA6BvzB,WoJkO7C,EAAhB,K3DzXH,OANI,oBzF+QkD,IAAV,EAAAa,QyF7QpC,iBAAO,KAEI,OAAa,KALhC,EAAA0yB,UtI4DG,EiMoUqCvzB,Y3DzXjC,EAGX,OAAO,G,8CAGX,cAOmB,M,KrHi3YC,MAAhB,IAAK,EAAL,MqHj3YI4pB,ErHi3YJ,WAAsB,GqHj3YD,KAAjBA,ErHi3YJ,I,CAA8C,GAAO,EAAP,QAC9C,GAAO,Q,GqHl3YP,GAAI,E,CACA,IzFyImC,E1CiqBvB,EmI1yBZ,EAA6BkrB,GAAXlrB,GACI,EzFwImC,GAAtB,mByFxIvB,EAAA2J,WzFwIuB,OAA6BvzB,WyFxIX,EC/BjB,GD+BD,QzFgzC8C,gBAAzB,G1ClmBrD,EAAS,KA2FhB,IAAgB,4B,CAAA,emIzyBkD,iBnIyyB9B,IAAUmW,EAAY,UAAI,GmIxyB1D,OADA,EAAAod,UAAmF,GnI0yBhFpd,EmI1yB6F,MACzF,EAGX,OAAO,G,gDgGnCP,YAAQ,SAAA4+B,WAAYC,KAAKC,WAAa,EAAAF,WAAYC,KAAKE,oB,kDAOvD,YAAQ,SAAAH,WAAYC,KAAKG,c,qJ9Hd7B,YAAoE,WAAAC,GAAqBC,I,kBCKzF,YAGoD,kB,iB8HNpD,YAGI,KAAO,EAAAC,iBACH,EAAAC,YAAY,IAAAC,c,0CAIpB,cAQI,OADA,EAAAZ,YAAY,IAAAD,eAAgBc,eAAe3rB,IACpC,G,6C1HEX,YAiBa,MATT,EAAc,EAEd,OACI,iBACI,a3CxBiC,EAAalqB,W2CyBvCsmC,GACkB,gBAAzBA,IAGC,WAAAA,EAAA,YAAkBtoC,Y,WFrC/B,YAEI,MAAM,IAAA83C,GAAqBh0B,I,wCAa/B,YAEI,MAAM,GAAqC,qBAAqB5N,EAArB,8B,qB6HlB/C,YrE8CW,IA2BG,EA3BH,EvKqBiD,KuKMxD,IAAU,EAAK,EAAAytB,iBAAL,a,CAAA,IAoF6D,EApF7D,WACN,EAAU,cAAMpjC,GAChB,EAAkBgY,EAAA,UAAY0C,GAC9B1C,EvKqKJ,YuKrKgB0C,GAAqD,MAAfC,GAAwB3C,EAAY,kBAAY0C,GAiF/B,SAjFjCC,IAiFiC,oBqEtJlE,GAAqB,EAAN,GAApB,OrEuEO3C,G,qDvDtBX,cAMgB,MADZ,EAA0B,OAAa0R,KAAK/d,GAC5C,IAAK,EAAL,MAAY+d,EAAZ,W,CAAY,IAAAhP,EAAAgP,EAAZ,GACc,EAAY8tB,eAAe98B,KACjC,EAAKA,GAAO/O,EAAM+O,IAG1B,OAAO,G,e9GmJX,cAcI,OAAIg5B,GAAQ,GAAe,IAARA,EAAoB,EAAOviC,IACvC,KAAW3D,IAAIkE,GAAK,KAAWlE,IAAIkmC,I,iBAwF9C,YAQI,GAAIhiC,EAAI,IAAO,EACX,OAAO,KAAWua,MAAMva,GAE5B,MAzBgD,EAAWrE,MAyBzCqE,GAClB,OAAWrE,EAAQ,GAAK,EAAKA,EAtCkB,EAAWE,KAsCbmE,I,mBAoHZ,cACjC,SAAO,EAAa,GAAN,GACT,GAAL,IAAgB,IAAQ,EAAOoa,kBAAqB,EACpD,IAAQ,EAAO/iB,UAAa,EAAYi/B,GAAL,GACtByP,GAAL,GAAgB,G,mEAwB5B,cAUI,OAAK,GAAL,IAAmB,GAAH95B,GAAc,EAAOxM,IACrCwM,IAAM,EAAQA,EACdA,EAAK,EAAa85B,GAAL,GACgBzP,GAAL,I,gDAsB5B,YAYI,SAAW,MAAM,GAAyB,2BAC1C,sBAF2C,EAG3C,eAH2C,EAIZ,kBAAvB,KAAW/b,MAAM,K,eA4d7B,YAUqC,OAAIrpB,EAAI,EAAI,GAACA,EAAaA,G,sCA2C/D,YASuC,OAAIA,EAAA,WAAI,EAAIA,EAAD,aAAQA,G,6LgHzgC1D,YAG8C,OAAC,QAAiB,O,oJAuDhE,cAaI,UAAIkqB,EAAa,IAAK,GAAgBA,G,uBAG1C,cAaI,UAAI,GAAgBA,EAAa,IAAKA,G,wBAG1C,YAMI,OAAKikB,GvChEmD,EAAA1lC,euCgE9B0lC,GvCjE6B,EAAAzlC,cuCiEvD,G,gCAEJ,YAMU,MAAW,EvCxEuCD,cuCyEpD,aAAK,GA7E8C4P,EAAOlH,MvCGP,EAAAzI,cuC0E9C,EA7E8C2P,EAAOlH,MA8ElDxL,I,iCAGhB,YAMU,MAAU,EvCpFuC+C,auCqFnD,aAAK,GAAqB0lC,GvCpF0B,EAAA3lC,euCoF/C,EACO2lC,GAAJ3oC,I,6BAGhB,YAOU,MAAW,EvC/FuCgD,cuCgGpD,S,CAAK,MAAS4lC,GvCjGqC,EAAA3lC,cuCgGvD,OvCjG4C,EAAahG,KAAK4D,SAASb,EuCkGhC,GAC3B,MAAa4oC,GAAL1oC,GAFpB,OvCjG4C,EAAajD,KAAK4D,SuCmG7C,EvCnG2D,I,4BuCsGhF,YAOU,MAAU,EvC5GuCoC,auC6GnD,S,CAAK,MAAa4lC,GvC5GkC,EAAA7lC,euC2GxD,OvC7G4C,EAAa/F,KAAK4D,SuC8GhD,EvC9G8DX,GuC+GhE,MAAS2oC,GAAJ7oC,GAFjB,OvC7G4C,EAAa/C,KAAK4D,SAAS,EuC+G9B,I,sBAG7C,cAaI,GAAyB,IAAP,GAAb4jB,G,CACD,MAAU,EvC/HyCxhB,auCgInD,EAAW,EvC/HyCD,cuCgIpD,EAAahD,GAAQykB,EAAavkB,KAAU,GAACukB,GAC7C,EAAcvkB,GAASukB,EAAazkB,KAAS,GAACykB,GAC9C,OAAgC,IAAP,GAAbA,GvCpI4B,EAAaxnB,KAAK4D,SuCoIlBwuC,EAAQC,GvCpIR,EAAaryC,KAAK4D,SuCoISyuC,EAASD,GAErE,SAAyB,IAAP,GAAb5qB,GAAL,EAA4B,M,OvCpIiB,EAAAzhB,cuCoIP,EvCrIM,EAAAC,auCqI5C,EvCtIiC,EAAahG,KAAK4D,SAAA,EAAc,GuCsIxE,OAAO,G,2N2H7KX,YAAS,MAAD,OAAC,yBAAuBqkB,Q,sBAMhC,YAAQ,OAAAqqB,GAAU,I,sdClBtB,gBAMI,WAAAC,GAAUnqB,EAAsBpU,GAAV,GAAoBqU,I,qBAE9C,WAC2C,a,oBAE3C,YAC+C,WAAAkqB,GAAU,EAAAC,EAAMpqB,YAAcoqB,EAAM1oC,WAAW,I,uBAE9F,gBAM0B,IAAN,SAAMye,G,IAClB,K,OAAA,M,IACA,M,OAAA,M,eAFJ,QAMA,OAAO,IAAAkqB,GAAmBn0C,EAAkB0V,GAAZ0+B,GAAsBC,GAAW,I,yBAGrE,WAEI,YAAgBC,M,iCAEpB,YAEI,YAAgB,kBAAU3oC,I,iCAE9B,YAEI,YAAgB,kBAAUA,I,qCAE9B,YAEI,YAAgB,sBAAcA,I,qOnH9BlC,YAEU,IAAN,gBAAevP,G,IACX,SAA6B,EAAjB,KAAiBsuB,YAA7B,M,IACA,SAAY,GAAmB,EAAHtuB,KAAsBA,EAAG,KAAiBm4C,SAAc,KAAiBC,YAArG,M,IACA,UAA8B,EAAjB,KAAiBC,aAA9B,M,IACA,WAA+B,EAAjB,KAAiBC,cAAgB,EAAY51C,QAA3D,M,QAGQ,oBAAA1C,GAAsC,EAAjB,KAAiBu4C,uBACtC,iBAAAv4C,GAAmC,EAAjB,KAAiBw4C,oBACnC,iBAAAx4C,GAAmC,EAAjB,KAAiBy4C,oBACnC,kBAAAz4C,GAAoC,EAAjB,KAAiB04C,qBACpC,gBAAA14C,GAAkC,EAAjB,KAAiB24C,mBAClC,iBAAA34C,GAAmC,EAAjB,KAAiB44C,oBACnC,kBAAA54C,GAAoC,EAAjB,KAAiB64C,qBACpC,mBAAA74C,GAAqC,EAAjB,KAAiB84C,sBACrC,YAAA94C,EAAA,I,cACA,aAAAA,GAAkC,EAAjB,KAAiB+4C,e,CAE9B,MAAkB,OAAa9wC,eAAejI,GAAGyE,YAEI,EAAjDA,IAAgB,OAAgB,KAAiBu0C,SACjDv0C,IAAgB,MAAe,KAAiBw0C,eAG5C9qB,GAD0B1pB,IAvBlD,U,oxDIfA,oDAAuB,UAAK,MAA5B,G,gfpFiGA,YAAQ,YAAa,gBAAQ+pB,GAAiB,K,qBAElD,YAOI,OAAI,EAAO,KAGJA,GAAiB,KAA6B,oB,oBAGzD,YAUI,SAAI,IAAQ,MAAK,KAAb,sBAAoB,IAAQ,MAAK,IAAb,wBAGpB,EAAO,MAGJ0qB,GAAa,I,2BAGxB,YAUI,SAAI,IAAQ,MAAK,KAAb,qBAAoB,IAAQ,MAAK,IAAb,qBAAoB,IAAQ,MAAK,IAAb,wBAGxC,EAAO,OAIJC,GAAY,IAAKD,GAAa,K,mBAGzC,YASI,QAAI,IAAQ,MAAK,IAAb,uBAGA,EAAO,MAGJC,GAAY,I,uBAGvB,YASI,QAAI,IAAQ,MAAK,IAAb,uBAGA,EAAO,MAGJC,GAAgB,I,uBAG3B,YASI,QAAI,IAAQ,MAAK,KAAb,uBAGA,EAAO,MAGJC,GAAgB,I,uBAG3B,YASI,QAAI,EAAO,MAGJ7qB,GAAiB,KAAmC,oB,wBAG/D,YAUI,OAAO,GAAQ,IAAY,IAAQ,OAAU,KAAlB,qB,gDsFnO/B,YAOiD,yBAAgB,MrF2LC/Q,cqF3LmB,SAApC,G,kBAEjD,YAI0C,sBAAA67B,GAAA,MAAkBC,GAAkB,I,kBAE9E,cAKoD,2BAAajwC,IAAb,EAAuBiwC,GAAkB,I,mBAG7F,YAI4C,sBAAAC,GAAA,MAAmBD,GAAkB,I,mBAEjF,cAKsD,2BAAcjwC,IAAd,EAAwBiwC,GAAkB,I,iBAEhG,YAIwC,sBAAAE,GAAA,MAAiBF,GAAkB,I,iBAE3E,cAKkD,2BAAYjwC,IAAZ,EAAsBiwC,GAAkB,I,kBAE1F,YAI0C,sBAAAG,GAAA,MAAkBH,GAAkB,I,kBAE9E,cAKoD,2BAAajwC,IAAb,EAAuBiwC,GAAkB,I,oBAE7F,YAIyF,OAAnC,EAAR,OACnC,G7HcD,K6HdkB,OAAiB,I7HcnC,G6Hd+C1P,GAAQ,KACzD0P,GAAkB,G7Hcf,G,0B6HJX,YAIgG,OAAnC,EAAR,OAC5C,G7H0BgB,K6H1BC,OAAiB,I7H0BlB,G6H1B8B1P,GAAQ,G7H0BrB,KAAV,G,6Q8HnF5B,wDACkE,UAAKna,EAASlV,GAAMse,IADtF,G,qDAqKJ,cAGkE,WAAAxI,GAAMZ,EAASlV,GAAMse,K,iBAEvF,YAG6C,WAAAxI,GAAMZ,EAASnV,O,kBtF9M5D,YAQiB,MADTtX,EAAS,GACb,IAAK,EAAL,MAAa2nC,EAAb,W,CAAa,IAAAnc,EAAb,EAAamc,EAAb,IACI3nC,GAAU,OAAV,aAAUwrB,GAEd,OAAOxrB,G,kBAGX,gBAa+B,MAH3B,GAAI2R,EAAS,GAAKlS,EAAS,IAAKkoC,EAAM,OAAOh2B,EAAb,GAAsBlS,EAClD,MAAM,IAAAkZ,GAA0B,SAASgvB,EAAM,OAAf,aAA+Bh2B,EAA/B,aAAgDlS,GACpF,IAAIO,EAAS,GACc,EAAA2R,EAASlS,EAAT,EAA3B,IAAK,IAAL,EAAckS,EAAd,QACI3R,GAAU,OAAV,aAAU2nC,EAAM3zB,IAEpB,OAAOhU,G,iFAqCX,YAMI,OAAO,aAAU,EAAAP,QAAQ,gBAAE,sBAAIwb,OAAN,O,uBAG7B,gBAcI,YAFiC,IAAAqB,MAAkB,QAAG,IAAAC,MAAgB,EAAK9c,QAC3E,KAAa,2BAAmB6c,EAAYC,EAAU,EAAA9c,QAC/C,aAAU8c,EAAWD,EAAX,GAAuB,oBAAE,sBAAI,EAAarB,EAAb,OAAN,S,0BAG5C,YAQI,OAAOy7B,GAAW,EAAM,EAAG,UAAM,I,0BAGrC,kBAoBI,YALA,IAAAp6B,MAAkB,QAClB,IAAAC,MAAgB,EAAK,aACrB,IAAAo6B,OAAkC,GAElC,KAAa,2BAAmBr6B,EAAYC,EAAU,EAAK,QACpDm6B,GAAW,EAAMp6B,EAAYC,EAAUo6B,I,6BAGlD,YAQI,OAAOC,GAAW,EAAM,EAAG,EAAAn3C,QAAQ,I,6BAGvC,kBAoBI,YALA,IAAA6c,MAAkB,QAClB,IAAAC,MAAgB,EAAK9c,aACrB,IAAAk3C,OAAkC,GAElC,KAAa,2BAAmBr6B,EAAYC,EAAU,EAAA9c,QAC/Cm3C,GAAW,EAAMt6B,EAAYC,EAAUo6B,I,iDA6GlD,cAOqF,OAAAE,GAAA,EAAkBnuC,I,yBAEvG,gBASI,OAAWolB,EACFgpB,GAAL,EAAiCpuC,GAE5BmuC,GAAL,EAAuBnuC,I,sCAQ3B,YAAQ,OAAAquC,I,2LuFrOZ,YAYI,OlFuNmD,EAAAt3C,OAAS,EL3EgC,EAAA+G,UuF5IzD,EAAG,GvFwF0B8T,cAiDa,EAAA9T,UuFzIV,GAAQ,G,wBAG/E,YASI,OlF2MmD,EAAA/G,OAAS,EL3EgC,EAAA+G,UuFhIzD,EAAG,GvFiG0BgU,cA4Ba,EAAAhU,UuF7HV,GAAQ,G,kBAG/E,cAOiB,IAAN,ElG3EP,KkG0EQ7G,GAAK,GlGxET,MAAM,IkGwEQ,kDlGxEyBf,YkGyEpC,OAAMe,G,KACT,EAAK,KAAL,M,KACA,EAAU,EAAL,EAAKf,WAAV,M,QAEI,IAAIoB,EAAS,GACb,GlFoLkD,IAAV,EAAAP,OkFjLpC,IAFA,IAAI2oB,EAAI,EAAKxpB,WACT4W,EAAQ7V,EAEa,IAAN,EAAV6V,KACDxV,GAAUooB,GAGD,IADb5S,KAAmB,IAInB4S,GAAKA,EAGb,OAAOpoB,EAnBf,OAAO,G,mBAwBX,kBAQI,YADiE,IAAA8tB,OAAsB,GvFmGU,EAAAR,QuFlGnF,IAAAX,OAAO,KAAM,eAAOlH,GAAeqI,EAAY,MAAW,MAAO,KAAM,0BAAkBtI,K,mBAE3G,kBAOI,YAD2D,IAAAsI,OAAsB,GvF0FgB,EAAAR,QuFzFnF,IAAAX,OAAO,KAAM,eAAe,oBAARqqB,IAAyBlpB,EAAY,MAAW,MAAe,oBAARmpB,K,wBAE7F,kBAEI,YADsE,IAAAnpB,OAAsB,GvFsFK,EAAAR,QuFrFnF,IAAAX,OAAO,KAAM,eAAOlH,GAAeqI,EAAY,KAAU,KAAM,KAAM,0BAAkBtI,K,wBAEzG,kBAEI,YADgE,IAAAsI,OAAsB,GvFkFW,EAAAR,QuFjFnF,IAAAX,OAAO,KAAM,eAAe,oBAARqqB,IAAyBlpB,EAAY,KAAU,KAAc,oBAARmpB,K,8GE5I3F,YAKI9uB,QAAQ0O,MAAWqgB,GAAL,K,yBAGlB,cAMI,GAAI,IAASr3B,E,CACT,MAAsB,EAAYkQ,YAChB,MAAdc,EACK,EAAL,YAA+B,IAAchR,IAE7CgR,EAAW,UAAIhR,K,+xB0G1BvB,YAAQ,a,mBACR,cACI,KAAOxjB,G,kBAKX,YAAQ,a,mBACR,cACI,KAAOA,G,ghL1EGX,cAIkB,MACV,GALR,iCAGwC,WApB5C,WAsB+B,IAAnBioB,EAAwB,8BACxB,MAAAA,EAAkB,GACV,MAAM,GAAyB,qBAAoBA,GADpC,aAAaA,EAAb,MAN/B,OAII,kBAJJ,G,0BAWA,oDAGoB,WA/BxB,WAgCQ,gBAAc,wBAJlB,G,2BAOA,sDAG2C,WAtC/C,WAuCQ,gB/H/B8DnL,G+H+BhDM,GACd,EAAA7S,KAAO,gBAAY,OhJgrPR,IgJ/qPP,gBhJ+qPD,SgJ/qPwB,gBAAc,yBAN7C,G,oCC5BJ,YAMoB,MjJghqBA,EADZqR,EAAW,EACf,IAAK,EAAL,mBACIA,IADJ,KiJjhqBqC,OjJkhqBjC,EiJlhqBJ,MAAa,GjJohqBNA,GiJnhqBP,IAAK,EAAL,MAAgB,EAAhB,WACW,GAAPjY,EADY,EAAhB,IAGA,OAAOA,G,iBAGX,YASiB,MAFb,EAAY,GAAa,UACzB,EAAY,GAAa,UACzB,IAAK,EAAL,MAAa,EAAb,W,CAAa,QAAb,GACIm3C,EAAM,UAAIvgC,EAAKC,OACfugC,EAAM,UAAIxgC,EAAKE,QAEnB,OAAO,GAAAqgC,EAASC,I,yBA8BpB,cAMI,GAAI,IAAS1uC,EAAO,OAAO,EAC3B,GAAI,SAAyB,MAATA,GAAiB,EAAK,SAAQA,EAAM,OAAM,OAAO,EAErE,IAAK,IAAL,qB,CACI,MAAS,EAAKhJ,GACd,EAASgJ,EAAMhJ,GAEf,GAAI0wC,IAAOC,EAAX,CAEO,GAAU,MAAND,GAAoB,MAANC,EACrB,OAAO,EAIP,aAAAD,IAAsB,UAAAC,IAAsB,IAAQyC,EAAH1C,EAAqBC,GAAK,OAAO,OAClF,iBAAAD,IAAsB,cAAAC,IAAsB,IAAQp0B,EAAHm0B,EAAiBC,GAAK,OAAO,OAC9E,kBAAAD,IAAsB,eAAAC,IAAsB,IAAQp0B,EAAHm0B,EAAiBC,GAAK,OAAO,OAC9E,gBAAAD,IAAsB,aAAAC,IAAsB,IAAQp0B,EAAHm0B,EAAiBC,GAAK,OAAO,OAC9E,iBAAAD,IAAsB,cAAAC,IAAsB,IAAQp0B,EAAHm0B,EAAiBC,GAAK,OAAO,OAC9E,kBAAAD,IAAsB,eAAAC,IAAsB,IAAQp0B,EAAHm0B,EAAiBC,GAAK,OAAO,OAC9E,mBAAAD,IAAsB,gBAAAC,IAAsB,IAAQp0B,EAAHm0B,EAAiBC,GAAK,OAAO,OAC9E,iBAAAD,IAAsB,cAAAC,IAAsB,IAAQp0B,EAAHm0B,EAAiBC,GAAK,OAAO,OAC9E,oBAAAD,IAAsB,iBAAAC,IAAsB,IAAQp0B,EAAHm0B,EAAiBC,GAAK,OAAO,OAE9E,YAAAD,EAAA,KAAsB,SAAAC,EAAA,KAAsB,IAAQ,GAAHD,EAAiBC,GAAK,OAAO,OAC9E,YAAAD,EAAA,KAAsB,SAAAC,EAAA,KAAsB,IAAQ,GAAHD,EAAiBC,GAAK,OAAO,OAC9E,YAAAD,EAAA,KAAsB,SAAAC,EAAA,KAAsB,IAAQ,GAAHD,EAAiBC,GAAK,OAAO,OAC9E,YAAAD,EAAA,KAAsB,SAAAC,EAAA,KAAsB,IAAQ,GAAHD,EAAiBC,GAAK,OAAO,OAEtE,IAAI,EAAAD,EAAMC,GAAI,OAAO,GAIrC,OAAO,G,2BAGX,YAKI,GAAI,QAAc,MAAO,OACzB,I+B6S+B,EAAxB,G/B7SW,GAAL,SAAkB,YAC/B,OACI1Q,GAA4B,EAA5B,ErK5BgD,MGR7C,EiM+U6C/gC,Y,iOpM/SxD,YAI2D,OAAe,MAAX5B,EAAiBuY,GAAOvY,GAAc2X,M,yBAErG,YAImE,OAAS0iC,GAAT59B,I,8CA2JnE,cAK+E,MAAhB,aAAwB,QG1M5E,G,2DHmNX,uBAgBkE,IAAA5D,MAAiB,QAAG,IAAAC,MAAe,EAAAlP,MACjG0wC,GAAW,EAAA1wC,KAAMiP,EAAWC,GAK5B,IAHA,IAAI1Q,EAAMyQ,EACNvQ,EAAOwQ,EAAU,EAAV,EAEJ1Q,GAAOE,G,CACV,MAAWF,EAAME,IAAW,EAE5B,EAAU2Q,GADG,cAAIshC,GACev6C,GAEhC,GAAIw6C,EAAM,EACNpyC,EAAMmyC,EAAM,EAAN,MACL,MAAIC,EAAM,GAGX,OAAOD,EAFPjyC,EAAOiyC,EAAM,EAAN,GAIf,OAAO,IAAEnyC,EAAM,EAAN,I,wBAGb,yBAe8E,IAAAyQ,MAAiB,QAAG,IAAAC,MAAe,EAAAlP,MAC7G0wC,GAAW,EAAA1wC,KAAMiP,EAAWC,GAK5B,IAHA,IAAI1Q,EAAMyQ,EACNvQ,EAAOwQ,EAAU,EAAV,EAEJ1Q,GAAOE,G,CACV,MAAWF,EAAME,IAAW,EAC5B,EAAa,cAAIiyC,GACjB,EAAUhhC,EAAW1N,QAAQ4uC,EAAQz6C,GAErC,GAAIw6C,EAAM,EACNpyC,EAAMmyC,EAAM,EAAN,MACL,MAAIC,EAAM,GAGX,OAAOD,EAFPjyC,EAAOiyC,EAAM,EAAN,GAIf,OAAO,IAAEnyC,EAAM,EAAN,I,oDAgCb,uBAmBoC,IAAAyQ,MAAiB,QAAG,IAAAC,MAAe,EAAAlP,MACnE0wC,GAAW,EAAA1wC,KAAMiP,EAAWC,GAK5B,IAHA,IAAI1Q,EAAMyQ,EACNvQ,EAAOwQ,EAAU,EAAV,EAEJ1Q,GAAOE,G,CACV,MAAWF,EAAME,IAAW,EAE5B,EAAU2c,EADG,cAAIs1B,IAGjB,GAAIC,EAAM,EACNpyC,EAAMmyC,EAAM,EAAN,MACL,MAAIC,EAAM,GAGX,OAAOD,EAFPjyC,EAAOiyC,EAAM,EAAN,GAIf,OAAO,IAAEnyC,EAAM,EAAN,I,oRsK7Lb,cArKc,MAAV,IAAU,EAAK,EAAA+6B,iBAAL,a,CAAA,IA6G4E,EA7G5E,WACN,EAAU,cAAMpjC,GAChB,EA+KGgY,EA/Ke,UAAY0C,GA+K3B1C,EvKTP,YuKrKgB0C,GAAqD,MAAfC,GA8K/C3C,EA9KmF,kBAAY0C,GA0GhB,SA1GhDC,IA0GgD,oBAoElE,GAAqB,EAAN,GAAnC,OAAO3C,G,wLxIhMX,YAMoB,MADhB,EAAa,KACb,IAAgB,4BACLyC,GAAPxX,EADY,UAGhB,OAAOA,G,iBAGX,YAUiB,MAHb,EAAmBkY,GAAwB,MAC3C,EAAY,GAAagB,GACzB,EAAY,GAAaA,GACzB,IAAa,4B,CAAA,eACTi+B,EAAM,UAAIvgC,EAAKC,OACfugC,EAAM,UAAIxgC,EAAKE,QAEnB,OAAO,GAAAqgC,EAASC,I,qBQxEpB,YAMoE,WAAA9W,GAAiB,I,uGkIErF,gBAUQ,gBADE,EACF,IAA8BoX,EAAT,EAAK14C,IAAgBwO,GAClC,IAAAmqC,GAAmB,EAAMnqC,I,uBAGzC,gBAWQ,gBADE,EACF,IAAqC,EAAT,EAAKxO,IAAgBwO,GACzC,IAAAoqC,GAA0B,EAAMpqC,I,wCzKXhD,YAaI,OAAIob,EAAM,OAAO,EAAS,GAANA,EAAY,GAA0BA,EAAM,SAAa8X,M,wBAqBjF,YAYiD,MAA7C,GAAgC9X,EAAM,QAAtC,OAAqDrC,GAAO,EAAP,GIJ9C,G,+CJ8BX,YAU+E,OAAM,GAANqC,EAAY,GAA0BA,EAAM,U,mDAkN3H,cAUkD,OAAA4X,GAAA,EAAqB/oB,I,kZA0OvE,YAM4D,OAA6BmpB,GAA7B,KAAM,Q,qCAQlE,YAMqD,OAAM,EAAAh6B,M,KACvD,EADiD,OAC5C85B,K,KACL,E,QAFiD,OAGzC7c,GAAa,K,iBAWzB,cAKI,OAAA9O,EAAoB,kBAApBA,G,gBAEJ,cAOI,SAAI,EAAKxY,UAAT,EAAoBokC,GAAM/pB,O,CAA+B,MAApB,GAAc,GAAc,cAAS,EAAAC,MAAY,EAAAC,QAAtF,EI9hBO,EJ8hBP,U,gBAEJ,cAOI,SAAI,EAAKva,UAAT,EAA0Bs7C,GAANjvB,O,CAAuC,MAApB,GAAc,GAAc,QAAnE,EIviBO,EJuiBP,U,gBAEJ,cAOI,SAAI,EAAKrsB,UAAT,EAA0B,GAANqsB,O,CAAuC,MAApB,GAAc,GAAcrC,GAAO,EAAP,GAAnE,EIhjBO,EJgjBP,U,gBAEJ,cAOwB,MAApB,GAAc,GAAd,OAA4B,QAAgBqa,GIzjBrC,I,gBJ2jBX,cAOwB,MAApB,GAAc,GAAd,OAA4B,oBIlkBrB,G,iBJ6mBX,cAOwB,MAAf/c,GAAL,UAsCA,kBAtC+C+c,GIpnBxC,I,iBJsnBX,cAQwB,MAAf/c,GAAL,UAqCU,GAAL,EAAA4C,KAAK,GArCsCma,GI9nBzC,I,iBJgoBX,cAQwB,MAAf/c,GAAL,UAoCU,GAAL,EAAA4C,KAAK,GApCsCma,GIxoBzC,I,iBJ0oBX,cAQwB,MAAf/c,GAAL,UAmCU,GAAL,EAAA4C,KAAK,GAnCsCma,GIlpBzC,I,4KuKyFX,cAII,OtJ+iPe,IsJ/iPXnnB,EtJ+iPG,OsJ9iPI,oBAAmBgC,GAAThC,IAEVq+B,GAAc,I,qBAG7B,cAII,MAAmB,GAATr+B,GACV,OAAI1Y,E1KwCqDxE,U0KrC9Cu7C,GAAc,GAFd,oBAAU/2C,I,6CAmBzB,cAKkF,OAAA+/B,GAAA,EAAc5sB,GAAW,I,uBAuB3G,YAKiD,GAAI,EAAA3X,UAAW,MAAM,IAAA8X,GAAuB,kBAA5C,OAAmE,mBAAS,I,6BAE7H,YAKwD,OAAI,EAAA9X,UAAW,KAAU,mBAAS,I,qDAS1F,YAKuD,OAAI,EAAAA,UAAW,KAAU,mBAAS,Q,6CASzF,cAK8E,YAAc2X,GAAW,I,sBChPvG,YAK+C,WAAA6jC,GAAqB,I,sBAEpE,YAM6D,WAAAC,GAAa,I,wF5IxB1E,YAKuD,OAAkBC,GAAc,IAAd,IAAT,eAAE,aAAF,O,uEA6BhE,cAOmF,OAAAz8B,IAAS,wB,MAAA,qB,OAAA,iC,yCAkB5F,YAQ8D,YAAQ,K,iBAStE,YAYiB,MAFb,EAAY,KACZ,EAAY,KACZ,IAAa,4B,CAAA,eACT27B,EAAM,UAAIvgC,EAAKC,OACfugC,EAAM,UAAIxgC,EAAKE,QAEnB,OAAO,GAAAqgC,EAASC,I,oBAGpB,YAQqD,YAAS,O,6ZAsf9D,YAWI,OAA2Da,GAApD,IAAAnW,GAAkBE,GAAc,gBAAE,eAAF,O,4BAG3C,cAeI,OAAY,MAARmD,EACA,KAEA,IAAArD,IAAkB,eAAE,WAAQE,GAAV,O,oHLhnB1B,YAMmD,OAAIvoB,EAAS,OAAO,EAAYi6B,GAATj6B,GAAsBnC,M,wBAmBhG,YAKiE,OAASH,GAATsC,EAAsB,GAA0BA,EAAS,U,+CAkB1H,YAKmE,OAAStC,GAATsC,EAAsB,GAA0BA,EAAS,U,wBAE5H,YAMyD,OAAe,MAAXzc,EAAiBua,GAAMva,GAAcsa,M,wBAElG,YAQI,OAAgBtC,GAATyE,EAAyB,O,iROnGpC,gBD0BI,KCjBQspB,EAAU,OAAO,GDmBrB,MAAM,GAfO,sBAe0BnkC,YClB3C,OAAOs5C,GAAoB96C,EAAGF,EAAG6lC,I,qBA6DrC,YD7CI,KCsDQA,EAAU,OAAO,GDpDrB,MAAM,GAfO,sBAe0BnkC,YCqD3C,OAAO,IAAAuX,IAAW,kBAAU,OAAA+hC,GAAoB96C,EAAGF,EAAG,MAApC,O,gBA6GtB,cAOI,WAAAiZ,IAAW,sBACP,MAAsB,EAAUtN,QAAQzL,EAAGF,GAA3C,OACuB,IAAnBomC,EAAsBA,EAAqB,EAAWz6B,QAAQzL,EAAGF,MAF9D,S,0BAKf,cAOI,WAAAiZ,IAAc,sBACV,MAAsB,EAAoBtN,QAAQzL,EAAGF,GAArD,OACuB,IAAnBomC,EAAsBA,EAAqB,EAAWz6B,QAAQ3L,EAAGE,MAF3D,S,sBAMlB,YAOI,WAAA+Y,IAAW,kBAEH,OAAA/Y,IAAMF,EAAK,EACX,MAAAE,GAAc,EACd,MAAAF,EAAa,EACL,EAAW2L,QAAQzL,EAAGF,MAL3B,O,gDAkBf,YAOI,WAAAiZ,IAAW,kBAEH,OAAA/Y,IAAMF,EAAK,EACX,MAAAE,EAAa,EACb,MAAAF,GAAc,EACN,EAAW2L,QAAQzL,EAAGF,MAL3B,O,+CAgCf,YAM+D,IAEJ,EACA,EAFvD,gBAD2D,EAC3D,IAAyB,EAAKqZ,WAC9B,EAF2D,EAE3D,MAAuD,2BACvD,EAH2D,EAG3D,MAAuD,2BAC/C,IAAA4hC,GAAmB,I,ybkCjO/B,cAaI,WAAAC,GAA0Dn4B,GAAzCo4B,GAA6B,EAAAv4B,IAA2B,O,2BAE7E,gBAcI,WAAAs4B,GAAoEn4B,GAAnD,KAA6BE,EAAUL,IAA2B,O,0BAEvF,cAU6CG,GAAzCo4B,GAA6B,EAAAv4B,IAtE7B,mBDgDQ,IAAAC,GCsBsD,Q,0BAGlE,gBAWuDE,GAAnD,KAA6BE,EAAUL,IApFvC,mBDgDQ,IAAAC,GCoCgE,Q,mT+GvE5E,cAW2C,IAAI,EAGd,EAL7B,OAAI,SAAAtI,EAAA,IAEWA,EAAI,iBAAS,EAAKA,MAAM,SAAI,EAAJA,EAAI,gBAAQ,GAAZ,MAA6B,KAGzD,EAAKA,MAAQA,EAAK,wBAAe,M,+BAGhD,cAUI,OAAI,SAAAA,EAAA,IACWA,EAAI,iBAAS,EAAKA,MAAQ,MAAAA,EAAI,gBAAQ,GAAe,KAA2B,EAEpF,EAAKA,MAAQA,EAAK,KAA2B,G,q4BI9E5D,0C,kKGsTA,YAawC,UAAa0tB,EAAK3iC,QAAS2iC,EAAK,WAAI,IAAI3iC,U,yQG3ThF,cASgD,YAAS,UAAI8hC,I,2FA+C7D,cASmD,YAAU,oBAAKA,I,sEAsClE,cASI,OADA,oBAAUjkC,E3I4+FH2b,S2I3+FA3b,G,sBAGX,cAKsD,O3I2iG3C,IAAA2xC,G2I3iG2C,oBAAUprC,K,sBAEhE,kBASI,YAF4C,IAAAiP,MAAiB,QAAG,IAAAC,MAAezV,EAAMuG,MACrF,oBAAUvG,E3Iy9FH2b,Q2Iz9FwBnG,EAAWC,GACnCzV,G,6IEtHX,cAM6E,WAAAi4C,GAAgB,EAAMpS,I,4HiDxBnG,cAcW,MADP,IAAK,qBAAW7pC,GAAQ,MAAM,IAAAssB,GAAmB,6BzHjBzC,EAAA6B,ayHkBR,OAAO,WAAAnuB,EAAA,W,oBAMX,cAakC,MAA9B,OAAW,qBAAWA,GAAQ,WAAAA,EAAA,UAAgB,M,mR9CJlD,kBAaW,MAAP,OAAO,4BAAOA,EAAOigB,EAAYC,GAA1B,Y,kBAGX,cAIiB,MAAb,IAAK,EAAL,MAAalgB,EAAb,W,CAAa,MAAAA,EAAb,GACI,iBAAOyY,GACX,OAAO,G,kDrJrDX,YAY6B,MAAlByxB,GAAQ,EAAM,IACjB,GzC0EE,EyC1EO,EAAG,MAAM,GAAyB,0DAD/C,OzC4EO,G,sByCvEX,cAcW,uBAAiBlgC,IAAU,MAAM,GAAyB,4BAAO,GAAP,sCAA+CA,GAAhH,OAAO,G,4BAGX,YAY6B,MAAlBkgC,GAAQ,EAAM,IAArB,OzCqEqB,GyCrEmB,EzCqEZ,EAAU,M,sDyChD1C,YAWI,GAAY,GAAR,MAAW,EACX,OAAO,KAAM,GAEjB,MAAM,GAAyB,OAAM,EAAN,4B,uBAGnC,cAYI,KAAc,GAAVlgC,MAAa,IACb,MAAM,GAAyB,kBAAiBA,EAAjB,2CAEnC,GAAI,EAAO,GAAK,GAAQA,EACpB,MAAM,GAAyB,SAAQ,EAAR,8CAAwDA,GAE3F,OACI,EADO,EAAO,GACd,GAAM,EAEN,KAAM,GAAO,K,qBAoFrB,YAWsC,OAAAkyC,GAAA,I,4CAgCtC,YAGyC,WAAQ,KAAKC,cAAe,EAAKC,eAAjC,qB,qBsJ3OzC,cAeI,YADyB,IAAA9R,MAAuB,KAChD+R,GAAA,EAAsB,GAAI/R,I,0DAsB9B,YAeyC,OAAAgS,GAAA,EAAc,K,mDAgBvD,cAMI,YAD4B,IAAApoB,MAAiB,QAaxC,GAXA,GADLK,GAAa,IACJ,gBAEG,OAAGgW,GAAH3rB,GAEQA,EAAGxb,OAAS,EAAOA,OAAU,EACrBwb,EAGR,EAASA,KAGX,MAXT,O,kBEgVb,cAIiB,MAAb,IAAK,EAAL,MAAa5e,EAAb,W,CAAa,MAAAA,EAAb,GACI,iBAAOyY,GACX,OAAO,G,kBAGX,cAIiB,MAAb,IAAK,EAAL,MAAazY,EAAb,W,CAAa,MAAAA,EAAb,GACI,iBAAOyY,GACX,OAAO,G,0YpJtSX,cA5DI,IAJA,IAAIwH,EAAa,EACbC,EAAW,EAAA9c,OAAS,EAAT,EACX+nC,GAAa,EAEVlrB,GAAcC,G,CACjB,MAAiBirB,EAA4BjrB,EAAhBD,EAC7B,EA6DgE,OA7D1C,eAAKtI,MAE3B,GAAKwzB,E,CAMD,IAAK5a,EACD,MAEArQ,IAAY,EAAZ,OARCqQ,EAGDtQ,IAAc,EAAd,EAFAkrB,GAAa,EAyDoC,OA9CtD,EAAA1rB,YAAA,EAAYQ,EAAYC,EAAW,EAAX,I,gBAgDnC,cAjEI,IAwBC,MAAsB,EAAtB,4BA5BGD,EAAa,EACbC,EAAW,EAAA9c,OAAS,EAAT,EACX+nC,GAAa,EAEVlrB,GAAcC,G,CACjB,MAAiBirB,EAA4BjrB,EAAhBD,EAC7B,EAkEoD,OAlE9B,eAAKtI,MAE3B,GAAKwzB,E,CAMD,IAAK5a,EACD,MAEArQ,IAAY,EAAZ,OARCqQ,EAGDtQ,IAAc,EAAd,EAFAkrB,GAAa,EA8DwB,OAnD1C,EAAA1rB,YAAA,EAAYQ,EAAYC,EAAW,EAAX,GAOQ3d,Y,qBA8C3C,cAGsE,M,KA3C/C,YAAL,GAAK,SAAL,wBAAd,IAAK,IAAL,cACI,IA0C0E,OA1C3D,eAAKoV,M,CAChB,EAAO,EAAA8H,YAAA,EAAY9H,EAAO,EAAAvU,QAA1B,QAER,EAAO,S,GAuC2D,U,2CAOtE,cAGoE,M,KApClD,MAAd,IAAc,EAAa,GAAR,OAAL,wB,CAAA,eACV,IAmCsE,OAnCvD,eAAKuU,M,CAChB,EAAO,EAAA8H,YAAA,EAAY,EAAG9H,EAAQ,EAAR,GAAtB,SAER,EAAO,S,GAgCyD,U,8DAkBpE,YAGoD,M,KA1E7B,YAAL,GAAK,SAAL,wBAAd,IAAK,IAAL,cACI,IAAK,GAAD,EAAW,eAAKA,M,CAChB,EAAO,EAAA8H,YAAA,EAAY9H,EAAO,EAAAvU,QAA1B,QAER,EAAO,S,GAsEyC,U,mBAQpD,YAGkD,M,KApEhC,MAAd,IAAc,EAAa,GAAR,OAAL,wB,CAAA,eACV,IAAK,GAAD,EAAW,eAAKuU,M,CAChB,EAAO,EAAA8H,YAAA,EAAY,EAAG9H,EAAQ,EAAR,GAAtB,SAER,EAAO,S,GAgEuC,U,qFAkElD,gBAUK,MAAD,YADkC,IAAAyzB,MAAgB,IAC3BmR,GAAtB,6BAA6Bn5C,EAAQgoC,GAAS7oC,Y,sIAuJnD,qBAImD,IAAAi6C,MAAgC,GAC/E,MAAY,KAAQxQ,GACpB,OAAqB,IAAVr0B,EAAa6kC,EL1MoE,EAAAryC,UK0M/B,EAAGwN,I,2BAGpE,qBAIqD,IAAA6kC,MAAgC,GACjF,MAAY,KAAQxQ,GACpB,OAAqB,IAAVr0B,EAAa6kC,ELnNoE,EAAAryC,UKmN/B,EAAGwN,I,0BAGpE,qBAIkD,IAAA6kC,MAAgC,GAC9E,MAAY,KAAQxQ,GACpB,OAAqB,IAAVr0B,EAAa6kC,EL5NoE,EAAAryC,UK4N/BwN,EAAQ,EAAR,EAAW,EAAAvU,S,0BAG5E,qBAIoD,IAAAo5C,MAAgC,GAChF,MAAY,KAAQxQ,GACpB,OAAqB,IAAVr0B,EAAa6kC,ELrOoE,EAAAryC,UKqO/BwN,EAAQq0B,EAAU5oC,OAAlB,EAA0B,EAAAA,S,+BAG3F,qBAIuD,IAAAo5C,MAAgC,GACnF,MAAY,KAAYxQ,GACxB,OAAqB,IAAVr0B,EAAa6kC,EL9OoE,EAAAryC,UK8O/B,EAAGwN,I,+BAGpE,qBAIyD,IAAA6kC,MAAgC,GACrF,MAAY,KAAYxQ,GACxB,OAAqB,IAAVr0B,EAAa6kC,ELvPoE,EAAAryC,UKuP/B,EAAGwN,I,8BAGpE,qBAIsD,IAAA6kC,MAAgC,GAClF,MAAY,KAAYxQ,GACxB,OAAqB,IAAVr0B,EAAa6kC,ELhQoE,EAAAryC,UKgQ/BwN,EAAQ,EAAR,EAAW,EAAAvU,S,8BAG5E,qBAIwD,IAAAo5C,MAAgC,GACpF,MAAY,KAAYxQ,GACxB,OAAqB,IAAVr0B,EAAa6kC,ELzQoE,EAAAryC,UKyQ/BwN,EAAQq0B,EAAU5oC,OAAlB,EAA0B,EAAAA,S,mDA6B3F,gBAOI,OAAAkpC,GAAA,EAAa5tB,EAAM3F,MAAO2F,EAAM1F,aAAe,EAArB,EAAwBkY,I,iDA4CtD,cAKqE,OAAAqb,GAAA,EAAY7tB,EAAM3F,MAAO2F,EAAM1F,aAAe,EAArB,I,wBAW9F,cAKI,OAAI,KAAWgD,GACJ,EAAAyD,YAAA,EAAYzD,EAAO5Y,OAAQ,EAAAA,QAE/B,EAAAqc,YAAA,EAAY,EAAG,EAAArc,S,wBAG1B,cAKI,OAAI,KAAW4Y,GL5X8D,EAAA7R,UK6XxD6R,EAAO5Y,QAErB,G,wBAGX,cAKI,OAAI,KAAS2uB,GACF,EAAAtS,YAAA,EAAY,EAAG,EAAArc,OAAS2uB,EAAO3uB,OAAhB,GAEnB,EAAAqc,YAAA,EAAY,EAAG,EAAArc,S,wBAG1B,cAKI,OAAI,KAAS2uB,GL/Y+E,EAAA5nB,UKgZvE,EAAG,EAAA/G,OAAS2uB,EAAO3uB,OAAhB,GAEjB,G,6FA2BX,cAKmF,OAAAq5C,GAAA,EAAkBzQ,EAAWA,I,6BAEhH,cAKuE,YAAkBA,EAAWA,I,yBAEpG,uBAIsE,IAAAwQ,MAAgC,GAClG,IA5JC,EA4JD,EAAY,KAAQxQ,GACpB,OAAqB,IAAVr0B,EAAa6kC,EA7JDlQ,GAAtB,4BA6J+D,EAAG30B,EAAOuZ,GA7JH3uB,Y,yBAgK3E,uBAIwE,IAAAi6C,MAAgC,GACpG,IArKC,EAqKD,EAAY,KAAQxQ,GACpB,OAAqB,IAAVr0B,EAAa6kC,EAtKDlQ,GAAtB,4BAsK+D,EAAG30B,EAAOuZ,GAtKH3uB,Y,wBAyK3E,uBAIqE,IAAAi6C,MAAgC,GACjG,IACO,EADP,EAAY,KAAQxQ,GACb,IAAc,IAAVr0B,EAAJ,EAAiB6kC,M,CAA2B,IA/KlD,EA+KkD,EAAa7kC,EAAQ,EAAR,EAAb,EAAwB,EAAAvU,OAApE,EA/KgBkpC,GAAtB,4BAAmCrsB,EAAYC,EA+KmCgR,GA/KZ3uB,WA+KvE,OAAO,G,wBAGX,uBAIuE,IAAAi6C,MAAgC,GACnG,IACO,EADP,EAAY,KAAQxQ,GACb,IAAc,IAAVr0B,EAAJ,EAAiB6kC,M,CAA2B,IAxLlD,EAwLkD,EAAa7kC,EAAQq0B,EAAU5oC,OAAlB,EAAb,EAAuC,EAAAA,OAAnF,EAxLgBkpC,GAAtB,4BAAmCrsB,EAAYC,EAwLkDgR,GAxL3B3uB,WAwLvE,OAAO,G,4BAGX,uBAI2E,IAAAi6C,MAAgC,GACvG,IACO,EADP,EAAY,KAAYxQ,GACjB,IAAc,IAAVr0B,EAAJ,EAAiB6kC,M,CAA2B,IAjMlD,EAiMkD,EAAa7kC,EAAQq0B,EAAU5oC,OAAlB,EAAb,EAAuC,EAAAA,OAAnF,EAjMgBkpC,GAAtB,4BAAmCrsB,EAAYC,EAiMkDgR,GAjM3B3uB,WAiMvE,OAAO,G,4BAGX,uBAIyE,IAAAi6C,MAAgC,GACrG,IACO,EADP,EAAY,KAAYxQ,GACjB,IAAc,IAAVr0B,EAAJ,EAAiB6kC,M,CAA2B,IA1MlD,EA0MkD,EAAa7kC,EAAQ,EAAR,EAAb,EAAwB,EAAAvU,OAApE,EA1MgBkpC,GAAtB,4BAAmCrsB,EAAYC,EA0MmCgR,GA1MZ3uB,WA0MvE,OAAO,G,6BAGX,uBAI0E,IAAAi6C,MAAgC,GACtG,IAlNC,EAkND,EAAY,KAAYxQ,GACxB,OAAqB,IAAVr0B,EAAa6kC,EAnNDlQ,GAAtB,4BAmN+D,EAAG30B,EAAOuZ,GAnNH3uB,Y,6BAsN3E,uBAI4E,IAAAi6C,MAAgC,GACxG,IA3NC,EA2ND,EAAY,KAAYxQ,GACxB,OAAqB,IAAVr0B,EAAa6kC,EA5NDlQ,GAAtB,4BA4N+D,EAAG30B,EAAOuZ,GA5NH3uB,Y,+HA+U3E,kBAII,YADsE,IAAAkvB,OAAsB,GACvFA,GAAc,oBAAkB,iBAAAzV,EAG1BmW,GAAkB,EAAAlS,EAAYjE,EAAQ,EAAGA,EAAO5Y,OAAQquB,GAFnD,GAAL,EAAgBzV,EAAQiE,I,mDAkBvC,qBAQ8D,IAAAwR,OAAsB,GAIhF,IAHA,MbnnBO9V,EAAO7a,IamnBa,EAAKsC,OAAQiJ,EAAMjJ,QAE1CC,EAAI,EACDA,EAAIq5C,GAA0B,GAAR,aAAKr5C,GAAUgJ,EAAA,WAAMhJ,GAAiBouB,IAC/DpuB,IAAA,IAKJ,OAHSs5C,GAAL,EAAwBt5C,EAAI,EAAJ,IAAgBs5C,GAANtwC,EAAyBhJ,EAAI,EAAJ,MAC3DA,IAAA,KAEG,EAAAoc,YAAA,EAAY,EAAGpc,GAAGd,Y,4BAG7B,qBAQ8D,IAAAkvB,OAAsB,GAMhF,IALA,MAAiB,EAAKruB,OACtB,EAAkBiJ,EAAMjJ,OACxB,Eb1oBOuY,EAAO7a,Ia0oBa87C,EAAYC,GAEnCx5C,EAAI,EACDA,EAAIq5C,GAA2C,GAAzB,aAAKE,EAAav5C,EAAI,EAAjB,GAA2BgJ,EAAA,WAAMwwC,EAAcx5C,EAAI,EAAlB,GAAmCouB,IAClGpuB,IAAA,IAKJ,OAHSs5C,GAAL,EAAwBC,EAAav5C,EAAI,EAAjB,IAA6Bs5C,GAANtwC,EAAyBwwC,EAAcx5C,EAAI,EAAlB,MACxEA,IAAA,KAEG,EAAAoc,YAAA,EAAYm9B,EAAav5C,EAAb,EAAgBu5C,GAAYr6C,Y,2EAoGnD,kBAaI,YAD2D,IAAA0d,MAAkB,QAAG,IAAAwR,OAAsB,GACtGqa,GAAA,EAAUP,EAAStrB,EAAYwR,GAAmB,I,yBAEtD,kBAaI,YAD+D,IAAAxR,MAAkB,YAAW,IAAAwR,OAAsB,GAClHqa,GAAA,EAAUP,EAAStrB,EAAYwR,GAAmB,I,sBAEtD,kBAYI,oBAD4D,IAAAxR,MAAkB,QAAG,IAAAwR,OAAsB,GACvG,kBAAAqa,GAAA,EAAUP,EAAStrB,EAAYwR,GAAmB,IAAlD,iBAAoE,G,0BAExE,kBAaI,oBADgE,IAAAxR,MAAkB,YAAW,IAAAwR,OAAsB,GACnH,kBAAAqa,GAAA,EAAUP,EAAStrB,EAAYwR,GAAmB,IAAlD,iBAAmE,G,oHA+DvE,gBAOI,YAD2D,IAAAA,OAAsB,GAC7E,iBAAAplB,EACA,KAAQA,OAAR,EAA4BolB,IAAe,EAE3C,KAAQplB,EAAO,EAAG,EAAAjJ,OAAQquB,IAAe,G,oBAIjD,gBAOI,YADkD,IAAAA,OAAsB,GACxE,KAAQtC,OAAR,EAA2BsC,IAAe,G,6CAgI9C,kBAYI,QADqD,IAAAA,OAAsB,QAAO,IAAAvV,MAAa,GACxE,IAAnB2vB,EAAW,O,CACX,MAAgBA,EAAW,GAC3B,GA/+BsD,IA++BjDG,EA/+BuC5oC,OAg/BxC,OAAO,KAAM4oC,EAAWva,EAAYvV,GAI8C,I1CsT7E,E0CtT6E,EAAb,GAAtE,KAAkB2vB,OAAlB,EAA2Cpa,EAAoBvV,I1C+O/D,EAAM,GAAaL,GAAwB,OAuElD,IAAa,4B,CAAA,eACTnD,EAAY,U0CvTgF,K1CuTlED,I0CvT9B,O1CwTOC,G,2B0CrTX,kBAQI,YAD6D,IAAA+Y,OAAsB,QAAO,IAAAvV,MAAa,GACjC,GAAtE4gC,GAAkB,EAAAjR,OAAlB,EAA2Cpa,EAAoBvV,IAAW,gBAAE,YAAU0C,MAAZ,O,iBAE9E,kBAQI,QADmD,IAAA6S,OAAsB,QAAO,IAAAvV,MAAa,GACtE,IAAnB2vB,EAAW,OACX,OAAO,KAAoB,oBAAdA,EAAW,IAAepa,EAAYvV,GAGmC,I1C6R7E,E0C7R6E,EAAb,GAAtE4gC,GAAkB,EAAAjR,OAAlB,EAA2Cpa,EAAoBvV,I1CsN/D,EAAM,GAAaL,GAAwB,OAuElD,IAAa,4B,CAAA,eACTnD,EAAY,U0C9RgF,K1C8RlED,I0C9R9B,O1C+ROC,G,oJ0CjLX,YAU+C,OAAM,G,IACjD,OAD2C,OACjC,E,IACV,QAF2C,OAEhC,E,QACH,MAAM,GAAyB,iDAAgD,K,iCAG3F,YAUsD,OAAM,G,IACxD,OADkD,OACxC,E,IACV,QAFkD,OAEvC,E,QAFuC,OAG1C,O,2CqJx7CZ,0C,oQzKoyB2B,YAAQ,OAAAs0B,GAAA,S,2BAMP,YAAQ,mB,2BAUN,YAAQ,mB,4BAMV,YAAQ,OAAAA,GAAA,S,4BAMP,YAAQ,mB,4BAUN,YAAQ,mB,4BAMX,YAAQ,OAAAA,GAAA,S,4BAMP,YAAQ,mB,4BAUN,YAAQ,mB,uBAMhB,YAAQ,OAAAA,GAAA,S,uBAMP,YAAQ,mB,uBAUN,YAAQ,mB,uBAMX,YAAQ,OAAAA,GAAA,S,uBAMP,YAAQ,mB,uBAUN,YAAQ,mB,qBAMb,YAAQ,OAAAA,GAAA,S,qBAMP,YAAQ,mB,qBAUN,YAAQ,mB,oBAMZ,YAAQ,OAAAA,GAAA,S,oBAMP,YAAQ,mB,oBAUN,YAAQ,mB,6T6Kr6B3B,0C,mVGiDJ,cAUI,OAA2C,IAA3C+P,GAA6B,gBAAO/8C,GAAOg9C,e,sGCpE3C,wDAG6C,UAAKlM,EAAOC,EAAO,GAHhE,G,iDGcJ,YAG2C,WAAAS,GAAoBxxC,I,sSEsJ/D,cAaI,OAA+E6F,EAA9E,IAAyB,EAAb2nB,IAAgC,IAAZ,KAAuB,GAAkB,EAAbA,K,uBAEjE,cAaI,OAA+E3nB,EAA9E,GAAY,GAAkB,EAAb2nB,IAAiC,IAAZ,MAAoC,EAAbA,K,sBA8ClE,cAaI,OAAoF5nB,EAAnF,IAAyB,GAAb4nB,IAAiC,MAAZ,KAAyB,IAAmB,GAAbA,K,uBAErE,cAaI,OAAoF5nB,EAAnF,GAAY,IAAmB,GAAb4nB,IAAkC,MAAZ,MAAsC,GAAbA,K,8LClPtE,YAI8C,WAAO,EAAAhT,MAAO,EAAAC,U,+BA6B5D,YAImD,WAAO,EAAAD,MAAO,EAAAC,OAAQ,EAAA03B,S,+QtLlBzE,YAEI,OAAE,GAAF1xC,GAAa,UACbA,GN+RuCmyC,GM/RlC,KAAKppC,UN+R0CmH,MM/RlB,KAAKnH,UACvC/I,GN8RuCmyC,GM9RlC,KAAKnpC,UN8R0CkH,MM9RlB,KAAKlH,UNsUJ,IAAAuX,GMrUnCvgB,GAAK,WAAmB,EAAFA,GNYyC,IAyT5BugB,GMpUP,EAAnBvgB,EAAI,aNWkDkQ,KAAgB,IAyT5CqQ,GMpUY,YNWgCrQ,KAAX,I,ubMRxE,YAEI,OAAE,GAAFlQ,GAAa,oBACbA,GOyRuC0yC,GPzRlC,KAAM3pC,UOyR0CmH,MPzRlB,KAAMnH,UACzC/I,GOwRuC0yC,GPxRlC,KAAM1pC,UOwR0CkH,MPxRlB,KAAMlH,UACzChJ,EAAA,aO2UsC,IAAA2oC,GP3Ud,kBAAF3oC,IOMiC,IAAA2oC,GAAW,IAqU5BA,GPxUF,kBAA3B3oC,EAAI,qBOGqDkQ,KAAK,IAAW,IPHzB,qBOGyBA,Q,yX2L1EtF,cAQ2D,OAAa,GzM+PlB,IyM/PK,EzM+PjB,KyM/PuC3G,I,oBAEjF,cAQ4D,OAAa,GvMsPnB,MuMtPM,EvMsPlB,KuMtPwCA,I,oBAGlF,cAQ0D,OAAc,GxMwQ5B,ewMxQc,ExMwQnB2G,MAAA,OwMxQ0C3G,I,mBAEjF,cAOgD,UAAc,E3LgQvB2G,K2LhQsCkU,GAAW7a,K,mBAGxF,YAMqC,sBAAAizC,GAAA,MAAmBhD,GAAkB,I,mBAE1E,cAO+C,2BAAcjwC,IAAd,EAAwBiwC,GAAkB,I,oBAGzF,YAMuC,sBAAAiD,GAAA,MAAoBjD,GAAkB,I,oBAE7E,cAOiD,2BAAejwC,IAAf,EAAyBiwC,GAAkB,I,kBAE5F,YAMmC,sBAAAkD,GAAA,MAAkBlD,GAAkB,I,kBAEvE,cAO6C,2BAAajwC,IAAb,EAAuBiwC,GAAkB,I,mBAEtF,YAMqC,sBAAAmD,GAAA,MAAmBnD,GAAkB,I,mBAE1E,cAO+C,2BAAcjwC,IAAd,EAAwBiwC,GAAkB,I,+pDiBpG3D,kB,GAGD,kB,GrJmBqB,KQ8C9C,OAAe,oBAAZ,SAA2B,QAAO,YAAe,QAAO,SAAS,K,GAChElmB,GAAQ,IAAAspB,GAAhB,QAA6B,QAA2B,IAAAC,G,U8I1EJ,MAAuB,Y/KkKhE,M+KhKX,O/K+JIjY,G+KhKA1hC,G/KiKO,S+KjKPA,E/KiKO3D,QAAA,mB+KhKX,M,GhPwYsD,EAAWsK,IkHzYlC,GAAS,I,GlHyYc,EAAWA,IkHxYlC,GAAS,I,GMoEV,WAA8B,EAA9B,M,G9E2Nc,IAAAwP,IAAmB,cAAU,OAAE1I,GAAFrQ,EAAYF,GAAgB,M,GwFtJlD,eAAiBgF,EAAL,KAAoBA,EAAL,KAAoBA,EAAL,O,GAwDxD,M,GvGwwBA,I,qBsC33BzB,IAAA6d,G0IoCkC,M,gCrM9HhC,UAAW,CAAC,IAAZ,mB,qF2ODV65B,EAA2B,GAG/B,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqB7qC,IAAjB8qC,EACH,OAAOA,EAAa/9C,QAGrB,IAAIC,EAAS29C,EAAyBE,GAAY,CAGjD99C,QAAS,IAOV,OAHAg+C,EAAoBF,GAAU76C,KAAKhD,EAAOD,QAASC,EAAQA,EAAOD,QAAS69C,GAGpE59C,EAAOD,QClBW69C,CAAoB,K,MDF1CD","file":"astar-kotlin-js.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"astar-kotlin-js\"] = factory();\n\telse\n\t\troot[\"astar-kotlin-js\"] = factory();\n})(this, function() {\nreturn ","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"MapsKt\")\n@file:OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n\npackage kotlin.collections\n\nimport kotlin.contracts.*\n\nprivate object EmptyMap : Map<Any?, Nothing>, Serializable {\n    private const val serialVersionUID: Long = 8246714829545688274\n\n    override fun equals(other: Any?): Boolean = other is Map<*, *> && other.isEmpty()\n    override fun hashCode(): Int = 0\n    override fun toString(): String = \"{}\"\n\n    override val size: Int get() = 0\n    override fun isEmpty(): Boolean = true\n\n    override fun containsKey(key: Any?): Boolean = false\n    override fun containsValue(value: Nothing): Boolean = false\n    override fun get(key: Any?): Nothing? = null\n    override val entries: Set<Map.Entry<Any?, Nothing>> get() = EmptySet\n    override val keys: Set<Any?> get() = EmptySet\n    override val values: Collection<Nothing> get() = EmptyList\n\n    private fun readResolve(): Any = EmptyMap\n}\n\n/**\n * Returns an empty read-only map of specified type.\n *\n * The returned map is serializable (JVM).\n * @sample samples.collections.Maps.Instantiation.emptyReadOnlyMap\n */\npublic fun <K, V> emptyMap(): Map<K, V> = @Suppress(\"UNCHECKED_CAST\") (EmptyMap as Map<K, V>)\n\n/**\n * Returns a new read-only map with the specified contents, given as a list of pairs\n * where the first value is the key and the second is the value.\n *\n * If multiple pairs have the same key, the resulting map will contain the value from the last of those pairs.\n *\n * Entries of the map are iterated in the order they were specified.\n *\n * The returned map is serializable (JVM).\n *\n * @sample samples.collections.Maps.Instantiation.mapFromPairs\n */\npublic fun <K, V> mapOf(vararg pairs: Pair<K, V>): Map<K, V> =\n    if (pairs.size > 0) pairs.toMap(LinkedHashMap(mapCapacity(pairs.size))) else emptyMap()\n\n/**\n * Returns an empty read-only map.\n *\n * The returned map is serializable (JVM).\n * @sample samples.collections.Maps.Instantiation.emptyReadOnlyMap\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> mapOf(): Map<K, V> = emptyMap()\n\n/**\n * Returns an empty new [MutableMap].\n *\n * The returned map preserves the entry iteration order.\n * @sample samples.collections.Maps.Instantiation.emptyMutableMap\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> mutableMapOf(): MutableMap<K, V> = LinkedHashMap()\n\n/**\n * Returns a new [MutableMap] with the specified contents, given as a list of pairs\n * where the first component is the key and the second is the value.\n *\n * If multiple pairs have the same key, the resulting map will contain the value from the last of those pairs.\n *\n * Entries of the map are iterated in the order they were specified.\n *\n * @sample samples.collections.Maps.Instantiation.mutableMapFromPairs\n * @sample samples.collections.Maps.Instantiation.emptyMutableMap\n */\npublic fun <K, V> mutableMapOf(vararg pairs: Pair<K, V>): MutableMap<K, V> =\n    LinkedHashMap<K, V>(mapCapacity(pairs.size)).apply { putAll(pairs) }\n\n/**\n * Returns an empty new [HashMap].\n *\n * @sample samples.collections.Maps.Instantiation.emptyHashMap\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> hashMapOf(): HashMap<K, V> = HashMap<K, V>()\n\n/**\n * Returns a new [HashMap] with the specified contents, given as a list of pairs\n * where the first component is the key and the second is the value.\n *\n * @sample samples.collections.Maps.Instantiation.hashMapFromPairs\n */\npublic fun <K, V> hashMapOf(vararg pairs: Pair<K, V>): HashMap<K, V> = HashMap<K, V>(mapCapacity(pairs.size)).apply { putAll(pairs) }\n\n/**\n * Returns an empty new [LinkedHashMap].\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> linkedMapOf(): LinkedHashMap<K, V> = LinkedHashMap<K, V>()\n\n/**\n * Returns a new [LinkedHashMap] with the specified contents, given as a list of pairs\n * where the first component is the key and the second is the value.\n *\n * If multiple pairs have the same key, the resulting map will contain the value from the last of those pairs.\n *\n * Entries of the map are iterated in the order they were specified.\n *\n * @sample samples.collections.Maps.Instantiation.linkedMapFromPairs\n */\npublic fun <K, V> linkedMapOf(vararg pairs: Pair<K, V>): LinkedHashMap<K, V> = pairs.toMap(LinkedHashMap(mapCapacity(pairs.size)))\n\n/**\n * Builds a new read-only [Map] by populating a [MutableMap] using the given [builderAction]\n * and returning a read-only map with the same key-value pairs.\n *\n * The map passed as a receiver to the [builderAction] is valid only inside that function.\n * Using it outside of the function produces an unspecified behavior.\n *\n * Entries of the map are iterated in the order they were added by the [builderAction].\n *\n * @sample samples.collections.Builders.Maps.buildMapSample\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> buildMap(@BuilderInference builderAction: MutableMap<K, V>.() -> Unit): Map<K, V> {\n    contract { callsInPlace(builderAction, InvocationKind.EXACTLY_ONCE) }\n    return buildMapInternal(builderAction)\n}\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\ninternal expect inline fun <K, V> buildMapInternal(builderAction: MutableMap<K, V>.() -> Unit): Map<K, V>\n\n/**\n * Builds a new read-only [Map] by populating a [MutableMap] using the given [builderAction]\n * and returning a read-only map with the same key-value pairs.\n *\n * The map passed as a receiver to the [builderAction] is valid only inside that function.\n * Using it outside of the function produces an unspecified behavior.\n *\n * [capacity] is used to hint the expected number of pairs added in the [builderAction].\n *\n * Entries of the map are iterated in the order they were added by the [builderAction].\n *\n * @throws IllegalArgumentException if the given [capacity] is negative.\n *\n * @sample samples.collections.Builders.Maps.buildMapSample\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> buildMap(capacity: Int, @BuilderInference builderAction: MutableMap<K, V>.() -> Unit): Map<K, V> {\n    contract { callsInPlace(builderAction, InvocationKind.EXACTLY_ONCE) }\n    return buildMapInternal(capacity, builderAction)\n}\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\ninternal expect inline fun <K, V> buildMapInternal(capacity: Int, builderAction: MutableMap<K, V>.() -> Unit): Map<K, V>\n\n/**\n * Calculate the initial capacity of a map.\n */\n@PublishedApi\ninternal expect fun mapCapacity(expectedSize: Int): Int\n\n/**\n * Returns `true` if this map is not empty.\n * @sample samples.collections.Maps.Usage.mapIsNotEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<out K, V>.isNotEmpty(): Boolean = !isEmpty()\n\n/**\n * Returns `true` if this nullable map is either null or empty.\n * @sample samples.collections.Maps.Usage.mapIsNullOrEmpty\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<out K, V>?.isNullOrEmpty(): Boolean {\n    contract {\n        returns(false) implies (this@isNullOrEmpty != null)\n    }\n\n    return this == null || isEmpty()\n}\n\n/**\n * Returns the [Map] if its not `null`, or the empty [Map] otherwise.\n *\n * @sample samples.collections.Maps.Usage.mapOrEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<K, V>?.orEmpty(): Map<K, V> = this ?: emptyMap()\n\n/**\n * Returns this map if it's not empty\n * or the result of calling [defaultValue] function if the map is empty.\n *\n * @sample samples.collections.Maps.Usage.mapIfEmpty\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <M, R> M.ifEmpty(defaultValue: () -> R): R where M : Map<*, *>, M : R =\n    if (isEmpty()) defaultValue() else this\n\n/**\n * Checks if the map contains the given key.\n *\n * This method allows to use the `x in map` syntax for checking whether an object is contained in the map.\n *\n * @sample samples.collections.Maps.Usage.containsKey\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <@kotlin.internal.OnlyInputTypes K, V> Map<out K, V>.contains(key: K): Boolean = containsKey(key)\n\n/**\n * Returns the value corresponding to the given [key], or `null` if such a key is not present in the map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <@kotlin.internal.OnlyInputTypes K, V> Map<out K, V>.get(key: K): V? =\n    @Suppress(\"UNCHECKED_CAST\") (this as Map<K, V>).get(key)\n\n/**\n * Allows to use the index operator for storing values in a mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.set(key: K, value: V): Unit {\n    put(key, value)\n}\n\n/**\n * Returns `true` if the map contains the specified [key].\n *\n * Allows to overcome type-safety restriction of `containsKey` that requires to pass a key of type `K`.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes K> Map<out K, *>.containsKey(key: K): Boolean =\n    @Suppress(\"UNCHECKED_CAST\") (this as Map<K, *>).containsKey(key)\n\n/**\n * Returns `true` if the map maps one or more keys to the specified [value].\n *\n * Allows to overcome type-safety restriction of `containsValue` that requires to pass a value of type `V`.\n *\n * @sample samples.collections.Maps.Usage.containsValue\n */\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning, extension takes precedence in some cases\n@kotlin.internal.InlineOnly\npublic inline fun <K, @kotlin.internal.OnlyInputTypes V> Map<K, V>.containsValue(value: V): Boolean = this.containsValue(value)\n\n\n/**\n * Removes the specified key and its corresponding value from this map.\n *\n * @return the previous value associated with the key, or `null` if the key was not present in the map.\n\n * Allows to overcome type-safety restriction of `remove` that requires to pass a key of type `K`.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes K, V> MutableMap<out K, V>.remove(key: K): V? =\n    @Suppress(\"UNCHECKED_CAST\") (this as MutableMap<K, V>).remove(key)\n\n/**\n * Returns the key component of the map entry.\n *\n * This method allows to use destructuring declarations when working with maps, for example:\n * ```\n * for ((key, value) in map) {\n *     // do something with the key and the value\n * }\n * ```\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> Map.Entry<K, V>.component1(): K = key\n\n/**\n * Returns the value component of the map entry.\n *\n * This method allows to use destructuring declarations when working with maps, for example:\n * ```\n * for ((key, value) in map) {\n *     // do something with the key and the value\n * }\n * ```\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> Map.Entry<K, V>.component2(): V = value\n\n/**\n * Converts entry to [Pair] with key being first component and value being second.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map.Entry<K, V>.toPair(): Pair<K, V> = Pair(key, value)\n\n/**\n * Returns the value for the given key, or the result of the [defaultValue] function if there was no entry for the given key.\n *\n * @sample samples.collections.Maps.Usage.getOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<K, V>.getOrElse(key: K, defaultValue: () -> V): V = get(key) ?: defaultValue()\n\n\ninternal inline fun <K, V> Map<K, V>.getOrElseNullable(key: K, defaultValue: () -> V): V {\n    val value = get(key)\n    if (value == null && !containsKey(key)) {\n        return defaultValue()\n    } else {\n        @Suppress(\"UNCHECKED_CAST\")\n        return value as V\n    }\n}\n\n/**\n * Returns the value for the given [key] or throws an exception if there is no such key in the map.\n *\n * If the map was created by [withDefault], resorts to its `defaultValue` provider function\n * instead of throwing an exception.\n *\n * @throws NoSuchElementException when the map doesn't contain a value for the specified key and\n * no implicit default value was provided for that map.\n */\n@SinceKotlin(\"1.1\")\npublic fun <K, V> Map<K, V>.getValue(key: K): V = getOrImplicitDefault(key)\n\n/**\n * Returns the value for the given key. If the key is not found in the map, calls the [defaultValue] function,\n * puts its result into the map under the given key and returns it.\n *\n * Note that the operation is not guaranteed to be atomic if the map is being modified concurrently.\n *\n * @sample samples.collections.Maps.Usage.getOrPut\n */\npublic inline fun <K, V> MutableMap<K, V>.getOrPut(key: K, defaultValue: () -> V): V {\n    val value = get(key)\n    return if (value == null) {\n        val answer = defaultValue()\n        put(key, answer)\n        answer\n    } else {\n        value\n    }\n}\n\n/**\n * Returns an [Iterator] over the entries in the [Map].\n *\n * @sample samples.collections.Maps.Usage.forOverEntries\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> Map<out K, V>.iterator(): Iterator<Map.Entry<K, V>> = entries.iterator()\n\n/**\n * Returns a [MutableIterator] over the mutable entries in the [MutableMap].\n *\n */\n@kotlin.jvm.JvmName(\"mutableIterator\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.iterator(): MutableIterator<MutableMap.MutableEntry<K, V>> = entries.iterator()\n\n/**\n * Populates the given [destination] map with entries having the keys of this map and the values obtained\n * by applying the [transform] function to each entry in this [Map].\n */\npublic inline fun <K, V, R, M : MutableMap<in K, in R>> Map<out K, V>.mapValuesTo(destination: M, transform: (Map.Entry<K, V>) -> R): M {\n    return entries.associateByTo(destination, { it.key }, transform)\n}\n\n/**\n * Populates the given [destination] map with entries having the keys obtained\n * by applying the [transform] function to each entry in this [Map] and the values of this map.\n *\n * In case if any two entries are mapped to the equal keys, the value of the latter one will overwrite\n * the value associated with the former one.\n */\npublic inline fun <K, V, R, M : MutableMap<in R, in V>> Map<out K, V>.mapKeysTo(destination: M, transform: (Map.Entry<K, V>) -> R): M {\n    return entries.associateByTo(destination, transform, { it.value })\n}\n\n/**\n * Puts all the given [pairs] into this [MutableMap] with the first component in the pair being the key and the second the value.\n */\npublic fun <K, V> MutableMap<in K, in V>.putAll(pairs: Array<out Pair<K, V>>): Unit {\n    for ((key, value) in pairs) {\n        put(key, value)\n    }\n}\n\n/**\n * Puts all the elements of the given collection into this [MutableMap] with the first component in the pair being the key and the second the value.\n */\npublic fun <K, V> MutableMap<in K, in V>.putAll(pairs: Iterable<Pair<K, V>>): Unit {\n    for ((key, value) in pairs) {\n        put(key, value)\n    }\n}\n\n/**\n * Puts all the elements of the given sequence into this [MutableMap] with the first component in the pair being the key and the second the value.\n */\npublic fun <K, V> MutableMap<in K, in V>.putAll(pairs: Sequence<Pair<K, V>>): Unit {\n    for ((key, value) in pairs) {\n        put(key, value)\n    }\n}\n\n/**\n * Returns a new map with entries having the keys of this map and the values obtained by applying the [transform]\n * function to each entry in this [Map].\n *\n * The returned map preserves the entry iteration order of the original map.\n *\n * @sample samples.collections.Maps.Transformations.mapValues\n */\npublic inline fun <K, V, R> Map<out K, V>.mapValues(transform: (Map.Entry<K, V>) -> R): Map<K, R> {\n    return mapValuesTo(LinkedHashMap<K, R>(mapCapacity(size)), transform) // .optimizeReadOnlyMap()\n}\n\n/**\n * Returns a new Map with entries having the keys obtained by applying the [transform] function to each entry in this\n * [Map] and the values of this map.\n *\n * In case if any two entries are mapped to the equal keys, the value of the latter one will overwrite\n * the value associated with the former one.\n *\n * The returned map preserves the entry iteration order of the original map.\n *\n * @sample samples.collections.Maps.Transformations.mapKeys\n */\npublic inline fun <K, V, R> Map<out K, V>.mapKeys(transform: (Map.Entry<K, V>) -> R): Map<R, V> {\n    return mapKeysTo(LinkedHashMap<R, V>(mapCapacity(size)), transform) // .optimizeReadOnlyMap()\n}\n\n/**\n * Returns a map containing all key-value pairs with keys matching the given [predicate].\n *\n * The returned map preserves the entry iteration order of the original map.\n * @sample samples.collections.Maps.Filtering.filterKeys\n */\npublic inline fun <K, V> Map<out K, V>.filterKeys(predicate: (K) -> Boolean): Map<K, V> {\n    val result = LinkedHashMap<K, V>()\n    for (entry in this) {\n        if (predicate(entry.key)) {\n            result.put(entry.key, entry.value)\n        }\n    }\n    return result\n}\n\n/**\n * Returns a map containing all key-value pairs with values matching the given [predicate].\n *\n * The returned map preserves the entry iteration order of the original map.\n *  @sample samples.collections.Maps.Filtering.filterValues\n */\npublic inline fun <K, V> Map<out K, V>.filterValues(predicate: (V) -> Boolean): Map<K, V> {\n    val result = LinkedHashMap<K, V>()\n    for (entry in this) {\n        if (predicate(entry.value)) {\n            result.put(entry.key, entry.value)\n        }\n    }\n    return result\n}\n\n\n/**\n * Appends all entries matching the given [predicate] into the mutable map given as [destination] parameter.\n *\n * @return the destination map.\n * @sample samples.collections.Maps.Filtering.filterTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> Map<out K, V>.filterTo(destination: M, predicate: (Map.Entry<K, V>) -> Boolean): M {\n    for (element in this) {\n        if (predicate(element)) {\n            destination.put(element.key, element.value)\n        }\n    }\n    return destination\n}\n\n/**\n * Returns a new map containing all key-value pairs matching the given [predicate].\n *\n * The returned map preserves the entry iteration order of the original map.\n * @sample samples.collections.Maps.Filtering.filter\n */\npublic inline fun <K, V> Map<out K, V>.filter(predicate: (Map.Entry<K, V>) -> Boolean): Map<K, V> {\n    return filterTo(LinkedHashMap<K, V>(), predicate)\n}\n\n/**\n * Appends all entries not matching the given [predicate] into the given [destination].\n *\n * @return the destination map.\n * @sample samples.collections.Maps.Filtering.filterNotTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> Map<out K, V>.filterNotTo(destination: M, predicate: (Map.Entry<K, V>) -> Boolean): M {\n    for (element in this) {\n        if (!predicate(element)) {\n            destination.put(element.key, element.value)\n        }\n    }\n    return destination\n}\n\n/**\n * Returns a new map containing all key-value pairs not matching the given [predicate].\n *\n * The returned map preserves the entry iteration order of the original map.\n * @sample samples.collections.Maps.Filtering.filterNot\n */\npublic inline fun <K, V> Map<out K, V>.filterNot(predicate: (Map.Entry<K, V>) -> Boolean): Map<K, V> {\n    return filterNotTo(LinkedHashMap<K, V>(), predicate)\n}\n\n/**\n * Returns a new map containing all key-value pairs from the given collection of pairs.\n *\n * The returned map preserves the entry iteration order of the original collection.\n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic fun <K, V> Iterable<Pair<K, V>>.toMap(): Map<K, V> {\n    if (this is Collection) {\n        return when (size) {\n            0 -> emptyMap()\n            1 -> mapOf(if (this is List) this[0] else iterator().next())\n            else -> toMap(LinkedHashMap<K, V>(mapCapacity(size)))\n        }\n    }\n    return toMap(LinkedHashMap<K, V>()).optimizeReadOnlyMap()\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs from the given collection of pairs.\n */\npublic fun <K, V, M : MutableMap<in K, in V>> Iterable<Pair<K, V>>.toMap(destination: M): M =\n    destination.apply { putAll(this@toMap) }\n\n/**\n * Returns a new map containing all key-value pairs from the given array of pairs.\n *\n * The returned map preserves the entry iteration order of the original array.\n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic fun <K, V> Array<out Pair<K, V>>.toMap(): Map<K, V> = when (size) {\n    0 -> emptyMap()\n    1 -> mapOf(this[0])\n    else -> toMap(LinkedHashMap<K, V>(mapCapacity(size)))\n}\n\n/**\n *  Populates and returns the [destination] mutable map with key-value pairs from the given array of pairs.\n */\npublic fun <K, V, M : MutableMap<in K, in V>> Array<out Pair<K, V>>.toMap(destination: M): M =\n    destination.apply { putAll(this@toMap) }\n\n/**\n * Returns a new map containing all key-value pairs from the given sequence of pairs.\n *\n * The returned map preserves the entry iteration order of the original sequence.\n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic fun <K, V> Sequence<Pair<K, V>>.toMap(): Map<K, V> = toMap(LinkedHashMap<K, V>()).optimizeReadOnlyMap()\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs from the given sequence of pairs.\n */\npublic fun <K, V, M : MutableMap<in K, in V>> Sequence<Pair<K, V>>.toMap(destination: M): M =\n    destination.apply { putAll(this@toMap) }\n\n/**\n * Returns a new read-only map containing all key-value pairs from the original map.\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic fun <K, V> Map<out K, V>.toMap(): Map<K, V> = when (size) {\n    0 -> emptyMap()\n    1 -> toSingletonMap()\n    else -> toMutableMap()\n}\n\n/**\n * Returns a new mutable map containing all key-value pairs from the original map.\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic fun <K, V> Map<out K, V>.toMutableMap(): MutableMap<K, V> = LinkedHashMap(this)\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs from the given map.\n */\n@SinceKotlin(\"1.1\")\npublic fun <K, V, M : MutableMap<in K, in V>> Map<out K, V>.toMap(destination: M): M =\n    destination.apply { putAll(this@toMap) }\n\n/**\n * Creates a new read-only map by replacing or adding an entry to this map from a given key-value [pair].\n *\n * The returned map preserves the entry iteration order of the original map.\n * The [pair] is iterated in the end if it has a unique key.\n */\npublic operator fun <K, V> Map<out K, V>.plus(pair: Pair<K, V>): Map<K, V> =\n    if (this.isEmpty()) mapOf(pair) else LinkedHashMap(this).apply { put(pair.first, pair.second) }\n\n/**\n * Creates a new read-only map by replacing or adding entries to this map from a given collection of key-value [pairs].\n *\n * The returned map preserves the entry iteration order of the original map.\n * Those [pairs] with unique keys are iterated in the end in the order of [pairs] collection.\n */\npublic operator fun <K, V> Map<out K, V>.plus(pairs: Iterable<Pair<K, V>>): Map<K, V> =\n    if (this.isEmpty()) pairs.toMap() else LinkedHashMap(this).apply { putAll(pairs) }\n\n/**\n * Creates a new read-only map by replacing or adding entries to this map from a given array of key-value [pairs].\n *\n * The returned map preserves the entry iteration order of the original map.\n * Those [pairs] with unique keys are iterated in the end in the order of [pairs] array.\n */\npublic operator fun <K, V> Map<out K, V>.plus(pairs: Array<out Pair<K, V>>): Map<K, V> =\n    if (this.isEmpty()) pairs.toMap() else LinkedHashMap(this).apply { putAll(pairs) }\n\n/**\n * Creates a new read-only map by replacing or adding entries to this map from a given sequence of key-value [pairs].\n *\n * The returned map preserves the entry iteration order of the original map.\n * Those [pairs] with unique keys are iterated in the end in the order of [pairs] sequence.\n */\npublic operator fun <K, V> Map<out K, V>.plus(pairs: Sequence<Pair<K, V>>): Map<K, V> =\n    LinkedHashMap(this).apply { putAll(pairs) }.optimizeReadOnlyMap()\n\n/**\n * Creates a new read-only map by replacing or adding entries to this map from another [map].\n *\n * The returned map preserves the entry iteration order of the original map.\n * Those entries of another [map] that are missing in this map are iterated in the end in the order of that [map].\n */\npublic operator fun <K, V> Map<out K, V>.plus(map: Map<out K, V>): Map<K, V> =\n    LinkedHashMap(this).apply { putAll(map) }\n\n\n/**\n * Appends or replaces the given [pair] in this mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(pair: Pair<K, V>) {\n    put(pair.first, pair.second)\n}\n\n/**\n * Appends or replaces all pairs from the given collection of [pairs] in this mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(pairs: Iterable<Pair<K, V>>) {\n    putAll(pairs)\n}\n\n/**\n * Appends or replaces all pairs from the given array of [pairs] in this mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(pairs: Array<out Pair<K, V>>) {\n    putAll(pairs)\n}\n\n/**\n * Appends or replaces all pairs from the given sequence of [pairs] in this mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(pairs: Sequence<Pair<K, V>>) {\n    putAll(pairs)\n}\n\n/**\n * Appends or replaces all entries from the given [map] in this mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(map: Map<K, V>) {\n    putAll(map)\n}\n\n/**\n * Returns a map containing all entries of the original map except the entry with the given [key].\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic operator fun <K, V> Map<out K, V>.minus(key: K): Map<K, V> =\n    this.toMutableMap().apply { minusAssign(key) }.optimizeReadOnlyMap()\n\n/**\n * Returns a map containing all entries of the original map except those entries\n * the keys of which are contained in the given [keys] collection.\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic operator fun <K, V> Map<out K, V>.minus(keys: Iterable<K>): Map<K, V> =\n    this.toMutableMap().apply { minusAssign(keys) }.optimizeReadOnlyMap()\n\n/**\n * Returns a map containing all entries of the original map except those entries\n * the keys of which are contained in the given [keys] array.\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic operator fun <K, V> Map<out K, V>.minus(keys: Array<out K>): Map<K, V> =\n    this.toMutableMap().apply { minusAssign(keys) }.optimizeReadOnlyMap()\n\n/**\n * Returns a map containing all entries of the original map except those entries\n * the keys of which are contained in the given [keys] sequence.\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic operator fun <K, V> Map<out K, V>.minus(keys: Sequence<K>): Map<K, V> =\n    this.toMutableMap().apply { minusAssign(keys) }.optimizeReadOnlyMap()\n\n/**\n * Removes the entry with the given [key] from this mutable map.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.minusAssign(key: K) {\n    remove(key)\n}\n\n/**\n * Removes all entries the keys of which are contained in the given [keys] collection from this mutable map.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.minusAssign(keys: Iterable<K>) {\n    this.keys.removeAll(keys)\n}\n\n/**\n * Removes all entries the keys of which are contained in the given [keys] array from this mutable map.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.minusAssign(keys: Array<out K>) {\n    this.keys.removeAll(keys)\n}\n\n/**\n * Removes all entries from the keys of which are contained in the given [keys] sequence from this mutable map.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.minusAssign(keys: Sequence<K>) {\n    this.keys.removeAll(keys)\n}\n\n\n// do not expose for now @PublishedApi\ninternal fun <K, V> Map<K, V>.optimizeReadOnlyMap() = when (size) {\n    0 -> emptyMap()\n    1 -> toSingletonMapOrSelf()\n    else -> this\n}\n","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"CollectionsKt\")\n@file:OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n\npackage kotlin.collections\n\nimport kotlin.contracts.*\nimport kotlin.random.Random\n\ninternal object EmptyIterator : ListIterator<Nothing> {\n    override fun hasNext(): Boolean = false\n    override fun hasPrevious(): Boolean = false\n    override fun nextIndex(): Int = 0\n    override fun previousIndex(): Int = -1\n    override fun next(): Nothing = throw NoSuchElementException()\n    override fun previous(): Nothing = throw NoSuchElementException()\n}\n\ninternal object EmptyList : List<Nothing>, Serializable, RandomAccess {\n    private const val serialVersionUID: Long = -7390468764508069838L\n\n    override fun equals(other: Any?): Boolean = other is List<*> && other.isEmpty()\n    override fun hashCode(): Int = 1\n    override fun toString(): String = \"[]\"\n\n    override val size: Int get() = 0\n    override fun isEmpty(): Boolean = true\n    override fun contains(element: Nothing): Boolean = false\n    override fun containsAll(elements: Collection<Nothing>): Boolean = elements.isEmpty()\n\n    override fun get(index: Int): Nothing = throw IndexOutOfBoundsException(\"Empty list doesn't contain element at index $index.\")\n    override fun indexOf(element: Nothing): Int = -1\n    override fun lastIndexOf(element: Nothing): Int = -1\n\n    override fun iterator(): Iterator<Nothing> = EmptyIterator\n    override fun listIterator(): ListIterator<Nothing> = EmptyIterator\n    override fun listIterator(index: Int): ListIterator<Nothing> {\n        if (index != 0) throw IndexOutOfBoundsException(\"Index: $index\")\n        return EmptyIterator\n    }\n\n    override fun subList(fromIndex: Int, toIndex: Int): List<Nothing> {\n        if (fromIndex == 0 && toIndex == 0) return this\n        throw IndexOutOfBoundsException(\"fromIndex: $fromIndex, toIndex: $toIndex\")\n    }\n\n    private fun readResolve(): Any = EmptyList\n}\n\ninternal fun <T> Array<out T>.asCollection(): Collection<T> = ArrayAsCollection(this, isVarargs = false)\n\nprivate class ArrayAsCollection<T>(val values: Array<out T>, val isVarargs: Boolean) : Collection<T> {\n    override val size: Int get() = values.size\n    override fun isEmpty(): Boolean = values.isEmpty()\n    override fun contains(element: T): Boolean = values.contains(element)\n    override fun containsAll(elements: Collection<T>): Boolean = elements.all { contains(it) }\n    override fun iterator(): Iterator<T> = values.iterator()\n    // override hidden toArray implementation to prevent copying of values array\n    public fun toArray(): Array<out Any?> = values.copyToArrayOfAny(isVarargs)\n}\n\n/**\n * Returns an empty read-only list.  The returned list is serializable (JVM).\n * @sample samples.collections.Collections.Lists.emptyReadOnlyList\n */\npublic fun <T> emptyList(): List<T> = EmptyList\n\n/**\n * Returns a new read-only list of given elements.  The returned list is serializable (JVM).\n * @sample samples.collections.Collections.Lists.readOnlyList\n */\npublic fun <T> listOf(vararg elements: T): List<T> = if (elements.size > 0) elements.asList() else emptyList()\n\n/**\n * Returns an empty read-only list.  The returned list is serializable (JVM).\n * @sample samples.collections.Collections.Lists.emptyReadOnlyList\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> listOf(): List<T> = emptyList()\n\n/**\n * Returns an empty new [MutableList].\n * @sample samples.collections.Collections.Lists.emptyMutableList\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> mutableListOf(): MutableList<T> = ArrayList()\n\n/**\n * Returns an empty new [ArrayList].\n * @sample samples.collections.Collections.Lists.emptyArrayList\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> arrayListOf(): ArrayList<T> = ArrayList()\n\n/**\n * Returns a new [MutableList] with the given elements.\n * @sample samples.collections.Collections.Lists.mutableList\n */\npublic fun <T> mutableListOf(vararg elements: T): MutableList<T> =\n    if (elements.size == 0) ArrayList() else ArrayList(ArrayAsCollection(elements, isVarargs = true))\n\n/**\n * Returns a new [ArrayList] with the given elements.\n * @sample samples.collections.Collections.Lists.arrayList\n */\npublic fun <T> arrayListOf(vararg elements: T): ArrayList<T> =\n    if (elements.size == 0) ArrayList() else ArrayList(ArrayAsCollection(elements, isVarargs = true))\n\n/**\n * Returns a new read-only list either of single given element, if it is not null, or empty list if the element is null. The returned list is serializable (JVM).\n * @sample samples.collections.Collections.Lists.listOfNotNull\n */\npublic fun <T : Any> listOfNotNull(element: T?): List<T> = if (element != null) listOf(element) else emptyList()\n\n/**\n * Returns a new read-only list only of those given elements, that are not null.  The returned list is serializable (JVM).\n * @sample samples.collections.Collections.Lists.listOfNotNull\n */\npublic fun <T : Any> listOfNotNull(vararg elements: T?): List<T> = elements.filterNotNull()\n\n/**\n * Creates a new read-only list with the specified [size], where each element is calculated by calling the specified\n * [init] function.\n *\n * The function [init] is called for each list element sequentially starting from the first one.\n * It should return the value for a list element given its index.\n *\n * @sample samples.collections.Collections.Lists.readOnlyListFromInitializer\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> List(size: Int, init: (index: Int) -> T): List<T> = MutableList(size, init)\n\n/**\n * Creates a new mutable list with the specified [size], where each element is calculated by calling the specified\n * [init] function.\n *\n * The function [init] is called for each list element sequentially starting from the first one.\n * It should return the value for a list element given its index.\n *\n * @sample samples.collections.Collections.Lists.mutableListFromInitializer\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> MutableList(size: Int, init: (index: Int) -> T): MutableList<T> {\n    val list = ArrayList<T>(size)\n    repeat(size) { index -> list.add(init(index)) }\n    return list\n}\n\n/**\n * Builds a new read-only [List] by populating a [MutableList] using the given [builderAction]\n * and returning a read-only list with the same elements.\n *\n * The list passed as a receiver to the [builderAction] is valid only inside that function.\n * Using it outside of the function produces an unspecified behavior.\n *\n * @sample samples.collections.Builders.Lists.buildListSample\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <E> buildList(@BuilderInference builderAction: MutableList<E>.() -> Unit): List<E> {\n    contract { callsInPlace(builderAction, InvocationKind.EXACTLY_ONCE) }\n    return buildListInternal(builderAction)\n}\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\ninternal expect inline fun <E> buildListInternal(builderAction: MutableList<E>.() -> Unit): List<E>\n\n/**\n * Builds a new read-only [List] by populating a [MutableList] using the given [builderAction]\n * and returning a read-only list with the same elements.\n *\n * The list passed as a receiver to the [builderAction] is valid only inside that function.\n * Using it outside of the function produces an unspecified behavior.\n *\n * [capacity] is used to hint the expected number of elements added in the [builderAction].\n *\n * @throws IllegalArgumentException if the given [capacity] is negative.\n *\n * @sample samples.collections.Builders.Lists.buildListSampleWithCapacity\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <E> buildList(capacity: Int, @BuilderInference builderAction: MutableList<E>.() -> Unit): List<E> {\n    contract { callsInPlace(builderAction, InvocationKind.EXACTLY_ONCE) }\n    return buildListInternal(capacity, builderAction)\n}\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\ninternal expect inline fun <E> buildListInternal(capacity: Int, builderAction: MutableList<E>.() -> Unit): List<E>\n\n/**\n * Returns an [IntRange] of the valid indices for this collection.\n * @sample samples.collections.Collections.Collections.indicesOfCollection\n */\npublic val Collection<*>.indices: IntRange\n    get() = 0..size - 1\n\n/**\n * Returns the index of the last item in the list or -1 if the list is empty.\n *\n * @sample samples.collections.Collections.Lists.lastIndexOfList\n */\npublic val <T> List<T>.lastIndex: Int\n    get() = this.size - 1\n\n/**\n * Returns `true` if the collection is not empty.\n * @sample samples.collections.Collections.Collections.collectionIsNotEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.isNotEmpty(): Boolean = !isEmpty()\n\n/**\n * Returns `true` if this nullable collection is either null or empty.\n * @sample samples.collections.Collections.Collections.collectionIsNullOrEmpty\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>?.isNullOrEmpty(): Boolean {\n    contract {\n        returns(false) implies (this@isNullOrEmpty != null)\n    }\n\n    return this == null || this.isEmpty()\n}\n\n/**\n * Returns this Collection if it's not `null` and the empty list otherwise.\n * @sample samples.collections.Collections.Collections.collectionOrEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>?.orEmpty(): Collection<T> = this ?: emptyList()\n\n/**\n * Returns this List if it's not `null` and the empty list otherwise.\n * @sample samples.collections.Collections.Lists.listOrEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>?.orEmpty(): List<T> = this ?: emptyList()\n\n/**\n * Returns this collection if it's not empty\n * or the result of calling [defaultValue] function if the collection is empty.\n *\n * @sample samples.collections.Collections.Collections.collectionIfEmpty\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <C, R> C.ifEmpty(defaultValue: () -> R): R where C : Collection<*>, C : R =\n    if (isEmpty()) defaultValue() else this\n\n\n/**\n * Checks if all elements in the specified collection are contained in this collection.\n *\n * Allows to overcome type-safety restriction of `containsAll` that requires to pass a collection of type `Collection<E>`.\n * @sample samples.collections.Collections.Collections.collectionContainsAll\n */\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning, extension takes precedence in some cases\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes T> Collection<T>.containsAll(elements: Collection<T>): Boolean = this.containsAll(elements)\n\n\n/**\n * Returns a new list with the elements of this list randomly shuffled\n * using the specified [random] instance as the source of randomness.\n */\n@SinceKotlin(\"1.3\")\npublic fun <T> Iterable<T>.shuffled(random: Random): List<T> = toMutableList().apply { shuffle(random) }\n\n\ninternal fun <T> List<T>.optimizeReadOnlyList() = when (size) {\n    0 -> emptyList()\n    1 -> listOf(this[0])\n    else -> this\n}\n\n/**\n * Searches this list or its range for the provided [element] using the binary search algorithm.\n * The list is expected to be sorted into ascending order according to the Comparable natural ordering of its elements,\n * otherwise the result is undefined.\n *\n * If the list contains multiple elements equal to the specified [element], there is no guarantee which one will be found.\n *\n * `null` value is considered to be less than any non-null value.\n *\n * @return the index of the element, if it is contained in the list within the specified range;\n * otherwise, the inverted insertion point `(-insertion point - 1)`.\n * The insertion point is defined as the index at which the element should be inserted,\n * so that the list (or the specified subrange of list) still remains sorted.\n * @sample samples.collections.Collections.Lists.binarySearchOnComparable\n * @sample samples.collections.Collections.Lists.binarySearchWithBoundaries\n */\npublic fun <T : Comparable<T>> List<T?>.binarySearch(element: T?, fromIndex: Int = 0, toIndex: Int = size): Int {\n    rangeCheck(size, fromIndex, toIndex)\n\n    var low = fromIndex\n    var high = toIndex - 1\n\n    while (low <= high) {\n        val mid = (low + high).ushr(1) // safe from overflows\n        val midVal = get(mid)\n        val cmp = compareValues(midVal, element)\n\n        if (cmp < 0)\n            low = mid + 1\n        else if (cmp > 0)\n            high = mid - 1\n        else\n            return mid // key found\n    }\n    return -(low + 1)  // key not found\n}\n\n/**\n * Searches this list or its range for the provided [element] using the binary search algorithm.\n * The list is expected to be sorted into ascending order according to the specified [comparator],\n * otherwise the result is undefined.\n *\n * If the list contains multiple elements equal to the specified [element], there is no guarantee which one will be found.\n *\n * `null` value is considered to be less than any non-null value.\n *\n * @return the index of the element, if it is contained in the list within the specified range;\n * otherwise, the inverted insertion point `(-insertion point - 1)`.\n * The insertion point is defined as the index at which the element should be inserted,\n * so that the list (or the specified subrange of list) still remains sorted according to the specified [comparator].\n * @sample samples.collections.Collections.Lists.binarySearchWithComparator\n */\npublic fun <T> List<T>.binarySearch(element: T, comparator: Comparator<in T>, fromIndex: Int = 0, toIndex: Int = size): Int {\n    rangeCheck(size, fromIndex, toIndex)\n\n    var low = fromIndex\n    var high = toIndex - 1\n\n    while (low <= high) {\n        val mid = (low + high).ushr(1) // safe from overflows\n        val midVal = get(mid)\n        val cmp = comparator.compare(midVal, element)\n\n        if (cmp < 0)\n            low = mid + 1\n        else if (cmp > 0)\n            high = mid - 1\n        else\n            return mid // key found\n    }\n    return -(low + 1)  // key not found\n}\n\n/**\n * Searches this list or its range for an element having the key returned by the specified [selector] function\n * equal to the provided [key] value using the binary search algorithm.\n * The list is expected to be sorted into ascending order according to the Comparable natural ordering of keys of its elements.\n * otherwise the result is undefined.\n *\n * If the list contains multiple elements with the specified [key], there is no guarantee which one will be found.\n *\n * `null` value is considered to be less than any non-null value.\n *\n * @return the index of the element with the specified [key], if it is contained in the list within the specified range;\n * otherwise, the inverted insertion point `(-insertion point - 1)`.\n * The insertion point is defined as the index at which the element should be inserted,\n * so that the list (or the specified subrange of list) still remains sorted.\n * @sample samples.collections.Collections.Lists.binarySearchByKey\n */\npublic inline fun <T, K : Comparable<K>> List<T>.binarySearchBy(\n    key: K?,\n    fromIndex: Int = 0,\n    toIndex: Int = size,\n    crossinline selector: (T) -> K?\n): Int =\n    binarySearch(fromIndex, toIndex) { compareValues(selector(it), key) }\n\n// do not introduce this overload --- too rare\n//public fun <T, K> List<T>.binarySearchBy(key: K, comparator: Comparator<K>, fromIndex: Int = 0, toIndex: Int = size(), selector: (T) -> K): Int =\n//        binarySearch(fromIndex, toIndex) { comparator.compare(selector(it), key) }\n\n\n/**\n * Searches this list or its range for an element for which the given [comparison] function returns zero using the binary search algorithm.\n *\n * The list is expected to be sorted so that the signs of the [comparison] function's return values ascend on the list elements,\n * i.e. negative values come before zero and zeroes come before positive values.\n * Otherwise, the result is undefined.\n *\n * If the list contains multiple elements for which [comparison] returns zero, there is no guarantee which one will be found.\n *\n * @param comparison function that returns zero when called on the list element being searched.\n * On the elements coming before the target element, the function must return negative values;\n * on the elements coming after the target element, the function must return positive values.\n *\n * @return the index of the found element, if it is contained in the list within the specified range;\n * otherwise, the inverted insertion point `(-insertion point - 1)`.\n * The insertion point is defined as the index at which the element should be inserted,\n * so that the list (or the specified subrange of list) still remains sorted.\n * @sample samples.collections.Collections.Lists.binarySearchWithComparisonFunction\n */\npublic fun <T> List<T>.binarySearch(fromIndex: Int = 0, toIndex: Int = size, comparison: (T) -> Int): Int {\n    rangeCheck(size, fromIndex, toIndex)\n\n    var low = fromIndex\n    var high = toIndex - 1\n\n    while (low <= high) {\n        val mid = (low + high).ushr(1) // safe from overflows\n        val midVal = get(mid)\n        val cmp = comparison(midVal)\n\n        if (cmp < 0)\n            low = mid + 1\n        else if (cmp > 0)\n            high = mid - 1\n        else\n            return mid // key found\n    }\n    return -(low + 1)  // key not found\n}\n\n/**\n * Checks that `from` and `to` are in\n * the range of [0..size] and throws an appropriate exception, if they aren't.\n */\nprivate fun rangeCheck(size: Int, fromIndex: Int, toIndex: Int) {\n    when {\n        fromIndex > toIndex -> throw IllegalArgumentException(\"fromIndex ($fromIndex) is greater than toIndex ($toIndex).\")\n        fromIndex < 0 -> throw IndexOutOfBoundsException(\"fromIndex ($fromIndex) is less than zero.\")\n        toIndex > size -> throw IndexOutOfBoundsException(\"toIndex ($toIndex) is greater than size ($size).\")\n    }\n}\n\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\ninternal expect fun checkIndexOverflow(index: Int): Int\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\ninternal expect fun checkCountOverflow(count: Int): Int\n\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\ninternal fun throwIndexOverflow() { throw ArithmeticException(\"Index overflow has happened.\") }\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\ninternal fun throwCountOverflow() { throw ArithmeticException(\"Count overflow has happened.\") }\n\n","/*\n * Copyright 2010-2021 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\npackage kotlin.math\n\n\nimport kotlin.internal.InlineOnly\nimport kotlin.js.JsMath as nativeMath\n\n\n// region ================ Double Math ========================================\n\n/** Computes the sine of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `sin(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sin(x: Double): Double = nativeMath.sin(x)\n\n/** Computes the cosine of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `cos(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun cos(x: Double): Double = nativeMath.cos(x)\n\n/** Computes the tangent of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `tan(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun tan(x: Double): Double = nativeMath.tan(x)\n\n/**\n * Computes the arc sine of the value [x];\n * the returned value is an angle in the range from `-PI/2` to `PI/2` radians.\n *\n * Special cases:\n *    - `asin(x)` is `NaN`, when `abs(x) > 1` or x is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun asin(x: Double): Double = nativeMath.asin(x)\n\n/**\n * Computes the arc cosine of the value [x];\n * the returned value is an angle in the range from `0.0` to `PI` radians.\n *\n * Special cases:\n *    - `acos(x)` is `NaN`, when `abs(x) > 1` or x is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun acos(x: Double): Double = nativeMath.acos(x)\n\n/**\n * Computes the arc tangent of the value [x];\n * the returned value is an angle in the range from `-PI/2` to `PI/2` radians.\n *\n * Special cases:\n *   - `atan(NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun atan(x: Double): Double = nativeMath.atan(x)\n\n/**\n * Returns the angle `theta` of the polar coordinates `(r, theta)` that correspond\n * to the rectangular coordinates `(x, y)` by computing the arc tangent of the value [y] / [x];\n * the returned value is an angle in the range from `-PI` to `PI` radians.\n *\n * Special cases:\n *   - `atan2(0.0, 0.0)` is `0.0`\n *   - `atan2(0.0, x)` is  `0.0` for `x > 0` and `PI` for `x < 0`\n *   - `atan2(-0.0, x)` is `-0.0` for 'x > 0` and `-PI` for `x < 0`\n *   - `atan2(y, +Inf)` is `0.0` for `0 < y < +Inf` and `-0.0` for '-Inf < y < 0`\n *   - `atan2(y, -Inf)` is `PI` for `0 < y < +Inf` and `-PI` for `-Inf < y < 0`\n *   - `atan2(y, 0.0)` is `PI/2` for `y > 0` and `-PI/2` for `y < 0`\n *   - `atan2(+Inf, x)` is `PI/2` for finite `x`y\n *   - `atan2(-Inf, x)` is `-PI/2` for finite `x`\n *   - `atan2(NaN, x)` and `atan2(y, NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun atan2(y: Double, x: Double): Double = nativeMath.atan2(y, x)\n\n/**\n * Computes the hyperbolic sine of the value [x].\n *\n * Special cases:\n *   - `sinh(NaN)` is `NaN`\n *   - `sinh(+Inf)` is `+Inf`\n *   - `sinh(-Inf)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sinh(x: Double): Double = nativeMath.sinh(x)\n\n/**\n * Computes the hyperbolic cosine of the value [x].\n *\n * Special cases:\n *   - `cosh(NaN)` is `NaN`\n *   - `cosh(+Inf|-Inf)` is `+Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun cosh(x: Double): Double = nativeMath.cosh(x)\n\n/**\n * Computes the hyperbolic tangent of the value [x].\n *\n * Special cases:\n *   - `tanh(NaN)` is `NaN`\n *   - `tanh(+Inf)` is `1.0`\n *   - `tanh(-Inf)` is `-1.0`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun tanh(x: Double): Double = nativeMath.tanh(x)\n\n/**\n * Computes the inverse hyperbolic sine of the value [x].\n *\n * The returned value is `y` such that `sinh(y) == x`.\n *\n * Special cases:\n *   - `asinh(NaN)` is `NaN`\n *   - `asinh(+Inf)` is `+Inf`\n *   - `asinh(-Inf)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun asinh(x: Double): Double = nativeMath.asinh(x)\n\n/**\n * Computes the inverse hyperbolic cosine of the value [x].\n *\n * The returned value is positive `y` such that `cosh(y) == x`.\n *\n * Special cases:\n *   - `acosh(NaN)` is `NaN`\n *   - `acosh(x)` is `NaN` when `x < 1`\n *   - `acosh(+Inf)` is `+Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun acosh(x: Double): Double = nativeMath.acosh(x)\n\n/**\n * Computes the inverse hyperbolic tangent of the value [x].\n *\n * The returned value is `y` such that `tanh(y) == x`.\n *\n * Special cases:\n *   - `tanh(NaN)` is `NaN`\n *   - `tanh(x)` is `NaN` when `x > 1` or `x < -1`\n *   - `tanh(1.0)` is `+Inf`\n *   - `tanh(-1.0)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun atanh(x: Double): Double = nativeMath.atanh(x)\n\n/**\n * Computes `sqrt(x^2 + y^2)` without intermediate overflow or underflow.\n *\n * Special cases:\n *   - returns `+Inf` if any of arguments is infinite\n *   - returns `NaN` if any of arguments is `NaN` and the other is not infinite\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun hypot(x: Double, y: Double): Double = nativeMath.hypot(x, y)\n\n/**\n * Computes the positive square root of the value [x].\n *\n * Special cases:\n *   - `sqrt(x)` is `NaN` when `x < 0` or `x` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sqrt(x: Double): Double = nativeMath.sqrt(x)\n\n/**\n * Computes Euler's number `e` raised to the power of the value [x].\n *\n * Special cases:\n *   - `exp(NaN)` is `NaN`\n *   - `exp(+Inf)` is `+Inf`\n *   - `exp(-Inf)` is `0.0`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun exp(x: Double): Double = nativeMath.exp(x)\n\n/**\n * Computes `exp(x) - 1`.\n *\n * This function can be implemented to produce more precise result for [x] near zero.\n *\n * Special cases:\n *   - `expm1(NaN)` is `NaN`\n *   - `expm1(+Inf)` is `+Inf`\n *   - `expm1(-Inf)` is `-1.0`\n *\n * @see [exp] function.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun expm1(x: Double): Double = nativeMath.expm1(x)\n\n/**\n * Computes the logarithm of the value [x] to the given [base].\n *\n * Special cases:\n *   - `log(x, b)` is `NaN` if either `x` or `b` are `NaN`\n *   - `log(x, b)` is `NaN` when `x < 0` or `b <= 0` or `b == 1.0`\n *   - `log(+Inf, +Inf)` is `NaN`\n *   - `log(+Inf, b)` is `+Inf` for `b > 1` and `-Inf` for `b < 1`\n *   - `log(0.0, b)` is `-Inf` for `b > 1` and `+Inf` for `b > 1`\n *\n * See also logarithm functions for common fixed bases: [ln], [log10] and [log2].\n */\n@SinceKotlin(\"1.2\")\npublic actual fun log(x: Double, base: Double): Double {\n    if (base <= 0.0 || base == 1.0) return Double.NaN\n    return nativeMath.log(x) / nativeMath.log(base)\n}\n\n/**\n * Computes the natural logarithm (base `E`) of the value [x].\n *\n * Special cases:\n *   - `ln(NaN)` is `NaN`\n *   - `ln(x)` is `NaN` when `x < 0.0`\n *   - `ln(+Inf)` is `+Inf`\n *   - `ln(0.0)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun ln(x: Double): Double = nativeMath.log(x)\n\n/**\n * Computes the common logarithm (base 10) of the value [x].\n *\n * @see [ln] function for special cases.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun log10(x: Double): Double = nativeMath.log10(x)\n\n/**\n * Computes the binary logarithm (base 2) of the value [x].\n *\n * @see [ln] function for special cases.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun log2(x: Double): Double = nativeMath.log2(x)\n\n/**\n * Computes `ln(x + 1)`.\n *\n * This function can be implemented to produce more precise result for [x] near zero.\n *\n * Special cases:\n *   - `ln1p(NaN)` is `NaN`\n *   - `ln1p(x)` is `NaN` where `x < -1.0`\n *   - `ln1p(-1.0)` is `-Inf`\n *   - `ln1p(+Inf)` is `+Inf`\n *\n * @see [ln] function\n * @see [expm1] function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun ln1p(x: Double): Double = nativeMath.log1p(x)\n\n/**\n * Rounds the given value [x] to an integer towards positive infinity.\n\n * @return the smallest double value that is greater than or equal to the given value [x] and is a mathematical integer.\n *\n * Special cases:\n *   - `ceil(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun ceil(x: Double): Double = nativeMath.ceil(x)\n\n/**\n * Rounds the given value [x] to an integer towards negative infinity.\n\n * @return the largest double value that is smaller than or equal to the given value [x] and is a mathematical integer.\n *\n * Special cases:\n *   - `floor(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun floor(x: Double): Double = nativeMath.floor(x)\n\n/**\n * Rounds the given value [x] to an integer towards zero.\n *\n * @return the value [x] having its fractional part truncated.\n *\n * Special cases:\n *   - `truncate(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun truncate(x: Double): Double = nativeMath.trunc(x)\n\n/**\n * Rounds the given value [x] towards the closest integer with ties rounded towards even integer.\n *\n * Special cases:\n *   - `round(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\npublic actual fun round(x: Double): Double {\n    if (x % 0.5 != 0.0) {\n        return nativeMath.round(x)\n    }\n    val floor = floor(x)\n    return if (floor % 2 == 0.0) floor else ceil(x)\n}\n\n/**\n * Returns the absolute value of the given value [x].\n *\n * Special cases:\n *   - `abs(NaN)` is `NaN`\n *\n * @see absoluteValue extension property for [Double]\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun abs(x: Double): Double = nativeMath.abs(x)\n\n/**\n * Returns the sign of the given value [x]:\n *   - `-1.0` if the value is negative,\n *   - zero if the value is zero,\n *   - `1.0` if the value is positive\n *\n * Special case:\n *   - `sign(NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sign(x: Double): Double = nativeMath.sign(x)\n\n\n/**\n * Returns the smaller of two values.\n *\n * If either value is `NaN`, then the result is `NaN`.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun min(a: Double, b: Double): Double = nativeMath.min(a, b)\n\n/**\n * Returns the greater of two values.\n *\n * If either value is `NaN`, then the result is `NaN`.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun max(a: Double, b: Double): Double = nativeMath.max(a, b)\n\n// extensions\n\n/**\n * Raises this value to the power [x].\n *\n * Special cases:\n *   - `b.pow(0.0)` is `1.0`\n *   - `b.pow(1.0) == b`\n *   - `b.pow(NaN)` is `NaN`\n *   - `NaN.pow(x)` is `NaN` for `x != 0.0`\n *   - `b.pow(Inf)` is `NaN` for `abs(b) == 1.0`\n *   - `b.pow(x)` is `NaN` for `b < 0` and `x` is finite and not an integer\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Double.pow(x: Double): Double = nativeMath.pow(this, x)\n\n/**\n * Raises this value to the integer power [n].\n *\n * See the other overload of [pow] for details.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Double.pow(n: Int): Double = nativeMath.pow(this, n.toDouble())\n\n/**\n * Returns the absolute value of this value.\n *\n * Special cases:\n *   - `NaN.absoluteValue` is `NaN`\n *\n * @see abs function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline val Double.absoluteValue: Double get() = nativeMath.abs(this)\n\n/**\n * Returns the sign of this value:\n *   - `-1.0` if the value is negative,\n *   - zero if the value is zero,\n *   - `1.0` if the value is positive\n *\n * Special case:\n *   - `NaN.sign` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline val Double.sign: Double get() = nativeMath.sign(this)\n\n/**\n * Returns this value with the sign bit same as of the [sign] value.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Double.withSign(sign: Int): Double = this.withSign(sign.toDouble())\n\n/**\n * Returns the ulp (unit in the last place) of this value.\n *\n * An ulp is a positive distance between this value and the next nearest [Double] value larger in magnitude.\n *\n * Special Cases:\n *   - `NaN.ulp` is `NaN`\n *   - `x.ulp` is `+Inf` when `x` is `+Inf` or `-Inf`\n *   - `0.0.ulp` is `Double.MIN_VALUE`\n */\n@SinceKotlin(\"1.2\")\npublic actual val Double.ulp: Double get() = when {\n    this < 0 -> (-this).ulp\n    this.isNaN() || this == Double.POSITIVE_INFINITY -> this\n    this == Double.MAX_VALUE -> this - this.nextDown()\n    else -> this.nextUp() - this\n}\n\n/**\n * Returns the [Double] value nearest to this value in direction of positive infinity.\n */\n@SinceKotlin(\"1.2\")\npublic actual fun Double.nextUp(): Double = when {\n    this.isNaN() || this == Double.POSITIVE_INFINITY -> this\n    this == 0.0 -> Double.MIN_VALUE\n    else -> Double.fromBits(this.toRawBits() + if (this > 0) 1 else -1)\n}\n\n/**\n * Returns the [Double] value nearest to this value in direction of negative infinity.\n */\n@SinceKotlin(\"1.2\")\npublic actual fun Double.nextDown(): Double = when {\n    this.isNaN() || this == Double.NEGATIVE_INFINITY -> this\n    this == 0.0 -> -Double.MIN_VALUE\n    else -> Double.fromBits(this.toRawBits() + if (this > 0) -1 else 1)\n}\n\n\n/**\n * Returns the [Double] value nearest to this value in direction from this value towards the value [to].\n *\n * Special cases:\n *   - `x.nextTowards(y)` is `NaN` if either `x` or `y` are `NaN`\n *   - `x.nextTowards(x) == x`\n *\n */\n@SinceKotlin(\"1.2\")\npublic actual fun Double.nextTowards(to: Double): Double = when {\n    this.isNaN() || to.isNaN() -> Double.NaN\n    to == this -> to\n    to > this -> this.nextUp()\n    else /* to < this */ -> this.nextDown()\n}\n\n\n/**\n * Rounds this [Double] value to the nearest integer and converts the result to [Int].\n * Ties are rounded towards positive infinity.\n *\n * Special cases:\n *   - `x.roundToInt() == Int.MAX_VALUE` when `x > Int.MAX_VALUE`\n *   - `x.roundToInt() == Int.MIN_VALUE` when `x < Int.MIN_VALUE`\n *\n * @throws IllegalArgumentException when this value is `NaN`\n */\n@SinceKotlin(\"1.2\")\npublic actual fun Double.roundToInt(): Int = when {\n    isNaN() -> throw IllegalArgumentException(\"Cannot round NaN value.\")\n    this > Int.MAX_VALUE -> Int.MAX_VALUE\n    this < Int.MIN_VALUE -> Int.MIN_VALUE\n    else -> nativeMath.round(this).toInt()\n}\n\n/**\n * Rounds this [Double] value to the nearest integer and converts the result to [Long].\n * Ties are rounded towards positive infinity.\n *\n * Special cases:\n *   - `x.roundToLong() == Long.MAX_VALUE` when `x > Long.MAX_VALUE`\n *   - `x.roundToLong() == Long.MIN_VALUE` when `x < Long.MIN_VALUE`\n *\n * @throws IllegalArgumentException when this value is `NaN`\n */\n@SinceKotlin(\"1.2\")\npublic actual fun Double.roundToLong(): Long = when {\n    isNaN() -> throw IllegalArgumentException(\"Cannot round NaN value.\")\n    this > Long.MAX_VALUE -> Long.MAX_VALUE\n    this < Long.MIN_VALUE -> Long.MIN_VALUE\n    else -> nativeMath.round(this).toLong()\n}\n\n// endregion\n\n\n\n// region ================ Float Math ========================================\n\n/** Computes the sine of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `sin(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sin(x: Float): Float = nativeMath.sin(x.toDouble()).toFloat()\n\n/** Computes the cosine of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `cos(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun cos(x: Float): Float = nativeMath.cos(x.toDouble()).toFloat()\n\n/** Computes the tangent of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `tan(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun tan(x: Float): Float = nativeMath.tan(x.toDouble()).toFloat()\n\n/**\n * Computes the arc sine of the value [x];\n * the returned value is an angle in the range from `-PI/2` to `PI/2` radians.\n *\n * Special cases:\n *    - `asin(x)` is `NaN`, when `abs(x) > 1` or x is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun asin(x: Float): Float = nativeMath.asin(x.toDouble()).toFloat()\n\n/**\n * Computes the arc cosine of the value [x];\n * the returned value is an angle in the range from `0.0` to `PI` radians.\n *\n * Special cases:\n *    - `acos(x)` is `NaN`, when `abs(x) > 1` or x is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun acos(x: Float): Float = nativeMath.acos(x.toDouble()).toFloat()\n\n/**\n * Computes the arc tangent of the value [x];\n * the returned value is an angle in the range from `-PI/2` to `PI/2` radians.\n *\n * Special cases:\n *   - `atan(NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun atan(x: Float): Float = nativeMath.atan(x.toDouble()).toFloat()\n\n/**\n * Returns the angle `theta` of the polar coordinates `(r, theta)` that correspond\n * to the rectangular coordinates `(x, y)` by computing the arc tangent of the value [y] / [x];\n * the returned value is an angle in the range from `-PI` to `PI` radians.\n *\n * Special cases:\n *   - `atan2(0.0, 0.0)` is `0.0`\n *   - `atan2(0.0, x)` is  `0.0` for `x > 0` and `PI` for `x < 0`\n *   - `atan2(-0.0, x)` is `-0.0` for 'x > 0` and `-PI` for `x < 0`\n *   - `atan2(y, +Inf)` is `0.0` for `0 < y < +Inf` and `-0.0` for '-Inf < y < 0`\n *   - `atan2(y, -Inf)` is `PI` for `0 < y < +Inf` and `-PI` for `-Inf < y < 0`\n *   - `atan2(y, 0.0)` is `PI/2` for `y > 0` and `-PI/2` for `y < 0`\n *   - `atan2(+Inf, x)` is `PI/2` for finite `x`y\n *   - `atan2(-Inf, x)` is `-PI/2` for finite `x`\n *   - `atan2(NaN, x)` and `atan2(y, NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun atan2(y: Float, x: Float): Float = nativeMath.atan2(y.toDouble(), x.toDouble()).toFloat()\n\n/**\n * Computes the hyperbolic sine of the value [x].\n *\n * Special cases:\n *   - `sinh(NaN)` is `NaN`\n *   - `sinh(+Inf)` is `+Inf`\n *   - `sinh(-Inf)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sinh(x: Float): Float = nativeMath.sinh(x.toDouble()).toFloat()\n\n/**\n * Computes the hyperbolic cosine of the value [x].\n *\n * Special cases:\n *   - `cosh(NaN)` is `NaN`\n *   - `cosh(+Inf|-Inf)` is `+Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun cosh(x: Float): Float = nativeMath.cosh(x.toDouble()).toFloat()\n\n/**\n * Computes the hyperbolic tangent of the value [x].\n *\n * Special cases:\n *   - `tanh(NaN)` is `NaN`\n *   - `tanh(+Inf)` is `1.0`\n *   - `tanh(-Inf)` is `-1.0`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun tanh(x: Float): Float = nativeMath.tanh(x.toDouble()).toFloat()\n\n/**\n * Computes the inverse hyperbolic sine of the value [x].\n *\n * The returned value is `y` such that `sinh(y) == x`.\n *\n * Special cases:\n *   - `asinh(NaN)` is `NaN`\n *   - `asinh(+Inf)` is `+Inf`\n *   - `asinh(-Inf)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun asinh(x: Float): Float = nativeMath.asinh(x.toDouble()).toFloat()\n\n/**\n * Computes the inverse hyperbolic cosine of the value [x].\n *\n * The returned value is positive `y` such that `cosh(y) == x`.\n *\n * Special cases:\n *   - `acosh(NaN)` is `NaN`\n *   - `acosh(x)` is `NaN` when `x < 1`\n *   - `acosh(+Inf)` is `+Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun acosh(x: Float): Float = nativeMath.acosh(x.toDouble()).toFloat()\n\n/**\n * Computes the inverse hyperbolic tangent of the value [x].\n *\n * The returned value is `y` such that `tanh(y) == x`.\n *\n * Special cases:\n *   - `tanh(NaN)` is `NaN`\n *   - `tanh(x)` is `NaN` when `x > 1` or `x < -1`\n *   - `tanh(1.0)` is `+Inf`\n *   - `tanh(-1.0)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun atanh(x: Float): Float = nativeMath.atanh(x.toDouble()).toFloat()\n\n/**\n * Computes `sqrt(x^2 + y^2)` without intermediate overflow or underflow.\n *\n * Special cases:\n *   - returns `+Inf` if any of arguments is infinite\n *   - returns `NaN` if any of arguments is `NaN` and the other is not infinite\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun hypot(x: Float, y: Float): Float = nativeMath.hypot(x.toDouble(), y.toDouble()).toFloat()\n\n/**\n * Computes the positive square root of the value [x].\n *\n * Special cases:\n *   - `sqrt(x)` is `NaN` when `x < 0` or `x` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sqrt(x: Float): Float = nativeMath.sqrt(x.toDouble()).toFloat()\n\n/**\n * Computes Euler's number `e` raised to the power of the value [x].\n *\n * Special cases:\n *   - `exp(NaN)` is `NaN`\n *   - `exp(+Inf)` is `+Inf`\n *   - `exp(-Inf)` is `0.0`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun exp(x: Float): Float = nativeMath.exp(x.toDouble()).toFloat()\n\n/**\n * Computes `exp(x) - 1`.\n *\n * This function can be implemented to produce more precise result for [x] near zero.\n *\n * Special cases:\n *   - `expm1(NaN)` is `NaN`\n *   - `expm1(+Inf)` is `+Inf`\n *   - `expm1(-Inf)` is `-1.0`\n *\n * @see [exp] function.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun expm1(x: Float): Float = nativeMath.expm1(x.toDouble()).toFloat()\n\n/**\n * Computes the logarithm of the value [x] to the given [base].\n *\n * Special cases:\n *   - `log(x, b)` is `NaN` if either `x` or `b` are `NaN`\n *   - `log(x, b)` is `NaN` when `x < 0` or `b <= 0` or `b == 1.0`\n *   - `log(+Inf, +Inf)` is `NaN`\n *   - `log(+Inf, b)` is `+Inf` for `b > 1` and `-Inf` for `b < 1`\n *   - `log(0.0, b)` is `-Inf` for `b > 1` and `+Inf` for `b > 1`\n *\n * See also logarithm functions for common fixed bases: [ln], [log10] and [log2].\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun log(x: Float, base: Float): Float = log(x.toDouble(), base.toDouble()).toFloat()\n\n/**\n * Computes the natural logarithm (base `E`) of the value [x].\n *\n * Special cases:\n *   - `ln(NaN)` is `NaN`\n *   - `ln(x)` is `NaN` when `x < 0.0`\n *   - `ln(+Inf)` is `+Inf`\n *   - `ln(0.0)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun ln(x: Float): Float = nativeMath.log(x.toDouble()).toFloat()\n\n/**\n * Computes the common logarithm (base 10) of the value [x].\n *\n * @see [ln] function for special cases.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun log10(x: Float): Float = nativeMath.log10(x.toDouble()).toFloat()\n\n/**\n * Computes the binary logarithm (base 2) of the value [x].\n *\n * @see [ln] function for special cases.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun log2(x: Float): Float = nativeMath.log2(x.toDouble()).toFloat()\n\n/**\n * Computes `ln(a + 1)`.\n *\n * This function can be implemented to produce more precise result for [x] near zero.\n *\n * Special cases:\n *   - `ln1p(NaN)` is `NaN`\n *   - `ln1p(x)` is `NaN` where `x < -1.0`\n *   - `ln1p(-1.0)` is `-Inf`\n *   - `ln1p(+Inf)` is `+Inf`\n *\n * @see [ln] function\n * @see [expm1] function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun ln1p(x: Float): Float = nativeMath.log1p(x.toDouble()).toFloat()\n\n/**\n * Rounds the given value [x] to an integer towards positive infinity.\n\n * @return the smallest Float value that is greater than or equal to the given value [x] and is a mathematical integer.\n *\n * Special cases:\n *   - `ceil(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun ceil(x: Float): Float = nativeMath.ceil(x.toDouble()).toFloat()\n\n/**\n * Rounds the given value [x] to an integer towards negative infinity.\n\n * @return the largest Float value that is smaller than or equal to the given value [x] and is a mathematical integer.\n *\n * Special cases:\n *   - `floor(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun floor(x: Float): Float = nativeMath.floor(x.toDouble()).toFloat()\n\n/**\n * Rounds the given value [x] to an integer towards zero.\n *\n * @return the value [x] having its fractional part truncated.\n *\n * Special cases:\n *   - `truncate(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun truncate(x: Float): Float = truncate(x.toDouble()).toFloat()\n\n/**\n * Rounds the given value [x] towards the closest integer with ties rounded towards even integer.\n *\n * Special cases:\n *   - `round(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun round(x: Float): Float = round(x.toDouble()).toFloat()\n\n\n/**\n * Returns the absolute value of the given value [x].\n *\n * Special cases:\n *   - `abs(NaN)` is `NaN`\n *\n * @see absoluteValue extension property for [Float]\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun abs(x: Float): Float = nativeMath.abs(x.toDouble()).toFloat()\n\n/**\n * Returns the sign of the given value [x]:\n *   - `-1.0` if the value is negative,\n *   - zero if the value is zero,\n *   - `1.0` if the value is positive\n *\n * Special case:\n *   - `sign(NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sign(x: Float): Float = nativeMath.sign(x.toDouble()).toFloat()\n\n\n\n/**\n * Returns the smaller of two values.\n *\n * If either value is `NaN`, then the result is `NaN`.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun min(a: Float, b: Float): Float = nativeMath.min(a, b)\n\n/**\n * Returns the greater of two values.\n *\n * If either value is `NaN`, then the result is `NaN`.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun max(a: Float, b: Float): Float = nativeMath.max(a, b)\n\n// extensions\n\n\n/**\n * Raises this value to the power [x].\n *\n * Special cases:\n *   - `b.pow(0.0)` is `1.0`\n *   - `b.pow(1.0) == b`\n *   - `b.pow(NaN)` is `NaN`\n *   - `NaN.pow(x)` is `NaN` for `x != 0.0`\n *   - `b.pow(Inf)` is `NaN` for `abs(b) == 1.0`\n *   - `b.pow(x)` is `NaN` for `b < 0` and `x` is finite and not an integer\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Float.pow(x: Float): Float = nativeMath.pow(this.toDouble(), x.toDouble()).toFloat()\n\n/**\n * Raises this value to the integer power [n].\n *\n * See the other overload of [pow] for details.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Float.pow(n: Int): Float = nativeMath.pow(this.toDouble(), n.toDouble()).toFloat()\n\n/**\n * Returns the absolute value of this value.\n *\n * Special cases:\n *   - `NaN.absoluteValue` is `NaN`\n *\n * @see abs function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline val Float.absoluteValue: Float get() = nativeMath.abs(this.toDouble()).toFloat()\n\n/**\n * Returns the sign of this value:\n *   - `-1.0` if the value is negative,\n *   - zero if the value is zero,\n *   - `1.0` if the value is positive\n *\n * Special case:\n *   - `NaN.sign` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline val Float.sign: Float get() = nativeMath.sign(this.toDouble()).toFloat()\n\n/**\n * Returns this value with the sign bit same as of the [sign] value.\n *\n * If [sign] is `NaN` the sign of the result is undefined.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Float.withSign(sign: Float): Float = this.toDouble().withSign(sign.toDouble()).toFloat()\n\n/**\n * Returns this value with the sign bit same as of the [sign] value.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Float.withSign(sign: Int): Float = this.toDouble().withSign(sign.toDouble()).toFloat()\n\n\n/**\n * Rounds this [Float] value to the nearest integer and converts the result to [Int].\n * Ties are rounded towards positive infinity.\n *\n * Special cases:\n *   - `x.roundToInt() == Int.MAX_VALUE` when `x > Int.MAX_VALUE`\n *   - `x.roundToInt() == Int.MIN_VALUE` when `x < Int.MIN_VALUE`\n *\n * @throws IllegalArgumentException when this value is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Float.roundToInt(): Int = toDouble().roundToInt()\n\n/**\n * Rounds this [Float] value to the nearest integer and converts the result to [Long].\n * Ties are rounded towards positive infinity.\n *\n * Special cases:\n *   - `x.roundToLong() == Long.MAX_VALUE` when `x > Long.MAX_VALUE`\n *   - `x.roundToLong() == Long.MIN_VALUE` when `x < Long.MIN_VALUE`\n *\n * @throws IllegalArgumentException when this value is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Float.roundToLong(): Long = toDouble().roundToLong()\n\n\n// endregion\n\n// region ================ Integer Math ========================================\n\n\n/**\n * Returns the absolute value of the given value [n].\n *\n * Special cases:\n *   - `abs(Int.MIN_VALUE)` is `Int.MIN_VALUE` due to an overflow\n *\n * @see absoluteValue extension property for [Int]\n */\n// TODO: remove manual 'or' when KT-19290 is fixed\n@SinceKotlin(\"1.2\")\npublic actual fun abs(n: Int): Int = if (n < 0) (-n or 0) else n\n\n/**\n * Returns the smaller of two values.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun min(a: Int, b: Int): Int = nativeMath.min(a, b)\n\n/**\n * Returns the greater of two values.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun max(a: Int, b: Int): Int = nativeMath.max(a, b)\n\n/**\n * Returns the absolute value of this value.\n *\n * Special cases:\n *   - `Int.MIN_VALUE.absoluteValue` is `Int.MIN_VALUE` due to an overflow\n *\n * @see abs function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline val Int.absoluteValue: Int get() = abs(this)\n\n/**\n * Returns the sign of this value:\n *   - `-1` if the value is negative,\n *   - `0` if the value is zero,\n *   - `1` if the value is positive\n */\n@SinceKotlin(\"1.2\")\npublic actual val Int.sign: Int get() = when {\n    this < 0 -> -1\n    this > 0 -> 1\n    else -> 0\n}\n\n\n\n/**\n * Returns the absolute value of the given value [n].\n *\n * Special cases:\n *   - `abs(Long.MIN_VALUE)` is `Long.MIN_VALUE` due to an overflow\n *\n * @see absoluteValue extension property for [Long]\n */\n@SinceKotlin(\"1.2\")\npublic actual fun abs(n: Long): Long = if (n < 0) -n else n\n\n/**\n * Returns the smaller of two values.\n */\n@SinceKotlin(\"1.2\")\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline fun min(a: Long, b: Long): Long = if (a <= b) a else b\n\n/**\n * Returns the greater of two values.\n */\n@SinceKotlin(\"1.2\")\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline fun max(a: Long, b: Long): Long = if (a >= b) a else b\n\n/**\n * Returns the absolute value of this value.\n *\n * Special cases:\n *   - `Long.MIN_VALUE.absoluteValue` is `Long.MIN_VALUE` due to an overflow\n *\n * @see abs function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline val Long.absoluteValue: Long get() = abs(this)\n\n/**\n * Returns the sign of this value:\n *   - `-1` if the value is negative,\n *   - `0` if the value is zero,\n *   - `1` if the value is positive\n */\n@SinceKotlin(\"1.2\")\npublic actual val Long.sign: Int get() = when {\n    this < 0 -> -1\n    this > 0 -> 1\n    else -> 0\n}\n\n\n// endregion\n",null,"/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"StandardKt\")\npackage kotlin\n\nimport kotlin.contracts.*\n\n/**\n * An exception is thrown to indicate that a method body remains to be implemented.\n */\npublic class NotImplementedError(message: String = \"An operation is not implemented.\") : Error(message)\n\n/**\n * Always throws [NotImplementedError] stating that operation is not implemented.\n */\n\n@kotlin.internal.InlineOnly\npublic inline fun TODO(): Nothing = throw NotImplementedError()\n\n/**\n * Always throws [NotImplementedError] stating that operation is not implemented.\n *\n * @param reason a string explaining why the implementation is missing.\n */\n@kotlin.internal.InlineOnly\npublic inline fun TODO(reason: String): Nothing = throw NotImplementedError(\"An operation is not implemented: $reason\")\n\n\n\n/**\n * Calls the specified function [block] and returns its result.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#run).\n */\n@kotlin.internal.InlineOnly\npublic inline fun <R> run(block: () -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return block()\n}\n\n/**\n * Calls the specified function [block] with `this` value as its receiver and returns its result.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#run).\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> T.run(block: T.() -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return block()\n}\n\n/**\n * Calls the specified function [block] with the given [receiver] as its receiver and returns its result.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#with).\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> with(receiver: T, block: T.() -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return receiver.block()\n}\n\n/**\n * Calls the specified function [block] with `this` value as its receiver and returns `this` value.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#apply).\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> T.apply(block: T.() -> Unit): T {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    block()\n    return this\n}\n\n/**\n * Calls the specified function [block] with `this` value as its argument and returns `this` value.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#also).\n */\n@kotlin.internal.InlineOnly\n@SinceKotlin(\"1.1\")\npublic inline fun <T> T.also(block: (T) -> Unit): T {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    block(this)\n    return this\n}\n\n/**\n * Calls the specified function [block] with `this` value as its argument and returns its result.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#let).\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> T.let(block: (T) -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return block(this)\n}\n\n/**\n * Returns `this` value if it satisfies the given [predicate] or `null`, if it doesn't.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#takeif-and-takeunless).\n */\n@kotlin.internal.InlineOnly\n@SinceKotlin(\"1.1\")\npublic inline fun <T> T.takeIf(predicate: (T) -> Boolean): T? {\n    contract {\n        callsInPlace(predicate, InvocationKind.EXACTLY_ONCE)\n    }\n    return if (predicate(this)) this else null\n}\n\n/**\n * Returns `this` value if it _does not_ satisfy the given [predicate] or `null`, if it does.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#takeif-and-takeunless).\n */\n@kotlin.internal.InlineOnly\n@SinceKotlin(\"1.1\")\npublic inline fun <T> T.takeUnless(predicate: (T) -> Boolean): T? {\n    contract {\n        callsInPlace(predicate, InvocationKind.EXACTLY_ONCE)\n    }\n    return if (!predicate(this)) this else null\n}\n\n/**\n * Executes the given function [action] specified number of [times].\n *\n * A zero-based index of current iteration is passed as a parameter to [action].\n *\n * @sample samples.misc.ControlFlow.repeat\n */\n@kotlin.internal.InlineOnly\npublic inline fun repeat(times: Int, action: (Int) -> Unit) {\n    contract { callsInPlace(action) }\n\n    for (index in 0 until times) {\n        action(index)\n    }\n}\n",null,null,"/*\n * Copyright 2010-2021 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"CollectionsKt\")\n\npackage kotlin.collections\n\n//\n// NOTE: THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.random.*\nimport kotlin.ranges.contains\nimport kotlin.ranges.reversed\n\n/**\n * Returns 1st *element* from the list.\n * \n * Throws an [IndexOutOfBoundsException] if the size of this list is less than 1.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component1(): T {\n    return get(0)\n}\n\n/**\n * Returns 2nd *element* from the list.\n * \n * Throws an [IndexOutOfBoundsException] if the size of this list is less than 2.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component2(): T {\n    return get(1)\n}\n\n/**\n * Returns 3rd *element* from the list.\n * \n * Throws an [IndexOutOfBoundsException] if the size of this list is less than 3.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component3(): T {\n    return get(2)\n}\n\n/**\n * Returns 4th *element* from the list.\n * \n * Throws an [IndexOutOfBoundsException] if the size of this list is less than 4.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component4(): T {\n    return get(3)\n}\n\n/**\n * Returns 5th *element* from the list.\n * \n * Throws an [IndexOutOfBoundsException] if the size of this list is less than 5.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component5(): T {\n    return get(4)\n}\n\n/**\n * Returns `true` if [element] is found in the collection.\n */\npublic operator fun <@kotlin.internal.OnlyInputTypes T> Iterable<T>.contains(element: T): Boolean {\n    if (this is Collection)\n        return contains(element)\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this collection.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic fun <T> Iterable<T>.elementAt(index: Int): T {\n    if (this is List)\n        return get(index)\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"Collection doesn't contain element at index $index.\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this list.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.elementAt(index: Int): T {\n    return get(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this collection.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\npublic fun <T> Iterable<T>.elementAtOrElse(index: Int, defaultValue: (Int) -> T): T {\n    if (this is List)\n        return this.getOrElse(index, defaultValue)\n    if (index < 0)\n        return defaultValue(index)\n    val iterator = iterator()\n    var count = 0\n    while (iterator.hasNext()) {\n        val element = iterator.next()\n        if (index == count++)\n            return element\n    }\n    return defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this list.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.elementAtOrElse(index: Int, defaultValue: (Int) -> T): T {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this collection.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\npublic fun <T> Iterable<T>.elementAtOrNull(index: Int): T? {\n    if (this is List)\n        return this.getOrNull(index)\n    if (index < 0)\n        return null\n    val iterator = iterator()\n    var count = 0\n    while (iterator.hasNext()) {\n        val element = iterator.next()\n        if (index == count++)\n            return element\n    }\n    return null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this list.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.elementAtOrNull(index: Int): T? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.find(predicate: (T) -> Boolean): T? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.findLast(predicate: (T) -> Boolean): T? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.findLast(predicate: (T) -> Boolean): T? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the collection is empty.\n */\npublic fun <T> Iterable<T>.first(): T {\n    when (this) {\n        is List -> return this.first()\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                throw NoSuchElementException(\"Collection is empty.\")\n            return iterator.next()\n        }\n    }\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the list is empty.\n */\npublic fun <T> List<T>.first(): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"List is empty.\")\n    return this[0]\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun <T> Iterable<T>.first(predicate: (T) -> Boolean): T {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Collection contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first non-null value produced by [transform] function being applied to elements of this collection in iteration order,\n * or throws [NoSuchElementException] if no non-null value was produced.\n * \n * @sample samples.collections.Collections.Transformations.firstNotNullOf\n */\n@SinceKotlin(\"1.5\")\n@kotlin.internal.InlineOnly\npublic inline fun <T, R : Any> Iterable<T>.firstNotNullOf(transform: (T) -> R?): R {\n    return firstNotNullOfOrNull(transform) ?: throw NoSuchElementException(\"No element of the collection was transformed to a non-null value.\")\n}\n\n/**\n * Returns the first non-null value produced by [transform] function being applied to elements of this collection in iteration order,\n * or `null` if no non-null value was produced.\n * \n * @sample samples.collections.Collections.Transformations.firstNotNullOf\n */\n@SinceKotlin(\"1.5\")\n@kotlin.internal.InlineOnly\npublic inline fun <T, R : Any> Iterable<T>.firstNotNullOfOrNull(transform: (T) -> R?): R? {\n    for (element in this) {\n        val result = transform(element)\n        if (result != null) {\n            return result\n        }\n    }\n    return null\n}\n\n/**\n * Returns the first element, or `null` if the collection is empty.\n */\npublic fun <T> Iterable<T>.firstOrNull(): T? {\n    when (this) {\n        is List -> {\n            if (isEmpty())\n                return null\n            else\n                return this[0]\n        }\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                return null\n            return iterator.next()\n        }\n    }\n}\n\n/**\n * Returns the first element, or `null` if the list is empty.\n */\npublic fun <T> List<T>.firstOrNull(): T? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun <T> Iterable<T>.firstOrNull(predicate: (T) -> Boolean): T? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this list.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.getOrElse(index: Int, defaultValue: (Int) -> T): T {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this list.\n * \n * @sample samples.collections.Collections.Elements.getOrNull\n */\npublic fun <T> List<T>.getOrNull(index: Int): T? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns first index of [element], or -1 if the collection does not contain element.\n */\npublic fun <@kotlin.internal.OnlyInputTypes T> Iterable<T>.indexOf(element: T): Int {\n    if (this is List) return this.indexOf(element)\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (element == item)\n            return index\n        index++\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the list does not contain element.\n */\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning, extension takes precedence in some cases\npublic fun <@kotlin.internal.OnlyInputTypes T> List<T>.indexOf(element: T): Int {\n    return indexOf(element)\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the collection does not contain such element.\n */\npublic inline fun <T> Iterable<T>.indexOfFirst(predicate: (T) -> Boolean): Int {\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (predicate(item))\n            return index\n        index++\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the list does not contain such element.\n */\npublic inline fun <T> List<T>.indexOfFirst(predicate: (T) -> Boolean): Int {\n    var index = 0\n    for (item in this) {\n        if (predicate(item))\n            return index\n        index++\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the collection does not contain such element.\n */\npublic inline fun <T> Iterable<T>.indexOfLast(predicate: (T) -> Boolean): Int {\n    var lastIndex = -1\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (predicate(item))\n            lastIndex = index\n        index++\n    }\n    return lastIndex\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the list does not contain such element.\n */\npublic inline fun <T> List<T>.indexOfLast(predicate: (T) -> Boolean): Int {\n    val iterator = this.listIterator(size)\n    while (iterator.hasPrevious()) {\n        if (predicate(iterator.previous())) {\n            return iterator.nextIndex()\n        }\n    }\n    return -1\n}\n\n/**\n * Returns the last element.\n * \n * @throws NoSuchElementException if the collection is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic fun <T> Iterable<T>.last(): T {\n    when (this) {\n        is List -> return this.last()\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                throw NoSuchElementException(\"Collection is empty.\")\n            var last = iterator.next()\n            while (iterator.hasNext())\n                last = iterator.next()\n            return last\n        }\n    }\n}\n\n/**\n * Returns the last element.\n * \n * @throws NoSuchElementException if the list is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic fun <T> List<T>.last(): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"List is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * \n * @throws NoSuchElementException if no such element is found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic inline fun <T> Iterable<T>.last(predicate: (T) -> Boolean): T {\n    var last: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            last = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Collection contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return last as T\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * \n * @throws NoSuchElementException if no such element is found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic inline fun <T> List<T>.last(predicate: (T) -> Boolean): T {\n    val iterator = this.listIterator(size)\n    while (iterator.hasPrevious()) {\n        val element = iterator.previous()\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"List contains no element matching the predicate.\")\n}\n\n/**\n * Returns last index of [element], or -1 if the collection does not contain element.\n */\npublic fun <@kotlin.internal.OnlyInputTypes T> Iterable<T>.lastIndexOf(element: T): Int {\n    if (this is List) return this.lastIndexOf(element)\n    var lastIndex = -1\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (element == item)\n            lastIndex = index\n        index++\n    }\n    return lastIndex\n}\n\n/**\n * Returns last index of [element], or -1 if the list does not contain element.\n */\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning, extension takes precedence in some cases\npublic fun <@kotlin.internal.OnlyInputTypes T> List<T>.lastIndexOf(element: T): Int {\n    return lastIndexOf(element)\n}\n\n/**\n * Returns the last element, or `null` if the collection is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic fun <T> Iterable<T>.lastOrNull(): T? {\n    when (this) {\n        is List -> return if (isEmpty()) null else this[size - 1]\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                return null\n            var last = iterator.next()\n            while (iterator.hasNext())\n                last = iterator.next()\n            return last\n        }\n    }\n}\n\n/**\n * Returns the last element, or `null` if the list is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic fun <T> List<T>.lastOrNull(): T? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic inline fun <T> Iterable<T>.lastOrNull(predicate: (T) -> Boolean): T? {\n    var last: T? = null\n    for (element in this) {\n        if (predicate(element)) {\n            last = element\n        }\n    }\n    return last\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic inline fun <T> List<T>.lastOrNull(predicate: (T) -> Boolean): T? {\n    val iterator = this.listIterator(size)\n    while (iterator.hasPrevious()) {\n        val element = iterator.previous()\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns a random element from this collection.\n * \n * @throws NoSuchElementException if this collection is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.random(): T {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this collection using the specified source of randomness.\n * \n * @throws NoSuchElementException if this collection is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun <T> Collection<T>.random(random: Random): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"Collection is empty.\")\n    return elementAt(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this collection, or `null` if this collection is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.randomOrNull(): T? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this collection using the specified source of randomness, or `null` if this collection is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun <T> Collection<T>.randomOrNull(random: Random): T? {\n    if (isEmpty())\n        return null\n    return elementAt(random.nextInt(size))\n}\n\n/**\n * Returns the single element, or throws an exception if the collection is empty or has more than one element.\n */\npublic fun <T> Iterable<T>.single(): T {\n    when (this) {\n        is List -> return this.single()\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                throw NoSuchElementException(\"Collection is empty.\")\n            val single = iterator.next()\n            if (iterator.hasNext())\n                throw IllegalArgumentException(\"Collection has more than one element.\")\n            return single\n        }\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the list is empty or has more than one element.\n */\npublic fun <T> List<T>.single(): T {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"List is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"List has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun <T> Iterable<T>.single(predicate: (T) -> Boolean): T {\n    var single: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Collection contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Collection contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as T\n}\n\n/**\n * Returns single element, or `null` if the collection is empty or has more than one element.\n */\npublic fun <T> Iterable<T>.singleOrNull(): T? {\n    when (this) {\n        is List -> return if (size == 1) this[0] else null\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                return null\n            val single = iterator.next()\n            if (iterator.hasNext())\n                return null\n            return single\n        }\n    }\n}\n\n/**\n * Returns single element, or `null` if the list is empty or has more than one element.\n */\npublic fun <T> List<T>.singleOrNull(): T? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun <T> Iterable<T>.singleOrNull(predicate: (T) -> Boolean): T? {\n    var single: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun <T> Iterable<T>.drop(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return toList()\n    val list: ArrayList<T>\n    if (this is Collection<*>) {\n        val resultSize = size - n\n        if (resultSize <= 0)\n            return emptyList()\n        if (resultSize == 1)\n            return listOf(last())\n        list = ArrayList<T>(resultSize)\n        if (this is List<T>) {\n            if (this is RandomAccess) {\n                for (index in n until size)\n                    list.add(this[index])\n            } else {\n                for (item in listIterator(n))\n                    list.add(item)\n            }\n            return list\n        }\n    }\n    else {\n        list = ArrayList<T>()\n    }\n    var count = 0\n    for (item in this) {\n        if (count >= n) list.add(item) else ++count\n    }\n    return list.optimizeReadOnlyList()\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun <T> List<T>.dropLast(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun <T> List<T>.dropLastWhile(predicate: (T) -> Boolean): List<T> {\n    if (!isEmpty()) {\n        val iterator = listIterator(size)\n        while (iterator.hasPrevious()) {\n            if (!predicate(iterator.previous())) {\n                return take(iterator.nextIndex() + 1)\n            }\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun <T> Iterable<T>.dropWhile(predicate: (T) -> Boolean): List<T> {\n    var yielding = false\n    val list = ArrayList<T>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun <T> Iterable<T>.filter(predicate: (T) -> Boolean): List<T> {\n    return filterTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexed\n */\npublic inline fun <T> Iterable<T>.filterIndexed(predicate: (index: Int, T) -> Boolean): List<T> {\n    return filterIndexedTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexedTo\n */\npublic inline fun <T, C : MutableCollection<in T>> Iterable<T>.filterIndexedTo(destination: C, predicate: (index: Int, T) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Returns a list containing all elements that are instances of specified type parameter R.\n * \n * @sample samples.collections.Collections.Filtering.filterIsInstance\n */\npublic inline fun <reified R> Iterable<*>.filterIsInstance(): List<@kotlin.internal.NoInfer R> {\n    return filterIsInstanceTo(ArrayList<R>())\n}\n\n/**\n * Appends all elements that are instances of specified type parameter R to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterIsInstanceTo\n */\npublic inline fun <reified R, C : MutableCollection<in R>> Iterable<*>.filterIsInstanceTo(destination: C): C {\n    for (element in this) if (element is R) destination.add(element)\n    return destination\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun <T> Iterable<T>.filterNot(predicate: (T) -> Boolean): List<T> {\n    return filterNotTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Returns a list containing all elements that are not `null`.\n * \n * @sample samples.collections.Collections.Filtering.filterNotNull\n */\npublic fun <T : Any> Iterable<T?>.filterNotNull(): List<T> {\n    return filterNotNullTo(ArrayList<T>())\n}\n\n/**\n * Appends all elements that are not `null` to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterNotNullTo\n */\npublic fun <C : MutableCollection<in T>, T : Any> Iterable<T?>.filterNotNullTo(destination: C): C {\n    for (element in this) if (element != null) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <T, C : MutableCollection<in T>> Iterable<T>.filterNotTo(destination: C, predicate: (T) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <T, C : MutableCollection<in T>> Iterable<T>.filterTo(destination: C, predicate: (T) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun <T> List<T>.slice(indices: IntRange): List<T> {\n    if (indices.isEmpty()) return listOf()\n    return this.subList(indices.start, indices.endInclusive + 1).toList()\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun <T> List<T>.slice(indices: Iterable<Int>): List<T> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<T>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun <T> Iterable<T>.take(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (this is Collection<T>) {\n        if (n >= size) return toList()\n        if (n == 1) return listOf(first())\n    }\n    var count = 0\n    val list = ArrayList<T>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list.optimizeReadOnlyList()\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun <T> List<T>.takeLast(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(last())\n    val list = ArrayList<T>(n)\n    if (this is RandomAccess) {\n        for (index in size - n until size)\n            list.add(this[index])\n    } else {\n        for (item in listIterator(size - n))\n            list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun <T> List<T>.takeLastWhile(predicate: (T) -> Boolean): List<T> {\n    if (isEmpty())\n        return emptyList()\n    val iterator = listIterator(size)\n    while (iterator.hasPrevious()) {\n        if (!predicate(iterator.previous())) {\n            iterator.next()\n            val expectedSize = size - iterator.nextIndex()\n            if (expectedSize == 0) return emptyList()\n            return ArrayList<T>(expectedSize).apply {\n                while (iterator.hasNext())\n                    add(iterator.next())\n            }\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun <T> Iterable<T>.takeWhile(predicate: (T) -> Boolean): List<T> {\n    val list = ArrayList<T>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Reverses elements in the list in-place.\n */\npublic expect fun <T> MutableList<T>.reverse(): Unit\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun <T> Iterable<T>.reversed(): List<T> {\n    if (this is Collection && size <= 1) return toList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Randomly shuffles elements in this list in-place using the specified [random] instance as the source of randomness.\n * \n * See: https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#The_modern_algorithm\n */\n@SinceKotlin(\"1.3\")\npublic fun <T> MutableList<T>.shuffle(random: Random): Unit {\n    for (i in lastIndex downTo 1) {\n        val j = random.nextInt(i + 1)\n        this[j] = this.set(i, this[j])\n    }\n}\n\n/**\n * Sorts elements in the list in-place according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> MutableList<T>.sortBy(crossinline selector: (T) -> R?): Unit {\n    if (size > 1) sortWith(compareBy(selector))\n}\n\n/**\n * Sorts elements in the list in-place descending according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> MutableList<T>.sortByDescending(crossinline selector: (T) -> R?): Unit {\n    if (size > 1) sortWith(compareByDescending(selector))\n}\n\n/**\n * Sorts elements in the list in-place descending according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> MutableList<T>.sortDescending(): Unit {\n    sortWith(reverseOrder())\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Iterable<T>.sorted(): List<T> {\n    if (this is Collection) {\n        if (size <= 1) return this.toList()\n        @Suppress(\"UNCHECKED_CAST\")\n        return (toTypedArray<Comparable<T>>() as Array<T>).apply { sort() }.asList()\n    }\n    return toMutableList().apply { sort() }\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n * \n * @sample samples.collections.Collections.Sorting.sortedBy\n */\npublic inline fun <T, R : Comparable<R>> Iterable<T>.sortedBy(crossinline selector: (T) -> R?): List<T> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> Iterable<T>.sortedByDescending(crossinline selector: (T) -> R?): List<T> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Iterable<T>.sortedDescending(): List<T> {\n    return sortedWith(reverseOrder())\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T> Iterable<T>.sortedWith(comparator: Comparator<in T>): List<T> {\n    if (this is Collection) {\n       if (size <= 1) return this.toList()\n       @Suppress(\"UNCHECKED_CAST\")\n       return (toTypedArray<Any?>() as Array<T>).apply { sortWith(comparator) }.asList()\n    }\n    return toMutableList().apply { sortWith(comparator) }\n}\n\n/**\n * Returns an array of Boolean containing all of the elements of this collection.\n */\npublic fun Collection<Boolean>.toBooleanArray(): BooleanArray {\n    val result = BooleanArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Byte containing all of the elements of this collection.\n */\npublic fun Collection<Byte>.toByteArray(): ByteArray {\n    val result = ByteArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Char containing all of the elements of this collection.\n */\npublic fun Collection<Char>.toCharArray(): CharArray {\n    val result = CharArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Double containing all of the elements of this collection.\n */\npublic fun Collection<Double>.toDoubleArray(): DoubleArray {\n    val result = DoubleArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Float containing all of the elements of this collection.\n */\npublic fun Collection<Float>.toFloatArray(): FloatArray {\n    val result = FloatArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Int containing all of the elements of this collection.\n */\npublic fun Collection<Int>.toIntArray(): IntArray {\n    val result = IntArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Long containing all of the elements of this collection.\n */\npublic fun Collection<Long>.toLongArray(): LongArray {\n    val result = LongArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Short containing all of the elements of this collection.\n */\npublic fun Collection<Short>.toShortArray(): ShortArray {\n    val result = ShortArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given collection.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original collection.\n * \n * @sample samples.collections.Collections.Transformations.associate\n */\npublic inline fun <T, K, V> Iterable<T>.associate(transform: (T) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(collectionSizeOrDefault(10)).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing the elements from the given collection indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original collection.\n * \n * @sample samples.collections.Collections.Transformations.associateBy\n */\npublic inline fun <T, K> Iterable<T>.associateBy(keySelector: (T) -> K): Map<K, T> {\n    val capacity = mapCapacity(collectionSizeOrDefault(10)).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, T>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given collection.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original collection.\n * \n * @sample samples.collections.Collections.Transformations.associateByWithValueTransform\n */\npublic inline fun <T, K, V> Iterable<T>.associateBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, V> {\n    val capacity = mapCapacity(collectionSizeOrDefault(10)).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given collection\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Collections.Transformations.associateByTo\n */\npublic inline fun <T, K, M : MutableMap<in K, in T>> Iterable<T>.associateByTo(destination: M, keySelector: (T) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given collection.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Collections.Transformations.associateByToWithValueTransform\n */\npublic inline fun <T, K, V, M : MutableMap<in K, in V>> Iterable<T>.associateByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given collection.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Collections.Transformations.associateTo\n */\npublic inline fun <T, K, V, M : MutableMap<in K, in V>> Iterable<T>.associateTo(destination: M, transform: (T) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Returns a [Map] where keys are elements from the given collection and values are\n * produced by the [valueSelector] function applied to each element.\n * \n * If any two elements are equal, the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original collection.\n * \n * @sample samples.collections.Collections.Transformations.associateWith\n */\n@SinceKotlin(\"1.3\")\npublic inline fun <K, V> Iterable<K>.associateWith(valueSelector: (K) -> V): Map<K, V> {\n    val result = LinkedHashMap<K, V>(mapCapacity(collectionSizeOrDefault(10)).coerceAtLeast(16))\n    return associateWithTo(result, valueSelector)\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs for each element of the given collection,\n * where key is the element itself and value is provided by the [valueSelector] function applied to that key.\n * \n * If any two elements are equal, the last one overwrites the former value in the map.\n * \n * @sample samples.collections.Collections.Transformations.associateWithTo\n */\n@SinceKotlin(\"1.3\")\npublic inline fun <K, V, M : MutableMap<in K, in V>> Iterable<K>.associateWithTo(destination: M, valueSelector: (K) -> V): M {\n    for (element in this) {\n        destination.put(element, valueSelector(element))\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <T, C : MutableCollection<in T>> Iterable<T>.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Returns a new [HashSet] of all elements.\n */\npublic fun <T> Iterable<T>.toHashSet(): HashSet<T> {\n    return toCollection(HashSet<T>(mapCapacity(collectionSizeOrDefault(12))))\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun <T> Iterable<T>.toList(): List<T> {\n    if (this is Collection) {\n        return when (size) {\n            0 -> emptyList()\n            1 -> listOf(if (this is List) get(0) else iterator().next())\n            else -> this.toMutableList()\n        }\n    }\n    return this.toMutableList().optimizeReadOnlyList()\n}\n\n/**\n * Returns a new [MutableList] filled with all elements of this collection.\n */\npublic fun <T> Iterable<T>.toMutableList(): MutableList<T> {\n    if (this is Collection<T>)\n        return this.toMutableList()\n    return toCollection(ArrayList<T>())\n}\n\n/**\n * Returns a new [MutableList] filled with all elements of this collection.\n */\npublic fun <T> Collection<T>.toMutableList(): MutableList<T> {\n    return ArrayList(this)\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original collection.\n */\npublic fun <T> Iterable<T>.toSet(): Set<T> {\n    if (this is Collection) {\n        return when (size) {\n            0 -> emptySet()\n            1 -> setOf(if (this is List) this[0] else iterator().next())\n            else -> toCollection(LinkedHashSet<T>(mapCapacity(size)))\n        }\n    }\n    return toCollection(LinkedHashSet<T>()).optimizeReadOnlySet()\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original collection.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <T, R> Iterable<T>.flatMap(transform: (T) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original collection.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapSequence\")\npublic inline fun <T, R> Iterable<T>.flatMap(transform: (T) -> Sequence<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original collection.\n * \n * @sample samples.collections.Collections.Transformations.flatMapIndexed\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterable\")\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> Iterable<T>.flatMapIndexed(transform: (index: Int, T) -> Iterable<R>): List<R> {\n    return flatMapIndexedTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original collection.\n * \n * @sample samples.collections.Collections.Transformations.flatMapIndexed\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedSequence\")\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> Iterable<T>.flatMapIndexed(transform: (index: Int, T) -> Sequence<R>): List<R> {\n    return flatMapIndexedTo(ArrayList<R>(), transform)\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original collection, to the given [destination].\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterableTo\")\n@kotlin.internal.InlineOnly\npublic inline fun <T, R, C : MutableCollection<in R>> Iterable<T>.flatMapIndexedTo(destination: C, transform: (index: Int, T) -> Iterable<R>): C {\n    var index = 0\n    for (element in this) {\n        val list = transform(checkIndexOverflow(index++), element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original collection, to the given [destination].\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedSequenceTo\")\n@kotlin.internal.InlineOnly\npublic inline fun <T, R, C : MutableCollection<in R>> Iterable<T>.flatMapIndexedTo(destination: C, transform: (index: Int, T) -> Sequence<R>): C {\n    var index = 0\n    for (element in this) {\n        val list = transform(checkIndexOverflow(index++), element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original collection, to the given [destination].\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Iterable<T>.flatMapTo(destination: C, transform: (T) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original collection, to the given [destination].\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapSequenceTo\")\npublic inline fun <T, R, C : MutableCollection<in R>> Iterable<T>.flatMapTo(destination: C, transform: (T) -> Sequence<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original collection by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original collection.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <T, K> Iterable<T>.groupBy(keySelector: (T) -> K): Map<K, List<T>> {\n    return groupByTo(LinkedHashMap<K, MutableList<T>>(), keySelector)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original collection\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original collection.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <T, K, V> Iterable<T>.groupBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups elements of the original collection by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <T, K, M : MutableMap<in K, MutableList<T>>> Iterable<T>.groupByTo(destination: M, keySelector: (T) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<T>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original collection\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <T, K, V, M : MutableMap<in K, MutableList<V>>> Iterable<T>.groupByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Creates a [Grouping] source from a collection to be used later with one of group-and-fold operations\n * using the specified [keySelector] function to extract a key from each element.\n * \n * @sample samples.collections.Grouping.groupingByEachCount\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <T, K> Iterable<T>.groupingBy(crossinline keySelector: (T) -> K): Grouping<T, K> {\n    return object : Grouping<T, K> {\n        override fun sourceIterator(): Iterator<T> = this@groupingBy.iterator()\n        override fun keyOf(element: T): K = keySelector(element)\n    }\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original collection.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <T, R> Iterable<T>.map(transform: (T) -> R): List<R> {\n    return mapTo(ArrayList<R>(collectionSizeOrDefault(10)), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original collection.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R> Iterable<T>.mapIndexed(transform: (index: Int, T) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(collectionSizeOrDefault(10)), transform)\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each element and its index in the original collection.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R : Any> Iterable<T>.mapIndexedNotNull(transform: (index: Int, T) -> R?): List<R> {\n    return mapIndexedNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original collection\n * and appends only the non-null results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R : Any, C : MutableCollection<in R>> Iterable<T>.mapIndexedNotNullTo(destination: C, transform: (index: Int, T) -> R?): C {\n    forEachIndexed { index, element -> transform(index, element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original collection\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Iterable<T>.mapIndexedTo(destination: C, transform: (index: Int, T) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(checkIndexOverflow(index++), item))\n    return destination\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each element in the original collection.\n * \n * @sample samples.collections.Collections.Transformations.mapNotNull\n */\npublic inline fun <T, R : Any> Iterable<T>.mapNotNull(transform: (T) -> R?): List<R> {\n    return mapNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each element in the original collection\n * and appends only the non-null results to the given [destination].\n */\npublic inline fun <T, R : Any, C : MutableCollection<in R>> Iterable<T>.mapNotNullTo(destination: C, transform: (T) -> R?): C {\n    forEach { element -> transform(element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original collection\n * and appends the results to the given [destination].\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Iterable<T>.mapTo(destination: C, transform: (T) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original collection\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun <T> Iterable<T>.withIndex(): Iterable<IndexedValue<T>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a list containing only distinct elements from the given collection.\n * \n * Among equal elements of the given collection, only the first one will be present in the resulting list.\n * The elements in the resulting list are in the same order as they were in the source collection.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun <T> Iterable<T>.distinct(): List<T> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only elements from the given collection\n * having distinct keys returned by the given [selector] function.\n * \n * Among elements of the given collection with equal keys, only the first one will be present in the resulting list.\n * The elements in the resulting list are in the same order as they were in the source collection.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <T, K> Iterable<T>.distinctBy(selector: (T) -> K): List<T> {\n    val set = HashSet<K>()\n    val list = ArrayList<T>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a set containing all elements that are contained by both this collection and the specified collection.\n * \n * The returned set preserves the element iteration order of the original collection.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun <T> Iterable<T>.intersect(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this collection and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original collection.\n */\npublic infix fun <T> Iterable<T>.subtract(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a new [MutableSet] containing all distinct elements from the given collection.\n * \n * The returned set preserves the element iteration order of the original collection.\n */\npublic fun <T> Iterable<T>.toMutableSet(): MutableSet<T> {\n    return when (this) {\n        is Collection<T> -> LinkedHashSet(this)\n        else -> toCollection(LinkedHashSet<T>())\n    }\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original collection.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun <T> Iterable<T>.union(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun <T> Iterable<T>.all(predicate: (T) -> Boolean): Boolean {\n    if (this is Collection && isEmpty()) return true\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if collection has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun <T> Iterable<T>.any(): Boolean {\n    if (this is Collection) return !isEmpty()\n    return iterator().hasNext()\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun <T> Iterable<T>.any(predicate: (T) -> Boolean): Boolean {\n    if (this is Collection && isEmpty()) return false\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns the number of elements in this collection.\n */\npublic fun <T> Iterable<T>.count(): Int {\n    if (this is Collection) return size\n    var count = 0\n    for (element in this) checkCountOverflow(++count)\n    return count\n}\n\n/**\n * Returns the number of elements in this collection.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun <T> Iterable<T>.count(predicate: (T) -> Boolean): Int {\n    if (this is Collection && isEmpty()) return 0\n    var count = 0\n    for (element in this) if (predicate(element)) checkCountOverflow(++count)\n    return count\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns the specified [initial] value if the collection is empty.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n */\npublic inline fun <T, R> Iterable<T>.fold(initial: R, operation: (acc: R, T) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original collection.\n * \n * Returns the specified [initial] value if the collection is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <T, R> Iterable<T>.foldIndexed(initial: R, operation: (index: Int, acc: R, T) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(checkIndexOverflow(index++), accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns the specified [initial] value if the list is empty.\n * \n * @param [operation] function that takes an element and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <T, R> List<T>.foldRight(initial: R, operation: (T, acc: R) -> R): R {\n    var accumulator = initial\n    if (!isEmpty()) {\n        val iterator = listIterator(size)\n        while (iterator.hasPrevious()) {\n            accumulator = operation(iterator.previous(), accumulator)\n        }\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original list and current accumulator value.\n * \n * Returns the specified [initial] value if the list is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <T, R> List<T>.foldRightIndexed(initial: R, operation: (index: Int, T, acc: R) -> R): R {\n    var accumulator = initial\n    if (!isEmpty()) {\n        val iterator = listIterator(size)\n        while (iterator.hasPrevious()) {\n            val index = iterator.previousIndex()\n            accumulator = operation(index, iterator.previous(), accumulator)\n        }\n    }\n    return accumulator\n}\n\n/**\n * Performs the given [action] on each element.\n */\n@kotlin.internal.HidesMembers\npublic inline fun <T> Iterable<T>.forEach(action: (T) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\npublic inline fun <T> Iterable<T>.forEachIndexed(action: (index: Int, T) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(checkIndexOverflow(index++), item)\n}\n\n@Deprecated(\"Use maxOrNull instead.\", ReplaceWith(\"this.maxOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\n@SinceKotlin(\"1.1\")\npublic fun Iterable<Double>.max(): Double? {\n    return maxOrNull()\n}\n\n@Deprecated(\"Use maxOrNull instead.\", ReplaceWith(\"this.maxOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\n@SinceKotlin(\"1.1\")\npublic fun Iterable<Float>.max(): Float? {\n    return maxOrNull()\n}\n\n@Deprecated(\"Use maxOrNull instead.\", ReplaceWith(\"this.maxOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic fun <T : Comparable<T>> Iterable<T>.max(): T? {\n    return maxOrNull()\n}\n\n@Deprecated(\"Use maxByOrNull instead.\", ReplaceWith(\"this.maxByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic inline fun <T, R : Comparable<R>> Iterable<T>.maxBy(selector: (T) -> R): T? {\n    return maxByOrNull(selector)\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <T, R : Comparable<R>> Iterable<T>.maxByOrNull(selector: (T) -> R): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var maxElem = iterator.next()\n    if (!iterator.hasNext()) return maxElem\n    var maxValue = selector(maxElem)\n    do {\n        val e = iterator.next()\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    } while (iterator.hasNext())\n    return maxElem\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the collection.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the collection is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.maxOf(selector: (T) -> Double): Double {\n    val iterator = iterator()\n    if (!iterator.hasNext()) throw NoSuchElementException()\n    var maxValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the collection.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the collection is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.maxOf(selector: (T) -> Float): Float {\n    val iterator = iterator()\n    if (!iterator.hasNext()) throw NoSuchElementException()\n    var maxValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the collection.\n * \n * @throws NoSuchElementException if the collection is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R : Comparable<R>> Iterable<T>.maxOf(selector: (T) -> R): R {\n    val iterator = iterator()\n    if (!iterator.hasNext()) throw NoSuchElementException()\n    var maxValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the collection or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.maxOfOrNull(selector: (T) -> Double): Double? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var maxValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the collection or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.maxOfOrNull(selector: (T) -> Float): Float? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var maxValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the collection or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R : Comparable<R>> Iterable<T>.maxOfOrNull(selector: (T) -> R): R? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var maxValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the collection.\n * \n * @throws NoSuchElementException if the collection is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> Iterable<T>.maxOfWith(comparator: Comparator<in R>, selector: (T) -> R): R {\n    val iterator = iterator()\n    if (!iterator.hasNext()) throw NoSuchElementException()\n    var maxValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the collection or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> Iterable<T>.maxOfWithOrNull(comparator: Comparator<in R>, selector: (T) -> R): R? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var maxValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.4\")\npublic fun Iterable<Double>.maxOrNull(): Double? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        max = maxOf(max, e)\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.4\")\npublic fun Iterable<Float>.maxOrNull(): Float? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        max = maxOf(max, e)\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun <T : Comparable<T>> Iterable<T>.maxOrNull(): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (max < e) max = e\n    }\n    return max\n}\n\n@Deprecated(\"Use maxWithOrNull instead.\", ReplaceWith(\"this.maxWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic fun <T> Iterable<T>.maxWith(comparator: Comparator<in T>): T? {\n    return maxWithOrNull(comparator)\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun <T> Iterable<T>.maxWithOrNull(comparator: Comparator<in T>): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n@Deprecated(\"Use minOrNull instead.\", ReplaceWith(\"this.minOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\n@SinceKotlin(\"1.1\")\npublic fun Iterable<Double>.min(): Double? {\n    return minOrNull()\n}\n\n@Deprecated(\"Use minOrNull instead.\", ReplaceWith(\"this.minOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\n@SinceKotlin(\"1.1\")\npublic fun Iterable<Float>.min(): Float? {\n    return minOrNull()\n}\n\n@Deprecated(\"Use minOrNull instead.\", ReplaceWith(\"this.minOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic fun <T : Comparable<T>> Iterable<T>.min(): T? {\n    return minOrNull()\n}\n\n@Deprecated(\"Use minByOrNull instead.\", ReplaceWith(\"this.minByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic inline fun <T, R : Comparable<R>> Iterable<T>.minBy(selector: (T) -> R): T? {\n    return minByOrNull(selector)\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <T, R : Comparable<R>> Iterable<T>.minByOrNull(selector: (T) -> R): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var minElem = iterator.next()\n    if (!iterator.hasNext()) return minElem\n    var minValue = selector(minElem)\n    do {\n        val e = iterator.next()\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    } while (iterator.hasNext())\n    return minElem\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the collection.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the collection is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.minOf(selector: (T) -> Double): Double {\n    val iterator = iterator()\n    if (!iterator.hasNext()) throw NoSuchElementException()\n    var minValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the collection.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the collection is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.minOf(selector: (T) -> Float): Float {\n    val iterator = iterator()\n    if (!iterator.hasNext()) throw NoSuchElementException()\n    var minValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the collection.\n * \n * @throws NoSuchElementException if the collection is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R : Comparable<R>> Iterable<T>.minOf(selector: (T) -> R): R {\n    val iterator = iterator()\n    if (!iterator.hasNext()) throw NoSuchElementException()\n    var minValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the collection or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.minOfOrNull(selector: (T) -> Double): Double? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var minValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the collection or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.minOfOrNull(selector: (T) -> Float): Float? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var minValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the collection or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R : Comparable<R>> Iterable<T>.minOfOrNull(selector: (T) -> R): R? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var minValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the collection.\n * \n * @throws NoSuchElementException if the collection is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> Iterable<T>.minOfWith(comparator: Comparator<in R>, selector: (T) -> R): R {\n    val iterator = iterator()\n    if (!iterator.hasNext()) throw NoSuchElementException()\n    var minValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the collection or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> Iterable<T>.minOfWithOrNull(comparator: Comparator<in R>, selector: (T) -> R): R? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var minValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.4\")\npublic fun Iterable<Double>.minOrNull(): Double? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        min = minOf(min, e)\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.4\")\npublic fun Iterable<Float>.minOrNull(): Float? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        min = minOf(min, e)\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun <T : Comparable<T>> Iterable<T>.minOrNull(): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (min > e) min = e\n    }\n    return min\n}\n\n@Deprecated(\"Use minWithOrNull instead.\", ReplaceWith(\"this.minWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic fun <T> Iterable<T>.minWith(comparator: Comparator<in T>): T? {\n    return minWithOrNull(comparator)\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun <T> Iterable<T>.minWithOrNull(comparator: Comparator<in T>): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns `true` if the collection has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun <T> Iterable<T>.none(): Boolean {\n    if (this is Collection) return isEmpty()\n    return !iterator().hasNext()\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun <T> Iterable<T>.none(predicate: (T) -> Boolean): Boolean {\n    if (this is Collection && isEmpty()) return true\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Performs the given [action] on each element and returns the collection itself afterwards.\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <T, C : Iterable<T>> C.onEach(action: (T) -> Unit): C {\n    return apply { for (element in this) action(element) }\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element,\n * and returns the collection itself afterwards.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <T, C : Iterable<T>> C.onEachIndexed(action: (index: Int, T) -> Unit): C {\n    return apply { forEachIndexed(action) }\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Throws an exception if this collection is empty. If the collection can be empty in an expected way,\n * please use [reduceOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun <S, T : S> Iterable<T>.reduce(operation: (acc: S, T) -> S): S {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) throw UnsupportedOperationException(\"Empty collection can't be reduced.\")\n    var accumulator: S = iterator.next()\n    while (iterator.hasNext()) {\n        accumulator = operation(accumulator, iterator.next())\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original collection.\n * \n * Throws an exception if this collection is empty. If the collection can be empty in an expected way,\n * please use [reduceIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun <S, T : S> Iterable<T>.reduceIndexed(operation: (index: Int, acc: S, T) -> S): S {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) throw UnsupportedOperationException(\"Empty collection can't be reduced.\")\n    var index = 1\n    var accumulator: S = iterator.next()\n    while (iterator.hasNext()) {\n        accumulator = operation(checkIndexOverflow(index++), accumulator, iterator.next())\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original collection.\n * \n * Returns `null` if the collection is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <S, T : S> Iterable<T>.reduceIndexedOrNull(operation: (index: Int, acc: S, T) -> S): S? {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) return null\n    var index = 1\n    var accumulator: S = iterator.next()\n    while (iterator.hasNext()) {\n        accumulator = operation(checkIndexOverflow(index++), accumulator, iterator.next())\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns `null` if the collection is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun <S, T : S> Iterable<T>.reduceOrNull(operation: (acc: S, T) -> S): S? {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) return null\n    var accumulator: S = iterator.next()\n    while (iterator.hasNext()) {\n        accumulator = operation(accumulator, iterator.next())\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Throws an exception if this list is empty. If the list can be empty in an expected way,\n * please use [reduceRightOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun <S, T : S> List<T>.reduceRight(operation: (T, acc: S) -> S): S {\n    val iterator = listIterator(size)\n    if (!iterator.hasPrevious())\n        throw UnsupportedOperationException(\"Empty list can't be reduced.\")\n    var accumulator: S = iterator.previous()\n    while (iterator.hasPrevious()) {\n        accumulator = operation(iterator.previous(), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original list and current accumulator value.\n * \n * Throws an exception if this list is empty. If the list can be empty in an expected way,\n * please use [reduceRightIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun <S, T : S> List<T>.reduceRightIndexed(operation: (index: Int, T, acc: S) -> S): S {\n    val iterator = listIterator(size)\n    if (!iterator.hasPrevious())\n        throw UnsupportedOperationException(\"Empty list can't be reduced.\")\n    var accumulator: S = iterator.previous()\n    while (iterator.hasPrevious()) {\n        val index = iterator.previousIndex()\n        accumulator = operation(index, iterator.previous(), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original list and current accumulator value.\n * \n * Returns `null` if the list is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <S, T : S> List<T>.reduceRightIndexedOrNull(operation: (index: Int, T, acc: S) -> S): S? {\n    val iterator = listIterator(size)\n    if (!iterator.hasPrevious())\n        return null\n    var accumulator: S = iterator.previous()\n    while (iterator.hasPrevious()) {\n        val index = iterator.previousIndex()\n        accumulator = operation(index, iterator.previous(), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns `null` if the list is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun <S, T : S> List<T>.reduceRightOrNull(operation: (T, acc: S) -> S): S? {\n    val iterator = listIterator(size)\n    if (!iterator.hasPrevious())\n        return null\n    var accumulator: S = iterator.previous()\n    while (iterator.hasPrevious()) {\n        accumulator = operation(iterator.previous(), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <T, R> Iterable<T>.runningFold(initial: R, operation: (acc: R, T) -> R): List<R> {\n    val estimatedSize = collectionSizeOrDefault(9)\n    if (estimatedSize == 0) return listOf(initial)\n    val result = ArrayList<R>(estimatedSize + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original collection and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <T, R> Iterable<T>.runningFoldIndexed(initial: R, operation: (index: Int, acc: R, T) -> R): List<R> {\n    val estimatedSize = collectionSizeOrDefault(9)\n    if (estimatedSize == 0) return listOf(initial)\n    val result = ArrayList<R>(estimatedSize + 1).apply { add(initial) }\n    var index = 0\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(index++, accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this collection.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and the element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun <S, T : S> Iterable<T>.runningReduce(operation: (acc: S, T) -> S): List<S> {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) return emptyList()\n    var accumulator: S = iterator.next()\n    val result = ArrayList<S>(collectionSizeOrDefault(10)).apply { add(accumulator) }\n    while (iterator.hasNext()) {\n        accumulator = operation(accumulator, iterator.next())\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original collection and current accumulator value that starts with the first element of this collection.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <S, T : S> Iterable<T>.runningReduceIndexed(operation: (index: Int, acc: S, T) -> S): List<S> {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) return emptyList()\n    var accumulator: S = iterator.next()\n    val result = ArrayList<S>(collectionSizeOrDefault(10)).apply { add(accumulator) }\n    var index = 1\n    while (iterator.hasNext()) {\n        accumulator = operation(index++, accumulator, iterator.next())\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun <T, R> Iterable<T>.scan(initial: R, operation: (acc: R, T) -> R): List<R> {\n    return runningFold(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original collection and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun <T, R> Iterable<T>.scanIndexed(initial: R, operation: (index: Int, acc: R, T) -> R): List<R> {\n    return runningFoldIndexed(initial, operation)\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the collection.\n */\n@Deprecated(\"Use sumOf instead.\", ReplaceWith(\"this.sumOf(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\npublic inline fun <T> Iterable<T>.sumBy(selector: (T) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the collection.\n */\n@Deprecated(\"Use sumOf instead.\", ReplaceWith(\"this.sumOf(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\npublic inline fun <T> Iterable<T>.sumByDouble(selector: (T) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the collection.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfDouble\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.sumOf(selector: (T) -> Double): Double {\n    var sum: Double = 0.toDouble()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the collection.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfInt\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.sumOf(selector: (T) -> Int): Int {\n    var sum: Int = 0.toInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the collection.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfLong\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.sumOf(selector: (T) -> Long): Long {\n    var sum: Long = 0.toLong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the collection.\n */\n@SinceKotlin(\"1.5\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfUInt\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.sumOf(selector: (T) -> UInt): UInt {\n    var sum: UInt = 0.toUInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the collection.\n */\n@SinceKotlin(\"1.5\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfULong\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.sumOf(selector: (T) -> ULong): ULong {\n    var sum: ULong = 0.toULong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns an original collection containing all the non-`null` elements, throwing an [IllegalArgumentException] if there are any `null` elements.\n */\npublic fun <T : Any> Iterable<T?>.requireNoNulls(): Iterable<T> {\n    for (element in this) {\n        if (element == null) {\n            throw IllegalArgumentException(\"null element found in $this.\")\n        }\n    }\n    @Suppress(\"UNCHECKED_CAST\")\n    return this as Iterable<T>\n}\n\n/**\n * Returns an original collection containing all the non-`null` elements, throwing an [IllegalArgumentException] if there are any `null` elements.\n */\npublic fun <T : Any> List<T?>.requireNoNulls(): List<T> {\n    for (element in this) {\n        if (element == null) {\n            throw IllegalArgumentException(\"null element found in $this.\")\n        }\n    }\n    @Suppress(\"UNCHECKED_CAST\")\n    return this as List<T>\n}\n\n/**\n * Splits this collection into a list of lists each not exceeding the given [size].\n * \n * The last list in the resulting list may have fewer elements than the given [size].\n * \n * @param size the number of elements to take in each list, must be positive and can be greater than the number of elements in this collection.\n * \n * @sample samples.collections.Collections.Transformations.chunked\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> Iterable<T>.chunked(size: Int): List<List<T>> {\n    return windowed(size, size, partialWindows = true)\n}\n\n/**\n * Splits this collection into several lists each not exceeding the given [size]\n * and applies the given [transform] function to an each.\n * \n * @return list of results of the [transform] applied to an each list.\n * \n * Note that the list passed to the [transform] function is ephemeral and is valid only inside that function.\n * You should not store it or allow it to escape in some way, unless you made a snapshot of it.\n * The last list may have fewer elements than the given [size].\n * \n * @param size the number of elements to take in each list, must be positive and can be greater than the number of elements in this collection.\n * \n * @sample samples.text.Strings.chunkedTransform\n */\n@SinceKotlin(\"1.2\")\npublic fun <T, R> Iterable<T>.chunked(size: Int, transform: (List<T>) -> R): List<R> {\n    return windowed(size, size, partialWindows = true, transform = transform)\n}\n\n/**\n * Returns a list containing all elements of the original collection without the first occurrence of the given [element].\n */\npublic operator fun <T> Iterable<T>.minus(element: T): List<T> {\n    val result = ArrayList<T>(collectionSizeOrDefault(10))\n    var removed = false\n    return this.filterTo(result) { if (!removed && it == element) { removed = true; false } else true }\n}\n\n/**\n * Returns a list containing all elements of the original collection except the elements contained in the given [elements] array.\n * \n * The [elements] array may be converted to a [HashSet] to speed up the operation, thus the elements are required to have\n * a correct and stable implementation of `hashCode()` that doesn't change between successive invocations.\n */\npublic operator fun <T> Iterable<T>.minus(elements: Array<out T>): List<T> {\n    if (elements.isEmpty()) return this.toList()\n    val other = elements.toHashSet()\n    return this.filterNot { it in other }\n}\n\n/**\n * Returns a list containing all elements of the original collection except the elements contained in the given [elements] collection.\n * \n * The [elements] collection may be converted to a [HashSet] to speed up the operation, thus the elements are required to have\n * a correct and stable implementation of `hashCode()` that doesn't change between successive invocations.\n */\npublic operator fun <T> Iterable<T>.minus(elements: Iterable<T>): List<T> {\n    val other = elements.convertToSetForSetOperationWith(this)\n    if (other.isEmpty())\n        return this.toList()\n    return this.filterNot { it in other }\n}\n\n/**\n * Returns a list containing all elements of the original collection except the elements contained in the given [elements] sequence.\n * \n * The [elements] sequence may be converted to a [HashSet] to speed up the operation, thus the elements are required to have\n * a correct and stable implementation of `hashCode()` that doesn't change between successive invocations.\n */\npublic operator fun <T> Iterable<T>.minus(elements: Sequence<T>): List<T> {\n    val other = elements.toHashSet()\n    if (other.isEmpty())\n        return this.toList()\n    return this.filterNot { it in other }\n}\n\n/**\n * Returns a list containing all elements of the original collection without the first occurrence of the given [element].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.minusElement(element: T): List<T> {\n    return minus(element)\n}\n\n/**\n * Splits the original collection into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n * \n * @sample samples.collections.Iterables.Operations.partition\n */\npublic inline fun <T> Iterable<T>.partition(predicate: (T) -> Boolean): Pair<List<T>, List<T>> {\n    val first = ArrayList<T>()\n    val second = ArrayList<T>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Returns a list containing all elements of the original collection and then the given [element].\n */\npublic operator fun <T> Iterable<T>.plus(element: T): List<T> {\n    if (this is Collection) return this.plus(element)\n    val result = ArrayList<T>()\n    result.addAll(this)\n    result.add(element)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then the given [element].\n */\npublic operator fun <T> Collection<T>.plus(element: T): List<T> {\n    val result = ArrayList<T>(size + 1)\n    result.addAll(this)\n    result.add(element)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] array.\n */\npublic operator fun <T> Iterable<T>.plus(elements: Array<out T>): List<T> {\n    if (this is Collection) return this.plus(elements)\n    val result = ArrayList<T>()\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] array.\n */\npublic operator fun <T> Collection<T>.plus(elements: Array<out T>): List<T> {\n    val result = ArrayList<T>(this.size + elements.size)\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] collection.\n */\npublic operator fun <T> Iterable<T>.plus(elements: Iterable<T>): List<T> {\n    if (this is Collection) return this.plus(elements)\n    val result = ArrayList<T>()\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] collection.\n */\npublic operator fun <T> Collection<T>.plus(elements: Iterable<T>): List<T> {\n    if (elements is Collection) {\n        val result = ArrayList<T>(this.size + elements.size)\n        result.addAll(this)\n        result.addAll(elements)\n        return result\n    } else {\n        val result = ArrayList<T>(this)\n        result.addAll(elements)\n        return result\n    }\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] sequence.\n */\npublic operator fun <T> Iterable<T>.plus(elements: Sequence<T>): List<T> {\n    val result = ArrayList<T>()\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] sequence.\n */\npublic operator fun <T> Collection<T>.plus(elements: Sequence<T>): List<T> {\n    val result = ArrayList<T>(this.size + 10)\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then the given [element].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.plusElement(element: T): List<T> {\n    return plus(element)\n}\n\n/**\n * Returns a list containing all elements of the original collection and then the given [element].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.plusElement(element: T): List<T> {\n    return plus(element)\n}\n\n/**\n * Returns a list of snapshots of the window of the given [size]\n * sliding along this collection with the given [step], where each\n * snapshot is a list.\n * \n * Several last lists may have fewer elements than the given [size].\n * \n * Both [size] and [step] must be positive and can be greater than the number of elements in this collection.\n * @param size the number of elements to take in each window\n * @param step the number of elements to move the window forward by on an each step, by default 1\n * @param partialWindows controls whether or not to keep partial windows in the end if any,\n * by default `false` which means partial windows won't be preserved\n * \n * @sample samples.collections.Sequences.Transformations.takeWindows\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> Iterable<T>.windowed(size: Int, step: Int = 1, partialWindows: Boolean = false): List<List<T>> {\n    checkWindowSizeStep(size, step)\n    if (this is RandomAccess && this is List) {\n        val thisSize = this.size\n        val resultCapacity = thisSize / step + if (thisSize % step == 0) 0 else 1\n        val result = ArrayList<List<T>>(resultCapacity)\n        var index = 0\n        while (index in 0 until thisSize) {\n            val windowSize = size.coerceAtMost(thisSize - index)\n            if (windowSize < size && !partialWindows) break\n            result.add(List(windowSize) { this[it + index] })\n            index += step\n        }\n        return result\n    }\n    val result = ArrayList<List<T>>()\n    windowedIterator(iterator(), size, step, partialWindows, reuseBuffer = false).forEach {\n        result.add(it)\n    }\n    return result\n}\n\n/**\n * Returns a list of results of applying the given [transform] function to\n * an each list representing a view over the window of the given [size]\n * sliding along this collection with the given [step].\n * \n * Note that the list passed to the [transform] function is ephemeral and is valid only inside that function.\n * You should not store it or allow it to escape in some way, unless you made a snapshot of it.\n * Several last lists may have fewer elements than the given [size].\n * \n * Both [size] and [step] must be positive and can be greater than the number of elements in this collection.\n * @param size the number of elements to take in each window\n * @param step the number of elements to move the window forward by on an each step, by default 1\n * @param partialWindows controls whether or not to keep partial windows in the end if any,\n * by default `false` which means partial windows won't be preserved\n * \n * @sample samples.collections.Sequences.Transformations.averageWindows\n */\n@SinceKotlin(\"1.2\")\npublic fun <T, R> Iterable<T>.windowed(size: Int, step: Int = 1, partialWindows: Boolean = false, transform: (List<T>) -> R): List<R> {\n    checkWindowSizeStep(size, step)\n    if (this is RandomAccess && this is List) {\n        val thisSize = this.size\n        val resultCapacity = thisSize / step + if (thisSize % step == 0) 0 else 1\n        val result = ArrayList<R>(resultCapacity)\n        val window = MovingSubList(this)\n        var index = 0\n        while (index in 0 until thisSize) {\n            val windowSize = size.coerceAtMost(thisSize - index)\n            if (!partialWindows && windowSize < size) break\n            window.move(index, index + windowSize)\n            result.add(transform(window))\n            index += step\n        }\n        return result\n    }\n    val result = ArrayList<R>()\n    windowedIterator(iterator(), size, step, partialWindows, reuseBuffer = true).forEach {\n        result.add(transform(it))\n    }\n    return result\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <T, R> Iterable<T>.zip(other: Array<out R>): List<Pair<T, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from the elements of `this` collection and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <T, R, V> Iterable<T>.zip(other: Array<out R>, transform: (a: T, b: R) -> V): List<V> {\n    val arraySize = other.size\n    val list = ArrayList<V>(minOf(collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in this) {\n        if (i >= arraySize) break\n        list.add(transform(element, other[i++]))\n    }\n    return list\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] collection with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <T, R> Iterable<T>.zip(other: Iterable<R>): List<Pair<T, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from the elements of `this` collection and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <T, R, V> Iterable<T>.zip(other: Iterable<R>, transform: (a: T, b: R) -> V): List<V> {\n    val first = iterator()\n    val second = other.iterator()\n    val list = ArrayList<V>(minOf(collectionSizeOrDefault(10), other.collectionSizeOrDefault(10)))\n    while (first.hasNext() && second.hasNext()) {\n        list.add(transform(first.next(), second.next()))\n    }\n    return list\n}\n\n/**\n * Returns a list of pairs of each two adjacent elements in this collection.\n * \n * The returned list is empty if this collection contains less than two elements.\n * \n * @sample samples.collections.Collections.Transformations.zipWithNext\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> Iterable<T>.zipWithNext(): List<Pair<T, T>> {\n    return zipWithNext { a, b -> a to b }\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to an each pair of two adjacent elements in this collection.\n * \n * The returned list is empty if this collection contains less than two elements.\n * \n * @sample samples.collections.Collections.Transformations.zipWithNextToFindDeltas\n */\n@SinceKotlin(\"1.2\")\npublic inline fun <T, R> Iterable<T>.zipWithNext(transform: (a: T, b: T) -> R): List<R> {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return emptyList()\n    val result = mutableListOf<R>()\n    var current = iterator.next()\n    while (iterator.hasNext()) {\n        val next = iterator.next()\n        result.add(transform(current, next))\n        current = next\n    }\n    return result\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <T, A : Appendable> Iterable<T>.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            buffer.appendElement(element, transform)\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun <T> Iterable<T>.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Returns this collection as an [Iterable].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.asIterable(): Iterable<T> {\n    return this\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original collection returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromCollection\n */\npublic fun <T> Iterable<T>.asSequence(): Sequence<T> {\n    return Sequence { this.iterator() }\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfByte\")\npublic fun Iterable<Byte>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfShort\")\npublic fun Iterable<Short>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfInt\")\npublic fun Iterable<Int>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfLong\")\npublic fun Iterable<Long>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfFloat\")\npublic fun Iterable<Float>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfDouble\")\npublic fun Iterable<Double>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfByte\")\npublic fun Iterable<Byte>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfShort\")\npublic fun Iterable<Short>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfInt\")\npublic fun Iterable<Int>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfLong\")\npublic fun Iterable<Long>.sum(): Long {\n    var sum: Long = 0L\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfFloat\")\npublic fun Iterable<Float>.sum(): Float {\n    var sum: Float = 0.0f\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfDouble\")\npublic fun Iterable<Double>.sum(): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n","(function (root, factory) {\n    if (typeof define === 'function' && define.amd) {\n        define('kotlin', ['exports'], factory);\n    }\n    else if (typeof exports === 'object') {\n        factory(module.exports);\n    }\n    else {\n        root.kotlin = {};\n        factory(root.kotlin);\n    }\n}(this, function (Kotlin) {\n    var _ = Kotlin;\n\n    insertContent();\n}));\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors. \n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\nKotlin.isBooleanArray = function (a) {\n    return (Array.isArray(a) || a instanceof Int8Array) && a.$type$ === \"BooleanArray\"\n};\n\nKotlin.isByteArray = function (a) {\n    return a instanceof Int8Array && a.$type$ !== \"BooleanArray\"\n};\n\nKotlin.isShortArray = function (a) {\n    return a instanceof Int16Array\n};\n\nKotlin.isCharArray = function (a) {\n    return a instanceof Uint16Array && a.$type$ === \"CharArray\"\n};\n\nKotlin.isIntArray = function (a) {\n    return a instanceof Int32Array\n};\n\nKotlin.isFloatArray = function (a) {\n    return a instanceof Float32Array\n};\n\nKotlin.isDoubleArray = function (a) {\n    return a instanceof Float64Array\n};\n\nKotlin.isLongArray = function (a) {\n    return Array.isArray(a) && a.$type$ === \"LongArray\"\n};\n\nKotlin.isArray = function (a) {\n    return Array.isArray(a) && !a.$type$;\n};\n\nKotlin.isArrayish = function (a) {\n    return Array.isArray(a) || ArrayBuffer.isView(a)\n};\n\nKotlin.arrayToString = function (a) {\n    if (a === null) return \"null\"\n    var toString = Kotlin.isCharArray(a) ? String.fromCharCode : Kotlin.toString;\n    return \"[\" + Array.prototype.map.call(a, function(e) { return toString(e); }).join(\", \") + \"]\";\n};\n\nKotlin.arrayDeepToString = function (arr) {\n    return Kotlin.kotlin.collections.contentDeepToStringImpl(arr);\n};\n\nKotlin.arrayEquals = function (a, b) {\n    if (a === b) {\n        return true;\n    }\n    if (a === null || b === null || !Kotlin.isArrayish(b) || a.length !== b.length) {\n        return false;\n    }\n\n    for (var i = 0, n = a.length; i < n; i++) {\n        if (!Kotlin.equals(a[i], b[i])) {\n            return false;\n        }\n    }\n    return true;\n};\n\nKotlin.arrayDeepEquals = function (a, b) {\n    return Kotlin.kotlin.collections.contentDeepEqualsImpl(a, b);\n};\n\nKotlin.arrayHashCode = function (arr) {\n    if (arr === null) return 0\n    var result = 1;\n    for (var i = 0, n = arr.length; i < n; i++) {\n        result = ((31 * result | 0) + Kotlin.hashCode(arr[i])) | 0;\n    }\n    return result;\n};\n\nKotlin.arrayDeepHashCode = function (arr) {\n    return Kotlin.kotlin.collections.contentDeepHashCodeImpl(arr);\n};\n\nKotlin.primitiveArraySort = function (array) {\n    array.sort(Kotlin.doubleCompareTo)\n};\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors. \n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\nKotlin.getCallableRef = function(name, f) {\n    f.callableName = name;\n    return f;\n};\n\nKotlin.getPropertyCallableRef = function(name, paramCount, getter, setter) {\n    getter.get = getter;\n    getter.set = setter;\n    getter.callableName = name;\n    return getPropertyRefClass(getter, setter, propertyRefClassMetadataCache[paramCount]);\n};\n\nfunction getPropertyRefClass(obj, setter, cache) {\n    obj.$metadata$ = getPropertyRefMetadata(typeof setter === \"function\" ? cache.mutable : cache.immutable);\n    obj.constructor = obj;\n    return obj;\n}\n\nvar propertyRefClassMetadataCache = [\n    {\n        mutable: { value: null, implementedInterface: function () {\n            return Kotlin.kotlin.reflect.KMutableProperty0 }\n        },\n        immutable: { value: null, implementedInterface: function () {\n            return Kotlin.kotlin.reflect.KProperty0 }\n        }\n    },\n    {\n        mutable: { value: null, implementedInterface: function () {\n            return Kotlin.kotlin.reflect.KMutableProperty1 }\n        },\n        immutable: { value: null, implementedInterface: function () {\n            return Kotlin.kotlin.reflect.KProperty1 }\n        }\n    }\n];\n\nfunction getPropertyRefMetadata(cache) {\n    if (cache.value === null) {\n        cache.value = {\n            interfaces: [cache.implementedInterface()],\n            baseClass: null,\n            functions: {},\n            properties: {},\n            types: {},\n            staticMembers: {}\n        };\n    }\n    return cache.value;\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors. \n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\nKotlin.toShort = function (a) {\n    return (a & 0xFFFF) << 16 >> 16;\n};\n\nKotlin.toByte = function (a) {\n    return (a & 0xFF) << 24 >> 24;\n};\n\nKotlin.toChar = function (a) {\n    return a & 0xFFFF;\n};\n\nKotlin.numberToLong = function (a) {\n    return a instanceof Kotlin.Long ? a : Kotlin.Long.fromNumber(a);\n};\n\nKotlin.numberToInt = function (a) {\n    return a instanceof Kotlin.Long ? a.toInt() : Kotlin.doubleToInt(a);\n};\n\nKotlin.numberToShort = function (a) {\n    return Kotlin.toShort(Kotlin.numberToInt(a));\n};\n\nKotlin.numberToByte = function (a) {\n    return Kotlin.toByte(Kotlin.numberToInt(a));\n};\n\nKotlin.numberToDouble = function (a) {\n    return +a;\n};\n\nKotlin.numberToChar = function (a) {\n    return Kotlin.toChar(Kotlin.numberToInt(a));\n};\n\nKotlin.doubleToInt = function(a) {\n    if (a > 2147483647) return 2147483647;\n    if (a < -2147483648) return -2147483648;\n    return a | 0;\n};\n\nKotlin.toBoxedChar = function (a) {\n    if (a == null) return a;\n    if (a instanceof Kotlin.BoxedChar) return a;\n    return new Kotlin.BoxedChar(a);\n};\n\nKotlin.unboxChar = function(a) {\n    if (a == null) return a;\n    return Kotlin.toChar(a);\n};\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors. \n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\nKotlin.equals = function (obj1, obj2) {\n    if (obj1 == null) {\n        return obj2 == null;\n    }\n\n    if (obj2 == null) {\n        return false;\n    }\n\n    if (obj1 !== obj1) {\n        return obj2 !== obj2;\n    }\n\n    if (typeof obj1 === \"object\" && typeof obj1.equals === \"function\") {\n        return obj1.equals(obj2);\n    }\n\n    if (typeof obj1 === \"number\" && typeof obj2 === \"number\") {\n        return obj1 === obj2 && (obj1 !== 0 || 1 / obj1 === 1 / obj2)\n    }\n\n    return obj1 === obj2;\n};\n\nKotlin.hashCode = function (obj) {\n    if (obj == null) {\n        return 0;\n    }\n    var objType = typeof obj;\n    if (\"object\" === objType) {\n        return \"function\" === typeof obj.hashCode ? obj.hashCode() : getObjectHashCode(obj);\n    }\n    if (\"function\" === objType) {\n        return getObjectHashCode(obj);\n    }\n    if (\"number\" === objType) {\n        return Kotlin.numberHashCode(obj);\n    }\n    if (\"boolean\" === objType) {\n        return Number(obj)\n    }\n\n    var str = String(obj);\n    return getStringHashCode(str);\n};\n\n\nKotlin.toString = function (o) {\n    if (o == null) {\n        return \"null\";\n    }\n    else if (Kotlin.isArrayish(o)) {\n        return \"[...]\";\n    }\n    else {\n        return o.toString();\n    }\n};\n\n/** @const */\nvar POW_2_32 = 4294967296;\n// TODO: consider switching to Symbol type once we are on ES6.\n/** @const */\nvar OBJECT_HASH_CODE_PROPERTY_NAME = \"kotlinHashCodeValue$\";\n\nfunction getObjectHashCode(obj) {\n    if (!(OBJECT_HASH_CODE_PROPERTY_NAME in obj)) {\n        var hash = (Math.random() * POW_2_32) | 0; // Make 32-bit singed integer.\n        Object.defineProperty(obj, OBJECT_HASH_CODE_PROPERTY_NAME, { value:  hash, enumerable: false });\n    }\n    return obj[OBJECT_HASH_CODE_PROPERTY_NAME];\n}\n\nfunction getStringHashCode(str) {\n    var hash = 0;\n    for (var i = 0; i < str.length; i++) {\n        var code  = str.charCodeAt(i);\n        hash  = (hash * 31 + code) | 0; // Keep it 32-bit.\n    }\n    return hash;\n}\n\nKotlin.identityHashCode = getObjectHashCode;\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors. \n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\nKotlin.compareTo = function (a, b) {\n    var typeA = typeof a;\n    if (typeA === \"number\") {\n        if (typeof b === \"number\") {\n            return Kotlin.doubleCompareTo(a, b);\n        }\n        return Kotlin.primitiveCompareTo(a, b);\n    }\n    if (typeA === \"string\" || typeA === \"boolean\") {\n        return Kotlin.primitiveCompareTo(a, b);\n    }\n    return a.compareTo_11rb$(b);\n};\n\nKotlin.primitiveCompareTo = function (a, b) {\n    return a < b ? -1 : a > b ? 1 : 0;\n};\n\nKotlin.doubleCompareTo = function (a, b) {\n    if (a < b) return -1;\n    if (a > b) return 1;\n\n    if (a === b) {\n        if (a !== 0) return 0;\n\n        var ia = 1 / a;\n        return ia === 1 / b ? 0 : (ia < 0 ? -1 : 1);\n    }\n\n    return a !== a ? (b !== b ? 0 : 1) : -1\n};\n\nKotlin.charInc = function (value) {\n    return Kotlin.toChar(value+1);\n};\n\nKotlin.charDec = function (value) {\n    return Kotlin.toChar(value-1);\n};\n\nKotlin.imul = Math.imul || imul;\n\nKotlin.imulEmulated = imul;\n\nfunction imul(a, b) {\n    return ((a & 0xffff0000) * (b & 0xffff) + (a & 0xffff) * (b | 0)) | 0;\n}\n\n(function() {\n    var buf = new ArrayBuffer(8);\n    var bufFloat64 = new Float64Array(buf);\n    var bufFloat32 = new Float32Array(buf);\n    var bufInt32 = new Int32Array(buf);\n    var lowIndex = 0;\n    var highIndex = 1;\n\n    bufFloat64[0] = -1; // bff00000_00000000\n    if (bufInt32[lowIndex] !== 0) {\n        lowIndex = 1;\n        highIndex = 0;\n    }\n\n    Kotlin.doubleToBits = function(value) {\n        return Kotlin.doubleToRawBits(isNaN(value) ? NaN : value);\n    };\n\n    Kotlin.doubleToRawBits = function(value) {\n        bufFloat64[0] = value;\n        return Kotlin.Long.fromBits(bufInt32[lowIndex], bufInt32[highIndex]);\n    };\n\n    Kotlin.doubleFromBits = function(value) {\n        bufInt32[lowIndex] = value.low_;\n        bufInt32[highIndex] = value.high_;\n        return bufFloat64[0];\n    };\n\n    Kotlin.floatToBits = function(value) {\n        return Kotlin.floatToRawBits(isNaN(value) ? NaN : value);\n    };\n\n    Kotlin.floatToRawBits = function(value) {\n        bufFloat32[0] = value;\n        return bufInt32[0];\n    };\n\n    Kotlin.floatFromBits = function(value) {\n        bufInt32[0] = value;\n        return bufFloat32[0];\n    };\n\n    // returns zero value for number with positive sign bit and non-zero value for number with negative sign bit.\n    Kotlin.doubleSignBit = function(value) {\n        bufFloat64[0] = value;\n        return bufInt32[highIndex] & 0x80000000;\n    };\n\n    Kotlin.numberHashCode = function(obj) {\n        if ((obj | 0) === obj) {\n            return obj | 0;\n        }\n        else {\n            bufFloat64[0] = obj;\n            return (bufInt32[highIndex] * 31 | 0) + bufInt32[lowIndex] | 0;\n        }\n    }\n})();\n\nKotlin.ensureNotNull = function(x) {\n    return x != null ? x : Kotlin.throwNPE();\n};\n","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\nif (typeof String.prototype.startsWith === \"undefined\") {\n    Object.defineProperty(String.prototype, \"startsWith\", {\n        value: function (searchString, position) {\n            position = position || 0;\n            return this.lastIndexOf(searchString, position) === position;\n        }\n    });\n}\nif (typeof String.prototype.endsWith === \"undefined\") {\n    Object.defineProperty(String.prototype, \"endsWith\", {\n        value: function (searchString, position) {\n            var subjectString = this.toString();\n            if (position === undefined || position > subjectString.length) {\n                position = subjectString.length;\n            }\n            position -= searchString.length;\n            var lastIndex = subjectString.indexOf(searchString, position);\n            return lastIndex !== -1 && lastIndex === position;\n        }\n    });\n}\n// ES6 Math polyfills\nif (typeof Math.sign === \"undefined\") {\n    Math.sign = function(x) {\n        x = +x; // convert to a number\n        if (x === 0 || isNaN(x)) {\n            return Number(x);\n        }\n        return x > 0 ? 1 : -1;\n    };\n}\nif (typeof Math.trunc === \"undefined\") {\n    Math.trunc = function(x) {\n        if (isNaN(x)) {\n            return NaN;\n        }\n        if (x > 0) {\n            return Math.floor(x);\n        }\n        return Math.ceil(x);\n    };\n}\n\n(function() {\n    var epsilon = 2.220446049250313E-16;\n    var taylor_2_bound = Math.sqrt(epsilon);\n    var taylor_n_bound = Math.sqrt(taylor_2_bound);\n    var upper_taylor_2_bound = 1/taylor_2_bound;\n    var upper_taylor_n_bound = 1/taylor_n_bound;\n\n    if (typeof Math.sinh === \"undefined\") {\n        Math.sinh = function(x) {\n            if (Math.abs(x) < taylor_n_bound) {\n                var result = x;\n                if (Math.abs(x) > taylor_2_bound) {\n                    result += (x * x * x) / 6;\n                }\n                return result;\n            } else {\n                var y = Math.exp(x);\n                var y1 = 1 / y;\n                if (!isFinite(y)) return Math.exp(x - Math.LN2);\n                if (!isFinite(y1)) return -Math.exp(-x - Math.LN2);\n                return (y - y1) / 2;\n            }\n        };\n    }\n    if (typeof Math.cosh === \"undefined\") {\n        Math.cosh = function(x) {\n            var y = Math.exp(x);\n            var y1 = 1 / y;\n            if (!isFinite(y) || !isFinite(y1)) return Math.exp(Math.abs(x) - Math.LN2);\n            return (y + y1) / 2;\n        };\n    }\n\n    if (typeof Math.tanh === \"undefined\") {\n        Math.tanh = function(x){\n            if (Math.abs(x) < taylor_n_bound) {\n                var result = x;\n                if (Math.abs(x) > taylor_2_bound) {\n                    result -= (x * x * x) / 3;\n                }\n                return result;\n            }\n            else {\n                var a = Math.exp(+x), b = Math.exp(-x);\n                return a === Infinity ? 1 : b === Infinity ? -1 : (a - b) / (a + b);\n            }\n        };\n    }\n\n    // Inverse hyperbolic function implementations derived from boost special math functions,\n    // Copyright Eric Ford & Hubert Holin 2001.\n\n    if (typeof Math.asinh === \"undefined\") {\n        var asinh = function(x) {\n            if (x >= +taylor_n_bound)\n            {\n                if (x > upper_taylor_n_bound)\n                {\n                    if (x > upper_taylor_2_bound)\n                    {\n                        // approximation by laurent series in 1/x at 0+ order from -1 to 0\n                        return Math.log(x) + Math.LN2;\n                    }\n                    else\n                    {\n                        // approximation by laurent series in 1/x at 0+ order from -1 to 1\n                        return Math.log(x * 2 + (1 / (x * 2)));\n                    }\n                }\n                else\n                {\n                    return Math.log(x + Math.sqrt(x * x + 1));\n                }\n            }\n            else if (x <= -taylor_n_bound)\n            {\n                return -asinh(-x);\n            }\n            else\n            {\n                // approximation by taylor series in x at 0 up to order 2\n                var result = x;\n                if (Math.abs(x) >= taylor_2_bound)\n                {\n                    var x3 = x * x * x;\n                    // approximation by taylor series in x at 0 up to order 4\n                    result -= x3 / 6;\n                }\n                return result;\n            }\n        };\n        Math.asinh = asinh;\n    }\n    if (typeof Math.acosh === \"undefined\") {\n        Math.acosh = function(x) {\n            if (x < 1)\n            {\n                return NaN;\n            }\n            else if (x - 1 >= taylor_n_bound)\n            {\n                if (x > upper_taylor_2_bound)\n                {\n                    // approximation by laurent series in 1/x at 0+ order from -1 to 0\n                    return Math.log(x) + Math.LN2;\n                }\n                else\n                {\n                    return Math.log(x + Math.sqrt(x * x - 1));\n                }\n            }\n            else\n            {\n                var y = Math.sqrt(x - 1);\n                // approximation by taylor series in y at 0 up to order 2\n                var result = y;\n                if (y >= taylor_2_bound)\n                {\n                    var y3 = y * y * y;\n                    // approximation by taylor series in y at 0 up to order 4\n                    result -= y3 / 12;\n                }\n\n                return Math.sqrt(2) * result;\n            }\n        };\n    }\n    if (typeof Math.atanh === \"undefined\") {\n        Math.atanh = function(x) {\n            if (Math.abs(x) < taylor_n_bound) {\n                var result = x;\n                if (Math.abs(x) > taylor_2_bound) {\n                    result += (x * x * x) / 3;\n                }\n                return result;\n            }\n            return Math.log((1 + x) / (1 - x)) / 2;\n        };\n    }\n    if (typeof Math.log1p === \"undefined\") {\n        Math.log1p = function(x) {\n            if (Math.abs(x) < taylor_n_bound) {\n                var x2 = x * x;\n                var x3 = x2 * x;\n                var x4 = x3 * x;\n                // approximation by taylor series in x at 0 up to order 4\n                return (-x4 / 4 + x3 / 3 - x2 / 2 + x);\n            }\n            return Math.log(x + 1);\n        };\n    }\n    if (typeof Math.expm1 === \"undefined\") {\n        Math.expm1 = function(x) {\n            if (Math.abs(x) < taylor_n_bound) {\n                var x2 = x * x;\n                var x3 = x2 * x;\n                var x4 = x3 * x;\n                // approximation by taylor series in x at 0 up to order 4\n                return (x4 / 24 + x3 / 6 + x2 / 2 + x);\n            }\n            return Math.exp(x) - 1;\n        };\n    }\n})();\nif (typeof Math.hypot === \"undefined\") {\n    Math.hypot = function() {\n        var y = 0;\n        var length = arguments.length;\n\n        for (var i = 0; i < length; i++) {\n            if (arguments[i] === Infinity || arguments[i] === -Infinity) {\n                return Infinity;\n            }\n            y += arguments[i] * arguments[i];\n        }\n        return Math.sqrt(y);\n    };\n}\nif (typeof Math.log10 === \"undefined\") {\n    Math.log10 = function(x) {\n        return Math.log(x) * Math.LOG10E;\n    };\n}\nif (typeof Math.log2 === \"undefined\") {\n    Math.log2 = function(x) {\n        return Math.log(x) * Math.LOG2E;\n    };\n}\nif (typeof Math.clz32 === \"undefined\") {\n    Math.clz32 = (function(log, LN2) {\n        return function(x) {\n            var asUint = x >>> 0;\n            if (asUint === 0) {\n                return 32;\n            }\n            return 31 - (log(asUint) / LN2 | 0) | 0; // the \"| 0\" acts like math.floor\n        };\n    })(Math.log, Math.LN2);\n}\n\n// For HtmlUnit and PhantomJs\nif (typeof ArrayBuffer.isView === \"undefined\") {\n    ArrayBuffer.isView = function(a) {\n        return a != null && a.__proto__ != null && a.__proto__.__proto__ === Int8Array.prototype.__proto__;\n    };\n}\n\nif (typeof Array.prototype.fill === \"undefined\") {\n    // Polyfill from https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill#Polyfill\n    Object.defineProperty(Array.prototype, 'fill', {\n        value: function (value) {\n\n            // Steps 1-2.\n            if (this == null) {\n                throw new TypeError('this is null or not defined');\n            }\n\n            var O = Object(this);\n\n            // Steps 3-5.\n            var len = O.length >>> 0;\n\n            // Steps 6-7.\n            var start = arguments[1];\n            var relativeStart = start >> 0;\n\n            // Step 8.\n            var k = relativeStart < 0 ?\n                    Math.max(len + relativeStart, 0) :\n                    Math.min(relativeStart, len);\n\n            // Steps 9-10.\n            var end = arguments[2];\n            var relativeEnd = end === undefined ?\n                              len : end >> 0;\n\n            // Step 11.\n            var finalValue = relativeEnd < 0 ?\n                             Math.max(len + relativeEnd, 0) :\n                             Math.min(relativeEnd, len);\n\n            // Step 12.\n            while (k < finalValue) {\n                O[k] = value;\n                k++;\n            }\n\n            // Step 13.\n            return O;\n        }\n    });\n}\n\n(function() {\n    function normalizeOffset(offset, length) {\n        if (offset < 0) return Math.max(0, offset + length);\n        return Math.min(offset, length);\n    }\n    function typedArraySlice(begin, end) {\n        if (typeof end === \"undefined\") {\n            end = this.length;\n        }\n        begin = normalizeOffset(begin || 0, this.length);\n        end = Math.max(begin, normalizeOffset(end, this.length));\n        return new this.constructor(this.subarray(begin, end));\n    }\n\n    var arrays = [Int8Array, Int16Array, Uint16Array, Int32Array, Float32Array, Float64Array];\n    for (var i = 0; i < arrays.length; ++i) {\n        var TypedArray = arrays[i];\n        if (typeof TypedArray.prototype.fill === \"undefined\") {\n            Object.defineProperty(TypedArray.prototype, 'fill', {\n                value: Array.prototype.fill\n            });\n        }\n        if (typeof TypedArray.prototype.slice === \"undefined\") {\n            Object.defineProperty(TypedArray.prototype, 'slice', {\n                value: typedArraySlice\n            });\n        }\n    }\n\n    // Patch apply to work with TypedArrays if needed.\n    try {\n        (function() {}).apply(null, new Int32Array(0))\n    } catch (e) {\n        var apply = Function.prototype.apply;\n        Object.defineProperty(Function.prototype, 'apply', {\n            value: function(self, array) {\n                return apply.call(this, self, [].slice.call(array));\n            }\n        });\n    }\n\n\n    // Patch map to work with TypedArrays if needed.\n    for (var i = 0; i < arrays.length; ++i) {\n        var TypedArray = arrays[i];\n        if (typeof TypedArray.prototype.map === \"undefined\") {\n            Object.defineProperty(TypedArray.prototype, 'map', {\n                value: function(callback, self) {\n                    return [].slice.call(this).map(callback, self);\n                }\n            });\n        }\n    }\n\n    // Patch sort to work with TypedArrays if needed.\n    // TODO: consider to remove following function and replace it with `Kotlin.doubleCompareTo` (see misc.js)\n    var totalOrderComparator = function (a, b) {\n        if (a < b) return -1;\n        if (a > b) return 1;\n\n        if (a === b) {\n            if (a !== 0) return 0;\n\n            var ia = 1 / a;\n            return ia === 1 / b ? 0 : (ia < 0 ? -1 : 1);\n        }\n\n        return a !== a ? (b !== b ? 0 : 1) : -1\n    };\n\n    for (var i = 0; i < arrays.length; ++i) {\n        var TypedArray = arrays[i];\n        if (typeof TypedArray.prototype.sort === \"undefined\") {\n            Object.defineProperty(TypedArray.prototype, 'sort', {\n                value: function(compareFunction) {\n                    return Array.prototype.sort.call(this, compareFunction || totalOrderComparator);\n                }\n            });\n        }\n    }\n})();\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors. \n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n/**\n * @param {string} id\n * @param {Object} declaration\n */\nKotlin.defineModule = function (id, declaration) {\n};\n\nKotlin.defineInlineFunction = function(tag, fun) {\n    return fun;\n};\n\nKotlin.wrapFunction = function(fun) {\n    var f = function() {\n        f = fun();\n        return f.apply(this, arguments);\n    };\n    return function() {\n        return f.apply(this, arguments);\n    };\n};\n\nKotlin.isTypeOf = function(type) {\n    return function (object) {\n        return typeof object === type;\n    }\n};\n\nKotlin.isInstanceOf = function (klass) {\n    return function (object) {\n        return Kotlin.isType(object, klass);\n    }\n};\n\nKotlin.orNull = function (fn) {\n    return function (object) {\n        return object == null || fn(object);\n    }\n};\n\nKotlin.andPredicate = function (a, b) {\n    return function (object) {\n        return a(object) && b(object);\n    }\n};\n\nKotlin.kotlinModuleMetadata = function (abiVersion, moduleName, data) {\n};\n\nKotlin.suspendCall = function(value) {\n    return value;\n};\n\nKotlin.coroutineResult = function(qualifier) {\n    throwMarkerError();\n};\n\nKotlin.coroutineController = function(qualifier) {\n    throwMarkerError();\n};\n\nKotlin.coroutineReceiver = function(qualifier) {\n    throwMarkerError();\n};\n\nKotlin.setCoroutineResult = function(value, qualifier) {\n    throwMarkerError();\n};\n\nKotlin.getReifiedTypeParameterKType = function(typeParameter) {\n    throwMarkerError();\n};\n\nfunction throwMarkerError() {\n    throw new Error(\n        \"This marker function should never been called. \" +\n        \"Looks like compiler did not eliminate it properly. \" +\n        \"Please, report an issue if you caught this exception.\");\n}\n\nKotlin.getFunctionById = function(id, defaultValue) {\n    return function() {\n        return defaultValue;\n    }\n};","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors. \n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\nKotlin.Kind = {\n    CLASS: \"class\",\n    INTERFACE: \"interface\",\n    OBJECT: \"object\"\n};\n\nKotlin.callGetter = function (thisObject, klass, propertyName) {\n    var propertyDescriptor = Object.getOwnPropertyDescriptor(klass, propertyName);\n    if (propertyDescriptor != null && propertyDescriptor.get != null) {\n        return propertyDescriptor.get.call(thisObject);\n    }\n\n    propertyDescriptor = Object.getOwnPropertyDescriptor(thisObject, propertyName);\n    if (propertyDescriptor != null && \"value\" in propertyDescriptor) {\n        return thisObject[propertyName];\n    }\n\n    return Kotlin.callGetter(thisObject, Object.getPrototypeOf(klass), propertyName);\n};\n\nKotlin.callSetter = function (thisObject, klass, propertyName, value) {\n    var propertyDescriptor = Object.getOwnPropertyDescriptor(klass, propertyName);\n    if (propertyDescriptor != null && propertyDescriptor.set != null) {\n        propertyDescriptor.set.call(thisObject, value);\n        return;\n    }\n\n    propertyDescriptor = Object.getOwnPropertyDescriptor(thisObject, propertyName);\n    if (propertyDescriptor != null && \"value\" in propertyDescriptor) {\n        thisObject[propertyName] = value;\n        return\n    }\n\n    Kotlin.callSetter(thisObject, Object.getPrototypeOf(klass), propertyName, value);\n};\n\nfunction isInheritanceFromInterface(ctor, iface) {\n    if (ctor === iface) return true;\n\n    var metadata = ctor.$metadata$;\n    if (metadata != null) {\n        var interfaces = metadata.interfaces;\n        for (var i = 0; i < interfaces.length; i++) {\n            if (isInheritanceFromInterface(interfaces[i], iface)) {\n                return true;\n            }\n        }\n    }\n\n    var superPrototype = ctor.prototype != null ? Object.getPrototypeOf(ctor.prototype) : null;\n    var superConstructor = superPrototype != null ? superPrototype.constructor : null;\n    return superConstructor != null && isInheritanceFromInterface(superConstructor, iface);\n}\n\n/**\n *\n * @param {*} object\n * @param {Function|Object} klass\n * @returns {Boolean}\n */\nKotlin.isType = function (object, klass) {\n    if (klass === Object) {\n        switch (typeof object) {\n            case \"string\":\n            case \"number\":\n            case \"boolean\":\n            case \"function\":\n                return true;\n            default:\n                return object instanceof Object;\n        }\n    }\n\n    if (object == null || klass == null || (typeof object !== 'object' && typeof object !== 'function')) {\n        return false;\n    }\n\n    if (typeof klass === \"function\" && object instanceof klass) {\n        return true;\n    }\n\n    var proto = Object.getPrototypeOf(klass);\n    var constructor = proto != null ? proto.constructor : null;\n    if (constructor != null && \"$metadata$\" in constructor) {\n        var metadata = constructor.$metadata$;\n        if (metadata.kind === Kotlin.Kind.OBJECT) {\n            return object === klass;\n        }\n    }\n\n    var klassMetadata = klass.$metadata$;\n\n    // In WebKit (JavaScriptCore) for some interfaces from DOM typeof returns \"object\", nevertheless they can be used in RHS of instanceof\n    if (klassMetadata == null) {\n        return object instanceof klass;\n    }\n\n    if (klassMetadata.kind === Kotlin.Kind.INTERFACE && object.constructor != null) {\n        return isInheritanceFromInterface(object.constructor, klass);\n    }\n\n    return false;\n};\n\nKotlin.isNumber = function (a) {\n    return typeof a == \"number\" || a instanceof Kotlin.Long;\n};\n\nKotlin.isChar = function (value) {\n    return value instanceof Kotlin.BoxedChar\n};\n\nKotlin.isComparable = function (value) {\n    var type = typeof value;\n\n    return type === \"string\" ||\n           type === \"boolean\" ||\n           Kotlin.isNumber(value) ||\n           Kotlin.isType(value, Kotlin.kotlin.Comparable);\n};\n\nKotlin.isCharSequence = function (value) {\n    return typeof value === \"string\" || Kotlin.isType(value, Kotlin.kotlin.CharSequence);\n};","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors. \n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n// Copyright 2009 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n/**\n * Constructs a 64-bit two's-complement integer, given its low and high 32-bit\n * values as *signed* integers.  See the from* functions below for more\n * convenient ways of constructing Longs.\n *\n * The internal representation of a long is the two given signed, 32-bit values.\n * We use 32-bit pieces because these are the size of integers on which\n * Javascript performs bit-operations.  For operations like addition and\n * multiplication, we split each number into 16-bit pieces, which can easily be\n * multiplied within Javascript's floating-point representation without overflow\n * or change in sign.\n *\n * In the algorithms below, we frequently reduce the negative case to the\n * positive case by negating the input(s) and then post-processing the result.\n * Note that we must ALWAYS check specially whether those values are MIN_VALUE\n * (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\n * a positive number, it overflows back into a negative).  Not handling this\n * case would often result in infinite recursion.\n *\n * @param {number} low  The low (signed) 32 bits of the long.\n * @param {number} high  The high (signed) 32 bits of the long.\n * @constructor\n * @final\n */\nKotlin.Long = function(low, high) {\n  /**\n   * @type {number}\n   * @private\n   */\n  this.low_ = low | 0;  // force into 32 signed bits.\n\n  /**\n   * @type {number}\n   * @private\n   */\n  this.high_ = high | 0;  // force into 32 signed bits.\n};\n\nKotlin.Long.$metadata$ = {\n    kind: \"class\",\n    simpleName: \"Long\",\n    interfaces:[]\n};\n\n\n// NOTE: Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the\n// from* methods on which they depend.\n\n\n/**\n * A cache of the Long representations of small integer values.\n * @type {!Object}\n * @private\n */\nKotlin.Long.IntCache_ = {};\n\n\n/**\n * Returns a Long representing the given (32-bit) integer value.\n * @param {number} value The 32-bit integer in question.\n * @return {!Kotlin.Long} The corresponding Long value.\n */\nKotlin.Long.fromInt = function(value) {\n  if (-128 <= value && value < 128) {\n    var cachedObj = Kotlin.Long.IntCache_[value];\n    if (cachedObj) {\n      return cachedObj;\n    }\n  }\n\n  var obj = new Kotlin.Long(value | 0, value < 0 ? -1 : 0);\n  if (-128 <= value && value < 128) {\n    Kotlin.Long.IntCache_[value] = obj;\n  }\n  return obj;\n};\n\n\n/**\n * Converts this number value to `Long`.\n * The fractional part, if any, is rounded down towards zero.\n * Returns zero if this `Double` value is `NaN`, `Long.MIN_VALUE` if it's less than `Long.MIN_VALUE`,\n * `Long.MAX_VALUE` if it's bigger than `Long.MAX_VALUE`.\n * @param {number} value The number in question.\n * @return {!Kotlin.Long} The corresponding Long value.\n */\nKotlin.Long.fromNumber = function(value) {\n  if (isNaN(value)) {\n    return Kotlin.Long.ZERO;\n  } else if (value <= -Kotlin.Long.TWO_PWR_63_DBL_) {\n    return Kotlin.Long.MIN_VALUE;\n  } else if (value + 1 >= Kotlin.Long.TWO_PWR_63_DBL_) {\n    return Kotlin.Long.MAX_VALUE;\n  } else if (value < 0) {\n    return Kotlin.Long.fromNumber(-value).negate();\n  } else {\n    return new Kotlin.Long(\n        (value % Kotlin.Long.TWO_PWR_32_DBL_) | 0,\n        (value / Kotlin.Long.TWO_PWR_32_DBL_) | 0);\n  }\n};\n\n\n/**\n * Returns a Long representing the 64-bit integer that comes by concatenating\n * the given high and low bits.  Each is assumed to use 32 bits.\n * @param {number} lowBits The low 32-bits.\n * @param {number} highBits The high 32-bits.\n * @return {!Kotlin.Long} The corresponding Long value.\n */\nKotlin.Long.fromBits = function(lowBits, highBits) {\n  return new Kotlin.Long(lowBits, highBits);\n};\n\n\n/**\n * Returns a Long representation of the given string, written using the given\n * radix.\n * @param {string} str The textual representation of the Long.\n * @param {number=} opt_radix The radix in which the text is written.\n * @return {!Kotlin.Long} The corresponding Long value.\n */\nKotlin.Long.fromString = function(str, opt_radix) {\n  if (str.length == 0) {\n    throw Error('number format error: empty string');\n  }\n\n  var radix = opt_radix || 10;\n  if (radix < 2 || 36 < radix) {\n    throw Error('radix out of range: ' + radix);\n  }\n\n  if (str.charAt(0) == '-') {\n    return Kotlin.Long.fromString(str.substring(1), radix).negate();\n  } else if (str.indexOf('-') >= 0) {\n    throw Error('number format error: interior \"-\" character: ' + str);\n  }\n\n  // Do several (8) digits each time through the loop, so as to\n  // minimize the calls to the very expensive emulated div.\n  var radixToPower = Kotlin.Long.fromNumber(Math.pow(radix, 8));\n\n  var result = Kotlin.Long.ZERO;\n  for (var i = 0; i < str.length; i += 8) {\n    var size = Math.min(8, str.length - i);\n    var value = parseInt(str.substring(i, i + size), radix);\n    if (size < 8) {\n      var power = Kotlin.Long.fromNumber(Math.pow(radix, size));\n      result = result.multiply(power).add(Kotlin.Long.fromNumber(value));\n    } else {\n      result = result.multiply(radixToPower);\n      result = result.add(Kotlin.Long.fromNumber(value));\n    }\n  }\n  return result;\n};\n\n\n// NOTE: the compiler should inline these constant values below and then remove\n// these variables, so there should be no runtime penalty for these.\n\n\n/**\n * Number used repeated below in calculations.  This must appear before the\n * first call to any from* function below.\n * @type {number}\n * @private\n */\nKotlin.Long.TWO_PWR_16_DBL_ = 1 << 16;\n\n\n/**\n * @type {number}\n * @private\n */\nKotlin.Long.TWO_PWR_24_DBL_ = 1 << 24;\n\n\n/**\n * @type {number}\n * @private\n */\nKotlin.Long.TWO_PWR_32_DBL_ =\n    Kotlin.Long.TWO_PWR_16_DBL_ * Kotlin.Long.TWO_PWR_16_DBL_;\n\n\n/**\n * @type {number}\n * @private\n */\nKotlin.Long.TWO_PWR_31_DBL_ =\n    Kotlin.Long.TWO_PWR_32_DBL_ / 2;\n\n\n/**\n * @type {number}\n * @private\n */\nKotlin.Long.TWO_PWR_48_DBL_ =\n    Kotlin.Long.TWO_PWR_32_DBL_ * Kotlin.Long.TWO_PWR_16_DBL_;\n\n\n/**\n * @type {number}\n * @private\n */\nKotlin.Long.TWO_PWR_64_DBL_ =\n    Kotlin.Long.TWO_PWR_32_DBL_ * Kotlin.Long.TWO_PWR_32_DBL_;\n\n\n/**\n * @type {number}\n * @private\n */\nKotlin.Long.TWO_PWR_63_DBL_ =\n    Kotlin.Long.TWO_PWR_64_DBL_ / 2;\n\n\n/** @type {!Kotlin.Long} */\nKotlin.Long.ZERO = Kotlin.Long.fromInt(0);\n\n\n/** @type {!Kotlin.Long} */\nKotlin.Long.ONE = Kotlin.Long.fromInt(1);\n\n\n/** @type {!Kotlin.Long} */\nKotlin.Long.NEG_ONE = Kotlin.Long.fromInt(-1);\n\n\n/** @type {!Kotlin.Long} */\nKotlin.Long.MAX_VALUE =\n    Kotlin.Long.fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0);\n\n\n/** @type {!Kotlin.Long} */\nKotlin.Long.MIN_VALUE = Kotlin.Long.fromBits(0, 0x80000000 | 0);\n\n\n/**\n * @type {!Kotlin.Long}\n * @private\n */\nKotlin.Long.TWO_PWR_24_ = Kotlin.Long.fromInt(1 << 24);\n\n\n/** @return {number} The value, assuming it is a 32-bit integer. */\nKotlin.Long.prototype.toInt = function() {\n  return this.low_;\n};\n\n\n/** @return {number} The closest floating-point representation to this value. */\nKotlin.Long.prototype.toNumber = function() {\n  return this.high_ * Kotlin.Long.TWO_PWR_32_DBL_ +\n         this.getLowBitsUnsigned();\n};\n\n/** @return {number} The 32-bit hashCode of this value. */\nKotlin.Long.prototype.hashCode = function() {\n  return this.high_ ^ this.low_;\n};\n\n/**\n * @param {number=} opt_radix The radix in which the text should be written.\n * @return {string} The textual representation of this value.\n * @override\n */\nKotlin.Long.prototype.toString = function(opt_radix) {\n  var radix = opt_radix || 10;\n  if (radix < 2 || 36 < radix) {\n    throw Error('radix out of range: ' + radix);\n  }\n\n  if (this.isZero()) {\n    return '0';\n  }\n\n  if (this.isNegative()) {\n    if (this.equalsLong(Kotlin.Long.MIN_VALUE)) {\n      // We need to change the Long value before it can be negated, so we remove\n      // the bottom-most digit in this base and then recurse to do the rest.\n      var radixLong = Kotlin.Long.fromNumber(radix);\n      var div = this.div(radixLong);\n      var rem = div.multiply(radixLong).subtract(this);\n      return div.toString(radix) + rem.toInt().toString(radix);\n    } else {\n      return '-' + this.negate().toString(radix);\n    }\n  }\n\n  // Do several (6) digits each time through the loop, so as to\n  // minimize the calls to the very expensive emulated div.\n  var radixToPower = Kotlin.Long.fromNumber(Math.pow(radix, 6));\n\n  var rem = this;\n  var result = '';\n  while (true) {\n    var remDiv = rem.div(radixToPower);\n    var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt();\n    var digits = intval.toString(radix);\n\n    rem = remDiv;\n    if (rem.isZero()) {\n      return digits + result;\n    } else {\n      while (digits.length < 6) {\n        digits = '0' + digits;\n      }\n      result = '' + digits + result;\n    }\n  }\n};\n\n\n/** @return {number} The high 32-bits as a signed value. */\nKotlin.Long.prototype.getHighBits = function() {\n  return this.high_;\n};\n\n\n/** @return {number} The low 32-bits as a signed value. */\nKotlin.Long.prototype.getLowBits = function() {\n  return this.low_;\n};\n\n\n/** @return {number} The low 32-bits as an unsigned value. */\nKotlin.Long.prototype.getLowBitsUnsigned = function() {\n  return (this.low_ >= 0) ?\n      this.low_ : Kotlin.Long.TWO_PWR_32_DBL_ + this.low_;\n};\n\n\n/**\n * @return {number} Returns the number of bits needed to represent the absolute\n *     value of this Long.\n */\nKotlin.Long.prototype.getNumBitsAbs = function() {\n  if (this.isNegative()) {\n    if (this.equalsLong(Kotlin.Long.MIN_VALUE)) {\n      return 64;\n    } else {\n      return this.negate().getNumBitsAbs();\n    }\n  } else {\n    var val = this.high_ != 0 ? this.high_ : this.low_;\n    for (var bit = 31; bit > 0; bit--) {\n      if ((val & (1 << bit)) != 0) {\n        break;\n      }\n    }\n    return this.high_ != 0 ? bit + 33 : bit + 1;\n  }\n};\n\n\n/** @return {boolean} Whether this value is zero. */\nKotlin.Long.prototype.isZero = function() {\n  return this.high_ == 0 && this.low_ == 0;\n};\n\n\n/** @return {boolean} Whether this value is negative. */\nKotlin.Long.prototype.isNegative = function() {\n  return this.high_ < 0;\n};\n\n\n/** @return {boolean} Whether this value is odd. */\nKotlin.Long.prototype.isOdd = function() {\n  return (this.low_ & 1) == 1;\n};\n\n\n/**\n * @param {Kotlin.Long} other Long to compare against.\n * @return {boolean} Whether this Long equals the other.\n */\nKotlin.Long.prototype.equalsLong = function(other) {\n  return (this.high_ == other.high_) && (this.low_ == other.low_);\n};\n\n\n/**\n * @param {Kotlin.Long} other Long to compare against.\n * @return {boolean} Whether this Long does not equal the other.\n */\nKotlin.Long.prototype.notEqualsLong = function(other) {\n  return (this.high_ != other.high_) || (this.low_ != other.low_);\n};\n\n\n/**\n * @param {Kotlin.Long} other Long to compare against.\n * @return {boolean} Whether this Long is less than the other.\n */\nKotlin.Long.prototype.lessThan = function(other) {\n  return this.compare(other) < 0;\n};\n\n\n/**\n * @param {Kotlin.Long} other Long to compare against.\n * @return {boolean} Whether this Long is less than or equal to the other.\n */\nKotlin.Long.prototype.lessThanOrEqual = function(other) {\n  return this.compare(other) <= 0;\n};\n\n\n/**\n * @param {Kotlin.Long} other Long to compare against.\n * @return {boolean} Whether this Long is greater than the other.\n */\nKotlin.Long.prototype.greaterThan = function(other) {\n  return this.compare(other) > 0;\n};\n\n\n/**\n * @param {Kotlin.Long} other Long to compare against.\n * @return {boolean} Whether this Long is greater than or equal to the other.\n */\nKotlin.Long.prototype.greaterThanOrEqual = function(other) {\n  return this.compare(other) >= 0;\n};\n\n\n/**\n * Compares this Long with the given one.\n * @param {Kotlin.Long} other Long to compare against.\n * @return {number} 0 if they are the same, 1 if the this is greater, and -1\n *     if the given one is greater.\n */\nKotlin.Long.prototype.compare = function(other) {\n  if (this.equalsLong(other)) {\n    return 0;\n  }\n\n  var thisNeg = this.isNegative();\n  var otherNeg = other.isNegative();\n  if (thisNeg && !otherNeg) {\n    return -1;\n  }\n  if (!thisNeg && otherNeg) {\n    return 1;\n  }\n\n  // at this point, the signs are the same, so subtraction will not overflow\n  if (this.subtract(other).isNegative()) {\n    return -1;\n  } else {\n    return 1;\n  }\n};\n\n\n/** @return {!Kotlin.Long} The negation of this value. */\nKotlin.Long.prototype.negate = function() {\n  if (this.equalsLong(Kotlin.Long.MIN_VALUE)) {\n    return Kotlin.Long.MIN_VALUE;\n  } else {\n    return this.not().add(Kotlin.Long.ONE);\n  }\n};\n\n\n/**\n * Returns the sum of this and the given Long.\n * @param {Kotlin.Long} other Long to add to this one.\n * @return {!Kotlin.Long} The sum of this and the given Long.\n */\nKotlin.Long.prototype.add = function(other) {\n  // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\n\n  var a48 = this.high_ >>> 16;\n  var a32 = this.high_ & 0xFFFF;\n  var a16 = this.low_ >>> 16;\n  var a00 = this.low_ & 0xFFFF;\n\n  var b48 = other.high_ >>> 16;\n  var b32 = other.high_ & 0xFFFF;\n  var b16 = other.low_ >>> 16;\n  var b00 = other.low_ & 0xFFFF;\n\n  var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\n  c00 += a00 + b00;\n  c16 += c00 >>> 16;\n  c00 &= 0xFFFF;\n  c16 += a16 + b16;\n  c32 += c16 >>> 16;\n  c16 &= 0xFFFF;\n  c32 += a32 + b32;\n  c48 += c32 >>> 16;\n  c32 &= 0xFFFF;\n  c48 += a48 + b48;\n  c48 &= 0xFFFF;\n  return Kotlin.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);\n};\n\n\n/**\n * Returns the difference of this and the given Long.\n * @param {Kotlin.Long} other Long to subtract from this.\n * @return {!Kotlin.Long} The difference of this and the given Long.\n */\nKotlin.Long.prototype.subtract = function(other) {\n  return this.add(other.negate());\n};\n\n\n/**\n * Returns the product of this and the given long.\n * @param {Kotlin.Long} other Long to multiply with this.\n * @return {!Kotlin.Long} The product of this and the other.\n */\nKotlin.Long.prototype.multiply = function(other) {\n  if (this.isZero()) {\n    return Kotlin.Long.ZERO;\n  } else if (other.isZero()) {\n    return Kotlin.Long.ZERO;\n  }\n\n  if (this.equalsLong(Kotlin.Long.MIN_VALUE)) {\n    return other.isOdd() ? Kotlin.Long.MIN_VALUE : Kotlin.Long.ZERO;\n  } else if (other.equalsLong(Kotlin.Long.MIN_VALUE)) {\n    return this.isOdd() ? Kotlin.Long.MIN_VALUE : Kotlin.Long.ZERO;\n  }\n\n  if (this.isNegative()) {\n    if (other.isNegative()) {\n      return this.negate().multiply(other.negate());\n    } else {\n      return this.negate().multiply(other).negate();\n    }\n  } else if (other.isNegative()) {\n    return this.multiply(other.negate()).negate();\n  }\n\n  // If both longs are small, use float multiplication\n  if (this.lessThan(Kotlin.Long.TWO_PWR_24_) &&\n      other.lessThan(Kotlin.Long.TWO_PWR_24_)) {\n    return Kotlin.Long.fromNumber(this.toNumber() * other.toNumber());\n  }\n\n  // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\n  // We can skip products that would overflow.\n\n  var a48 = this.high_ >>> 16;\n  var a32 = this.high_ & 0xFFFF;\n  var a16 = this.low_ >>> 16;\n  var a00 = this.low_ & 0xFFFF;\n\n  var b48 = other.high_ >>> 16;\n  var b32 = other.high_ & 0xFFFF;\n  var b16 = other.low_ >>> 16;\n  var b00 = other.low_ & 0xFFFF;\n\n  var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\n  c00 += a00 * b00;\n  c16 += c00 >>> 16;\n  c00 &= 0xFFFF;\n  c16 += a16 * b00;\n  c32 += c16 >>> 16;\n  c16 &= 0xFFFF;\n  c16 += a00 * b16;\n  c32 += c16 >>> 16;\n  c16 &= 0xFFFF;\n  c32 += a32 * b00;\n  c48 += c32 >>> 16;\n  c32 &= 0xFFFF;\n  c32 += a16 * b16;\n  c48 += c32 >>> 16;\n  c32 &= 0xFFFF;\n  c32 += a00 * b32;\n  c48 += c32 >>> 16;\n  c32 &= 0xFFFF;\n  c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\n  c48 &= 0xFFFF;\n  return Kotlin.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);\n};\n\n\n/**\n * Returns this Long divided by the given one.\n * @param {Kotlin.Long} other Long by which to divide.\n * @return {!Kotlin.Long} This Long divided by the given one.\n */\nKotlin.Long.prototype.div = function(other) {\n  if (other.isZero()) {\n    throw Error('division by zero');\n  } else if (this.isZero()) {\n    return Kotlin.Long.ZERO;\n  }\n\n  if (this.equalsLong(Kotlin.Long.MIN_VALUE)) {\n    if (other.equalsLong(Kotlin.Long.ONE) ||\n        other.equalsLong(Kotlin.Long.NEG_ONE)) {\n      return Kotlin.Long.MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\n    } else if (other.equalsLong(Kotlin.Long.MIN_VALUE)) {\n      return Kotlin.Long.ONE;\n    } else {\n      // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\n      var halfThis = this.shiftRight(1);\n      var approx = halfThis.div(other).shiftLeft(1);\n      if (approx.equalsLong(Kotlin.Long.ZERO)) {\n        return other.isNegative() ? Kotlin.Long.ONE : Kotlin.Long.NEG_ONE;\n      } else {\n        var rem = this.subtract(other.multiply(approx));\n        var result = approx.add(rem.div(other));\n        return result;\n      }\n    }\n  } else if (other.equalsLong(Kotlin.Long.MIN_VALUE)) {\n    return Kotlin.Long.ZERO;\n  }\n\n  if (this.isNegative()) {\n    if (other.isNegative()) {\n      return this.negate().div(other.negate());\n    } else {\n      return this.negate().div(other).negate();\n    }\n  } else if (other.isNegative()) {\n    return this.div(other.negate()).negate();\n  }\n\n  // Repeat the following until the remainder is less than other:  find a\n  // floating-point that approximates remainder / other *from below*, add this\n  // into the result, and subtract it from the remainder.  It is critical that\n  // the approximate value is less than or equal to the real value so that the\n  // remainder never becomes negative.\n  var res = Kotlin.Long.ZERO;\n  var rem = this;\n  while (rem.greaterThanOrEqual(other)) {\n    // Approximate the result of division. This may be a little greater or\n    // smaller than the actual value.\n    var approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));\n\n    // We will tweak the approximate result by changing it in the 48-th digit or\n    // the smallest non-fractional digit, whichever is larger.\n    var log2 = Math.ceil(Math.log(approx) / Math.LN2);\n    var delta = (log2 <= 48) ? 1 : Math.pow(2, log2 - 48);\n\n    // Decrease the approximation until it is smaller than the remainder.  Note\n    // that if it is too large, the product overflows and is negative.\n    var approxRes = Kotlin.Long.fromNumber(approx);\n    var approxRem = approxRes.multiply(other);\n    while (approxRem.isNegative() || approxRem.greaterThan(rem)) {\n      approx -= delta;\n      approxRes = Kotlin.Long.fromNumber(approx);\n      approxRem = approxRes.multiply(other);\n    }\n\n    // We know the answer can't be zero... and actually, zero would cause\n    // infinite recursion since we would make no progress.\n    if (approxRes.isZero()) {\n      approxRes = Kotlin.Long.ONE;\n    }\n\n    res = res.add(approxRes);\n    rem = rem.subtract(approxRem);\n  }\n  return res;\n};\n\n\n/**\n * Returns this Long modulo the given one.\n * @param {Kotlin.Long} other Long by which to mod.\n * @return {!Kotlin.Long} This Long modulo the given one.\n */\nKotlin.Long.prototype.modulo = function(other) {\n  return this.subtract(this.div(other).multiply(other));\n};\n\n\n/** @return {!Kotlin.Long} The bitwise-NOT of this value. */\nKotlin.Long.prototype.not = function() {\n  return Kotlin.Long.fromBits(~this.low_, ~this.high_);\n};\n\n\n/**\n * Returns the bitwise-AND of this Long and the given one.\n * @param {Kotlin.Long} other The Long with which to AND.\n * @return {!Kotlin.Long} The bitwise-AND of this and the other.\n */\nKotlin.Long.prototype.and = function(other) {\n  return Kotlin.Long.fromBits(this.low_ & other.low_,\n                                 this.high_ & other.high_);\n};\n\n\n/**\n * Returns the bitwise-OR of this Long and the given one.\n * @param {Kotlin.Long} other The Long with which to OR.\n * @return {!Kotlin.Long} The bitwise-OR of this and the other.\n */\nKotlin.Long.prototype.or = function(other) {\n  return Kotlin.Long.fromBits(this.low_ | other.low_,\n                                 this.high_ | other.high_);\n};\n\n\n/**\n * Returns the bitwise-XOR of this Long and the given one.\n * @param {Kotlin.Long} other The Long with which to XOR.\n * @return {!Kotlin.Long} The bitwise-XOR of this and the other.\n */\nKotlin.Long.prototype.xor = function(other) {\n  return Kotlin.Long.fromBits(this.low_ ^ other.low_,\n                                 this.high_ ^ other.high_);\n};\n\n\n/**\n * Returns this Long with bits shifted to the left by the given amount.\n * @param {number} numBits The number of bits by which to shift.\n * @return {!Kotlin.Long} This shifted to the left by the given amount.\n */\nKotlin.Long.prototype.shiftLeft = function(numBits) {\n  numBits &= 63;\n  if (numBits == 0) {\n    return this;\n  } else {\n    var low = this.low_;\n    if (numBits < 32) {\n      var high = this.high_;\n      return Kotlin.Long.fromBits(\n          low << numBits,\n          (high << numBits) | (low >>> (32 - numBits)));\n    } else {\n      return Kotlin.Long.fromBits(0, low << (numBits - 32));\n    }\n  }\n};\n\n\n/**\n * Returns this Long with bits shifted to the right by the given amount.\n * @param {number} numBits The number of bits by which to shift.\n * @return {!Kotlin.Long} This shifted to the right by the given amount.\n */\nKotlin.Long.prototype.shiftRight = function(numBits) {\n  numBits &= 63;\n  if (numBits == 0) {\n    return this;\n  } else {\n    var high = this.high_;\n    if (numBits < 32) {\n      var low = this.low_;\n      return Kotlin.Long.fromBits(\n          (low >>> numBits) | (high << (32 - numBits)),\n          high >> numBits);\n    } else {\n      return Kotlin.Long.fromBits(\n          high >> (numBits - 32),\n          high >= 0 ? 0 : -1);\n    }\n  }\n};\n\n\n/**\n * Returns this Long with bits shifted to the right by the given amount, with\n * zeros placed into the new leading bits.\n * @param {number} numBits The number of bits by which to shift.\n * @return {!Kotlin.Long} This shifted to the right by the given amount, with\n *     zeros placed into the new leading bits.\n */\nKotlin.Long.prototype.shiftRightUnsigned = function(numBits) {\n  numBits &= 63;\n  if (numBits == 0) {\n    return this;\n  } else {\n    var high = this.high_;\n    if (numBits < 32) {\n      var low = this.low_;\n      return Kotlin.Long.fromBits(\n          (low >>> numBits) | (high << (32 - numBits)),\n          high >>> numBits);\n    } else if (numBits == 32) {\n      return Kotlin.Long.fromBits(high, 0);\n    } else {\n      return Kotlin.Long.fromBits(high >>> (numBits - 32), 0);\n    }\n  }\n};\n\n// Support for Kotlin\nKotlin.Long.prototype.equals = function (other) {\n    return other instanceof Kotlin.Long && this.equalsLong(other);\n};\n\nKotlin.Long.prototype.compareTo_11rb$ = Kotlin.Long.prototype.compare;\n\nKotlin.Long.prototype.inc = function() {\n    return this.add(Kotlin.Long.ONE);\n};\n\nKotlin.Long.prototype.dec = function() {\n    return this.add(Kotlin.Long.NEG_ONE);\n};\n\nKotlin.Long.prototype.valueOf = function() {\n    return this.toNumber();\n};\n\nKotlin.Long.prototype.unaryPlus = function() {\n    return this;\n};\n\nKotlin.Long.prototype.unaryMinus = Kotlin.Long.prototype.negate;\nKotlin.Long.prototype.inv = Kotlin.Long.prototype.not;\n\nKotlin.Long.prototype.rangeTo = function (other) {\n    return new Kotlin.kotlin.ranges.LongRange(this, other);\n};","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n// a package is omitted to get declarations directly under the module\n\n@PublishedApi\nexternal internal fun <T> Array(size: Int): Array<T>\n\n@JsName(\"newArray\")\nfun <T> newArray(size: Int, initValue: T) = fillArrayVal(Array<T>(size), initValue)\n\n@JsName(\"newArrayF\")\ninline fun <T> arrayWithFun(size: Int, init: (Int) -> T) = fillArrayFun(Array<T>(size), init)\n\n@JsName(\"fillArray\")\ninline fun <T> fillArrayFun(array: Array<T>, init: (Int) -> T): Array<T> {\n    for (i in 0..array.size - 1) {\n        array[i] = init(i)\n    }\n    return array\n}\n\n@JsName(\"booleanArray\")\nfun booleanArray(size: Int, init: dynamic): Array<Boolean> {\n    val result: dynamic = Array<Boolean>(size)\n    result.`$type$` = \"BooleanArray\"\n    return when (init) {\n        null, true -> fillArrayVal(result, false)\n        false -> result\n        else -> fillArrayFun<Boolean>(result, init)\n    }\n}\n\n@JsName(\"booleanArrayF\")\ninline fun booleanArrayWithFun(size: Int, init: (Int) -> Boolean): Array<Boolean> = fillArrayFun(booleanArray(size, false), init)\n\n@JsName(\"charArray\")\n@Suppress(\"UNUSED_PARAMETER\")\nfun charArray(size: Int, init: dynamic): Array<Char> {\n    val result = js(\"new Uint16Array(size)\")\n    result.`$type$` = \"CharArray\"\n    return when (init) {\n        null, true, false -> result // For consistency\n        else -> fillArrayFun<Char>(result, init)\n    }\n}\n\n@JsName(\"charArrayF\")\ninline fun charArrayWithFun(size: Int, init: (Int) -> Char): Array<Char> {\n    val array = charArray(size, null)\n    for (i in 0..array.size - 1) {\n        @Suppress(\"UNUSED_VARIABLE\") // used in js block\n        val value = init(i)\n        js(\"array[i] = value;\")\n    }\n    return array\n}\n\n@JsName(\"untypedCharArrayF\")\ninline fun untypedCharArrayWithFun(size: Int, init: (Int) -> Char): Array<Char> {\n    val array = Array<Char>(size)\n    for (i in 0..array.size - 1) {\n        @Suppress(\"UNUSED_VARIABLE\") // used in js block\n        val value = init(i)\n        js(\"array[i] = value;\")\n    }\n    return array\n}\n\n@JsName(\"longArray\")\nfun longArray(size: Int, init: dynamic): Array<Long> {\n    val result: dynamic = Array<Long>(size)\n    result.`$type$` = \"LongArray\"\n    return when (init) {\n        null, true -> fillArrayVal(result, 0L)\n        false -> result\n        else -> fillArrayFun<Long>(result, init)\n    }\n}\n\n@JsName(\"longArrayF\")\ninline fun longArrayWithFun(size: Int, init: (Int) -> Long): Array<Long> = fillArrayFun(longArray(size, false), init)\n\nprivate fun <T> fillArrayVal(array: Array<T>, initValue: T): Array<T> {\n    for (i in 0..array.size - 1) {\n        array[i] = initValue\n    }\n    return array\n}","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin\n\npublic class Enum<T : Enum<T>> : Comparable<Enum<T>> {\n    @JsName(\"name$\") private var _name: String = \"\"\n    @JsName(\"ordinal$\") private var _ordinal: Int = 0\n\n    val name: String\n        get() = _name\n\n    val ordinal: Int\n        get() = _ordinal\n\n    override fun compareTo(other: Enum<T>) = ordinal.compareTo(other.ordinal)\n\n    override fun equals(other: Any?) = this === other\n\n    override fun hashCode(): Int = js(\"Kotlin.identityHashCode\")(this)\n\n    override fun toString() = name\n\n    companion object\n}",null,"/*\n * Copyright 2010-2021 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"ArraysKt\")\n\npackage kotlin.collections\n\n//\n// NOTE: THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.random.*\nimport kotlin.ranges.contains\nimport kotlin.ranges.reversed\n\n/**\n * Returns 1st *element* from the array.\n * \n * If the size of this array is less than 1, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> Array<out T>.component1(): T {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the array.\n * \n * If the size of this array is less than 1, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ByteArray.component1(): Byte {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the array.\n * \n * If the size of this array is less than 1, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ShortArray.component1(): Short {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the array.\n * \n * If the size of this array is less than 1, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun IntArray.component1(): Int {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the array.\n * \n * If the size of this array is less than 1, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun LongArray.component1(): Long {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the array.\n * \n * If the size of this array is less than 1, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun FloatArray.component1(): Float {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the array.\n * \n * If the size of this array is less than 1, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun DoubleArray.component1(): Double {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the array.\n * \n * If the size of this array is less than 1, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun BooleanArray.component1(): Boolean {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the array.\n * \n * If the size of this array is less than 1, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun CharArray.component1(): Char {\n    return get(0)\n}\n\n/**\n * Returns 2nd *element* from the array.\n * \n * If the size of this array is less than 2, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> Array<out T>.component2(): T {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the array.\n * \n * If the size of this array is less than 2, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ByteArray.component2(): Byte {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the array.\n * \n * If the size of this array is less than 2, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ShortArray.component2(): Short {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the array.\n * \n * If the size of this array is less than 2, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun IntArray.component2(): Int {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the array.\n * \n * If the size of this array is less than 2, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun LongArray.component2(): Long {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the array.\n * \n * If the size of this array is less than 2, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun FloatArray.component2(): Float {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the array.\n * \n * If the size of this array is less than 2, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun DoubleArray.component2(): Double {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the array.\n * \n * If the size of this array is less than 2, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun BooleanArray.component2(): Boolean {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the array.\n * \n * If the size of this array is less than 2, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun CharArray.component2(): Char {\n    return get(1)\n}\n\n/**\n * Returns 3rd *element* from the array.\n * \n * If the size of this array is less than 3, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> Array<out T>.component3(): T {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the array.\n * \n * If the size of this array is less than 3, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ByteArray.component3(): Byte {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the array.\n * \n * If the size of this array is less than 3, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ShortArray.component3(): Short {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the array.\n * \n * If the size of this array is less than 3, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun IntArray.component3(): Int {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the array.\n * \n * If the size of this array is less than 3, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun LongArray.component3(): Long {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the array.\n * \n * If the size of this array is less than 3, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun FloatArray.component3(): Float {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the array.\n * \n * If the size of this array is less than 3, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun DoubleArray.component3(): Double {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the array.\n * \n * If the size of this array is less than 3, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun BooleanArray.component3(): Boolean {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the array.\n * \n * If the size of this array is less than 3, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun CharArray.component3(): Char {\n    return get(2)\n}\n\n/**\n * Returns 4th *element* from the array.\n * \n * If the size of this array is less than 4, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> Array<out T>.component4(): T {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the array.\n * \n * If the size of this array is less than 4, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ByteArray.component4(): Byte {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the array.\n * \n * If the size of this array is less than 4, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ShortArray.component4(): Short {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the array.\n * \n * If the size of this array is less than 4, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun IntArray.component4(): Int {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the array.\n * \n * If the size of this array is less than 4, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun LongArray.component4(): Long {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the array.\n * \n * If the size of this array is less than 4, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun FloatArray.component4(): Float {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the array.\n * \n * If the size of this array is less than 4, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun DoubleArray.component4(): Double {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the array.\n * \n * If the size of this array is less than 4, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun BooleanArray.component4(): Boolean {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the array.\n * \n * If the size of this array is less than 4, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun CharArray.component4(): Char {\n    return get(3)\n}\n\n/**\n * Returns 5th *element* from the array.\n * \n * If the size of this array is less than 5, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> Array<out T>.component5(): T {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the array.\n * \n * If the size of this array is less than 5, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ByteArray.component5(): Byte {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the array.\n * \n * If the size of this array is less than 5, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ShortArray.component5(): Short {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the array.\n * \n * If the size of this array is less than 5, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun IntArray.component5(): Int {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the array.\n * \n * If the size of this array is less than 5, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun LongArray.component5(): Long {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the array.\n * \n * If the size of this array is less than 5, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun FloatArray.component5(): Float {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the array.\n * \n * If the size of this array is less than 5, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun DoubleArray.component5(): Double {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the array.\n * \n * If the size of this array is less than 5, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun BooleanArray.component5(): Boolean {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the array.\n * \n * If the size of this array is less than 5, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun CharArray.component5(): Char {\n    return get(4)\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun <@kotlin.internal.OnlyInputTypes T> Array<out T>.contains(element: T): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun ByteArray.contains(element: Byte): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun ShortArray.contains(element: Short): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun IntArray.contains(element: Int): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun LongArray.contains(element: Long): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\n@Deprecated(\"The function has unclear behavior when searching for NaN or zero values and will be removed soon. Use 'any { it == element }' instead to continue using this behavior, or '.asList().contains(element: T)' to get the same search behavior as in a list.\", ReplaceWith(\"any { it == element }\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\n@Suppress(\"DEPRECATION\")\npublic operator fun FloatArray.contains(element: Float): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\n@Deprecated(\"The function has unclear behavior when searching for NaN or zero values and will be removed soon. Use 'any { it == element }' instead to continue using this behavior, or '.asList().contains(element: T)' to get the same search behavior as in a list.\", ReplaceWith(\"any { it == element }\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\n@Suppress(\"DEPRECATION\")\npublic operator fun DoubleArray.contains(element: Double): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun BooleanArray.contains(element: Boolean): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun CharArray.contains(element: Char): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun <T> Array<out T>.elementAt(index: Int): T\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun ByteArray.elementAt(index: Int): Byte\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun ShortArray.elementAt(index: Int): Short\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun IntArray.elementAt(index: Int): Int\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun LongArray.elementAt(index: Int): Long\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun FloatArray.elementAt(index: Int): Float\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun DoubleArray.elementAt(index: Int): Double\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun BooleanArray.elementAt(index: Int): Boolean\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun CharArray.elementAt(index: Int): Char\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.elementAtOrElse(index: Int, defaultValue: (Int) -> T): T {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Byte): Byte {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Short): Short {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Int): Int {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Long): Long {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Float): Float {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Double): Double {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Boolean): Boolean {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Char): Char {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.elementAtOrNull(index: Int): T? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.elementAtOrNull(index: Int): Byte? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.elementAtOrNull(index: Int): Short? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.elementAtOrNull(index: Int): Int? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.elementAtOrNull(index: Int): Long? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.elementAtOrNull(index: Int): Float? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.elementAtOrNull(index: Int): Double? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.elementAtOrNull(index: Int): Boolean? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.elementAtOrNull(index: Int): Char? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.find(predicate: (T) -> Boolean): T? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.find(predicate: (Byte) -> Boolean): Byte? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.find(predicate: (Short) -> Boolean): Short? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.find(predicate: (Int) -> Boolean): Int? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.find(predicate: (Long) -> Boolean): Long? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.find(predicate: (Float) -> Boolean): Float? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.find(predicate: (Double) -> Boolean): Double? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.find(predicate: (Boolean) -> Boolean): Boolean? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.find(predicate: (Char) -> Boolean): Char? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.findLast(predicate: (T) -> Boolean): T? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.findLast(predicate: (Byte) -> Boolean): Byte? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.findLast(predicate: (Short) -> Boolean): Short? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.findLast(predicate: (Int) -> Boolean): Int? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.findLast(predicate: (Long) -> Boolean): Long? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.findLast(predicate: (Float) -> Boolean): Float? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.findLast(predicate: (Double) -> Boolean): Double? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.findLast(predicate: (Boolean) -> Boolean): Boolean? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.findLast(predicate: (Char) -> Boolean): Char? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun <T> Array<out T>.first(): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun ByteArray.first(): Byte {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun ShortArray.first(): Short {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun IntArray.first(): Int {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun LongArray.first(): Long {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun FloatArray.first(): Float {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun DoubleArray.first(): Double {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun BooleanArray.first(): Boolean {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun CharArray.first(): Char {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun <T> Array<out T>.first(predicate: (T) -> Boolean): T {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun ByteArray.first(predicate: (Byte) -> Boolean): Byte {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun ShortArray.first(predicate: (Short) -> Boolean): Short {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun IntArray.first(predicate: (Int) -> Boolean): Int {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun LongArray.first(predicate: (Long) -> Boolean): Long {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun FloatArray.first(predicate: (Float) -> Boolean): Float {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun DoubleArray.first(predicate: (Double) -> Boolean): Double {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun BooleanArray.first(predicate: (Boolean) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun CharArray.first(predicate: (Char) -> Boolean): Char {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first non-null value produced by [transform] function being applied to elements of this array in iteration order,\n * or throws [NoSuchElementException] if no non-null value was produced.\n * \n * @sample samples.collections.Collections.Transformations.firstNotNullOf\n */\n@SinceKotlin(\"1.5\")\n@kotlin.internal.InlineOnly\npublic inline fun <T, R : Any> Array<out T>.firstNotNullOf(transform: (T) -> R?): R {\n    return firstNotNullOfOrNull(transform) ?: throw NoSuchElementException(\"No element of the array was transformed to a non-null value.\")\n}\n\n/**\n * Returns the first non-null value produced by [transform] function being applied to elements of this array in iteration order,\n * or `null` if no non-null value was produced.\n * \n * @sample samples.collections.Collections.Transformations.firstNotNullOf\n */\n@SinceKotlin(\"1.5\")\n@kotlin.internal.InlineOnly\npublic inline fun <T, R : Any> Array<out T>.firstNotNullOfOrNull(transform: (T) -> R?): R? {\n    for (element in this) {\n        val result = transform(element)\n        if (result != null) {\n            return result\n        }\n    }\n    return null\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun <T> Array<out T>.firstOrNull(): T? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun ByteArray.firstOrNull(): Byte? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun ShortArray.firstOrNull(): Short? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun IntArray.firstOrNull(): Int? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun LongArray.firstOrNull(): Long? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun FloatArray.firstOrNull(): Float? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun DoubleArray.firstOrNull(): Double? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun BooleanArray.firstOrNull(): Boolean? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun CharArray.firstOrNull(): Char? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun <T> Array<out T>.firstOrNull(predicate: (T) -> Boolean): T? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun ByteArray.firstOrNull(predicate: (Byte) -> Boolean): Byte? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun ShortArray.firstOrNull(predicate: (Short) -> Boolean): Short? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun IntArray.firstOrNull(predicate: (Int) -> Boolean): Int? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun LongArray.firstOrNull(predicate: (Long) -> Boolean): Long? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun FloatArray.firstOrNull(predicate: (Float) -> Boolean): Float? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun DoubleArray.firstOrNull(predicate: (Double) -> Boolean): Double? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun BooleanArray.firstOrNull(predicate: (Boolean) -> Boolean): Boolean? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun CharArray.firstOrNull(predicate: (Char) -> Boolean): Char? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.getOrElse(index: Int, defaultValue: (Int) -> T): T {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.getOrElse(index: Int, defaultValue: (Int) -> Byte): Byte {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.getOrElse(index: Int, defaultValue: (Int) -> Short): Short {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.getOrElse(index: Int, defaultValue: (Int) -> Int): Int {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.getOrElse(index: Int, defaultValue: (Int) -> Long): Long {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.getOrElse(index: Int, defaultValue: (Int) -> Float): Float {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.getOrElse(index: Int, defaultValue: (Int) -> Double): Double {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.getOrElse(index: Int, defaultValue: (Int) -> Boolean): Boolean {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.getOrElse(index: Int, defaultValue: (Int) -> Char): Char {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.getOrNull\n */\npublic fun <T> Array<out T>.getOrNull(index: Int): T? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.getOrNull\n */\npublic fun ByteArray.getOrNull(index: Int): Byte? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.getOrNull\n */\npublic fun ShortArray.getOrNull(index: Int): Short? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.getOrNull\n */\npublic fun IntArray.getOrNull(index: Int): Int? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.getOrNull\n */\npublic fun LongArray.getOrNull(index: Int): Long? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.getOrNull\n */\npublic fun FloatArray.getOrNull(index: Int): Float? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.getOrNull\n */\npublic fun DoubleArray.getOrNull(index: Int): Double? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.getOrNull\n */\npublic fun BooleanArray.getOrNull(index: Int): Boolean? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.getOrNull\n */\npublic fun CharArray.getOrNull(index: Int): Char? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun <@kotlin.internal.OnlyInputTypes T> Array<out T>.indexOf(element: T): Int {\n    if (element == null) {\n        for (index in indices) {\n            if (this[index] == null) {\n                return index\n            }\n        }\n    } else {\n        for (index in indices) {\n            if (element == this[index]) {\n                return index\n            }\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun ByteArray.indexOf(element: Byte): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun ShortArray.indexOf(element: Short): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun IntArray.indexOf(element: Int): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun LongArray.indexOf(element: Long): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\n@Deprecated(\"The function has unclear behavior when searching for NaN or zero values and will be removed soon. Use 'indexOfFirst { it == element }' instead to continue using this behavior, or '.asList().indexOf(element: T)' to get the same search behavior as in a list.\", ReplaceWith(\"indexOfFirst { it == element }\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun FloatArray.indexOf(element: Float): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\n@Deprecated(\"The function has unclear behavior when searching for NaN or zero values and will be removed soon. Use 'indexOfFirst { it == element }' instead to continue using this behavior, or '.asList().indexOf(element: T)' to get the same search behavior as in a list.\", ReplaceWith(\"indexOfFirst { it == element }\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun DoubleArray.indexOf(element: Double): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun BooleanArray.indexOf(element: Boolean): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun CharArray.indexOf(element: Char): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun <T> Array<out T>.indexOfFirst(predicate: (T) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun ByteArray.indexOfFirst(predicate: (Byte) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun ShortArray.indexOfFirst(predicate: (Short) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun IntArray.indexOfFirst(predicate: (Int) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun LongArray.indexOfFirst(predicate: (Long) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun FloatArray.indexOfFirst(predicate: (Float) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun DoubleArray.indexOfFirst(predicate: (Double) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun BooleanArray.indexOfFirst(predicate: (Boolean) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun CharArray.indexOfFirst(predicate: (Char) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun <T> Array<out T>.indexOfLast(predicate: (T) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun ByteArray.indexOfLast(predicate: (Byte) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun ShortArray.indexOfLast(predicate: (Short) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun IntArray.indexOfLast(predicate: (Int) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun LongArray.indexOfLast(predicate: (Long) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun FloatArray.indexOfLast(predicate: (Float) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun DoubleArray.indexOfLast(predicate: (Double) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun BooleanArray.indexOfLast(predicate: (Boolean) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun CharArray.indexOfLast(predicate: (Char) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns the last element.\n * \n * @throws NoSuchElementException if the array is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic fun <T> Array<out T>.last(): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * \n * @throws NoSuchElementException if the array is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic fun ByteArray.last(): Byte {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * \n * @throws NoSuchElementException if the array is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic fun ShortArray.last(): Short {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * \n * @throws NoSuchElementException if the array is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic fun IntArray.last(): Int {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * \n * @throws NoSuchElementException if the array is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic fun LongArray.last(): Long {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * \n * @throws NoSuchElementException if the array is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic fun FloatArray.last(): Float {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * \n * @throws NoSuchElementException if the array is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic fun DoubleArray.last(): Double {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * \n * @throws NoSuchElementException if the array is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic fun BooleanArray.last(): Boolean {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * \n * @throws NoSuchElementException if the array is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic fun CharArray.last(): Char {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * \n * @throws NoSuchElementException if no such element is found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic inline fun <T> Array<out T>.last(predicate: (T) -> Boolean): T {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * \n * @throws NoSuchElementException if no such element is found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic inline fun ByteArray.last(predicate: (Byte) -> Boolean): Byte {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * \n * @throws NoSuchElementException if no such element is found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic inline fun ShortArray.last(predicate: (Short) -> Boolean): Short {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * \n * @throws NoSuchElementException if no such element is found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic inline fun IntArray.last(predicate: (Int) -> Boolean): Int {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * \n * @throws NoSuchElementException if no such element is found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic inline fun LongArray.last(predicate: (Long) -> Boolean): Long {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * \n * @throws NoSuchElementException if no such element is found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic inline fun FloatArray.last(predicate: (Float) -> Boolean): Float {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * \n * @throws NoSuchElementException if no such element is found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic inline fun DoubleArray.last(predicate: (Double) -> Boolean): Double {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * \n * @throws NoSuchElementException if no such element is found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic inline fun BooleanArray.last(predicate: (Boolean) -> Boolean): Boolean {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * \n * @throws NoSuchElementException if no such element is found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic inline fun CharArray.last(predicate: (Char) -> Boolean): Char {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun <@kotlin.internal.OnlyInputTypes T> Array<out T>.lastIndexOf(element: T): Int {\n    if (element == null) {\n        for (index in indices.reversed()) {\n            if (this[index] == null) {\n                return index\n            }\n        }\n    } else {\n        for (index in indices.reversed()) {\n            if (element == this[index]) {\n                return index\n            }\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun ByteArray.lastIndexOf(element: Byte): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun ShortArray.lastIndexOf(element: Short): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun IntArray.lastIndexOf(element: Int): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun LongArray.lastIndexOf(element: Long): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\n@Deprecated(\"The function has unclear behavior when searching for NaN or zero values and will be removed soon. Use 'indexOfLast { it == element }' instead to continue using this behavior, or '.asList().lastIndexOf(element: T)' to get the same search behavior as in a list.\", ReplaceWith(\"indexOfLast { it == element }\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun FloatArray.lastIndexOf(element: Float): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\n@Deprecated(\"The function has unclear behavior when searching for NaN or zero values and will be removed soon. Use 'indexOfLast { it == element }' instead to continue using this behavior, or '.asList().lastIndexOf(element: T)' to get the same search behavior as in a list.\", ReplaceWith(\"indexOfLast { it == element }\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun DoubleArray.lastIndexOf(element: Double): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun BooleanArray.lastIndexOf(element: Boolean): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun CharArray.lastIndexOf(element: Char): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic fun <T> Array<out T>.lastOrNull(): T? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic fun ByteArray.lastOrNull(): Byte? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic fun ShortArray.lastOrNull(): Short? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic fun IntArray.lastOrNull(): Int? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic fun LongArray.lastOrNull(): Long? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic fun FloatArray.lastOrNull(): Float? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic fun DoubleArray.lastOrNull(): Double? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic fun BooleanArray.lastOrNull(): Boolean? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic fun CharArray.lastOrNull(): Char? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic inline fun <T> Array<out T>.lastOrNull(predicate: (T) -> Boolean): T? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic inline fun ByteArray.lastOrNull(predicate: (Byte) -> Boolean): Byte? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic inline fun ShortArray.lastOrNull(predicate: (Short) -> Boolean): Short? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic inline fun IntArray.lastOrNull(predicate: (Int) -> Boolean): Int? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic inline fun LongArray.lastOrNull(predicate: (Long) -> Boolean): Long? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic inline fun FloatArray.lastOrNull(predicate: (Float) -> Boolean): Float? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic inline fun DoubleArray.lastOrNull(predicate: (Double) -> Boolean): Double? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic inline fun BooleanArray.lastOrNull(predicate: (Boolean) -> Boolean): Boolean? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic inline fun CharArray.lastOrNull(predicate: (Char) -> Boolean): Char? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.random(): T {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.random(): Byte {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.random(): Short {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.random(): Int {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.random(): Long {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.random(): Float {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.random(): Double {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.random(): Boolean {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.random(): Char {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun <T> Array<out T>.random(random: Random): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun ByteArray.random(random: Random): Byte {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun ShortArray.random(random: Random): Short {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun IntArray.random(random: Random): Int {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun LongArray.random(random: Random): Long {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun FloatArray.random(random: Random): Float {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun DoubleArray.random(random: Random): Double {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun BooleanArray.random(random: Random): Boolean {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun CharArray.random(random: Random): Char {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.randomOrNull(): T? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this array, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.randomOrNull(): Byte? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this array, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.randomOrNull(): Short? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this array, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.randomOrNull(): Int? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this array, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.randomOrNull(): Long? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this array, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.randomOrNull(): Float? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this array, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.randomOrNull(): Double? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this array, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.randomOrNull(): Boolean? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this array, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.randomOrNull(): Char? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun <T> Array<out T>.randomOrNull(random: Random): T? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun ByteArray.randomOrNull(random: Random): Byte? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun ShortArray.randomOrNull(random: Random): Short? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun IntArray.randomOrNull(random: Random): Int? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun LongArray.randomOrNull(random: Random): Long? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun FloatArray.randomOrNull(random: Random): Float? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun DoubleArray.randomOrNull(random: Random): Double? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun BooleanArray.randomOrNull(random: Random): Boolean? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun CharArray.randomOrNull(random: Random): Char? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun <T> Array<out T>.single(): T {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun ByteArray.single(): Byte {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun ShortArray.single(): Short {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun IntArray.single(): Int {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun LongArray.single(): Long {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun FloatArray.single(): Float {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun DoubleArray.single(): Double {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun BooleanArray.single(): Boolean {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun CharArray.single(): Char {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun <T> Array<out T>.single(predicate: (T) -> Boolean): T {\n    var single: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as T\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun ByteArray.single(predicate: (Byte) -> Boolean): Byte {\n    var single: Byte? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Byte\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun ShortArray.single(predicate: (Short) -> Boolean): Short {\n    var single: Short? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Short\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun IntArray.single(predicate: (Int) -> Boolean): Int {\n    var single: Int? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Int\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun LongArray.single(predicate: (Long) -> Boolean): Long {\n    var single: Long? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Long\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun FloatArray.single(predicate: (Float) -> Boolean): Float {\n    var single: Float? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Float\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun DoubleArray.single(predicate: (Double) -> Boolean): Double {\n    var single: Double? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Double\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun BooleanArray.single(predicate: (Boolean) -> Boolean): Boolean {\n    var single: Boolean? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Boolean\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun CharArray.single(predicate: (Char) -> Boolean): Char {\n    var single: Char? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Char\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun <T> Array<out T>.singleOrNull(): T? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun ByteArray.singleOrNull(): Byte? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun ShortArray.singleOrNull(): Short? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun IntArray.singleOrNull(): Int? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun LongArray.singleOrNull(): Long? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun FloatArray.singleOrNull(): Float? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun DoubleArray.singleOrNull(): Double? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun BooleanArray.singleOrNull(): Boolean? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun CharArray.singleOrNull(): Char? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun <T> Array<out T>.singleOrNull(predicate: (T) -> Boolean): T? {\n    var single: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun ByteArray.singleOrNull(predicate: (Byte) -> Boolean): Byte? {\n    var single: Byte? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun ShortArray.singleOrNull(predicate: (Short) -> Boolean): Short? {\n    var single: Short? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun IntArray.singleOrNull(predicate: (Int) -> Boolean): Int? {\n    var single: Int? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun LongArray.singleOrNull(predicate: (Long) -> Boolean): Long? {\n    var single: Long? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun FloatArray.singleOrNull(predicate: (Float) -> Boolean): Float? {\n    var single: Float? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun DoubleArray.singleOrNull(predicate: (Double) -> Boolean): Double? {\n    var single: Double? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun BooleanArray.singleOrNull(predicate: (Boolean) -> Boolean): Boolean? {\n    var single: Boolean? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun CharArray.singleOrNull(predicate: (Char) -> Boolean): Char? {\n    var single: Char? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun <T> Array<out T>.drop(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun ByteArray.drop(n: Int): List<Byte> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun ShortArray.drop(n: Int): List<Short> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun IntArray.drop(n: Int): List<Int> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun LongArray.drop(n: Int): List<Long> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun FloatArray.drop(n: Int): List<Float> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun DoubleArray.drop(n: Int): List<Double> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun BooleanArray.drop(n: Int): List<Boolean> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun CharArray.drop(n: Int): List<Char> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun <T> Array<out T>.dropLast(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun ByteArray.dropLast(n: Int): List<Byte> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun ShortArray.dropLast(n: Int): List<Short> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun IntArray.dropLast(n: Int): List<Int> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun LongArray.dropLast(n: Int): List<Long> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun FloatArray.dropLast(n: Int): List<Float> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun DoubleArray.dropLast(n: Int): List<Double> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun BooleanArray.dropLast(n: Int): List<Boolean> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun CharArray.dropLast(n: Int): List<Char> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun <T> Array<out T>.dropLastWhile(predicate: (T) -> Boolean): List<T> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun ByteArray.dropLastWhile(predicate: (Byte) -> Boolean): List<Byte> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun ShortArray.dropLastWhile(predicate: (Short) -> Boolean): List<Short> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun IntArray.dropLastWhile(predicate: (Int) -> Boolean): List<Int> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun LongArray.dropLastWhile(predicate: (Long) -> Boolean): List<Long> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun FloatArray.dropLastWhile(predicate: (Float) -> Boolean): List<Float> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun DoubleArray.dropLastWhile(predicate: (Double) -> Boolean): List<Double> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun BooleanArray.dropLastWhile(predicate: (Boolean) -> Boolean): List<Boolean> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun CharArray.dropLastWhile(predicate: (Char) -> Boolean): List<Char> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun <T> Array<out T>.dropWhile(predicate: (T) -> Boolean): List<T> {\n    var yielding = false\n    val list = ArrayList<T>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun ByteArray.dropWhile(predicate: (Byte) -> Boolean): List<Byte> {\n    var yielding = false\n    val list = ArrayList<Byte>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun ShortArray.dropWhile(predicate: (Short) -> Boolean): List<Short> {\n    var yielding = false\n    val list = ArrayList<Short>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun IntArray.dropWhile(predicate: (Int) -> Boolean): List<Int> {\n    var yielding = false\n    val list = ArrayList<Int>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun LongArray.dropWhile(predicate: (Long) -> Boolean): List<Long> {\n    var yielding = false\n    val list = ArrayList<Long>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun FloatArray.dropWhile(predicate: (Float) -> Boolean): List<Float> {\n    var yielding = false\n    val list = ArrayList<Float>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun DoubleArray.dropWhile(predicate: (Double) -> Boolean): List<Double> {\n    var yielding = false\n    val list = ArrayList<Double>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun BooleanArray.dropWhile(predicate: (Boolean) -> Boolean): List<Boolean> {\n    var yielding = false\n    val list = ArrayList<Boolean>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun CharArray.dropWhile(predicate: (Char) -> Boolean): List<Char> {\n    var yielding = false\n    val list = ArrayList<Char>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun <T> Array<out T>.filter(predicate: (T) -> Boolean): List<T> {\n    return filterTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun ByteArray.filter(predicate: (Byte) -> Boolean): List<Byte> {\n    return filterTo(ArrayList<Byte>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun ShortArray.filter(predicate: (Short) -> Boolean): List<Short> {\n    return filterTo(ArrayList<Short>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun IntArray.filter(predicate: (Int) -> Boolean): List<Int> {\n    return filterTo(ArrayList<Int>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun LongArray.filter(predicate: (Long) -> Boolean): List<Long> {\n    return filterTo(ArrayList<Long>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun FloatArray.filter(predicate: (Float) -> Boolean): List<Float> {\n    return filterTo(ArrayList<Float>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun DoubleArray.filter(predicate: (Double) -> Boolean): List<Double> {\n    return filterTo(ArrayList<Double>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun BooleanArray.filter(predicate: (Boolean) -> Boolean): List<Boolean> {\n    return filterTo(ArrayList<Boolean>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun CharArray.filter(predicate: (Char) -> Boolean): List<Char> {\n    return filterTo(ArrayList<Char>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexed\n */\npublic inline fun <T> Array<out T>.filterIndexed(predicate: (index: Int, T) -> Boolean): List<T> {\n    return filterIndexedTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexed\n */\npublic inline fun ByteArray.filterIndexed(predicate: (index: Int, Byte) -> Boolean): List<Byte> {\n    return filterIndexedTo(ArrayList<Byte>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexed\n */\npublic inline fun ShortArray.filterIndexed(predicate: (index: Int, Short) -> Boolean): List<Short> {\n    return filterIndexedTo(ArrayList<Short>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexed\n */\npublic inline fun IntArray.filterIndexed(predicate: (index: Int, Int) -> Boolean): List<Int> {\n    return filterIndexedTo(ArrayList<Int>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexed\n */\npublic inline fun LongArray.filterIndexed(predicate: (index: Int, Long) -> Boolean): List<Long> {\n    return filterIndexedTo(ArrayList<Long>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexed\n */\npublic inline fun FloatArray.filterIndexed(predicate: (index: Int, Float) -> Boolean): List<Float> {\n    return filterIndexedTo(ArrayList<Float>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexed\n */\npublic inline fun DoubleArray.filterIndexed(predicate: (index: Int, Double) -> Boolean): List<Double> {\n    return filterIndexedTo(ArrayList<Double>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexed\n */\npublic inline fun BooleanArray.filterIndexed(predicate: (index: Int, Boolean) -> Boolean): List<Boolean> {\n    return filterIndexedTo(ArrayList<Boolean>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexed\n */\npublic inline fun CharArray.filterIndexed(predicate: (index: Int, Char) -> Boolean): List<Char> {\n    return filterIndexedTo(ArrayList<Char>(), predicate)\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexedTo\n */\npublic inline fun <T, C : MutableCollection<in T>> Array<out T>.filterIndexedTo(destination: C, predicate: (index: Int, T) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexedTo\n */\npublic inline fun <C : MutableCollection<in Byte>> ByteArray.filterIndexedTo(destination: C, predicate: (index: Int, Byte) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexedTo\n */\npublic inline fun <C : MutableCollection<in Short>> ShortArray.filterIndexedTo(destination: C, predicate: (index: Int, Short) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexedTo\n */\npublic inline fun <C : MutableCollection<in Int>> IntArray.filterIndexedTo(destination: C, predicate: (index: Int, Int) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexedTo\n */\npublic inline fun <C : MutableCollection<in Long>> LongArray.filterIndexedTo(destination: C, predicate: (index: Int, Long) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexedTo\n */\npublic inline fun <C : MutableCollection<in Float>> FloatArray.filterIndexedTo(destination: C, predicate: (index: Int, Float) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexedTo\n */\npublic inline fun <C : MutableCollection<in Double>> DoubleArray.filterIndexedTo(destination: C, predicate: (index: Int, Double) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexedTo\n */\npublic inline fun <C : MutableCollection<in Boolean>> BooleanArray.filterIndexedTo(destination: C, predicate: (index: Int, Boolean) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexedTo\n */\npublic inline fun <C : MutableCollection<in Char>> CharArray.filterIndexedTo(destination: C, predicate: (index: Int, Char) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Returns a list containing all elements that are instances of specified type parameter R.\n * \n * @sample samples.collections.Collections.Filtering.filterIsInstance\n */\npublic inline fun <reified R> Array<*>.filterIsInstance(): List<@kotlin.internal.NoInfer R> {\n    return filterIsInstanceTo(ArrayList<R>())\n}\n\n/**\n * Appends all elements that are instances of specified type parameter R to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterIsInstanceTo\n */\npublic inline fun <reified R, C : MutableCollection<in R>> Array<*>.filterIsInstanceTo(destination: C): C {\n    for (element in this) if (element is R) destination.add(element)\n    return destination\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun <T> Array<out T>.filterNot(predicate: (T) -> Boolean): List<T> {\n    return filterNotTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun ByteArray.filterNot(predicate: (Byte) -> Boolean): List<Byte> {\n    return filterNotTo(ArrayList<Byte>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun ShortArray.filterNot(predicate: (Short) -> Boolean): List<Short> {\n    return filterNotTo(ArrayList<Short>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun IntArray.filterNot(predicate: (Int) -> Boolean): List<Int> {\n    return filterNotTo(ArrayList<Int>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun LongArray.filterNot(predicate: (Long) -> Boolean): List<Long> {\n    return filterNotTo(ArrayList<Long>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun FloatArray.filterNot(predicate: (Float) -> Boolean): List<Float> {\n    return filterNotTo(ArrayList<Float>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun DoubleArray.filterNot(predicate: (Double) -> Boolean): List<Double> {\n    return filterNotTo(ArrayList<Double>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun BooleanArray.filterNot(predicate: (Boolean) -> Boolean): List<Boolean> {\n    return filterNotTo(ArrayList<Boolean>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun CharArray.filterNot(predicate: (Char) -> Boolean): List<Char> {\n    return filterNotTo(ArrayList<Char>(), predicate)\n}\n\n/**\n * Returns a list containing all elements that are not `null`.\n * \n * @sample samples.collections.Collections.Filtering.filterNotNull\n */\npublic fun <T : Any> Array<out T?>.filterNotNull(): List<T> {\n    return filterNotNullTo(ArrayList<T>())\n}\n\n/**\n * Appends all elements that are not `null` to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterNotNullTo\n */\npublic fun <C : MutableCollection<in T>, T : Any> Array<out T?>.filterNotNullTo(destination: C): C {\n    for (element in this) if (element != null) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <T, C : MutableCollection<in T>> Array<out T>.filterNotTo(destination: C, predicate: (T) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <C : MutableCollection<in Byte>> ByteArray.filterNotTo(destination: C, predicate: (Byte) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <C : MutableCollection<in Short>> ShortArray.filterNotTo(destination: C, predicate: (Short) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <C : MutableCollection<in Int>> IntArray.filterNotTo(destination: C, predicate: (Int) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <C : MutableCollection<in Long>> LongArray.filterNotTo(destination: C, predicate: (Long) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <C : MutableCollection<in Float>> FloatArray.filterNotTo(destination: C, predicate: (Float) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <C : MutableCollection<in Double>> DoubleArray.filterNotTo(destination: C, predicate: (Double) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <C : MutableCollection<in Boolean>> BooleanArray.filterNotTo(destination: C, predicate: (Boolean) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <C : MutableCollection<in Char>> CharArray.filterNotTo(destination: C, predicate: (Char) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <T, C : MutableCollection<in T>> Array<out T>.filterTo(destination: C, predicate: (T) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <C : MutableCollection<in Byte>> ByteArray.filterTo(destination: C, predicate: (Byte) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <C : MutableCollection<in Short>> ShortArray.filterTo(destination: C, predicate: (Short) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <C : MutableCollection<in Int>> IntArray.filterTo(destination: C, predicate: (Int) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <C : MutableCollection<in Long>> LongArray.filterTo(destination: C, predicate: (Long) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <C : MutableCollection<in Float>> FloatArray.filterTo(destination: C, predicate: (Float) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <C : MutableCollection<in Double>> DoubleArray.filterTo(destination: C, predicate: (Double) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <C : MutableCollection<in Boolean>> BooleanArray.filterTo(destination: C, predicate: (Boolean) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <C : MutableCollection<in Char>> CharArray.filterTo(destination: C, predicate: (Char) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun <T> Array<out T>.slice(indices: IntRange): List<T> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun ByteArray.slice(indices: IntRange): List<Byte> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun ShortArray.slice(indices: IntRange): List<Short> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun IntArray.slice(indices: IntRange): List<Int> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun LongArray.slice(indices: IntRange): List<Long> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun FloatArray.slice(indices: IntRange): List<Float> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun DoubleArray.slice(indices: IntRange): List<Double> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun BooleanArray.slice(indices: IntRange): List<Boolean> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun CharArray.slice(indices: IntRange): List<Char> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun <T> Array<out T>.slice(indices: Iterable<Int>): List<T> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<T>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun ByteArray.slice(indices: Iterable<Int>): List<Byte> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Byte>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun ShortArray.slice(indices: Iterable<Int>): List<Short> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Short>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun IntArray.slice(indices: Iterable<Int>): List<Int> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Int>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun LongArray.slice(indices: Iterable<Int>): List<Long> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Long>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun FloatArray.slice(indices: Iterable<Int>): List<Float> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Float>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun DoubleArray.slice(indices: Iterable<Int>): List<Double> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Double>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun BooleanArray.slice(indices: Iterable<Int>): List<Boolean> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Boolean>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun CharArray.slice(indices: Iterable<Int>): List<Char> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Char>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun <T> Array<T>.sliceArray(indices: Collection<Int>): Array<T> {\n    val result = arrayOfNulls(this, indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun ByteArray.sliceArray(indices: Collection<Int>): ByteArray {\n    val result = ByteArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun ShortArray.sliceArray(indices: Collection<Int>): ShortArray {\n    val result = ShortArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun IntArray.sliceArray(indices: Collection<Int>): IntArray {\n    val result = IntArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun LongArray.sliceArray(indices: Collection<Int>): LongArray {\n    val result = LongArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun FloatArray.sliceArray(indices: Collection<Int>): FloatArray {\n    val result = FloatArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun DoubleArray.sliceArray(indices: Collection<Int>): DoubleArray {\n    val result = DoubleArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun BooleanArray.sliceArray(indices: Collection<Int>): BooleanArray {\n    val result = BooleanArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun CharArray.sliceArray(indices: Collection<Int>): CharArray {\n    val result = CharArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun <T> Array<T>.sliceArray(indices: IntRange): Array<T> {\n    if (indices.isEmpty()) return copyOfRange(0, 0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun ByteArray.sliceArray(indices: IntRange): ByteArray {\n    if (indices.isEmpty()) return ByteArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun ShortArray.sliceArray(indices: IntRange): ShortArray {\n    if (indices.isEmpty()) return ShortArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun IntArray.sliceArray(indices: IntRange): IntArray {\n    if (indices.isEmpty()) return IntArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun LongArray.sliceArray(indices: IntRange): LongArray {\n    if (indices.isEmpty()) return LongArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun FloatArray.sliceArray(indices: IntRange): FloatArray {\n    if (indices.isEmpty()) return FloatArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun DoubleArray.sliceArray(indices: IntRange): DoubleArray {\n    if (indices.isEmpty()) return DoubleArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun BooleanArray.sliceArray(indices: IntRange): BooleanArray {\n    if (indices.isEmpty()) return BooleanArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun CharArray.sliceArray(indices: IntRange): CharArray {\n    if (indices.isEmpty()) return CharArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun <T> Array<out T>.take(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<T>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun ByteArray.take(n: Int): List<Byte> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Byte>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun ShortArray.take(n: Int): List<Short> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Short>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun IntArray.take(n: Int): List<Int> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Int>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun LongArray.take(n: Int): List<Long> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Long>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun FloatArray.take(n: Int): List<Float> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Float>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun DoubleArray.take(n: Int): List<Double> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Double>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun BooleanArray.take(n: Int): List<Boolean> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Boolean>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun CharArray.take(n: Int): List<Char> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Char>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun <T> Array<out T>.takeLast(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<T>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun ByteArray.takeLast(n: Int): List<Byte> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Byte>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun ShortArray.takeLast(n: Int): List<Short> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Short>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun IntArray.takeLast(n: Int): List<Int> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Int>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun LongArray.takeLast(n: Int): List<Long> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Long>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun FloatArray.takeLast(n: Int): List<Float> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Float>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun DoubleArray.takeLast(n: Int): List<Double> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Double>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun BooleanArray.takeLast(n: Int): List<Boolean> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Boolean>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun CharArray.takeLast(n: Int): List<Char> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Char>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun <T> Array<out T>.takeLastWhile(predicate: (T) -> Boolean): List<T> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun ByteArray.takeLastWhile(predicate: (Byte) -> Boolean): List<Byte> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun ShortArray.takeLastWhile(predicate: (Short) -> Boolean): List<Short> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun IntArray.takeLastWhile(predicate: (Int) -> Boolean): List<Int> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun LongArray.takeLastWhile(predicate: (Long) -> Boolean): List<Long> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun FloatArray.takeLastWhile(predicate: (Float) -> Boolean): List<Float> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun DoubleArray.takeLastWhile(predicate: (Double) -> Boolean): List<Double> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun BooleanArray.takeLastWhile(predicate: (Boolean) -> Boolean): List<Boolean> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun CharArray.takeLastWhile(predicate: (Char) -> Boolean): List<Char> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun <T> Array<out T>.takeWhile(predicate: (T) -> Boolean): List<T> {\n    val list = ArrayList<T>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun ByteArray.takeWhile(predicate: (Byte) -> Boolean): List<Byte> {\n    val list = ArrayList<Byte>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun ShortArray.takeWhile(predicate: (Short) -> Boolean): List<Short> {\n    val list = ArrayList<Short>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun IntArray.takeWhile(predicate: (Int) -> Boolean): List<Int> {\n    val list = ArrayList<Int>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun LongArray.takeWhile(predicate: (Long) -> Boolean): List<Long> {\n    val list = ArrayList<Long>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun FloatArray.takeWhile(predicate: (Float) -> Boolean): List<Float> {\n    val list = ArrayList<Float>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun DoubleArray.takeWhile(predicate: (Double) -> Boolean): List<Double> {\n    val list = ArrayList<Double>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun BooleanArray.takeWhile(predicate: (Boolean) -> Boolean): List<Boolean> {\n    val list = ArrayList<Boolean>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun CharArray.takeWhile(predicate: (Char) -> Boolean): List<Char> {\n    val list = ArrayList<Char>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun <T> Array<T>.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun ByteArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun ShortArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun IntArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun LongArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun FloatArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun DoubleArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun BooleanArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun CharArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements of the array in the specified range in-place.\n * \n * @param fromIndex the start of the range (inclusive) to reverse.\n * @param toIndex the end of the range (exclusive) to reverse.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\npublic fun <T> Array<T>.reverse(fromIndex: Int, toIndex: Int): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    val midPoint = (fromIndex + toIndex) / 2\n    if (fromIndex == midPoint) return\n    var reverseIndex = toIndex - 1\n    for (index in fromIndex until midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements of the array in the specified range in-place.\n * \n * @param fromIndex the start of the range (inclusive) to reverse.\n * @param toIndex the end of the range (exclusive) to reverse.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\npublic fun ByteArray.reverse(fromIndex: Int, toIndex: Int): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    val midPoint = (fromIndex + toIndex) / 2\n    if (fromIndex == midPoint) return\n    var reverseIndex = toIndex - 1\n    for (index in fromIndex until midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements of the array in the specified range in-place.\n * \n * @param fromIndex the start of the range (inclusive) to reverse.\n * @param toIndex the end of the range (exclusive) to reverse.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\npublic fun ShortArray.reverse(fromIndex: Int, toIndex: Int): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    val midPoint = (fromIndex + toIndex) / 2\n    if (fromIndex == midPoint) return\n    var reverseIndex = toIndex - 1\n    for (index in fromIndex until midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements of the array in the specified range in-place.\n * \n * @param fromIndex the start of the range (inclusive) to reverse.\n * @param toIndex the end of the range (exclusive) to reverse.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\npublic fun IntArray.reverse(fromIndex: Int, toIndex: Int): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    val midPoint = (fromIndex + toIndex) / 2\n    if (fromIndex == midPoint) return\n    var reverseIndex = toIndex - 1\n    for (index in fromIndex until midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements of the array in the specified range in-place.\n * \n * @param fromIndex the start of the range (inclusive) to reverse.\n * @param toIndex the end of the range (exclusive) to reverse.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\npublic fun LongArray.reverse(fromIndex: Int, toIndex: Int): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    val midPoint = (fromIndex + toIndex) / 2\n    if (fromIndex == midPoint) return\n    var reverseIndex = toIndex - 1\n    for (index in fromIndex until midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements of the array in the specified range in-place.\n * \n * @param fromIndex the start of the range (inclusive) to reverse.\n * @param toIndex the end of the range (exclusive) to reverse.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\npublic fun FloatArray.reverse(fromIndex: Int, toIndex: Int): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    val midPoint = (fromIndex + toIndex) / 2\n    if (fromIndex == midPoint) return\n    var reverseIndex = toIndex - 1\n    for (index in fromIndex until midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements of the array in the specified range in-place.\n * \n * @param fromIndex the start of the range (inclusive) to reverse.\n * @param toIndex the end of the range (exclusive) to reverse.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\npublic fun DoubleArray.reverse(fromIndex: Int, toIndex: Int): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    val midPoint = (fromIndex + toIndex) / 2\n    if (fromIndex == midPoint) return\n    var reverseIndex = toIndex - 1\n    for (index in fromIndex until midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements of the array in the specified range in-place.\n * \n * @param fromIndex the start of the range (inclusive) to reverse.\n * @param toIndex the end of the range (exclusive) to reverse.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\npublic fun BooleanArray.reverse(fromIndex: Int, toIndex: Int): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    val midPoint = (fromIndex + toIndex) / 2\n    if (fromIndex == midPoint) return\n    var reverseIndex = toIndex - 1\n    for (index in fromIndex until midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements of the array in the specified range in-place.\n * \n * @param fromIndex the start of the range (inclusive) to reverse.\n * @param toIndex the end of the range (exclusive) to reverse.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\npublic fun CharArray.reverse(fromIndex: Int, toIndex: Int): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    val midPoint = (fromIndex + toIndex) / 2\n    if (fromIndex == midPoint) return\n    var reverseIndex = toIndex - 1\n    for (index in fromIndex until midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun <T> Array<out T>.reversed(): List<T> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun ByteArray.reversed(): List<Byte> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun ShortArray.reversed(): List<Short> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun IntArray.reversed(): List<Int> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun LongArray.reversed(): List<Long> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun FloatArray.reversed(): List<Float> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun DoubleArray.reversed(): List<Double> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun BooleanArray.reversed(): List<Boolean> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun CharArray.reversed(): List<Char> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun <T> Array<T>.reversedArray(): Array<T> {\n    if (isEmpty()) return this\n    val result = arrayOfNulls(this, size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun ByteArray.reversedArray(): ByteArray {\n    if (isEmpty()) return this\n    val result = ByteArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun ShortArray.reversedArray(): ShortArray {\n    if (isEmpty()) return this\n    val result = ShortArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun IntArray.reversedArray(): IntArray {\n    if (isEmpty()) return this\n    val result = IntArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun LongArray.reversedArray(): LongArray {\n    if (isEmpty()) return this\n    val result = LongArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun FloatArray.reversedArray(): FloatArray {\n    if (isEmpty()) return this\n    val result = FloatArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun DoubleArray.reversedArray(): DoubleArray {\n    if (isEmpty()) return this\n    val result = DoubleArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun BooleanArray.reversedArray(): BooleanArray {\n    if (isEmpty()) return this\n    val result = BooleanArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun CharArray.reversedArray(): CharArray {\n    if (isEmpty()) return this\n    val result = CharArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Randomly shuffles elements in this array in-place.\n */\n@SinceKotlin(\"1.4\")\npublic fun <T> Array<T>.shuffle(): Unit {\n    shuffle(Random)\n}\n\n/**\n * Randomly shuffles elements in this array in-place.\n */\n@SinceKotlin(\"1.4\")\npublic fun ByteArray.shuffle(): Unit {\n    shuffle(Random)\n}\n\n/**\n * Randomly shuffles elements in this array in-place.\n */\n@SinceKotlin(\"1.4\")\npublic fun ShortArray.shuffle(): Unit {\n    shuffle(Random)\n}\n\n/**\n * Randomly shuffles elements in this array in-place.\n */\n@SinceKotlin(\"1.4\")\npublic fun IntArray.shuffle(): Unit {\n    shuffle(Random)\n}\n\n/**\n * Randomly shuffles elements in this array in-place.\n */\n@SinceKotlin(\"1.4\")\npublic fun LongArray.shuffle(): Unit {\n    shuffle(Random)\n}\n\n/**\n * Randomly shuffles elements in this array in-place.\n */\n@SinceKotlin(\"1.4\")\npublic fun FloatArray.shuffle(): Unit {\n    shuffle(Random)\n}\n\n/**\n * Randomly shuffles elements in this array in-place.\n */\n@SinceKotlin(\"1.4\")\npublic fun DoubleArray.shuffle(): Unit {\n    shuffle(Random)\n}\n\n/**\n * Randomly shuffles elements in this array in-place.\n */\n@SinceKotlin(\"1.4\")\npublic fun BooleanArray.shuffle(): Unit {\n    shuffle(Random)\n}\n\n/**\n * Randomly shuffles elements in this array in-place.\n */\n@SinceKotlin(\"1.4\")\npublic fun CharArray.shuffle(): Unit {\n    shuffle(Random)\n}\n\n/**\n * Randomly shuffles elements in this array in-place using the specified [random] instance as the source of randomness.\n * \n * See: https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#The_modern_algorithm\n */\n@SinceKotlin(\"1.4\")\npublic fun <T> Array<T>.shuffle(random: Random): Unit {\n    for (i in lastIndex downTo 1) {\n        val j = random.nextInt(i + 1)\n        val copy = this[i]\n        this[i] = this[j]\n        this[j] = copy\n    }\n}\n\n/**\n * Randomly shuffles elements in this array in-place using the specified [random] instance as the source of randomness.\n * \n * See: https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#The_modern_algorithm\n */\n@SinceKotlin(\"1.4\")\npublic fun ByteArray.shuffle(random: Random): Unit {\n    for (i in lastIndex downTo 1) {\n        val j = random.nextInt(i + 1)\n        val copy = this[i]\n        this[i] = this[j]\n        this[j] = copy\n    }\n}\n\n/**\n * Randomly shuffles elements in this array in-place using the specified [random] instance as the source of randomness.\n * \n * See: https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#The_modern_algorithm\n */\n@SinceKotlin(\"1.4\")\npublic fun ShortArray.shuffle(random: Random): Unit {\n    for (i in lastIndex downTo 1) {\n        val j = random.nextInt(i + 1)\n        val copy = this[i]\n        this[i] = this[j]\n        this[j] = copy\n    }\n}\n\n/**\n * Randomly shuffles elements in this array in-place using the specified [random] instance as the source of randomness.\n * \n * See: https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#The_modern_algorithm\n */\n@SinceKotlin(\"1.4\")\npublic fun IntArray.shuffle(random: Random): Unit {\n    for (i in lastIndex downTo 1) {\n        val j = random.nextInt(i + 1)\n        val copy = this[i]\n        this[i] = this[j]\n        this[j] = copy\n    }\n}\n\n/**\n * Randomly shuffles elements in this array in-place using the specified [random] instance as the source of randomness.\n * \n * See: https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#The_modern_algorithm\n */\n@SinceKotlin(\"1.4\")\npublic fun LongArray.shuffle(random: Random): Unit {\n    for (i in lastIndex downTo 1) {\n        val j = random.nextInt(i + 1)\n        val copy = this[i]\n        this[i] = this[j]\n        this[j] = copy\n    }\n}\n\n/**\n * Randomly shuffles elements in this array in-place using the specified [random] instance as the source of randomness.\n * \n * See: https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#The_modern_algorithm\n */\n@SinceKotlin(\"1.4\")\npublic fun FloatArray.shuffle(random: Random): Unit {\n    for (i in lastIndex downTo 1) {\n        val j = random.nextInt(i + 1)\n        val copy = this[i]\n        this[i] = this[j]\n        this[j] = copy\n    }\n}\n\n/**\n * Randomly shuffles elements in this array in-place using the specified [random] instance as the source of randomness.\n * \n * See: https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#The_modern_algorithm\n */\n@SinceKotlin(\"1.4\")\npublic fun DoubleArray.shuffle(random: Random): Unit {\n    for (i in lastIndex downTo 1) {\n        val j = random.nextInt(i + 1)\n        val copy = this[i]\n        this[i] = this[j]\n        this[j] = copy\n    }\n}\n\n/**\n * Randomly shuffles elements in this array in-place using the specified [random] instance as the source of randomness.\n * \n * See: https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#The_modern_algorithm\n */\n@SinceKotlin(\"1.4\")\npublic fun BooleanArray.shuffle(random: Random): Unit {\n    for (i in lastIndex downTo 1) {\n        val j = random.nextInt(i + 1)\n        val copy = this[i]\n        this[i] = this[j]\n        this[j] = copy\n    }\n}\n\n/**\n * Randomly shuffles elements in this array in-place using the specified [random] instance as the source of randomness.\n * \n * See: https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#The_modern_algorithm\n */\n@SinceKotlin(\"1.4\")\npublic fun CharArray.shuffle(random: Random): Unit {\n    for (i in lastIndex downTo 1) {\n        val j = random.nextInt(i + 1)\n        val copy = this[i]\n        this[i] = this[j]\n        this[j] = copy\n    }\n}\n\n/**\n * Sorts elements in the array in-place according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> Array<out T>.sortBy(crossinline selector: (T) -> R?): Unit {\n    if (size > 1) sortWith(compareBy(selector))\n}\n\n/**\n * Sorts elements in the array in-place descending according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> Array<out T>.sortByDescending(crossinline selector: (T) -> R?): Unit {\n    if (size > 1) sortWith(compareByDescending(selector))\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Array<out T>.sortDescending(): Unit {\n    sortWith(reverseOrder())\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun ByteArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun ShortArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun IntArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun LongArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun FloatArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun DoubleArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun CharArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Array<out T>.sorted(): List<T> {\n    return sortedArray().asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun ByteArray.sorted(): List<Byte> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun ShortArray.sorted(): List<Short> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun IntArray.sorted(): List<Int> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun LongArray.sorted(): List<Long> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun FloatArray.sorted(): List<Float> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun DoubleArray.sorted(): List<Double> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun CharArray.sorted(): List<Char> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Array<T>.sortedArray(): Array<T> {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun ByteArray.sortedArray(): ByteArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun ShortArray.sortedArray(): ShortArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun IntArray.sortedArray(): IntArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun LongArray.sortedArray(): LongArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun FloatArray.sortedArray(): FloatArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun DoubleArray.sortedArray(): DoubleArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun CharArray.sortedArray(): CharArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Array<T>.sortedArrayDescending(): Array<T> {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortWith(reverseOrder()) }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun ByteArray.sortedArrayDescending(): ByteArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun ShortArray.sortedArrayDescending(): ShortArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun IntArray.sortedArrayDescending(): IntArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun LongArray.sortedArrayDescending(): LongArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun FloatArray.sortedArrayDescending(): FloatArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun DoubleArray.sortedArrayDescending(): DoubleArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun CharArray.sortedArrayDescending(): CharArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according the specified [comparator].\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T> Array<out T>.sortedArrayWith(comparator: Comparator<in T>): Array<out T> {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortWith(comparator) }\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n * \n * @sample samples.collections.Collections.Sorting.sortedBy\n */\npublic inline fun <T, R : Comparable<R>> Array<out T>.sortedBy(crossinline selector: (T) -> R?): List<T> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n * \n * @sample samples.collections.Collections.Sorting.sortedBy\n */\npublic inline fun <R : Comparable<R>> ByteArray.sortedBy(crossinline selector: (Byte) -> R?): List<Byte> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n * \n * @sample samples.collections.Collections.Sorting.sortedBy\n */\npublic inline fun <R : Comparable<R>> ShortArray.sortedBy(crossinline selector: (Short) -> R?): List<Short> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n * \n * @sample samples.collections.Collections.Sorting.sortedBy\n */\npublic inline fun <R : Comparable<R>> IntArray.sortedBy(crossinline selector: (Int) -> R?): List<Int> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n * \n * @sample samples.collections.Collections.Sorting.sortedBy\n */\npublic inline fun <R : Comparable<R>> LongArray.sortedBy(crossinline selector: (Long) -> R?): List<Long> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n * \n * @sample samples.collections.Collections.Sorting.sortedBy\n */\npublic inline fun <R : Comparable<R>> FloatArray.sortedBy(crossinline selector: (Float) -> R?): List<Float> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n * \n * @sample samples.collections.Collections.Sorting.sortedBy\n */\npublic inline fun <R : Comparable<R>> DoubleArray.sortedBy(crossinline selector: (Double) -> R?): List<Double> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n * \n * @sample samples.collections.Collections.Sorting.sortedBy\n */\npublic inline fun <R : Comparable<R>> BooleanArray.sortedBy(crossinline selector: (Boolean) -> R?): List<Boolean> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n * \n * @sample samples.collections.Collections.Sorting.sortedBy\n */\npublic inline fun <R : Comparable<R>> CharArray.sortedBy(crossinline selector: (Char) -> R?): List<Char> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> Array<out T>.sortedByDescending(crossinline selector: (T) -> R?): List<T> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> ByteArray.sortedByDescending(crossinline selector: (Byte) -> R?): List<Byte> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> ShortArray.sortedByDescending(crossinline selector: (Short) -> R?): List<Short> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> IntArray.sortedByDescending(crossinline selector: (Int) -> R?): List<Int> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> LongArray.sortedByDescending(crossinline selector: (Long) -> R?): List<Long> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> FloatArray.sortedByDescending(crossinline selector: (Float) -> R?): List<Float> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> DoubleArray.sortedByDescending(crossinline selector: (Double) -> R?): List<Double> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> BooleanArray.sortedByDescending(crossinline selector: (Boolean) -> R?): List<Boolean> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> CharArray.sortedByDescending(crossinline selector: (Char) -> R?): List<Char> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Array<out T>.sortedDescending(): List<T> {\n    return sortedWith(reverseOrder())\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun ByteArray.sortedDescending(): List<Byte> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun ShortArray.sortedDescending(): List<Short> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun IntArray.sortedDescending(): List<Int> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun LongArray.sortedDescending(): List<Long> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun FloatArray.sortedDescending(): List<Float> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun DoubleArray.sortedDescending(): List<Double> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun CharArray.sortedDescending(): List<Char> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T> Array<out T>.sortedWith(comparator: Comparator<in T>): List<T> {\n    return sortedArrayWith(comparator).asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun ByteArray.sortedWith(comparator: Comparator<in Byte>): List<Byte> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun ShortArray.sortedWith(comparator: Comparator<in Short>): List<Short> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun IntArray.sortedWith(comparator: Comparator<in Int>): List<Int> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun LongArray.sortedWith(comparator: Comparator<in Long>): List<Long> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun FloatArray.sortedWith(comparator: Comparator<in Float>): List<Float> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun DoubleArray.sortedWith(comparator: Comparator<in Double>): List<Double> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun BooleanArray.sortedWith(comparator: Comparator<in Boolean>): List<Boolean> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun CharArray.sortedWith(comparator: Comparator<in Char>): List<Char> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun <T> Array<out T>.asList(): List<T>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun ByteArray.asList(): List<Byte>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun ShortArray.asList(): List<Short>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun IntArray.asList(): List<Int>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun LongArray.asList(): List<Long>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun FloatArray.asList(): List<Float>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun DoubleArray.asList(): List<Double>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun BooleanArray.asList(): List<Boolean>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun CharArray.asList(): List<Char>\n\n/**\n * Returns `true` if the two specified arrays are *deeply* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * If two corresponding elements are nested arrays, they are also compared deeply.\n * If any of arrays contains itself on any nesting level the behavior is undefined.\n * \n * The elements of other types are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.LowPriorityInOverloadResolution\npublic expect infix fun <T> Array<out T>.contentDeepEquals(other: Array<out T>): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *deeply* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The specified arrays are also considered deeply equal if both are `null`.\n * \n * If two corresponding elements are nested arrays, they are also compared deeply.\n * If any of arrays contains itself on any nesting level the behavior is undefined.\n * \n * The elements of other types are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\npublic expect infix fun <T> Array<out T>?.contentDeepEquals(other: Array<out T>?): Boolean\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n * Nested arrays are treated as lists too.\n * \n * If any of arrays contains itself on any nesting level the behavior is undefined.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.LowPriorityInOverloadResolution\npublic expect fun <T> Array<out T>.contentDeepHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n * Nested arrays are treated as lists too.\n * \n * If any of arrays contains itself on any nesting level the behavior is undefined.\n */\n@SinceKotlin(\"1.4\")\npublic expect fun <T> Array<out T>?.contentDeepHashCode(): Int\n\n/**\n * Returns a string representation of the contents of this array as if it is a [List].\n * Nested arrays are treated as lists too.\n * \n * If any of arrays contains itself on any nesting level that reference\n * is rendered as `\"[...]\"` to prevent recursion.\n * \n * @sample samples.collections.Arrays.ContentOperations.contentDeepToString\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.LowPriorityInOverloadResolution\npublic expect fun <T> Array<out T>.contentDeepToString(): String\n\n/**\n * Returns a string representation of the contents of this array as if it is a [List].\n * Nested arrays are treated as lists too.\n * \n * If any of arrays contains itself on any nesting level that reference\n * is rendered as `\"[...]\"` to prevent recursion.\n * \n * @sample samples.collections.Arrays.ContentOperations.contentDeepToString\n */\n@SinceKotlin(\"1.4\")\npublic expect fun <T> Array<out T>?.contentDeepToString(): String\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect infix fun <T> Array<out T>.contentEquals(other: Array<out T>): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect infix fun ByteArray.contentEquals(other: ByteArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect infix fun ShortArray.contentEquals(other: ShortArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect infix fun IntArray.contentEquals(other: IntArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect infix fun LongArray.contentEquals(other: LongArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect infix fun FloatArray.contentEquals(other: FloatArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect infix fun DoubleArray.contentEquals(other: DoubleArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect infix fun BooleanArray.contentEquals(other: BooleanArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect infix fun CharArray.contentEquals(other: CharArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\npublic expect infix fun <T> Array<out T>?.contentEquals(other: Array<out T>?): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\npublic expect infix fun ByteArray?.contentEquals(other: ByteArray?): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\npublic expect infix fun ShortArray?.contentEquals(other: ShortArray?): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\npublic expect infix fun IntArray?.contentEquals(other: IntArray?): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\npublic expect infix fun LongArray?.contentEquals(other: LongArray?): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\npublic expect infix fun FloatArray?.contentEquals(other: FloatArray?): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\npublic expect infix fun DoubleArray?.contentEquals(other: DoubleArray?): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\npublic expect infix fun BooleanArray?.contentEquals(other: BooleanArray?): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\npublic expect infix fun CharArray?.contentEquals(other: CharArray?): Boolean\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect fun <T> Array<out T>.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect fun ByteArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect fun ShortArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect fun IntArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect fun LongArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect fun FloatArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect fun DoubleArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect fun BooleanArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect fun CharArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.4\")\npublic expect fun <T> Array<out T>?.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.4\")\npublic expect fun ByteArray?.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.4\")\npublic expect fun ShortArray?.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.4\")\npublic expect fun IntArray?.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.4\")\npublic expect fun LongArray?.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.4\")\npublic expect fun FloatArray?.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.4\")\npublic expect fun DoubleArray?.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.4\")\npublic expect fun BooleanArray?.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.4\")\npublic expect fun CharArray?.contentHashCode(): Int\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect fun <T> Array<out T>.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect fun ByteArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect fun ShortArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect fun IntArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect fun LongArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect fun FloatArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect fun DoubleArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect fun BooleanArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect fun CharArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.4\")\npublic expect fun <T> Array<out T>?.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.4\")\npublic expect fun ByteArray?.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.4\")\npublic expect fun ShortArray?.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.4\")\npublic expect fun IntArray?.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.4\")\npublic expect fun LongArray?.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.4\")\npublic expect fun FloatArray?.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.4\")\npublic expect fun DoubleArray?.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.4\")\npublic expect fun BooleanArray?.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.4\")\npublic expect fun CharArray?.contentToString(): String\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun <T> Array<out T>.copyInto(destination: Array<T>, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): Array<T>\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun ByteArray.copyInto(destination: ByteArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): ByteArray\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun ShortArray.copyInto(destination: ShortArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): ShortArray\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun IntArray.copyInto(destination: IntArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): IntArray\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun LongArray.copyInto(destination: LongArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): LongArray\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun FloatArray.copyInto(destination: FloatArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): FloatArray\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun DoubleArray.copyInto(destination: DoubleArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): DoubleArray\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun BooleanArray.copyInto(destination: BooleanArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): BooleanArray\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun CharArray.copyInto(destination: CharArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): CharArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\n@Suppress(\"NO_ACTUAL_FOR_EXPECT\")\npublic expect fun <T> Array<T>.copyOf(): Array<T>\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun ByteArray.copyOf(): ByteArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun ShortArray.copyOf(): ShortArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun IntArray.copyOf(): IntArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun LongArray.copyOf(): LongArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun FloatArray.copyOf(): FloatArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun DoubleArray.copyOf(): DoubleArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun BooleanArray.copyOf(): BooleanArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun CharArray.copyOf(): CharArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun ByteArray.copyOf(newSize: Int): ByteArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun ShortArray.copyOf(newSize: Int): ShortArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun IntArray.copyOf(newSize: Int): IntArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun LongArray.copyOf(newSize: Int): LongArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun FloatArray.copyOf(newSize: Int): FloatArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun DoubleArray.copyOf(newSize: Int): DoubleArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with `false` values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with `false` values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun BooleanArray.copyOf(newSize: Int): BooleanArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with null char (`\\u0000`) values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with null char (`\\u0000`) values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun CharArray.copyOf(newSize: Int): CharArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with `null` values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with `null` values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizingCopyOf\n */\n@Suppress(\"NO_ACTUAL_FOR_EXPECT\")\npublic expect fun <T> Array<T>.copyOf(newSize: Int): Array<T?>\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive) to copy.\n * @param toIndex the end of the range (exclusive) to copy.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@Suppress(\"NO_ACTUAL_FOR_EXPECT\")\npublic expect fun <T> Array<T>.copyOfRange(fromIndex: Int, toIndex: Int): Array<T>\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive) to copy.\n * @param toIndex the end of the range (exclusive) to copy.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\npublic expect fun ByteArray.copyOfRange(fromIndex: Int, toIndex: Int): ByteArray\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive) to copy.\n * @param toIndex the end of the range (exclusive) to copy.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\npublic expect fun ShortArray.copyOfRange(fromIndex: Int, toIndex: Int): ShortArray\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive) to copy.\n * @param toIndex the end of the range (exclusive) to copy.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\npublic expect fun IntArray.copyOfRange(fromIndex: Int, toIndex: Int): IntArray\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive) to copy.\n * @param toIndex the end of the range (exclusive) to copy.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\npublic expect fun LongArray.copyOfRange(fromIndex: Int, toIndex: Int): LongArray\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive) to copy.\n * @param toIndex the end of the range (exclusive) to copy.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\npublic expect fun FloatArray.copyOfRange(fromIndex: Int, toIndex: Int): FloatArray\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive) to copy.\n * @param toIndex the end of the range (exclusive) to copy.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\npublic expect fun DoubleArray.copyOfRange(fromIndex: Int, toIndex: Int): DoubleArray\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive) to copy.\n * @param toIndex the end of the range (exclusive) to copy.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\npublic expect fun BooleanArray.copyOfRange(fromIndex: Int, toIndex: Int): BooleanArray\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive) to copy.\n * @param toIndex the end of the range (exclusive) to copy.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\npublic expect fun CharArray.copyOfRange(fromIndex: Int, toIndex: Int): CharArray\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive) to fill, 0 by default.\n * @param toIndex the end of the range (exclusive) to fill, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\npublic expect fun <T> Array<T>.fill(element: T, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive) to fill, 0 by default.\n * @param toIndex the end of the range (exclusive) to fill, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\npublic expect fun ByteArray.fill(element: Byte, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive) to fill, 0 by default.\n * @param toIndex the end of the range (exclusive) to fill, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\npublic expect fun ShortArray.fill(element: Short, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive) to fill, 0 by default.\n * @param toIndex the end of the range (exclusive) to fill, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\npublic expect fun IntArray.fill(element: Int, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive) to fill, 0 by default.\n * @param toIndex the end of the range (exclusive) to fill, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\npublic expect fun LongArray.fill(element: Long, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive) to fill, 0 by default.\n * @param toIndex the end of the range (exclusive) to fill, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\npublic expect fun FloatArray.fill(element: Float, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive) to fill, 0 by default.\n * @param toIndex the end of the range (exclusive) to fill, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\npublic expect fun DoubleArray.fill(element: Double, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive) to fill, 0 by default.\n * @param toIndex the end of the range (exclusive) to fill, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\npublic expect fun BooleanArray.fill(element: Boolean, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive) to fill, 0 by default.\n * @param toIndex the end of the range (exclusive) to fill, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\npublic expect fun CharArray.fill(element: Char, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val <T> Array<out T>.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val ByteArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val ShortArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val IntArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val LongArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val FloatArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val DoubleArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val BooleanArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val CharArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns the last valid index for the array.\n */\npublic val <T> Array<out T>.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val ByteArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val ShortArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val IntArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val LongArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val FloatArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val DoubleArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val BooleanArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val CharArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NO_ACTUAL_FOR_EXPECT\")\npublic expect operator fun <T> Array<T>.plus(element: T): Array<T>\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun ByteArray.plus(element: Byte): ByteArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun ShortArray.plus(element: Short): ShortArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun IntArray.plus(element: Int): IntArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun LongArray.plus(element: Long): LongArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun FloatArray.plus(element: Float): FloatArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun DoubleArray.plus(element: Double): DoubleArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun BooleanArray.plus(element: Boolean): BooleanArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun CharArray.plus(element: Char): CharArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\n@Suppress(\"NO_ACTUAL_FOR_EXPECT\")\npublic expect operator fun <T> Array<T>.plus(elements: Collection<T>): Array<T>\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun ByteArray.plus(elements: Collection<Byte>): ByteArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun ShortArray.plus(elements: Collection<Short>): ShortArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun IntArray.plus(elements: Collection<Int>): IntArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun LongArray.plus(elements: Collection<Long>): LongArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun FloatArray.plus(elements: Collection<Float>): FloatArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun DoubleArray.plus(elements: Collection<Double>): DoubleArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun BooleanArray.plus(elements: Collection<Boolean>): BooleanArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun CharArray.plus(elements: Collection<Char>): CharArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NO_ACTUAL_FOR_EXPECT\")\npublic expect operator fun <T> Array<T>.plus(elements: Array<out T>): Array<T>\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun ByteArray.plus(elements: ByteArray): ByteArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun ShortArray.plus(elements: ShortArray): ShortArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun IntArray.plus(elements: IntArray): IntArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun LongArray.plus(elements: LongArray): LongArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun FloatArray.plus(elements: FloatArray): FloatArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun DoubleArray.plus(elements: DoubleArray): DoubleArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun BooleanArray.plus(elements: BooleanArray): BooleanArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun CharArray.plus(elements: CharArray): CharArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NO_ACTUAL_FOR_EXPECT\")\npublic expect fun <T> Array<T>.plusElement(element: T): Array<T>\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\npublic expect fun IntArray.sort(): Unit\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\npublic expect fun LongArray.sort(): Unit\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\npublic expect fun ByteArray.sort(): Unit\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\npublic expect fun ShortArray.sort(): Unit\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\npublic expect fun DoubleArray.sort(): Unit\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\npublic expect fun FloatArray.sort(): Unit\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\npublic expect fun CharArray.sort(): Unit\n\n/**\n * Sorts the array in-place according to the natural order of its elements.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n * \n * @sample samples.collections.Arrays.Sorting.sortArrayOfComparable\n */\npublic expect fun <T : Comparable<T>> Array<out T>.sort(): Unit\n\n/**\n * Sorts a range in the array in-place.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n * \n * @param fromIndex the start of the range (inclusive) to sort, 0 by default.\n * @param toIndex the end of the range (exclusive) to sort, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n * \n * @sample samples.collections.Arrays.Sorting.sortRangeOfArrayOfComparable\n */\n@SinceKotlin(\"1.4\")\npublic expect fun <T : Comparable<T>> Array<out T>.sort(fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Sorts a range in the array in-place.\n * \n * @param fromIndex the start of the range (inclusive) to sort, 0 by default.\n * @param toIndex the end of the range (exclusive) to sort, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n * \n * @sample samples.collections.Arrays.Sorting.sortRangeOfArray\n */\n@SinceKotlin(\"1.4\")\npublic expect fun ByteArray.sort(fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Sorts a range in the array in-place.\n * \n * @param fromIndex the start of the range (inclusive) to sort, 0 by default.\n * @param toIndex the end of the range (exclusive) to sort, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n * \n * @sample samples.collections.Arrays.Sorting.sortRangeOfArray\n */\n@SinceKotlin(\"1.4\")\npublic expect fun ShortArray.sort(fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Sorts a range in the array in-place.\n * \n * @param fromIndex the start of the range (inclusive) to sort, 0 by default.\n * @param toIndex the end of the range (exclusive) to sort, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n * \n * @sample samples.collections.Arrays.Sorting.sortRangeOfArray\n */\n@SinceKotlin(\"1.4\")\npublic expect fun IntArray.sort(fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Sorts a range in the array in-place.\n * \n * @param fromIndex the start of the range (inclusive) to sort, 0 by default.\n * @param toIndex the end of the range (exclusive) to sort, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n * \n * @sample samples.collections.Arrays.Sorting.sortRangeOfArray\n */\n@SinceKotlin(\"1.4\")\npublic expect fun LongArray.sort(fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Sorts a range in the array in-place.\n * \n * @param fromIndex the start of the range (inclusive) to sort, 0 by default.\n * @param toIndex the end of the range (exclusive) to sort, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n * \n * @sample samples.collections.Arrays.Sorting.sortRangeOfArray\n */\n@SinceKotlin(\"1.4\")\npublic expect fun FloatArray.sort(fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Sorts a range in the array in-place.\n * \n * @param fromIndex the start of the range (inclusive) to sort, 0 by default.\n * @param toIndex the end of the range (exclusive) to sort, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n * \n * @sample samples.collections.Arrays.Sorting.sortRangeOfArray\n */\n@SinceKotlin(\"1.4\")\npublic expect fun DoubleArray.sort(fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Sorts a range in the array in-place.\n * \n * @param fromIndex the start of the range (inclusive) to sort, 0 by default.\n * @param toIndex the end of the range (exclusive) to sort, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n * \n * @sample samples.collections.Arrays.Sorting.sortRangeOfArray\n */\n@SinceKotlin(\"1.4\")\npublic expect fun CharArray.sort(fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Sorts elements of the array in the specified range in-place.\n * The elements are sorted descending according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n * \n * @param fromIndex the start of the range (inclusive) to sort.\n * @param toIndex the end of the range (exclusive) to sort.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\npublic fun <T : Comparable<T>> Array<out T>.sortDescending(fromIndex: Int, toIndex: Int): Unit {\n    sortWith(reverseOrder(), fromIndex, toIndex)\n}\n\n/**\n * Sorts elements of the array in the specified range in-place.\n * The elements are sorted descending according to their natural sort order.\n * \n * @param fromIndex the start of the range (inclusive) to sort.\n * @param toIndex the end of the range (exclusive) to sort.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\npublic fun ByteArray.sortDescending(fromIndex: Int, toIndex: Int): Unit {\n    sort(fromIndex, toIndex)\n    reverse(fromIndex, toIndex)\n}\n\n/**\n * Sorts elements of the array in the specified range in-place.\n * The elements are sorted descending according to their natural sort order.\n * \n * @param fromIndex the start of the range (inclusive) to sort.\n * @param toIndex the end of the range (exclusive) to sort.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\npublic fun ShortArray.sortDescending(fromIndex: Int, toIndex: Int): Unit {\n    sort(fromIndex, toIndex)\n    reverse(fromIndex, toIndex)\n}\n\n/**\n * Sorts elements of the array in the specified range in-place.\n * The elements are sorted descending according to their natural sort order.\n * \n * @param fromIndex the start of the range (inclusive) to sort.\n * @param toIndex the end of the range (exclusive) to sort.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\npublic fun IntArray.sortDescending(fromIndex: Int, toIndex: Int): Unit {\n    sort(fromIndex, toIndex)\n    reverse(fromIndex, toIndex)\n}\n\n/**\n * Sorts elements of the array in the specified range in-place.\n * The elements are sorted descending according to their natural sort order.\n * \n * @param fromIndex the start of the range (inclusive) to sort.\n * @param toIndex the end of the range (exclusive) to sort.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\npublic fun LongArray.sortDescending(fromIndex: Int, toIndex: Int): Unit {\n    sort(fromIndex, toIndex)\n    reverse(fromIndex, toIndex)\n}\n\n/**\n * Sorts elements of the array in the specified range in-place.\n * The elements are sorted descending according to their natural sort order.\n * \n * @param fromIndex the start of the range (inclusive) to sort.\n * @param toIndex the end of the range (exclusive) to sort.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\npublic fun FloatArray.sortDescending(fromIndex: Int, toIndex: Int): Unit {\n    sort(fromIndex, toIndex)\n    reverse(fromIndex, toIndex)\n}\n\n/**\n * Sorts elements of the array in the specified range in-place.\n * The elements are sorted descending according to their natural sort order.\n * \n * @param fromIndex the start of the range (inclusive) to sort.\n * @param toIndex the end of the range (exclusive) to sort.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\npublic fun DoubleArray.sortDescending(fromIndex: Int, toIndex: Int): Unit {\n    sort(fromIndex, toIndex)\n    reverse(fromIndex, toIndex)\n}\n\n/**\n * Sorts elements of the array in the specified range in-place.\n * The elements are sorted descending according to their natural sort order.\n * \n * @param fromIndex the start of the range (inclusive) to sort.\n * @param toIndex the end of the range (exclusive) to sort.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\npublic fun CharArray.sortDescending(fromIndex: Int, toIndex: Int): Unit {\n    sort(fromIndex, toIndex)\n    reverse(fromIndex, toIndex)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparator].\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic expect fun <T> Array<out T>.sortWith(comparator: Comparator<in T>): Unit\n\n/**\n * Sorts a range in the array in-place with the given [comparator].\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n * \n * @param fromIndex the start of the range (inclusive) to sort, 0 by default.\n * @param toIndex the end of the range (exclusive) to sort, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\npublic expect fun <T> Array<out T>.sortWith(comparator: Comparator<in T>, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Returns an array of Boolean containing all of the elements of this generic array.\n */\npublic fun Array<out Boolean>.toBooleanArray(): BooleanArray {\n    return BooleanArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of Byte containing all of the elements of this generic array.\n */\npublic fun Array<out Byte>.toByteArray(): ByteArray {\n    return ByteArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of Char containing all of the elements of this generic array.\n */\npublic fun Array<out Char>.toCharArray(): CharArray {\n    return CharArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of Double containing all of the elements of this generic array.\n */\npublic fun Array<out Double>.toDoubleArray(): DoubleArray {\n    return DoubleArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of Float containing all of the elements of this generic array.\n */\npublic fun Array<out Float>.toFloatArray(): FloatArray {\n    return FloatArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of Int containing all of the elements of this generic array.\n */\npublic fun Array<out Int>.toIntArray(): IntArray {\n    return IntArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of Long containing all of the elements of this generic array.\n */\npublic fun Array<out Long>.toLongArray(): LongArray {\n    return LongArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of Short containing all of the elements of this generic array.\n */\npublic fun Array<out Short>.toShortArray(): ShortArray {\n    return ShortArray(size) { index -> this[index] }\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun ByteArray.toTypedArray(): Array<Byte>\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun ShortArray.toTypedArray(): Array<Short>\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun IntArray.toTypedArray(): Array<Int>\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun LongArray.toTypedArray(): Array<Long>\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun FloatArray.toTypedArray(): Array<Float>\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun DoubleArray.toTypedArray(): Array<Double>\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun BooleanArray.toTypedArray(): Array<Boolean>\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun CharArray.toTypedArray(): Array<Char>\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitives\n */\npublic inline fun <T, K, V> Array<out T>.associate(transform: (T) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitives\n */\npublic inline fun <K, V> ByteArray.associate(transform: (Byte) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitives\n */\npublic inline fun <K, V> ShortArray.associate(transform: (Short) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitives\n */\npublic inline fun <K, V> IntArray.associate(transform: (Int) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitives\n */\npublic inline fun <K, V> LongArray.associate(transform: (Long) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitives\n */\npublic inline fun <K, V> FloatArray.associate(transform: (Float) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitives\n */\npublic inline fun <K, V> DoubleArray.associate(transform: (Double) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitives\n */\npublic inline fun <K, V> BooleanArray.associate(transform: (Boolean) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitives\n */\npublic inline fun <K, V> CharArray.associate(transform: (Char) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesBy\n */\npublic inline fun <T, K> Array<out T>.associateBy(keySelector: (T) -> K): Map<K, T> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, T>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesBy\n */\npublic inline fun <K> ByteArray.associateBy(keySelector: (Byte) -> K): Map<K, Byte> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Byte>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesBy\n */\npublic inline fun <K> ShortArray.associateBy(keySelector: (Short) -> K): Map<K, Short> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Short>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesBy\n */\npublic inline fun <K> IntArray.associateBy(keySelector: (Int) -> K): Map<K, Int> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Int>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesBy\n */\npublic inline fun <K> LongArray.associateBy(keySelector: (Long) -> K): Map<K, Long> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Long>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesBy\n */\npublic inline fun <K> FloatArray.associateBy(keySelector: (Float) -> K): Map<K, Float> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Float>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesBy\n */\npublic inline fun <K> DoubleArray.associateBy(keySelector: (Double) -> K): Map<K, Double> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Double>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesBy\n */\npublic inline fun <K> BooleanArray.associateBy(keySelector: (Boolean) -> K): Map<K, Boolean> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Boolean>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesBy\n */\npublic inline fun <K> CharArray.associateBy(keySelector: (Char) -> K): Map<K, Char> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Char>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByWithValueTransform\n */\npublic inline fun <T, K, V> Array<out T>.associateBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByWithValueTransform\n */\npublic inline fun <K, V> ByteArray.associateBy(keySelector: (Byte) -> K, valueTransform: (Byte) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByWithValueTransform\n */\npublic inline fun <K, V> ShortArray.associateBy(keySelector: (Short) -> K, valueTransform: (Short) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByWithValueTransform\n */\npublic inline fun <K, V> IntArray.associateBy(keySelector: (Int) -> K, valueTransform: (Int) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByWithValueTransform\n */\npublic inline fun <K, V> LongArray.associateBy(keySelector: (Long) -> K, valueTransform: (Long) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByWithValueTransform\n */\npublic inline fun <K, V> FloatArray.associateBy(keySelector: (Float) -> K, valueTransform: (Float) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByWithValueTransform\n */\npublic inline fun <K, V> DoubleArray.associateBy(keySelector: (Double) -> K, valueTransform: (Double) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByWithValueTransform\n */\npublic inline fun <K, V> BooleanArray.associateBy(keySelector: (Boolean) -> K, valueTransform: (Boolean) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByWithValueTransform\n */\npublic inline fun <K, V> CharArray.associateBy(keySelector: (Char) -> K, valueTransform: (Char) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByTo\n */\npublic inline fun <T, K, M : MutableMap<in K, in T>> Array<out T>.associateByTo(destination: M, keySelector: (T) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByTo\n */\npublic inline fun <K, M : MutableMap<in K, in Byte>> ByteArray.associateByTo(destination: M, keySelector: (Byte) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByTo\n */\npublic inline fun <K, M : MutableMap<in K, in Short>> ShortArray.associateByTo(destination: M, keySelector: (Short) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByTo\n */\npublic inline fun <K, M : MutableMap<in K, in Int>> IntArray.associateByTo(destination: M, keySelector: (Int) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByTo\n */\npublic inline fun <K, M : MutableMap<in K, in Long>> LongArray.associateByTo(destination: M, keySelector: (Long) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByTo\n */\npublic inline fun <K, M : MutableMap<in K, in Float>> FloatArray.associateByTo(destination: M, keySelector: (Float) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByTo\n */\npublic inline fun <K, M : MutableMap<in K, in Double>> DoubleArray.associateByTo(destination: M, keySelector: (Double) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByTo\n */\npublic inline fun <K, M : MutableMap<in K, in Boolean>> BooleanArray.associateByTo(destination: M, keySelector: (Boolean) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByTo\n */\npublic inline fun <K, M : MutableMap<in K, in Char>> CharArray.associateByTo(destination: M, keySelector: (Char) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByToWithValueTransform\n */\npublic inline fun <T, K, V, M : MutableMap<in K, in V>> Array<out T>.associateByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByToWithValueTransform\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> ByteArray.associateByTo(destination: M, keySelector: (Byte) -> K, valueTransform: (Byte) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByToWithValueTransform\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> ShortArray.associateByTo(destination: M, keySelector: (Short) -> K, valueTransform: (Short) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByToWithValueTransform\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> IntArray.associateByTo(destination: M, keySelector: (Int) -> K, valueTransform: (Int) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByToWithValueTransform\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> LongArray.associateByTo(destination: M, keySelector: (Long) -> K, valueTransform: (Long) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByToWithValueTransform\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> FloatArray.associateByTo(destination: M, keySelector: (Float) -> K, valueTransform: (Float) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByToWithValueTransform\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> DoubleArray.associateByTo(destination: M, keySelector: (Double) -> K, valueTransform: (Double) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByToWithValueTransform\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> BooleanArray.associateByTo(destination: M, keySelector: (Boolean) -> K, valueTransform: (Boolean) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByToWithValueTransform\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> CharArray.associateByTo(destination: M, keySelector: (Char) -> K, valueTransform: (Char) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesTo\n */\npublic inline fun <T, K, V, M : MutableMap<in K, in V>> Array<out T>.associateTo(destination: M, transform: (T) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> ByteArray.associateTo(destination: M, transform: (Byte) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> ShortArray.associateTo(destination: M, transform: (Short) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> IntArray.associateTo(destination: M, transform: (Int) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> LongArray.associateTo(destination: M, transform: (Long) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> FloatArray.associateTo(destination: M, transform: (Float) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> DoubleArray.associateTo(destination: M, transform: (Double) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> BooleanArray.associateTo(destination: M, transform: (Boolean) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> CharArray.associateTo(destination: M, transform: (Char) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Returns a [Map] where keys are elements from the given array and values are\n * produced by the [valueSelector] function applied to each element.\n * \n * If any two elements are equal, the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Collections.Transformations.associateWith\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <K, V> Array<out K>.associateWith(valueSelector: (K) -> V): Map<K, V> {\n    val result = LinkedHashMap<K, V>(mapCapacity(size).coerceAtLeast(16))\n    return associateWithTo(result, valueSelector)\n}\n\n/**\n * Returns a [Map] where keys are elements from the given array and values are\n * produced by the [valueSelector] function applied to each element.\n * \n * If any two elements are equal, the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Collections.Transformations.associateWith\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <V> ByteArray.associateWith(valueSelector: (Byte) -> V): Map<Byte, V> {\n    val result = LinkedHashMap<Byte, V>(mapCapacity(size).coerceAtLeast(16))\n    return associateWithTo(result, valueSelector)\n}\n\n/**\n * Returns a [Map] where keys are elements from the given array and values are\n * produced by the [valueSelector] function applied to each element.\n * \n * If any two elements are equal, the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Collections.Transformations.associateWith\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <V> ShortArray.associateWith(valueSelector: (Short) -> V): Map<Short, V> {\n    val result = LinkedHashMap<Short, V>(mapCapacity(size).coerceAtLeast(16))\n    return associateWithTo(result, valueSelector)\n}\n\n/**\n * Returns a [Map] where keys are elements from the given array and values are\n * produced by the [valueSelector] function applied to each element.\n * \n * If any two elements are equal, the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Collections.Transformations.associateWith\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <V> IntArray.associateWith(valueSelector: (Int) -> V): Map<Int, V> {\n    val result = LinkedHashMap<Int, V>(mapCapacity(size).coerceAtLeast(16))\n    return associateWithTo(result, valueSelector)\n}\n\n/**\n * Returns a [Map] where keys are elements from the given array and values are\n * produced by the [valueSelector] function applied to each element.\n * \n * If any two elements are equal, the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Collections.Transformations.associateWith\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <V> LongArray.associateWith(valueSelector: (Long) -> V): Map<Long, V> {\n    val result = LinkedHashMap<Long, V>(mapCapacity(size).coerceAtLeast(16))\n    return associateWithTo(result, valueSelector)\n}\n\n/**\n * Returns a [Map] where keys are elements from the given array and values are\n * produced by the [valueSelector] function applied to each element.\n * \n * If any two elements are equal, the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Collections.Transformations.associateWith\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <V> FloatArray.associateWith(valueSelector: (Float) -> V): Map<Float, V> {\n    val result = LinkedHashMap<Float, V>(mapCapacity(size).coerceAtLeast(16))\n    return associateWithTo(result, valueSelector)\n}\n\n/**\n * Returns a [Map] where keys are elements from the given array and values are\n * produced by the [valueSelector] function applied to each element.\n * \n * If any two elements are equal, the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Collections.Transformations.associateWith\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <V> DoubleArray.associateWith(valueSelector: (Double) -> V): Map<Double, V> {\n    val result = LinkedHashMap<Double, V>(mapCapacity(size).coerceAtLeast(16))\n    return associateWithTo(result, valueSelector)\n}\n\n/**\n * Returns a [Map] where keys are elements from the given array and values are\n * produced by the [valueSelector] function applied to each element.\n * \n * If any two elements are equal, the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Collections.Transformations.associateWith\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <V> BooleanArray.associateWith(valueSelector: (Boolean) -> V): Map<Boolean, V> {\n    val result = LinkedHashMap<Boolean, V>(mapCapacity(size).coerceAtLeast(16))\n    return associateWithTo(result, valueSelector)\n}\n\n/**\n * Returns a [Map] where keys are elements from the given array and values are\n * produced by the [valueSelector] function applied to each element.\n * \n * If any two elements are equal, the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Collections.Transformations.associateWith\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <V> CharArray.associateWith(valueSelector: (Char) -> V): Map<Char, V> {\n    val result = LinkedHashMap<Char, V>(mapCapacity(size.coerceAtMost(128)).coerceAtLeast(16))\n    return associateWithTo(result, valueSelector)\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs for each element of the given array,\n * where key is the element itself and value is provided by the [valueSelector] function applied to that key.\n * \n * If any two elements are equal, the last one overwrites the former value in the map.\n * \n * @sample samples.collections.Collections.Transformations.associateWithTo\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <K, V, M : MutableMap<in K, in V>> Array<out K>.associateWithTo(destination: M, valueSelector: (K) -> V): M {\n    for (element in this) {\n        destination.put(element, valueSelector(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs for each element of the given array,\n * where key is the element itself and value is provided by the [valueSelector] function applied to that key.\n * \n * If any two elements are equal, the last one overwrites the former value in the map.\n * \n * @sample samples.collections.Collections.Transformations.associateWithTo\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <V, M : MutableMap<in Byte, in V>> ByteArray.associateWithTo(destination: M, valueSelector: (Byte) -> V): M {\n    for (element in this) {\n        destination.put(element, valueSelector(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs for each element of the given array,\n * where key is the element itself and value is provided by the [valueSelector] function applied to that key.\n * \n * If any two elements are equal, the last one overwrites the former value in the map.\n * \n * @sample samples.collections.Collections.Transformations.associateWithTo\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <V, M : MutableMap<in Short, in V>> ShortArray.associateWithTo(destination: M, valueSelector: (Short) -> V): M {\n    for (element in this) {\n        destination.put(element, valueSelector(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs for each element of the given array,\n * where key is the element itself and value is provided by the [valueSelector] function applied to that key.\n * \n * If any two elements are equal, the last one overwrites the former value in the map.\n * \n * @sample samples.collections.Collections.Transformations.associateWithTo\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <V, M : MutableMap<in Int, in V>> IntArray.associateWithTo(destination: M, valueSelector: (Int) -> V): M {\n    for (element in this) {\n        destination.put(element, valueSelector(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs for each element of the given array,\n * where key is the element itself and value is provided by the [valueSelector] function applied to that key.\n * \n * If any two elements are equal, the last one overwrites the former value in the map.\n * \n * @sample samples.collections.Collections.Transformations.associateWithTo\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <V, M : MutableMap<in Long, in V>> LongArray.associateWithTo(destination: M, valueSelector: (Long) -> V): M {\n    for (element in this) {\n        destination.put(element, valueSelector(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs for each element of the given array,\n * where key is the element itself and value is provided by the [valueSelector] function applied to that key.\n * \n * If any two elements are equal, the last one overwrites the former value in the map.\n * \n * @sample samples.collections.Collections.Transformations.associateWithTo\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <V, M : MutableMap<in Float, in V>> FloatArray.associateWithTo(destination: M, valueSelector: (Float) -> V): M {\n    for (element in this) {\n        destination.put(element, valueSelector(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs for each element of the given array,\n * where key is the element itself and value is provided by the [valueSelector] function applied to that key.\n * \n * If any two elements are equal, the last one overwrites the former value in the map.\n * \n * @sample samples.collections.Collections.Transformations.associateWithTo\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <V, M : MutableMap<in Double, in V>> DoubleArray.associateWithTo(destination: M, valueSelector: (Double) -> V): M {\n    for (element in this) {\n        destination.put(element, valueSelector(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs for each element of the given array,\n * where key is the element itself and value is provided by the [valueSelector] function applied to that key.\n * \n * If any two elements are equal, the last one overwrites the former value in the map.\n * \n * @sample samples.collections.Collections.Transformations.associateWithTo\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <V, M : MutableMap<in Boolean, in V>> BooleanArray.associateWithTo(destination: M, valueSelector: (Boolean) -> V): M {\n    for (element in this) {\n        destination.put(element, valueSelector(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs for each element of the given array,\n * where key is the element itself and value is provided by the [valueSelector] function applied to that key.\n * \n * If any two elements are equal, the last one overwrites the former value in the map.\n * \n * @sample samples.collections.Collections.Transformations.associateWithTo\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <V, M : MutableMap<in Char, in V>> CharArray.associateWithTo(destination: M, valueSelector: (Char) -> V): M {\n    for (element in this) {\n        destination.put(element, valueSelector(element))\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <T, C : MutableCollection<in T>> Array<out T>.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Byte>> ByteArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Short>> ShortArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Int>> IntArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Long>> LongArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Float>> FloatArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Double>> DoubleArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Boolean>> BooleanArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Char>> CharArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Returns a new [HashSet] of all elements.\n */\npublic fun <T> Array<out T>.toHashSet(): HashSet<T> {\n    return toCollection(HashSet<T>(mapCapacity(size)))\n}\n\n/**\n * Returns a new [HashSet] of all elements.\n */\npublic fun ByteArray.toHashSet(): HashSet<Byte> {\n    return toCollection(HashSet<Byte>(mapCapacity(size)))\n}\n\n/**\n * Returns a new [HashSet] of all elements.\n */\npublic fun ShortArray.toHashSet(): HashSet<Short> {\n    return toCollection(HashSet<Short>(mapCapacity(size)))\n}\n\n/**\n * Returns a new [HashSet] of all elements.\n */\npublic fun IntArray.toHashSet(): HashSet<Int> {\n    return toCollection(HashSet<Int>(mapCapacity(size)))\n}\n\n/**\n * Returns a new [HashSet] of all elements.\n */\npublic fun LongArray.toHashSet(): HashSet<Long> {\n    return toCollection(HashSet<Long>(mapCapacity(size)))\n}\n\n/**\n * Returns a new [HashSet] of all elements.\n */\npublic fun FloatArray.toHashSet(): HashSet<Float> {\n    return toCollection(HashSet<Float>(mapCapacity(size)))\n}\n\n/**\n * Returns a new [HashSet] of all elements.\n */\npublic fun DoubleArray.toHashSet(): HashSet<Double> {\n    return toCollection(HashSet<Double>(mapCapacity(size)))\n}\n\n/**\n * Returns a new [HashSet] of all elements.\n */\npublic fun BooleanArray.toHashSet(): HashSet<Boolean> {\n    return toCollection(HashSet<Boolean>(mapCapacity(size)))\n}\n\n/**\n * Returns a new [HashSet] of all elements.\n */\npublic fun CharArray.toHashSet(): HashSet<Char> {\n    return toCollection(HashSet<Char>(mapCapacity(size.coerceAtMost(128))))\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun <T> Array<out T>.toList(): List<T> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun ByteArray.toList(): List<Byte> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun ShortArray.toList(): List<Short> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun IntArray.toList(): List<Int> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun LongArray.toList(): List<Long> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun FloatArray.toList(): List<Float> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun DoubleArray.toList(): List<Double> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun BooleanArray.toList(): List<Boolean> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun CharArray.toList(): List<Char> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a new [MutableList] filled with all elements of this array.\n */\npublic fun <T> Array<out T>.toMutableList(): MutableList<T> {\n    return ArrayList(this.asCollection())\n}\n\n/**\n * Returns a new [MutableList] filled with all elements of this array.\n */\npublic fun ByteArray.toMutableList(): MutableList<Byte> {\n    val list = ArrayList<Byte>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a new [MutableList] filled with all elements of this array.\n */\npublic fun ShortArray.toMutableList(): MutableList<Short> {\n    val list = ArrayList<Short>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a new [MutableList] filled with all elements of this array.\n */\npublic fun IntArray.toMutableList(): MutableList<Int> {\n    val list = ArrayList<Int>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a new [MutableList] filled with all elements of this array.\n */\npublic fun LongArray.toMutableList(): MutableList<Long> {\n    val list = ArrayList<Long>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a new [MutableList] filled with all elements of this array.\n */\npublic fun FloatArray.toMutableList(): MutableList<Float> {\n    val list = ArrayList<Float>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a new [MutableList] filled with all elements of this array.\n */\npublic fun DoubleArray.toMutableList(): MutableList<Double> {\n    val list = ArrayList<Double>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a new [MutableList] filled with all elements of this array.\n */\npublic fun BooleanArray.toMutableList(): MutableList<Boolean> {\n    val list = ArrayList<Boolean>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a new [MutableList] filled with all elements of this array.\n */\npublic fun CharArray.toMutableList(): MutableList<Char> {\n    val list = ArrayList<Char>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun <T> Array<out T>.toSet(): Set<T> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<T>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun ByteArray.toSet(): Set<Byte> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Byte>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun ShortArray.toSet(): Set<Short> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Short>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun IntArray.toSet(): Set<Int> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Int>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun LongArray.toSet(): Set<Long> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Long>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun FloatArray.toSet(): Set<Float> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Float>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun DoubleArray.toSet(): Set<Double> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Double>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun BooleanArray.toSet(): Set<Boolean> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Boolean>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun CharArray.toSet(): Set<Char> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Char>(mapCapacity(size.coerceAtMost(128))))\n    }\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <T, R> Array<out T>.flatMap(transform: (T) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <R> ByteArray.flatMap(transform: (Byte) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <R> ShortArray.flatMap(transform: (Short) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <R> IntArray.flatMap(transform: (Int) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <R> LongArray.flatMap(transform: (Long) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <R> FloatArray.flatMap(transform: (Float) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <R> DoubleArray.flatMap(transform: (Double) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <R> BooleanArray.flatMap(transform: (Boolean) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <R> CharArray.flatMap(transform: (Char) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapSequence\")\npublic inline fun <T, R> Array<out T>.flatMap(transform: (T) -> Sequence<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMapIndexed\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterable\")\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> Array<out T>.flatMapIndexed(transform: (index: Int, T) -> Iterable<R>): List<R> {\n    return flatMapIndexedTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMapIndexed\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterable\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> ByteArray.flatMapIndexed(transform: (index: Int, Byte) -> Iterable<R>): List<R> {\n    return flatMapIndexedTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMapIndexed\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterable\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> ShortArray.flatMapIndexed(transform: (index: Int, Short) -> Iterable<R>): List<R> {\n    return flatMapIndexedTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMapIndexed\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterable\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> IntArray.flatMapIndexed(transform: (index: Int, Int) -> Iterable<R>): List<R> {\n    return flatMapIndexedTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMapIndexed\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterable\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> LongArray.flatMapIndexed(transform: (index: Int, Long) -> Iterable<R>): List<R> {\n    return flatMapIndexedTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMapIndexed\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterable\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> FloatArray.flatMapIndexed(transform: (index: Int, Float) -> Iterable<R>): List<R> {\n    return flatMapIndexedTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMapIndexed\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterable\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> DoubleArray.flatMapIndexed(transform: (index: Int, Double) -> Iterable<R>): List<R> {\n    return flatMapIndexedTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMapIndexed\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterable\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> BooleanArray.flatMapIndexed(transform: (index: Int, Boolean) -> Iterable<R>): List<R> {\n    return flatMapIndexedTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMapIndexed\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterable\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> CharArray.flatMapIndexed(transform: (index: Int, Char) -> Iterable<R>): List<R> {\n    return flatMapIndexedTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMapIndexed\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedSequence\")\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> Array<out T>.flatMapIndexed(transform: (index: Int, T) -> Sequence<R>): List<R> {\n    return flatMapIndexedTo(ArrayList<R>(), transform)\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array, to the given [destination].\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterableTo\")\n@kotlin.internal.InlineOnly\npublic inline fun <T, R, C : MutableCollection<in R>> Array<out T>.flatMapIndexedTo(destination: C, transform: (index: Int, T) -> Iterable<R>): C {\n    var index = 0\n    for (element in this) {\n        val list = transform(index++, element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array, to the given [destination].\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterableTo\")\n@kotlin.internal.InlineOnly\npublic inline fun <R, C : MutableCollection<in R>> ByteArray.flatMapIndexedTo(destination: C, transform: (index: Int, Byte) -> Iterable<R>): C {\n    var index = 0\n    for (element in this) {\n        val list = transform(index++, element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array, to the given [destination].\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterableTo\")\n@kotlin.internal.InlineOnly\npublic inline fun <R, C : MutableCollection<in R>> ShortArray.flatMapIndexedTo(destination: C, transform: (index: Int, Short) -> Iterable<R>): C {\n    var index = 0\n    for (element in this) {\n        val list = transform(index++, element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array, to the given [destination].\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterableTo\")\n@kotlin.internal.InlineOnly\npublic inline fun <R, C : MutableCollection<in R>> IntArray.flatMapIndexedTo(destination: C, transform: (index: Int, Int) -> Iterable<R>): C {\n    var index = 0\n    for (element in this) {\n        val list = transform(index++, element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array, to the given [destination].\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterableTo\")\n@kotlin.internal.InlineOnly\npublic inline fun <R, C : MutableCollection<in R>> LongArray.flatMapIndexedTo(destination: C, transform: (index: Int, Long) -> Iterable<R>): C {\n    var index = 0\n    for (element in this) {\n        val list = transform(index++, element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array, to the given [destination].\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterableTo\")\n@kotlin.internal.InlineOnly\npublic inline fun <R, C : MutableCollection<in R>> FloatArray.flatMapIndexedTo(destination: C, transform: (index: Int, Float) -> Iterable<R>): C {\n    var index = 0\n    for (element in this) {\n        val list = transform(index++, element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array, to the given [destination].\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterableTo\")\n@kotlin.internal.InlineOnly\npublic inline fun <R, C : MutableCollection<in R>> DoubleArray.flatMapIndexedTo(destination: C, transform: (index: Int, Double) -> Iterable<R>): C {\n    var index = 0\n    for (element in this) {\n        val list = transform(index++, element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array, to the given [destination].\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterableTo\")\n@kotlin.internal.InlineOnly\npublic inline fun <R, C : MutableCollection<in R>> BooleanArray.flatMapIndexedTo(destination: C, transform: (index: Int, Boolean) -> Iterable<R>): C {\n    var index = 0\n    for (element in this) {\n        val list = transform(index++, element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array, to the given [destination].\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterableTo\")\n@kotlin.internal.InlineOnly\npublic inline fun <R, C : MutableCollection<in R>> CharArray.flatMapIndexedTo(destination: C, transform: (index: Int, Char) -> Iterable<R>): C {\n    var index = 0\n    for (element in this) {\n        val list = transform(index++, element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array, to the given [destination].\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedSequenceTo\")\n@kotlin.internal.InlineOnly\npublic inline fun <T, R, C : MutableCollection<in R>> Array<out T>.flatMapIndexedTo(destination: C, transform: (index: Int, T) -> Sequence<R>): C {\n    var index = 0\n    for (element in this) {\n        val list = transform(index++, element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Array<out T>.flatMapTo(destination: C, transform: (T) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> ByteArray.flatMapTo(destination: C, transform: (Byte) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> ShortArray.flatMapTo(destination: C, transform: (Short) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> IntArray.flatMapTo(destination: C, transform: (Int) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> LongArray.flatMapTo(destination: C, transform: (Long) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> FloatArray.flatMapTo(destination: C, transform: (Float) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> DoubleArray.flatMapTo(destination: C, transform: (Double) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> BooleanArray.flatMapTo(destination: C, transform: (Boolean) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> CharArray.flatMapTo(destination: C, transform: (Char) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapSequenceTo\")\npublic inline fun <T, R, C : MutableCollection<in R>> Array<out T>.flatMapTo(destination: C, transform: (T) -> Sequence<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <T, K> Array<out T>.groupBy(keySelector: (T) -> K): Map<K, List<T>> {\n    return groupByTo(LinkedHashMap<K, MutableList<T>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> ByteArray.groupBy(keySelector: (Byte) -> K): Map<K, List<Byte>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Byte>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> ShortArray.groupBy(keySelector: (Short) -> K): Map<K, List<Short>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Short>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> IntArray.groupBy(keySelector: (Int) -> K): Map<K, List<Int>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Int>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> LongArray.groupBy(keySelector: (Long) -> K): Map<K, List<Long>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Long>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> FloatArray.groupBy(keySelector: (Float) -> K): Map<K, List<Float>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Float>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> DoubleArray.groupBy(keySelector: (Double) -> K): Map<K, List<Double>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Double>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> BooleanArray.groupBy(keySelector: (Boolean) -> K): Map<K, List<Boolean>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Boolean>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> CharArray.groupBy(keySelector: (Char) -> K): Map<K, List<Char>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Char>>(), keySelector)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <T, K, V> Array<out T>.groupBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> ByteArray.groupBy(keySelector: (Byte) -> K, valueTransform: (Byte) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> ShortArray.groupBy(keySelector: (Short) -> K, valueTransform: (Short) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> IntArray.groupBy(keySelector: (Int) -> K, valueTransform: (Int) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> LongArray.groupBy(keySelector: (Long) -> K, valueTransform: (Long) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> FloatArray.groupBy(keySelector: (Float) -> K, valueTransform: (Float) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> DoubleArray.groupBy(keySelector: (Double) -> K, valueTransform: (Double) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> BooleanArray.groupBy(keySelector: (Boolean) -> K, valueTransform: (Boolean) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> CharArray.groupBy(keySelector: (Char) -> K, valueTransform: (Char) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <T, K, M : MutableMap<in K, MutableList<T>>> Array<out T>.groupByTo(destination: M, keySelector: (T) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<T>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Byte>>> ByteArray.groupByTo(destination: M, keySelector: (Byte) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Byte>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Short>>> ShortArray.groupByTo(destination: M, keySelector: (Short) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Short>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Int>>> IntArray.groupByTo(destination: M, keySelector: (Int) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Int>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Long>>> LongArray.groupByTo(destination: M, keySelector: (Long) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Long>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Float>>> FloatArray.groupByTo(destination: M, keySelector: (Float) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Float>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Double>>> DoubleArray.groupByTo(destination: M, keySelector: (Double) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Double>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Boolean>>> BooleanArray.groupByTo(destination: M, keySelector: (Boolean) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Boolean>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Char>>> CharArray.groupByTo(destination: M, keySelector: (Char) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Char>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <T, K, V, M : MutableMap<in K, MutableList<V>>> Array<out T>.groupByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> ByteArray.groupByTo(destination: M, keySelector: (Byte) -> K, valueTransform: (Byte) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> ShortArray.groupByTo(destination: M, keySelector: (Short) -> K, valueTransform: (Short) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> IntArray.groupByTo(destination: M, keySelector: (Int) -> K, valueTransform: (Int) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> LongArray.groupByTo(destination: M, keySelector: (Long) -> K, valueTransform: (Long) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> FloatArray.groupByTo(destination: M, keySelector: (Float) -> K, valueTransform: (Float) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> DoubleArray.groupByTo(destination: M, keySelector: (Double) -> K, valueTransform: (Double) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> BooleanArray.groupByTo(destination: M, keySelector: (Boolean) -> K, valueTransform: (Boolean) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> CharArray.groupByTo(destination: M, keySelector: (Char) -> K, valueTransform: (Char) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Creates a [Grouping] source from an array to be used later with one of group-and-fold operations\n * using the specified [keySelector] function to extract a key from each element.\n * \n * @sample samples.collections.Grouping.groupingByEachCount\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <T, K> Array<out T>.groupingBy(crossinline keySelector: (T) -> K): Grouping<T, K> {\n    return object : Grouping<T, K> {\n        override fun sourceIterator(): Iterator<T> = this@groupingBy.iterator()\n        override fun keyOf(element: T): K = keySelector(element)\n    }\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <T, R> Array<out T>.map(transform: (T) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> ByteArray.map(transform: (Byte) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> ShortArray.map(transform: (Short) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> IntArray.map(transform: (Int) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> LongArray.map(transform: (Long) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> FloatArray.map(transform: (Float) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> DoubleArray.map(transform: (Double) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> BooleanArray.map(transform: (Boolean) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> CharArray.map(transform: (Char) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R> Array<out T>.mapIndexed(transform: (index: Int, T) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> ByteArray.mapIndexed(transform: (index: Int, Byte) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> ShortArray.mapIndexed(transform: (index: Int, Short) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> IntArray.mapIndexed(transform: (index: Int, Int) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> LongArray.mapIndexed(transform: (index: Int, Long) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> FloatArray.mapIndexed(transform: (index: Int, Float) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> DoubleArray.mapIndexed(transform: (index: Int, Double) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> BooleanArray.mapIndexed(transform: (index: Int, Boolean) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> CharArray.mapIndexed(transform: (index: Int, Char) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R : Any> Array<out T>.mapIndexedNotNull(transform: (index: Int, T) -> R?): List<R> {\n    return mapIndexedNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends only the non-null results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R : Any, C : MutableCollection<in R>> Array<out T>.mapIndexedNotNullTo(destination: C, transform: (index: Int, T) -> R?): C {\n    forEachIndexed { index, element -> transform(index, element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Array<out T>.mapIndexedTo(destination: C, transform: (index: Int, T) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> ByteArray.mapIndexedTo(destination: C, transform: (index: Int, Byte) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> ShortArray.mapIndexedTo(destination: C, transform: (index: Int, Short) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> IntArray.mapIndexedTo(destination: C, transform: (index: Int, Int) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> LongArray.mapIndexedTo(destination: C, transform: (index: Int, Long) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> FloatArray.mapIndexedTo(destination: C, transform: (index: Int, Float) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> DoubleArray.mapIndexedTo(destination: C, transform: (index: Int, Double) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> BooleanArray.mapIndexedTo(destination: C, transform: (index: Int, Boolean) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> CharArray.mapIndexedTo(destination: C, transform: (index: Int, Char) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.mapNotNull\n */\npublic inline fun <T, R : Any> Array<out T>.mapNotNull(transform: (T) -> R?): List<R> {\n    return mapNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each element in the original array\n * and appends only the non-null results to the given [destination].\n */\npublic inline fun <T, R : Any, C : MutableCollection<in R>> Array<out T>.mapNotNullTo(destination: C, transform: (T) -> R?): C {\n    forEach { element -> transform(element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Array<out T>.mapTo(destination: C, transform: (T) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> ByteArray.mapTo(destination: C, transform: (Byte) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> ShortArray.mapTo(destination: C, transform: (Short) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> IntArray.mapTo(destination: C, transform: (Int) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> LongArray.mapTo(destination: C, transform: (Long) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> FloatArray.mapTo(destination: C, transform: (Float) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> DoubleArray.mapTo(destination: C, transform: (Double) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> BooleanArray.mapTo(destination: C, transform: (Boolean) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> CharArray.mapTo(destination: C, transform: (Char) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun <T> Array<out T>.withIndex(): Iterable<IndexedValue<T>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun ByteArray.withIndex(): Iterable<IndexedValue<Byte>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun ShortArray.withIndex(): Iterable<IndexedValue<Short>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun IntArray.withIndex(): Iterable<IndexedValue<Int>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun LongArray.withIndex(): Iterable<IndexedValue<Long>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun FloatArray.withIndex(): Iterable<IndexedValue<Float>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun DoubleArray.withIndex(): Iterable<IndexedValue<Double>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun BooleanArray.withIndex(): Iterable<IndexedValue<Boolean>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun CharArray.withIndex(): Iterable<IndexedValue<Char>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * Among equal elements of the given array, only the first one will be present in the resulting list.\n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun <T> Array<out T>.distinct(): List<T> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun ByteArray.distinct(): List<Byte> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun ShortArray.distinct(): List<Short> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun IntArray.distinct(): List<Int> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun LongArray.distinct(): List<Long> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun FloatArray.distinct(): List<Float> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun DoubleArray.distinct(): List<Double> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun BooleanArray.distinct(): List<Boolean> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun CharArray.distinct(): List<Char> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * Among elements of the given array with equal keys, only the first one will be present in the resulting list.\n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <T, K> Array<out T>.distinctBy(selector: (T) -> K): List<T> {\n    val set = HashSet<K>()\n    val list = ArrayList<T>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <K> ByteArray.distinctBy(selector: (Byte) -> K): List<Byte> {\n    val set = HashSet<K>()\n    val list = ArrayList<Byte>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <K> ShortArray.distinctBy(selector: (Short) -> K): List<Short> {\n    val set = HashSet<K>()\n    val list = ArrayList<Short>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <K> IntArray.distinctBy(selector: (Int) -> K): List<Int> {\n    val set = HashSet<K>()\n    val list = ArrayList<Int>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <K> LongArray.distinctBy(selector: (Long) -> K): List<Long> {\n    val set = HashSet<K>()\n    val list = ArrayList<Long>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <K> FloatArray.distinctBy(selector: (Float) -> K): List<Float> {\n    val set = HashSet<K>()\n    val list = ArrayList<Float>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <K> DoubleArray.distinctBy(selector: (Double) -> K): List<Double> {\n    val set = HashSet<K>()\n    val list = ArrayList<Double>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <K> BooleanArray.distinctBy(selector: (Boolean) -> K): List<Boolean> {\n    val set = HashSet<K>()\n    val list = ArrayList<Boolean>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <K> CharArray.distinctBy(selector: (Char) -> K): List<Char> {\n    val set = HashSet<K>()\n    val list = ArrayList<Char>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a set containing all elements that are contained by both this array and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun <T> Array<out T>.intersect(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this array and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun ByteArray.intersect(other: Iterable<Byte>): Set<Byte> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this array and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun ShortArray.intersect(other: Iterable<Short>): Set<Short> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this array and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun IntArray.intersect(other: Iterable<Int>): Set<Int> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this array and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun LongArray.intersect(other: Iterable<Long>): Set<Long> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this array and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun FloatArray.intersect(other: Iterable<Float>): Set<Float> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this array and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun DoubleArray.intersect(other: Iterable<Double>): Set<Double> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this array and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun BooleanArray.intersect(other: Iterable<Boolean>): Set<Boolean> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this array and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun CharArray.intersect(other: Iterable<Char>): Set<Char> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun <T> Array<out T>.subtract(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun ByteArray.subtract(other: Iterable<Byte>): Set<Byte> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun ShortArray.subtract(other: Iterable<Short>): Set<Short> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun IntArray.subtract(other: Iterable<Int>): Set<Int> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun LongArray.subtract(other: Iterable<Long>): Set<Long> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun FloatArray.subtract(other: Iterable<Float>): Set<Float> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun DoubleArray.subtract(other: Iterable<Double>): Set<Double> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun BooleanArray.subtract(other: Iterable<Boolean>): Set<Boolean> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun CharArray.subtract(other: Iterable<Char>): Set<Char> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a new [MutableSet] containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun <T> Array<out T>.toMutableSet(): MutableSet<T> {\n    return toCollection(LinkedHashSet<T>(mapCapacity(size)))\n}\n\n/**\n * Returns a new [MutableSet] containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun ByteArray.toMutableSet(): MutableSet<Byte> {\n    return toCollection(LinkedHashSet<Byte>(mapCapacity(size)))\n}\n\n/**\n * Returns a new [MutableSet] containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun ShortArray.toMutableSet(): MutableSet<Short> {\n    return toCollection(LinkedHashSet<Short>(mapCapacity(size)))\n}\n\n/**\n * Returns a new [MutableSet] containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun IntArray.toMutableSet(): MutableSet<Int> {\n    return toCollection(LinkedHashSet<Int>(mapCapacity(size)))\n}\n\n/**\n * Returns a new [MutableSet] containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun LongArray.toMutableSet(): MutableSet<Long> {\n    return toCollection(LinkedHashSet<Long>(mapCapacity(size)))\n}\n\n/**\n * Returns a new [MutableSet] containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun FloatArray.toMutableSet(): MutableSet<Float> {\n    return toCollection(LinkedHashSet<Float>(mapCapacity(size)))\n}\n\n/**\n * Returns a new [MutableSet] containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun DoubleArray.toMutableSet(): MutableSet<Double> {\n    return toCollection(LinkedHashSet<Double>(mapCapacity(size)))\n}\n\n/**\n * Returns a new [MutableSet] containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun BooleanArray.toMutableSet(): MutableSet<Boolean> {\n    return toCollection(LinkedHashSet<Boolean>(mapCapacity(size)))\n}\n\n/**\n * Returns a new [MutableSet] containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun CharArray.toMutableSet(): MutableSet<Char> {\n    return toCollection(LinkedHashSet<Char>(mapCapacity(size.coerceAtMost(128))))\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun <T> Array<out T>.union(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun ByteArray.union(other: Iterable<Byte>): Set<Byte> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun ShortArray.union(other: Iterable<Short>): Set<Short> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun IntArray.union(other: Iterable<Int>): Set<Int> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun LongArray.union(other: Iterable<Long>): Set<Long> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun FloatArray.union(other: Iterable<Float>): Set<Float> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun DoubleArray.union(other: Iterable<Double>): Set<Double> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun BooleanArray.union(other: Iterable<Boolean>): Set<Boolean> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun CharArray.union(other: Iterable<Char>): Set<Char> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun <T> Array<out T>.all(predicate: (T) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun ByteArray.all(predicate: (Byte) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun ShortArray.all(predicate: (Short) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun IntArray.all(predicate: (Int) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun LongArray.all(predicate: (Long) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun FloatArray.all(predicate: (Float) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun DoubleArray.all(predicate: (Double) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun BooleanArray.all(predicate: (Boolean) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun CharArray.all(predicate: (Char) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun <T> Array<out T>.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun ByteArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun ShortArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun IntArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun LongArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun FloatArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun DoubleArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun BooleanArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun CharArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun <T> Array<out T>.any(predicate: (T) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun ByteArray.any(predicate: (Byte) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun ShortArray.any(predicate: (Short) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun IntArray.any(predicate: (Int) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun LongArray.any(predicate: (Long) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun FloatArray.any(predicate: (Float) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun DoubleArray.any(predicate: (Double) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun BooleanArray.any(predicate: (Boolean) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun CharArray.any(predicate: (Char) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun <T> Array<out T>.count(predicate: (T) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun ByteArray.count(predicate: (Byte) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun ShortArray.count(predicate: (Short) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun IntArray.count(predicate: (Int) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun LongArray.count(predicate: (Long) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun FloatArray.count(predicate: (Float) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun DoubleArray.count(predicate: (Double) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun BooleanArray.count(predicate: (Boolean) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun CharArray.count(predicate: (Char) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n */\npublic inline fun <T, R> Array<out T>.fold(initial: R, operation: (acc: R, T) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n */\npublic inline fun <R> ByteArray.fold(initial: R, operation: (acc: R, Byte) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n */\npublic inline fun <R> ShortArray.fold(initial: R, operation: (acc: R, Short) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n */\npublic inline fun <R> IntArray.fold(initial: R, operation: (acc: R, Int) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n */\npublic inline fun <R> LongArray.fold(initial: R, operation: (acc: R, Long) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n */\npublic inline fun <R> FloatArray.fold(initial: R, operation: (acc: R, Float) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n */\npublic inline fun <R> DoubleArray.fold(initial: R, operation: (acc: R, Double) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n */\npublic inline fun <R> BooleanArray.fold(initial: R, operation: (acc: R, Boolean) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n */\npublic inline fun <R> CharArray.fold(initial: R, operation: (acc: R, Char) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <T, R> Array<out T>.foldIndexed(initial: R, operation: (index: Int, acc: R, T) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> ByteArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Byte) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> ShortArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Short) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> IntArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Int) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> LongArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Long) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> FloatArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Float) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> DoubleArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Double) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> BooleanArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Boolean) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> CharArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Char) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <T, R> Array<out T>.foldRight(initial: R, operation: (T, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> ByteArray.foldRight(initial: R, operation: (Byte, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> ShortArray.foldRight(initial: R, operation: (Short, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> IntArray.foldRight(initial: R, operation: (Int, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> LongArray.foldRight(initial: R, operation: (Long, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> FloatArray.foldRight(initial: R, operation: (Float, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> DoubleArray.foldRight(initial: R, operation: (Double, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> BooleanArray.foldRight(initial: R, operation: (Boolean, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> CharArray.foldRight(initial: R, operation: (Char, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <T, R> Array<out T>.foldRightIndexed(initial: R, operation: (index: Int, T, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> ByteArray.foldRightIndexed(initial: R, operation: (index: Int, Byte, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> ShortArray.foldRightIndexed(initial: R, operation: (index: Int, Short, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> IntArray.foldRightIndexed(initial: R, operation: (index: Int, Int, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> LongArray.foldRightIndexed(initial: R, operation: (index: Int, Long, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> FloatArray.foldRightIndexed(initial: R, operation: (index: Int, Float, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> DoubleArray.foldRightIndexed(initial: R, operation: (index: Int, Double, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> BooleanArray.foldRightIndexed(initial: R, operation: (index: Int, Boolean, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> CharArray.foldRightIndexed(initial: R, operation: (index: Int, Char, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun <T> Array<out T>.forEach(action: (T) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun ByteArray.forEach(action: (Byte) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun ShortArray.forEach(action: (Short) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun IntArray.forEach(action: (Int) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun LongArray.forEach(action: (Long) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun FloatArray.forEach(action: (Float) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun DoubleArray.forEach(action: (Double) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun BooleanArray.forEach(action: (Boolean) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun CharArray.forEach(action: (Char) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\npublic inline fun <T> Array<out T>.forEachIndexed(action: (index: Int, T) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\npublic inline fun ByteArray.forEachIndexed(action: (index: Int, Byte) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\npublic inline fun ShortArray.forEachIndexed(action: (index: Int, Short) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\npublic inline fun IntArray.forEachIndexed(action: (index: Int, Int) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\npublic inline fun LongArray.forEachIndexed(action: (index: Int, Long) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\npublic inline fun FloatArray.forEachIndexed(action: (index: Int, Float) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\npublic inline fun DoubleArray.forEachIndexed(action: (index: Int, Double) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\npublic inline fun BooleanArray.forEachIndexed(action: (index: Int, Boolean) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\npublic inline fun CharArray.forEachIndexed(action: (index: Int, Char) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n@Deprecated(\"Use maxOrNull instead.\", ReplaceWith(\"this.maxOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\n@SinceKotlin(\"1.1\")\npublic fun Array<out Double>.max(): Double? {\n    return maxOrNull()\n}\n\n@Deprecated(\"Use maxOrNull instead.\", ReplaceWith(\"this.maxOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\n@SinceKotlin(\"1.1\")\npublic fun Array<out Float>.max(): Float? {\n    return maxOrNull()\n}\n\n@Deprecated(\"Use maxOrNull instead.\", ReplaceWith(\"this.maxOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic fun <T : Comparable<T>> Array<out T>.max(): T? {\n    return maxOrNull()\n}\n\n@Deprecated(\"Use maxOrNull instead.\", ReplaceWith(\"this.maxOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic fun ByteArray.max(): Byte? {\n    return maxOrNull()\n}\n\n@Deprecated(\"Use maxOrNull instead.\", ReplaceWith(\"this.maxOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic fun ShortArray.max(): Short? {\n    return maxOrNull()\n}\n\n@Deprecated(\"Use maxOrNull instead.\", ReplaceWith(\"this.maxOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic fun IntArray.max(): Int? {\n    return maxOrNull()\n}\n\n@Deprecated(\"Use maxOrNull instead.\", ReplaceWith(\"this.maxOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic fun LongArray.max(): Long? {\n    return maxOrNull()\n}\n\n@Deprecated(\"Use maxOrNull instead.\", ReplaceWith(\"this.maxOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic fun FloatArray.max(): Float? {\n    return maxOrNull()\n}\n\n@Deprecated(\"Use maxOrNull instead.\", ReplaceWith(\"this.maxOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic fun DoubleArray.max(): Double? {\n    return maxOrNull()\n}\n\n@Deprecated(\"Use maxOrNull instead.\", ReplaceWith(\"this.maxOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic fun CharArray.max(): Char? {\n    return maxOrNull()\n}\n\n@Deprecated(\"Use maxByOrNull instead.\", ReplaceWith(\"this.maxByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic inline fun <T, R : Comparable<R>> Array<out T>.maxBy(selector: (T) -> R): T? {\n    return maxByOrNull(selector)\n}\n\n@Deprecated(\"Use maxByOrNull instead.\", ReplaceWith(\"this.maxByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic inline fun <R : Comparable<R>> ByteArray.maxBy(selector: (Byte) -> R): Byte? {\n    return maxByOrNull(selector)\n}\n\n@Deprecated(\"Use maxByOrNull instead.\", ReplaceWith(\"this.maxByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic inline fun <R : Comparable<R>> ShortArray.maxBy(selector: (Short) -> R): Short? {\n    return maxByOrNull(selector)\n}\n\n@Deprecated(\"Use maxByOrNull instead.\", ReplaceWith(\"this.maxByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic inline fun <R : Comparable<R>> IntArray.maxBy(selector: (Int) -> R): Int? {\n    return maxByOrNull(selector)\n}\n\n@Deprecated(\"Use maxByOrNull instead.\", ReplaceWith(\"this.maxByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic inline fun <R : Comparable<R>> LongArray.maxBy(selector: (Long) -> R): Long? {\n    return maxByOrNull(selector)\n}\n\n@Deprecated(\"Use maxByOrNull instead.\", ReplaceWith(\"this.maxByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic inline fun <R : Comparable<R>> FloatArray.maxBy(selector: (Float) -> R): Float? {\n    return maxByOrNull(selector)\n}\n\n@Deprecated(\"Use maxByOrNull instead.\", ReplaceWith(\"this.maxByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic inline fun <R : Comparable<R>> DoubleArray.maxBy(selector: (Double) -> R): Double? {\n    return maxByOrNull(selector)\n}\n\n@Deprecated(\"Use maxByOrNull instead.\", ReplaceWith(\"this.maxByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic inline fun <R : Comparable<R>> BooleanArray.maxBy(selector: (Boolean) -> R): Boolean? {\n    return maxByOrNull(selector)\n}\n\n@Deprecated(\"Use maxByOrNull instead.\", ReplaceWith(\"this.maxByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic inline fun <R : Comparable<R>> CharArray.maxBy(selector: (Char) -> R): Char? {\n    return maxByOrNull(selector)\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <T, R : Comparable<R>> Array<out T>.maxByOrNull(selector: (T) -> R): T? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <R : Comparable<R>> ByteArray.maxByOrNull(selector: (Byte) -> R): Byte? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <R : Comparable<R>> ShortArray.maxByOrNull(selector: (Short) -> R): Short? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <R : Comparable<R>> IntArray.maxByOrNull(selector: (Int) -> R): Int? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <R : Comparable<R>> LongArray.maxByOrNull(selector: (Long) -> R): Long? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <R : Comparable<R>> FloatArray.maxByOrNull(selector: (Float) -> R): Float? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <R : Comparable<R>> DoubleArray.maxByOrNull(selector: (Double) -> R): Double? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <R : Comparable<R>> BooleanArray.maxByOrNull(selector: (Boolean) -> R): Boolean? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <R : Comparable<R>> CharArray.maxByOrNull(selector: (Char) -> R): Char? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.maxOf(selector: (T) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.maxOf(selector: (Byte) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.maxOf(selector: (Short) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.maxOf(selector: (Int) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.maxOf(selector: (Long) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.maxOf(selector: (Float) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.maxOf(selector: (Double) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.maxOf(selector: (Boolean) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.maxOf(selector: (Char) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.maxOf(selector: (T) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.maxOf(selector: (Byte) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.maxOf(selector: (Short) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.maxOf(selector: (Int) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.maxOf(selector: (Long) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.maxOf(selector: (Float) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.maxOf(selector: (Double) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.maxOf(selector: (Boolean) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.maxOf(selector: (Char) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R : Comparable<R>> Array<out T>.maxOf(selector: (T) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> ByteArray.maxOf(selector: (Byte) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> ShortArray.maxOf(selector: (Short) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> IntArray.maxOf(selector: (Int) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> LongArray.maxOf(selector: (Long) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> FloatArray.maxOf(selector: (Float) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> DoubleArray.maxOf(selector: (Double) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> BooleanArray.maxOf(selector: (Boolean) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> CharArray.maxOf(selector: (Char) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.maxOfOrNull(selector: (T) -> Double): Double? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.maxOfOrNull(selector: (Byte) -> Double): Double? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.maxOfOrNull(selector: (Short) -> Double): Double? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.maxOfOrNull(selector: (Int) -> Double): Double? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.maxOfOrNull(selector: (Long) -> Double): Double? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.maxOfOrNull(selector: (Float) -> Double): Double? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.maxOfOrNull(selector: (Double) -> Double): Double? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.maxOfOrNull(selector: (Boolean) -> Double): Double? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.maxOfOrNull(selector: (Char) -> Double): Double? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.maxOfOrNull(selector: (T) -> Float): Float? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.maxOfOrNull(selector: (Byte) -> Float): Float? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.maxOfOrNull(selector: (Short) -> Float): Float? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.maxOfOrNull(selector: (Int) -> Float): Float? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.maxOfOrNull(selector: (Long) -> Float): Float? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.maxOfOrNull(selector: (Float) -> Float): Float? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.maxOfOrNull(selector: (Double) -> Float): Float? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.maxOfOrNull(selector: (Boolean) -> Float): Float? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.maxOfOrNull(selector: (Char) -> Float): Float? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R : Comparable<R>> Array<out T>.maxOfOrNull(selector: (T) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> ByteArray.maxOfOrNull(selector: (Byte) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> ShortArray.maxOfOrNull(selector: (Short) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> IntArray.maxOfOrNull(selector: (Int) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> LongArray.maxOfOrNull(selector: (Long) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> FloatArray.maxOfOrNull(selector: (Float) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> DoubleArray.maxOfOrNull(selector: (Double) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> BooleanArray.maxOfOrNull(selector: (Boolean) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> CharArray.maxOfOrNull(selector: (Char) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> Array<out T>.maxOfWith(comparator: Comparator<in R>, selector: (T) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> ByteArray.maxOfWith(comparator: Comparator<in R>, selector: (Byte) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> ShortArray.maxOfWith(comparator: Comparator<in R>, selector: (Short) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> IntArray.maxOfWith(comparator: Comparator<in R>, selector: (Int) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> LongArray.maxOfWith(comparator: Comparator<in R>, selector: (Long) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> FloatArray.maxOfWith(comparator: Comparator<in R>, selector: (Float) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> DoubleArray.maxOfWith(comparator: Comparator<in R>, selector: (Double) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> BooleanArray.maxOfWith(comparator: Comparator<in R>, selector: (Boolean) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> CharArray.maxOfWith(comparator: Comparator<in R>, selector: (Char) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> Array<out T>.maxOfWithOrNull(comparator: Comparator<in R>, selector: (T) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> ByteArray.maxOfWithOrNull(comparator: Comparator<in R>, selector: (Byte) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> ShortArray.maxOfWithOrNull(comparator: Comparator<in R>, selector: (Short) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> IntArray.maxOfWithOrNull(comparator: Comparator<in R>, selector: (Int) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> LongArray.maxOfWithOrNull(comparator: Comparator<in R>, selector: (Long) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> FloatArray.maxOfWithOrNull(comparator: Comparator<in R>, selector: (Float) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> DoubleArray.maxOfWithOrNull(comparator: Comparator<in R>, selector: (Double) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> BooleanArray.maxOfWithOrNull(comparator: Comparator<in R>, selector: (Boolean) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> CharArray.maxOfWithOrNull(comparator: Comparator<in R>, selector: (Char) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.4\")\npublic fun Array<out Double>.maxOrNull(): Double? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        max = maxOf(max, e)\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.4\")\npublic fun Array<out Float>.maxOrNull(): Float? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        max = maxOf(max, e)\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun <T : Comparable<T>> Array<out T>.maxOrNull(): T? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun ByteArray.maxOrNull(): Byte? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun ShortArray.maxOrNull(): Short? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun IntArray.maxOrNull(): Int? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun LongArray.maxOrNull(): Long? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.4\")\npublic fun FloatArray.maxOrNull(): Float? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        max = maxOf(max, e)\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.4\")\npublic fun DoubleArray.maxOrNull(): Double? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        max = maxOf(max, e)\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun CharArray.maxOrNull(): Char? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n@Deprecated(\"Use maxWithOrNull instead.\", ReplaceWith(\"this.maxWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic fun <T> Array<out T>.maxWith(comparator: Comparator<in T>): T? {\n    return maxWithOrNull(comparator)\n}\n\n@Deprecated(\"Use maxWithOrNull instead.\", ReplaceWith(\"this.maxWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic fun ByteArray.maxWith(comparator: Comparator<in Byte>): Byte? {\n    return maxWithOrNull(comparator)\n}\n\n@Deprecated(\"Use maxWithOrNull instead.\", ReplaceWith(\"this.maxWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic fun ShortArray.maxWith(comparator: Comparator<in Short>): Short? {\n    return maxWithOrNull(comparator)\n}\n\n@Deprecated(\"Use maxWithOrNull instead.\", ReplaceWith(\"this.maxWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic fun IntArray.maxWith(comparator: Comparator<in Int>): Int? {\n    return maxWithOrNull(comparator)\n}\n\n@Deprecated(\"Use maxWithOrNull instead.\", ReplaceWith(\"this.maxWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic fun LongArray.maxWith(comparator: Comparator<in Long>): Long? {\n    return maxWithOrNull(comparator)\n}\n\n@Deprecated(\"Use maxWithOrNull instead.\", ReplaceWith(\"this.maxWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic fun FloatArray.maxWith(comparator: Comparator<in Float>): Float? {\n    return maxWithOrNull(comparator)\n}\n\n@Deprecated(\"Use maxWithOrNull instead.\", ReplaceWith(\"this.maxWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic fun DoubleArray.maxWith(comparator: Comparator<in Double>): Double? {\n    return maxWithOrNull(comparator)\n}\n\n@Deprecated(\"Use maxWithOrNull instead.\", ReplaceWith(\"this.maxWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic fun BooleanArray.maxWith(comparator: Comparator<in Boolean>): Boolean? {\n    return maxWithOrNull(comparator)\n}\n\n@Deprecated(\"Use maxWithOrNull instead.\", ReplaceWith(\"this.maxWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic fun CharArray.maxWith(comparator: Comparator<in Char>): Char? {\n    return maxWithOrNull(comparator)\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun <T> Array<out T>.maxWithOrNull(comparator: Comparator<in T>): T? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun ByteArray.maxWithOrNull(comparator: Comparator<in Byte>): Byte? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun ShortArray.maxWithOrNull(comparator: Comparator<in Short>): Short? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun IntArray.maxWithOrNull(comparator: Comparator<in Int>): Int? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun LongArray.maxWithOrNull(comparator: Comparator<in Long>): Long? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun FloatArray.maxWithOrNull(comparator: Comparator<in Float>): Float? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun DoubleArray.maxWithOrNull(comparator: Comparator<in Double>): Double? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun BooleanArray.maxWithOrNull(comparator: Comparator<in Boolean>): Boolean? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun CharArray.maxWithOrNull(comparator: Comparator<in Char>): Char? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n@Deprecated(\"Use minOrNull instead.\", ReplaceWith(\"this.minOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\n@SinceKotlin(\"1.1\")\npublic fun Array<out Double>.min(): Double? {\n    return minOrNull()\n}\n\n@Deprecated(\"Use minOrNull instead.\", ReplaceWith(\"this.minOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\n@SinceKotlin(\"1.1\")\npublic fun Array<out Float>.min(): Float? {\n    return minOrNull()\n}\n\n@Deprecated(\"Use minOrNull instead.\", ReplaceWith(\"this.minOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic fun <T : Comparable<T>> Array<out T>.min(): T? {\n    return minOrNull()\n}\n\n@Deprecated(\"Use minOrNull instead.\", ReplaceWith(\"this.minOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic fun ByteArray.min(): Byte? {\n    return minOrNull()\n}\n\n@Deprecated(\"Use minOrNull instead.\", ReplaceWith(\"this.minOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic fun ShortArray.min(): Short? {\n    return minOrNull()\n}\n\n@Deprecated(\"Use minOrNull instead.\", ReplaceWith(\"this.minOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic fun IntArray.min(): Int? {\n    return minOrNull()\n}\n\n@Deprecated(\"Use minOrNull instead.\", ReplaceWith(\"this.minOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic fun LongArray.min(): Long? {\n    return minOrNull()\n}\n\n@Deprecated(\"Use minOrNull instead.\", ReplaceWith(\"this.minOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic fun FloatArray.min(): Float? {\n    return minOrNull()\n}\n\n@Deprecated(\"Use minOrNull instead.\", ReplaceWith(\"this.minOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic fun DoubleArray.min(): Double? {\n    return minOrNull()\n}\n\n@Deprecated(\"Use minOrNull instead.\", ReplaceWith(\"this.minOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic fun CharArray.min(): Char? {\n    return minOrNull()\n}\n\n@Deprecated(\"Use minByOrNull instead.\", ReplaceWith(\"this.minByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic inline fun <T, R : Comparable<R>> Array<out T>.minBy(selector: (T) -> R): T? {\n    return minByOrNull(selector)\n}\n\n@Deprecated(\"Use minByOrNull instead.\", ReplaceWith(\"this.minByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic inline fun <R : Comparable<R>> ByteArray.minBy(selector: (Byte) -> R): Byte? {\n    return minByOrNull(selector)\n}\n\n@Deprecated(\"Use minByOrNull instead.\", ReplaceWith(\"this.minByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic inline fun <R : Comparable<R>> ShortArray.minBy(selector: (Short) -> R): Short? {\n    return minByOrNull(selector)\n}\n\n@Deprecated(\"Use minByOrNull instead.\", ReplaceWith(\"this.minByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic inline fun <R : Comparable<R>> IntArray.minBy(selector: (Int) -> R): Int? {\n    return minByOrNull(selector)\n}\n\n@Deprecated(\"Use minByOrNull instead.\", ReplaceWith(\"this.minByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic inline fun <R : Comparable<R>> LongArray.minBy(selector: (Long) -> R): Long? {\n    return minByOrNull(selector)\n}\n\n@Deprecated(\"Use minByOrNull instead.\", ReplaceWith(\"this.minByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic inline fun <R : Comparable<R>> FloatArray.minBy(selector: (Float) -> R): Float? {\n    return minByOrNull(selector)\n}\n\n@Deprecated(\"Use minByOrNull instead.\", ReplaceWith(\"this.minByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic inline fun <R : Comparable<R>> DoubleArray.minBy(selector: (Double) -> R): Double? {\n    return minByOrNull(selector)\n}\n\n@Deprecated(\"Use minByOrNull instead.\", ReplaceWith(\"this.minByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic inline fun <R : Comparable<R>> BooleanArray.minBy(selector: (Boolean) -> R): Boolean? {\n    return minByOrNull(selector)\n}\n\n@Deprecated(\"Use minByOrNull instead.\", ReplaceWith(\"this.minByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic inline fun <R : Comparable<R>> CharArray.minBy(selector: (Char) -> R): Char? {\n    return minByOrNull(selector)\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <T, R : Comparable<R>> Array<out T>.minByOrNull(selector: (T) -> R): T? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <R : Comparable<R>> ByteArray.minByOrNull(selector: (Byte) -> R): Byte? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <R : Comparable<R>> ShortArray.minByOrNull(selector: (Short) -> R): Short? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <R : Comparable<R>> IntArray.minByOrNull(selector: (Int) -> R): Int? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <R : Comparable<R>> LongArray.minByOrNull(selector: (Long) -> R): Long? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <R : Comparable<R>> FloatArray.minByOrNull(selector: (Float) -> R): Float? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <R : Comparable<R>> DoubleArray.minByOrNull(selector: (Double) -> R): Double? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <R : Comparable<R>> BooleanArray.minByOrNull(selector: (Boolean) -> R): Boolean? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <R : Comparable<R>> CharArray.minByOrNull(selector: (Char) -> R): Char? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.minOf(selector: (T) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.minOf(selector: (Byte) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.minOf(selector: (Short) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.minOf(selector: (Int) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.minOf(selector: (Long) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.minOf(selector: (Float) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.minOf(selector: (Double) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.minOf(selector: (Boolean) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.minOf(selector: (Char) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.minOf(selector: (T) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.minOf(selector: (Byte) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.minOf(selector: (Short) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.minOf(selector: (Int) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.minOf(selector: (Long) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.minOf(selector: (Float) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.minOf(selector: (Double) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.minOf(selector: (Boolean) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.minOf(selector: (Char) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R : Comparable<R>> Array<out T>.minOf(selector: (T) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> ByteArray.minOf(selector: (Byte) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> ShortArray.minOf(selector: (Short) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> IntArray.minOf(selector: (Int) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> LongArray.minOf(selector: (Long) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> FloatArray.minOf(selector: (Float) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> DoubleArray.minOf(selector: (Double) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> BooleanArray.minOf(selector: (Boolean) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> CharArray.minOf(selector: (Char) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.minOfOrNull(selector: (T) -> Double): Double? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.minOfOrNull(selector: (Byte) -> Double): Double? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.minOfOrNull(selector: (Short) -> Double): Double? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.minOfOrNull(selector: (Int) -> Double): Double? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.minOfOrNull(selector: (Long) -> Double): Double? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.minOfOrNull(selector: (Float) -> Double): Double? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.minOfOrNull(selector: (Double) -> Double): Double? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.minOfOrNull(selector: (Boolean) -> Double): Double? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.minOfOrNull(selector: (Char) -> Double): Double? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.minOfOrNull(selector: (T) -> Float): Float? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.minOfOrNull(selector: (Byte) -> Float): Float? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.minOfOrNull(selector: (Short) -> Float): Float? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.minOfOrNull(selector: (Int) -> Float): Float? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.minOfOrNull(selector: (Long) -> Float): Float? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.minOfOrNull(selector: (Float) -> Float): Float? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.minOfOrNull(selector: (Double) -> Float): Float? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.minOfOrNull(selector: (Boolean) -> Float): Float? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.minOfOrNull(selector: (Char) -> Float): Float? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R : Comparable<R>> Array<out T>.minOfOrNull(selector: (T) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> ByteArray.minOfOrNull(selector: (Byte) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> ShortArray.minOfOrNull(selector: (Short) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> IntArray.minOfOrNull(selector: (Int) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> LongArray.minOfOrNull(selector: (Long) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> FloatArray.minOfOrNull(selector: (Float) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> DoubleArray.minOfOrNull(selector: (Double) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> BooleanArray.minOfOrNull(selector: (Boolean) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> CharArray.minOfOrNull(selector: (Char) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> Array<out T>.minOfWith(comparator: Comparator<in R>, selector: (T) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> ByteArray.minOfWith(comparator: Comparator<in R>, selector: (Byte) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> ShortArray.minOfWith(comparator: Comparator<in R>, selector: (Short) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> IntArray.minOfWith(comparator: Comparator<in R>, selector: (Int) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> LongArray.minOfWith(comparator: Comparator<in R>, selector: (Long) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> FloatArray.minOfWith(comparator: Comparator<in R>, selector: (Float) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> DoubleArray.minOfWith(comparator: Comparator<in R>, selector: (Double) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> BooleanArray.minOfWith(comparator: Comparator<in R>, selector: (Boolean) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> CharArray.minOfWith(comparator: Comparator<in R>, selector: (Char) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> Array<out T>.minOfWithOrNull(comparator: Comparator<in R>, selector: (T) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> ByteArray.minOfWithOrNull(comparator: Comparator<in R>, selector: (Byte) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> ShortArray.minOfWithOrNull(comparator: Comparator<in R>, selector: (Short) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> IntArray.minOfWithOrNull(comparator: Comparator<in R>, selector: (Int) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> LongArray.minOfWithOrNull(comparator: Comparator<in R>, selector: (Long) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> FloatArray.minOfWithOrNull(comparator: Comparator<in R>, selector: (Float) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> DoubleArray.minOfWithOrNull(comparator: Comparator<in R>, selector: (Double) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> BooleanArray.minOfWithOrNull(comparator: Comparator<in R>, selector: (Boolean) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> CharArray.minOfWithOrNull(comparator: Comparator<in R>, selector: (Char) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.4\")\npublic fun Array<out Double>.minOrNull(): Double? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        min = minOf(min, e)\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.4\")\npublic fun Array<out Float>.minOrNull(): Float? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        min = minOf(min, e)\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun <T : Comparable<T>> Array<out T>.minOrNull(): T? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun ByteArray.minOrNull(): Byte? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun ShortArray.minOrNull(): Short? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun IntArray.minOrNull(): Int? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun LongArray.minOrNull(): Long? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.4\")\npublic fun FloatArray.minOrNull(): Float? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        min = minOf(min, e)\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.4\")\npublic fun DoubleArray.minOrNull(): Double? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        min = minOf(min, e)\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun CharArray.minOrNull(): Char? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n@Deprecated(\"Use minWithOrNull instead.\", ReplaceWith(\"this.minWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic fun <T> Array<out T>.minWith(comparator: Comparator<in T>): T? {\n    return minWithOrNull(comparator)\n}\n\n@Deprecated(\"Use minWithOrNull instead.\", ReplaceWith(\"this.minWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic fun ByteArray.minWith(comparator: Comparator<in Byte>): Byte? {\n    return minWithOrNull(comparator)\n}\n\n@Deprecated(\"Use minWithOrNull instead.\", ReplaceWith(\"this.minWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic fun ShortArray.minWith(comparator: Comparator<in Short>): Short? {\n    return minWithOrNull(comparator)\n}\n\n@Deprecated(\"Use minWithOrNull instead.\", ReplaceWith(\"this.minWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic fun IntArray.minWith(comparator: Comparator<in Int>): Int? {\n    return minWithOrNull(comparator)\n}\n\n@Deprecated(\"Use minWithOrNull instead.\", ReplaceWith(\"this.minWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic fun LongArray.minWith(comparator: Comparator<in Long>): Long? {\n    return minWithOrNull(comparator)\n}\n\n@Deprecated(\"Use minWithOrNull instead.\", ReplaceWith(\"this.minWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic fun FloatArray.minWith(comparator: Comparator<in Float>): Float? {\n    return minWithOrNull(comparator)\n}\n\n@Deprecated(\"Use minWithOrNull instead.\", ReplaceWith(\"this.minWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic fun DoubleArray.minWith(comparator: Comparator<in Double>): Double? {\n    return minWithOrNull(comparator)\n}\n\n@Deprecated(\"Use minWithOrNull instead.\", ReplaceWith(\"this.minWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic fun BooleanArray.minWith(comparator: Comparator<in Boolean>): Boolean? {\n    return minWithOrNull(comparator)\n}\n\n@Deprecated(\"Use minWithOrNull instead.\", ReplaceWith(\"this.minWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic fun CharArray.minWith(comparator: Comparator<in Char>): Char? {\n    return minWithOrNull(comparator)\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun <T> Array<out T>.minWithOrNull(comparator: Comparator<in T>): T? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun ByteArray.minWithOrNull(comparator: Comparator<in Byte>): Byte? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun ShortArray.minWithOrNull(comparator: Comparator<in Short>): Short? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun IntArray.minWithOrNull(comparator: Comparator<in Int>): Int? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun LongArray.minWithOrNull(comparator: Comparator<in Long>): Long? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun FloatArray.minWithOrNull(comparator: Comparator<in Float>): Float? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun DoubleArray.minWithOrNull(comparator: Comparator<in Double>): Double? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun BooleanArray.minWithOrNull(comparator: Comparator<in Boolean>): Boolean? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun CharArray.minWithOrNull(comparator: Comparator<in Char>): Char? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun <T> Array<out T>.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun ByteArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun ShortArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun IntArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun LongArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun FloatArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun DoubleArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun BooleanArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun CharArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun <T> Array<out T>.none(predicate: (T) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun ByteArray.none(predicate: (Byte) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun ShortArray.none(predicate: (Short) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun IntArray.none(predicate: (Int) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun LongArray.none(predicate: (Long) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun FloatArray.none(predicate: (Float) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun DoubleArray.none(predicate: (Double) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun BooleanArray.none(predicate: (Boolean) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun CharArray.none(predicate: (Char) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Performs the given [action] on each element and returns the array itself afterwards.\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.onEach(action: (T) -> Unit): Array<out T> {\n    return apply { for (element in this) action(element) }\n}\n\n/**\n * Performs the given [action] on each element and returns the array itself afterwards.\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.onEach(action: (Byte) -> Unit): ByteArray {\n    return apply { for (element in this) action(element) }\n}\n\n/**\n * Performs the given [action] on each element and returns the array itself afterwards.\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.onEach(action: (Short) -> Unit): ShortArray {\n    return apply { for (element in this) action(element) }\n}\n\n/**\n * Performs the given [action] on each element and returns the array itself afterwards.\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.onEach(action: (Int) -> Unit): IntArray {\n    return apply { for (element in this) action(element) }\n}\n\n/**\n * Performs the given [action] on each element and returns the array itself afterwards.\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.onEach(action: (Long) -> Unit): LongArray {\n    return apply { for (element in this) action(element) }\n}\n\n/**\n * Performs the given [action] on each element and returns the array itself afterwards.\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.onEach(action: (Float) -> Unit): FloatArray {\n    return apply { for (element in this) action(element) }\n}\n\n/**\n * Performs the given [action] on each element and returns the array itself afterwards.\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.onEach(action: (Double) -> Unit): DoubleArray {\n    return apply { for (element in this) action(element) }\n}\n\n/**\n * Performs the given [action] on each element and returns the array itself afterwards.\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.onEach(action: (Boolean) -> Unit): BooleanArray {\n    return apply { for (element in this) action(element) }\n}\n\n/**\n * Performs the given [action] on each element and returns the array itself afterwards.\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.onEach(action: (Char) -> Unit): CharArray {\n    return apply { for (element in this) action(element) }\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element,\n * and returns the array itself afterwards.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.onEachIndexed(action: (index: Int, T) -> Unit): Array<out T> {\n    return apply { forEachIndexed(action) }\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element,\n * and returns the array itself afterwards.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.onEachIndexed(action: (index: Int, Byte) -> Unit): ByteArray {\n    return apply { forEachIndexed(action) }\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element,\n * and returns the array itself afterwards.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.onEachIndexed(action: (index: Int, Short) -> Unit): ShortArray {\n    return apply { forEachIndexed(action) }\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element,\n * and returns the array itself afterwards.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.onEachIndexed(action: (index: Int, Int) -> Unit): IntArray {\n    return apply { forEachIndexed(action) }\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element,\n * and returns the array itself afterwards.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.onEachIndexed(action: (index: Int, Long) -> Unit): LongArray {\n    return apply { forEachIndexed(action) }\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element,\n * and returns the array itself afterwards.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.onEachIndexed(action: (index: Int, Float) -> Unit): FloatArray {\n    return apply { forEachIndexed(action) }\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element,\n * and returns the array itself afterwards.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.onEachIndexed(action: (index: Int, Double) -> Unit): DoubleArray {\n    return apply { forEachIndexed(action) }\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element,\n * and returns the array itself afterwards.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.onEachIndexed(action: (index: Int, Boolean) -> Unit): BooleanArray {\n    return apply { forEachIndexed(action) }\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element,\n * and returns the array itself afterwards.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.onEachIndexed(action: (index: Int, Char) -> Unit): CharArray {\n    return apply { forEachIndexed(action) }\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun <S, T : S> Array<out T>.reduce(operation: (acc: S, T) -> S): S {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator: S = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun ByteArray.reduce(operation: (acc: Byte, Byte) -> Byte): Byte {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun ShortArray.reduce(operation: (acc: Short, Short) -> Short): Short {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun IntArray.reduce(operation: (acc: Int, Int) -> Int): Int {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun LongArray.reduce(operation: (acc: Long, Long) -> Long): Long {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun FloatArray.reduce(operation: (acc: Float, Float) -> Float): Float {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun DoubleArray.reduce(operation: (acc: Double, Double) -> Double): Double {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun BooleanArray.reduce(operation: (acc: Boolean, Boolean) -> Boolean): Boolean {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun CharArray.reduce(operation: (acc: Char, Char) -> Char): Char {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun <S, T : S> Array<out T>.reduceIndexed(operation: (index: Int, acc: S, T) -> S): S {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator: S = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun ByteArray.reduceIndexed(operation: (index: Int, acc: Byte, Byte) -> Byte): Byte {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun ShortArray.reduceIndexed(operation: (index: Int, acc: Short, Short) -> Short): Short {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun IntArray.reduceIndexed(operation: (index: Int, acc: Int, Int) -> Int): Int {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun LongArray.reduceIndexed(operation: (index: Int, acc: Long, Long) -> Long): Long {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun FloatArray.reduceIndexed(operation: (index: Int, acc: Float, Float) -> Float): Float {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun DoubleArray.reduceIndexed(operation: (index: Int, acc: Double, Double) -> Double): Double {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun BooleanArray.reduceIndexed(operation: (index: Int, acc: Boolean, Boolean) -> Boolean): Boolean {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun CharArray.reduceIndexed(operation: (index: Int, acc: Char, Char) -> Char): Char {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <S, T : S> Array<out T>.reduceIndexedOrNull(operation: (index: Int, acc: S, T) -> S): S? {\n    if (isEmpty())\n        return null\n    var accumulator: S = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun ByteArray.reduceIndexedOrNull(operation: (index: Int, acc: Byte, Byte) -> Byte): Byte? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun ShortArray.reduceIndexedOrNull(operation: (index: Int, acc: Short, Short) -> Short): Short? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun IntArray.reduceIndexedOrNull(operation: (index: Int, acc: Int, Int) -> Int): Int? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun LongArray.reduceIndexedOrNull(operation: (index: Int, acc: Long, Long) -> Long): Long? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun FloatArray.reduceIndexedOrNull(operation: (index: Int, acc: Float, Float) -> Float): Float? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun DoubleArray.reduceIndexedOrNull(operation: (index: Int, acc: Double, Double) -> Double): Double? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun BooleanArray.reduceIndexedOrNull(operation: (index: Int, acc: Boolean, Boolean) -> Boolean): Boolean? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun CharArray.reduceIndexedOrNull(operation: (index: Int, acc: Char, Char) -> Char): Char? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun <S, T : S> Array<out T>.reduceOrNull(operation: (acc: S, T) -> S): S? {\n    if (isEmpty())\n        return null\n    var accumulator: S = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun ByteArray.reduceOrNull(operation: (acc: Byte, Byte) -> Byte): Byte? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun ShortArray.reduceOrNull(operation: (acc: Short, Short) -> Short): Short? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun IntArray.reduceOrNull(operation: (acc: Int, Int) -> Int): Int? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun LongArray.reduceOrNull(operation: (acc: Long, Long) -> Long): Long? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun FloatArray.reduceOrNull(operation: (acc: Float, Float) -> Float): Float? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun DoubleArray.reduceOrNull(operation: (acc: Double, Double) -> Double): Double? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun BooleanArray.reduceOrNull(operation: (acc: Boolean, Boolean) -> Boolean): Boolean? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun CharArray.reduceOrNull(operation: (acc: Char, Char) -> Char): Char? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun <S, T : S> Array<out T>.reduceRight(operation: (T, acc: S) -> S): S {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator: S = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun ByteArray.reduceRight(operation: (Byte, acc: Byte) -> Byte): Byte {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun ShortArray.reduceRight(operation: (Short, acc: Short) -> Short): Short {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun IntArray.reduceRight(operation: (Int, acc: Int) -> Int): Int {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun LongArray.reduceRight(operation: (Long, acc: Long) -> Long): Long {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun FloatArray.reduceRight(operation: (Float, acc: Float) -> Float): Float {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun DoubleArray.reduceRight(operation: (Double, acc: Double) -> Double): Double {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun BooleanArray.reduceRight(operation: (Boolean, acc: Boolean) -> Boolean): Boolean {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun CharArray.reduceRight(operation: (Char, acc: Char) -> Char): Char {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun <S, T : S> Array<out T>.reduceRightIndexed(operation: (index: Int, T, acc: S) -> S): S {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator: S = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun ByteArray.reduceRightIndexed(operation: (index: Int, Byte, acc: Byte) -> Byte): Byte {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun ShortArray.reduceRightIndexed(operation: (index: Int, Short, acc: Short) -> Short): Short {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun IntArray.reduceRightIndexed(operation: (index: Int, Int, acc: Int) -> Int): Int {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun LongArray.reduceRightIndexed(operation: (index: Int, Long, acc: Long) -> Long): Long {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun FloatArray.reduceRightIndexed(operation: (index: Int, Float, acc: Float) -> Float): Float {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun DoubleArray.reduceRightIndexed(operation: (index: Int, Double, acc: Double) -> Double): Double {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun BooleanArray.reduceRightIndexed(operation: (index: Int, Boolean, acc: Boolean) -> Boolean): Boolean {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun CharArray.reduceRightIndexed(operation: (index: Int, Char, acc: Char) -> Char): Char {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <S, T : S> Array<out T>.reduceRightIndexedOrNull(operation: (index: Int, T, acc: S) -> S): S? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator: S = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun ByteArray.reduceRightIndexedOrNull(operation: (index: Int, Byte, acc: Byte) -> Byte): Byte? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun ShortArray.reduceRightIndexedOrNull(operation: (index: Int, Short, acc: Short) -> Short): Short? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun IntArray.reduceRightIndexedOrNull(operation: (index: Int, Int, acc: Int) -> Int): Int? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun LongArray.reduceRightIndexedOrNull(operation: (index: Int, Long, acc: Long) -> Long): Long? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun FloatArray.reduceRightIndexedOrNull(operation: (index: Int, Float, acc: Float) -> Float): Float? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun DoubleArray.reduceRightIndexedOrNull(operation: (index: Int, Double, acc: Double) -> Double): Double? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun BooleanArray.reduceRightIndexedOrNull(operation: (index: Int, Boolean, acc: Boolean) -> Boolean): Boolean? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun CharArray.reduceRightIndexedOrNull(operation: (index: Int, Char, acc: Char) -> Char): Char? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun <S, T : S> Array<out T>.reduceRightOrNull(operation: (T, acc: S) -> S): S? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator: S = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun ByteArray.reduceRightOrNull(operation: (Byte, acc: Byte) -> Byte): Byte? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun ShortArray.reduceRightOrNull(operation: (Short, acc: Short) -> Short): Short? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun IntArray.reduceRightOrNull(operation: (Int, acc: Int) -> Int): Int? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun LongArray.reduceRightOrNull(operation: (Long, acc: Long) -> Long): Long? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun FloatArray.reduceRightOrNull(operation: (Float, acc: Float) -> Float): Float? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun DoubleArray.reduceRightOrNull(operation: (Double, acc: Double) -> Double): Double? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun BooleanArray.reduceRightOrNull(operation: (Boolean, acc: Boolean) -> Boolean): Boolean? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun CharArray.reduceRightOrNull(operation: (Char, acc: Char) -> Char): Char? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <T, R> Array<out T>.runningFold(initial: R, operation: (acc: R, T) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> ByteArray.runningFold(initial: R, operation: (acc: R, Byte) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> ShortArray.runningFold(initial: R, operation: (acc: R, Short) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> IntArray.runningFold(initial: R, operation: (acc: R, Int) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> LongArray.runningFold(initial: R, operation: (acc: R, Long) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> FloatArray.runningFold(initial: R, operation: (acc: R, Float) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> DoubleArray.runningFold(initial: R, operation: (acc: R, Double) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> BooleanArray.runningFold(initial: R, operation: (acc: R, Boolean) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> CharArray.runningFold(initial: R, operation: (acc: R, Char) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <T, R> Array<out T>.runningFoldIndexed(initial: R, operation: (index: Int, acc: R, T) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> ByteArray.runningFoldIndexed(initial: R, operation: (index: Int, acc: R, Byte) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> ShortArray.runningFoldIndexed(initial: R, operation: (index: Int, acc: R, Short) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> IntArray.runningFoldIndexed(initial: R, operation: (index: Int, acc: R, Int) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> LongArray.runningFoldIndexed(initial: R, operation: (index: Int, acc: R, Long) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> FloatArray.runningFoldIndexed(initial: R, operation: (index: Int, acc: R, Float) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> DoubleArray.runningFoldIndexed(initial: R, operation: (index: Int, acc: R, Double) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> BooleanArray.runningFoldIndexed(initial: R, operation: (index: Int, acc: R, Boolean) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> CharArray.runningFoldIndexed(initial: R, operation: (index: Int, acc: R, Char) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this array.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and the element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun <S, T : S> Array<out T>.runningReduce(operation: (acc: S, T) -> S): List<S> {\n    if (isEmpty()) return emptyList()\n    var accumulator: S = this[0]\n    val result = ArrayList<S>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.runningReduce(operation: (acc: Byte, Byte) -> Byte): List<Byte> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Byte>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.runningReduce(operation: (acc: Short, Short) -> Short): List<Short> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Short>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.runningReduce(operation: (acc: Int, Int) -> Int): List<Int> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Int>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.runningReduce(operation: (acc: Long, Long) -> Long): List<Long> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Long>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.runningReduce(operation: (acc: Float, Float) -> Float): List<Float> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Float>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.runningReduce(operation: (acc: Double, Double) -> Double): List<Double> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Double>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.runningReduce(operation: (acc: Boolean, Boolean) -> Boolean): List<Boolean> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Boolean>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.runningReduce(operation: (acc: Char, Char) -> Char): List<Char> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Char>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with the first element of this array.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <S, T : S> Array<out T>.runningReduceIndexed(operation: (index: Int, acc: S, T) -> S): List<S> {\n    if (isEmpty()) return emptyList()\n    var accumulator: S = this[0]\n    val result = ArrayList<S>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.runningReduceIndexed(operation: (index: Int, acc: Byte, Byte) -> Byte): List<Byte> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Byte>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.runningReduceIndexed(operation: (index: Int, acc: Short, Short) -> Short): List<Short> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Short>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.runningReduceIndexed(operation: (index: Int, acc: Int, Int) -> Int): List<Int> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Int>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.runningReduceIndexed(operation: (index: Int, acc: Long, Long) -> Long): List<Long> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Long>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.runningReduceIndexed(operation: (index: Int, acc: Float, Float) -> Float): List<Float> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Float>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.runningReduceIndexed(operation: (index: Int, acc: Double, Double) -> Double): List<Double> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Double>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.runningReduceIndexed(operation: (index: Int, acc: Boolean, Boolean) -> Boolean): List<Boolean> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Boolean>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.runningReduceIndexed(operation: (index: Int, acc: Char, Char) -> Char): List<Char> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Char>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun <T, R> Array<out T>.scan(initial: R, operation: (acc: R, T) -> R): List<R> {\n    return runningFold(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <R> ByteArray.scan(initial: R, operation: (acc: R, Byte) -> R): List<R> {\n    return runningFold(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <R> ShortArray.scan(initial: R, operation: (acc: R, Short) -> R): List<R> {\n    return runningFold(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <R> IntArray.scan(initial: R, operation: (acc: R, Int) -> R): List<R> {\n    return runningFold(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <R> LongArray.scan(initial: R, operation: (acc: R, Long) -> R): List<R> {\n    return runningFold(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <R> FloatArray.scan(initial: R, operation: (acc: R, Float) -> R): List<R> {\n    return runningFold(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <R> DoubleArray.scan(initial: R, operation: (acc: R, Double) -> R): List<R> {\n    return runningFold(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <R> BooleanArray.scan(initial: R, operation: (acc: R, Boolean) -> R): List<R> {\n    return runningFold(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <R> CharArray.scan(initial: R, operation: (acc: R, Char) -> R): List<R> {\n    return runningFold(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun <T, R> Array<out T>.scanIndexed(initial: R, operation: (index: Int, acc: R, T) -> R): List<R> {\n    return runningFoldIndexed(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <R> ByteArray.scanIndexed(initial: R, operation: (index: Int, acc: R, Byte) -> R): List<R> {\n    return runningFoldIndexed(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <R> ShortArray.scanIndexed(initial: R, operation: (index: Int, acc: R, Short) -> R): List<R> {\n    return runningFoldIndexed(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <R> IntArray.scanIndexed(initial: R, operation: (index: Int, acc: R, Int) -> R): List<R> {\n    return runningFoldIndexed(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <R> LongArray.scanIndexed(initial: R, operation: (index: Int, acc: R, Long) -> R): List<R> {\n    return runningFoldIndexed(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <R> FloatArray.scanIndexed(initial: R, operation: (index: Int, acc: R, Float) -> R): List<R> {\n    return runningFoldIndexed(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <R> DoubleArray.scanIndexed(initial: R, operation: (index: Int, acc: R, Double) -> R): List<R> {\n    return runningFoldIndexed(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <R> BooleanArray.scanIndexed(initial: R, operation: (index: Int, acc: R, Boolean) -> R): List<R> {\n    return runningFoldIndexed(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <R> CharArray.scanIndexed(initial: R, operation: (index: Int, acc: R, Char) -> R): List<R> {\n    return runningFoldIndexed(initial, operation)\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@Deprecated(\"Use sumOf instead.\", ReplaceWith(\"this.sumOf(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\npublic inline fun <T> Array<out T>.sumBy(selector: (T) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@Deprecated(\"Use sumOf instead.\", ReplaceWith(\"this.sumOf(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\npublic inline fun ByteArray.sumBy(selector: (Byte) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@Deprecated(\"Use sumOf instead.\", ReplaceWith(\"this.sumOf(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\npublic inline fun ShortArray.sumBy(selector: (Short) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@Deprecated(\"Use sumOf instead.\", ReplaceWith(\"this.sumOf(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\npublic inline fun IntArray.sumBy(selector: (Int) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@Deprecated(\"Use sumOf instead.\", ReplaceWith(\"this.sumOf(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\npublic inline fun LongArray.sumBy(selector: (Long) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@Deprecated(\"Use sumOf instead.\", ReplaceWith(\"this.sumOf(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\npublic inline fun FloatArray.sumBy(selector: (Float) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@Deprecated(\"Use sumOf instead.\", ReplaceWith(\"this.sumOf(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\npublic inline fun DoubleArray.sumBy(selector: (Double) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@Deprecated(\"Use sumOf instead.\", ReplaceWith(\"this.sumOf(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\npublic inline fun BooleanArray.sumBy(selector: (Boolean) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@Deprecated(\"Use sumOf instead.\", ReplaceWith(\"this.sumOf(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\npublic inline fun CharArray.sumBy(selector: (Char) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@Deprecated(\"Use sumOf instead.\", ReplaceWith(\"this.sumOf(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\npublic inline fun <T> Array<out T>.sumByDouble(selector: (T) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@Deprecated(\"Use sumOf instead.\", ReplaceWith(\"this.sumOf(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\npublic inline fun ByteArray.sumByDouble(selector: (Byte) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@Deprecated(\"Use sumOf instead.\", ReplaceWith(\"this.sumOf(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\npublic inline fun ShortArray.sumByDouble(selector: (Short) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@Deprecated(\"Use sumOf instead.\", ReplaceWith(\"this.sumOf(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\npublic inline fun IntArray.sumByDouble(selector: (Int) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@Deprecated(\"Use sumOf instead.\", ReplaceWith(\"this.sumOf(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\npublic inline fun LongArray.sumByDouble(selector: (Long) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@Deprecated(\"Use sumOf instead.\", ReplaceWith(\"this.sumOf(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\npublic inline fun FloatArray.sumByDouble(selector: (Float) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@Deprecated(\"Use sumOf instead.\", ReplaceWith(\"this.sumOf(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\npublic inline fun DoubleArray.sumByDouble(selector: (Double) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@Deprecated(\"Use sumOf instead.\", ReplaceWith(\"this.sumOf(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\npublic inline fun BooleanArray.sumByDouble(selector: (Boolean) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@Deprecated(\"Use sumOf instead.\", ReplaceWith(\"this.sumOf(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\npublic inline fun CharArray.sumByDouble(selector: (Char) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfDouble\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.sumOf(selector: (T) -> Double): Double {\n    var sum: Double = 0.toDouble()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfDouble\")\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.sumOf(selector: (Byte) -> Double): Double {\n    var sum: Double = 0.toDouble()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfDouble\")\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.sumOf(selector: (Short) -> Double): Double {\n    var sum: Double = 0.toDouble()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfDouble\")\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.sumOf(selector: (Int) -> Double): Double {\n    var sum: Double = 0.toDouble()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfDouble\")\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.sumOf(selector: (Long) -> Double): Double {\n    var sum: Double = 0.toDouble()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfDouble\")\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.sumOf(selector: (Float) -> Double): Double {\n    var sum: Double = 0.toDouble()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfDouble\")\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.sumOf(selector: (Double) -> Double): Double {\n    var sum: Double = 0.toDouble()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfDouble\")\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.sumOf(selector: (Boolean) -> Double): Double {\n    var sum: Double = 0.toDouble()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfDouble\")\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.sumOf(selector: (Char) -> Double): Double {\n    var sum: Double = 0.toDouble()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfInt\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.sumOf(selector: (T) -> Int): Int {\n    var sum: Int = 0.toInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfInt\")\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.sumOf(selector: (Byte) -> Int): Int {\n    var sum: Int = 0.toInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfInt\")\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.sumOf(selector: (Short) -> Int): Int {\n    var sum: Int = 0.toInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfInt\")\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.sumOf(selector: (Int) -> Int): Int {\n    var sum: Int = 0.toInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfInt\")\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.sumOf(selector: (Long) -> Int): Int {\n    var sum: Int = 0.toInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfInt\")\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.sumOf(selector: (Float) -> Int): Int {\n    var sum: Int = 0.toInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfInt\")\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.sumOf(selector: (Double) -> Int): Int {\n    var sum: Int = 0.toInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfInt\")\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.sumOf(selector: (Boolean) -> Int): Int {\n    var sum: Int = 0.toInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfInt\")\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.sumOf(selector: (Char) -> Int): Int {\n    var sum: Int = 0.toInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfLong\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.sumOf(selector: (T) -> Long): Long {\n    var sum: Long = 0.toLong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfLong\")\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.sumOf(selector: (Byte) -> Long): Long {\n    var sum: Long = 0.toLong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfLong\")\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.sumOf(selector: (Short) -> Long): Long {\n    var sum: Long = 0.toLong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfLong\")\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.sumOf(selector: (Int) -> Long): Long {\n    var sum: Long = 0.toLong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfLong\")\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.sumOf(selector: (Long) -> Long): Long {\n    var sum: Long = 0.toLong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfLong\")\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.sumOf(selector: (Float) -> Long): Long {\n    var sum: Long = 0.toLong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfLong\")\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.sumOf(selector: (Double) -> Long): Long {\n    var sum: Long = 0.toLong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfLong\")\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.sumOf(selector: (Boolean) -> Long): Long {\n    var sum: Long = 0.toLong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfLong\")\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.sumOf(selector: (Char) -> Long): Long {\n    var sum: Long = 0.toLong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.5\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfUInt\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.sumOf(selector: (T) -> UInt): UInt {\n    var sum: UInt = 0.toUInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.5\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfUInt\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.sumOf(selector: (Byte) -> UInt): UInt {\n    var sum: UInt = 0.toUInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.5\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfUInt\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.sumOf(selector: (Short) -> UInt): UInt {\n    var sum: UInt = 0.toUInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.5\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfUInt\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.sumOf(selector: (Int) -> UInt): UInt {\n    var sum: UInt = 0.toUInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.5\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfUInt\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.sumOf(selector: (Long) -> UInt): UInt {\n    var sum: UInt = 0.toUInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.5\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfUInt\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.sumOf(selector: (Float) -> UInt): UInt {\n    var sum: UInt = 0.toUInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.5\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfUInt\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.sumOf(selector: (Double) -> UInt): UInt {\n    var sum: UInt = 0.toUInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.5\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfUInt\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.sumOf(selector: (Boolean) -> UInt): UInt {\n    var sum: UInt = 0.toUInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.5\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfUInt\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.sumOf(selector: (Char) -> UInt): UInt {\n    var sum: UInt = 0.toUInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.5\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfULong\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.sumOf(selector: (T) -> ULong): ULong {\n    var sum: ULong = 0.toULong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.5\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfULong\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.sumOf(selector: (Byte) -> ULong): ULong {\n    var sum: ULong = 0.toULong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.5\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfULong\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.sumOf(selector: (Short) -> ULong): ULong {\n    var sum: ULong = 0.toULong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.5\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfULong\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.sumOf(selector: (Int) -> ULong): ULong {\n    var sum: ULong = 0.toULong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.5\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfULong\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.sumOf(selector: (Long) -> ULong): ULong {\n    var sum: ULong = 0.toULong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.5\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfULong\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.sumOf(selector: (Float) -> ULong): ULong {\n    var sum: ULong = 0.toULong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.5\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfULong\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.sumOf(selector: (Double) -> ULong): ULong {\n    var sum: ULong = 0.toULong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.5\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfULong\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.sumOf(selector: (Boolean) -> ULong): ULong {\n    var sum: ULong = 0.toULong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.5\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfULong\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.sumOf(selector: (Char) -> ULong): ULong {\n    var sum: ULong = 0.toULong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns an original collection containing all the non-`null` elements, throwing an [IllegalArgumentException] if there are any `null` elements.\n */\npublic fun <T : Any> Array<T?>.requireNoNulls(): Array<T> {\n    for (element in this) {\n        if (element == null) {\n            throw IllegalArgumentException(\"null element found in $this.\")\n        }\n    }\n    @Suppress(\"UNCHECKED_CAST\")\n    return this as Array<T>\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n * \n * @sample samples.collections.Arrays.Transformations.partitionArrayOfPrimitives\n */\npublic inline fun <T> Array<out T>.partition(predicate: (T) -> Boolean): Pair<List<T>, List<T>> {\n    val first = ArrayList<T>()\n    val second = ArrayList<T>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n * \n * @sample samples.collections.Arrays.Transformations.partitionArrayOfPrimitives\n */\npublic inline fun ByteArray.partition(predicate: (Byte) -> Boolean): Pair<List<Byte>, List<Byte>> {\n    val first = ArrayList<Byte>()\n    val second = ArrayList<Byte>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n * \n * @sample samples.collections.Arrays.Transformations.partitionArrayOfPrimitives\n */\npublic inline fun ShortArray.partition(predicate: (Short) -> Boolean): Pair<List<Short>, List<Short>> {\n    val first = ArrayList<Short>()\n    val second = ArrayList<Short>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n * \n * @sample samples.collections.Arrays.Transformations.partitionArrayOfPrimitives\n */\npublic inline fun IntArray.partition(predicate: (Int) -> Boolean): Pair<List<Int>, List<Int>> {\n    val first = ArrayList<Int>()\n    val second = ArrayList<Int>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n * \n * @sample samples.collections.Arrays.Transformations.partitionArrayOfPrimitives\n */\npublic inline fun LongArray.partition(predicate: (Long) -> Boolean): Pair<List<Long>, List<Long>> {\n    val first = ArrayList<Long>()\n    val second = ArrayList<Long>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n * \n * @sample samples.collections.Arrays.Transformations.partitionArrayOfPrimitives\n */\npublic inline fun FloatArray.partition(predicate: (Float) -> Boolean): Pair<List<Float>, List<Float>> {\n    val first = ArrayList<Float>()\n    val second = ArrayList<Float>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n * \n * @sample samples.collections.Arrays.Transformations.partitionArrayOfPrimitives\n */\npublic inline fun DoubleArray.partition(predicate: (Double) -> Boolean): Pair<List<Double>, List<Double>> {\n    val first = ArrayList<Double>()\n    val second = ArrayList<Double>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n * \n * @sample samples.collections.Arrays.Transformations.partitionArrayOfPrimitives\n */\npublic inline fun BooleanArray.partition(predicate: (Boolean) -> Boolean): Pair<List<Boolean>, List<Boolean>> {\n    val first = ArrayList<Boolean>()\n    val second = ArrayList<Boolean>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n * \n * @sample samples.collections.Arrays.Transformations.partitionArrayOfPrimitives\n */\npublic inline fun CharArray.partition(predicate: (Char) -> Boolean): Pair<List<Char>, List<Char>> {\n    val first = ArrayList<Char>()\n    val second = ArrayList<Char>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <T, R> Array<out T>.zip(other: Array<out R>): List<Pair<T, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> ByteArray.zip(other: Array<out R>): List<Pair<Byte, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> ShortArray.zip(other: Array<out R>): List<Pair<Short, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> IntArray.zip(other: Array<out R>): List<Pair<Int, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> LongArray.zip(other: Array<out R>): List<Pair<Long, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> FloatArray.zip(other: Array<out R>): List<Pair<Float, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> DoubleArray.zip(other: Array<out R>): List<Pair<Double, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> BooleanArray.zip(other: Array<out R>): List<Pair<Boolean, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> CharArray.zip(other: Array<out R>): List<Pair<Char, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <T, R, V> Array<out T>.zip(other: Array<out R>, transform: (a: T, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> ByteArray.zip(other: Array<out R>, transform: (a: Byte, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> ShortArray.zip(other: Array<out R>, transform: (a: Short, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> IntArray.zip(other: Array<out R>, transform: (a: Int, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> LongArray.zip(other: Array<out R>, transform: (a: Long, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> FloatArray.zip(other: Array<out R>, transform: (a: Float, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> DoubleArray.zip(other: Array<out R>, transform: (a: Double, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> BooleanArray.zip(other: Array<out R>, transform: (a: Boolean, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> CharArray.zip(other: Array<out R>, transform: (a: Char, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <T, R> Array<out T>.zip(other: Iterable<R>): List<Pair<T, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> ByteArray.zip(other: Iterable<R>): List<Pair<Byte, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> ShortArray.zip(other: Iterable<R>): List<Pair<Short, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> IntArray.zip(other: Iterable<R>): List<Pair<Int, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> LongArray.zip(other: Iterable<R>): List<Pair<Long, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> FloatArray.zip(other: Iterable<R>): List<Pair<Float, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> DoubleArray.zip(other: Iterable<R>): List<Pair<Double, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> BooleanArray.zip(other: Iterable<R>): List<Pair<Boolean, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> CharArray.zip(other: Iterable<R>): List<Pair<Char, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <T, R, V> Array<out T>.zip(other: Iterable<R>, transform: (a: T, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> ByteArray.zip(other: Iterable<R>, transform: (a: Byte, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> ShortArray.zip(other: Iterable<R>, transform: (a: Short, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> IntArray.zip(other: Iterable<R>, transform: (a: Int, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> LongArray.zip(other: Iterable<R>, transform: (a: Long, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> FloatArray.zip(other: Iterable<R>, transform: (a: Float, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> DoubleArray.zip(other: Iterable<R>, transform: (a: Double, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> BooleanArray.zip(other: Iterable<R>, transform: (a: Boolean, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> CharArray.zip(other: Iterable<R>, transform: (a: Char, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun ByteArray.zip(other: ByteArray): List<Pair<Byte, Byte>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun ShortArray.zip(other: ShortArray): List<Pair<Short, Short>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun IntArray.zip(other: IntArray): List<Pair<Int, Int>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun LongArray.zip(other: LongArray): List<Pair<Long, Long>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun FloatArray.zip(other: FloatArray): List<Pair<Float, Float>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun DoubleArray.zip(other: DoubleArray): List<Pair<Double, Double>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun BooleanArray.zip(other: BooleanArray): List<Pair<Boolean, Boolean>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun CharArray.zip(other: CharArray): List<Pair<Char, Char>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> ByteArray.zip(other: ByteArray, transform: (a: Byte, b: Byte) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> ShortArray.zip(other: ShortArray, transform: (a: Short, b: Short) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> IntArray.zip(other: IntArray, transform: (a: Int, b: Int) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> LongArray.zip(other: LongArray, transform: (a: Long, b: Long) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> FloatArray.zip(other: FloatArray, transform: (a: Float, b: Float) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> DoubleArray.zip(other: DoubleArray, transform: (a: Double, b: Double) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> BooleanArray.zip(other: BooleanArray, transform: (a: Boolean, b: Boolean) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> CharArray.zip(other: CharArray, transform: (a: Char, b: Char) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <T, A : Appendable> Array<out T>.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            buffer.appendElement(element, transform)\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> ByteArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Byte) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> ShortArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Short) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> IntArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Int) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> LongArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Long) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> FloatArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Float) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> DoubleArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Double) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> BooleanArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Boolean) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> CharArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Char) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element)\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun <T> Array<out T>.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun ByteArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Byte) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun ShortArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Short) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun IntArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Int) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun LongArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Long) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun FloatArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Float) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun DoubleArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Double) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun BooleanArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Boolean) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun CharArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Char) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun <T> Array<out T>.asIterable(): Iterable<T> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun ByteArray.asIterable(): Iterable<Byte> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun ShortArray.asIterable(): Iterable<Short> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun IntArray.asIterable(): Iterable<Int> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun LongArray.asIterable(): Iterable<Long> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun FloatArray.asIterable(): Iterable<Float> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun DoubleArray.asIterable(): Iterable<Double> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun BooleanArray.asIterable(): Iterable<Boolean> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun CharArray.asIterable(): Iterable<Char> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun <T> Array<out T>.asSequence(): Sequence<T> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun ByteArray.asSequence(): Sequence<Byte> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun ShortArray.asSequence(): Sequence<Short> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun IntArray.asSequence(): Sequence<Int> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun LongArray.asSequence(): Sequence<Long> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun FloatArray.asSequence(): Sequence<Float> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun DoubleArray.asSequence(): Sequence<Double> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun BooleanArray.asSequence(): Sequence<Boolean> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun CharArray.asSequence(): Sequence<Char> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Returns an average value of elements in the array.\n */\n@kotlin.jvm.JvmName(\"averageOfByte\")\npublic fun Array<out Byte>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\n@kotlin.jvm.JvmName(\"averageOfShort\")\npublic fun Array<out Short>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\n@kotlin.jvm.JvmName(\"averageOfInt\")\npublic fun Array<out Int>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\n@kotlin.jvm.JvmName(\"averageOfLong\")\npublic fun Array<out Long>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\n@kotlin.jvm.JvmName(\"averageOfFloat\")\npublic fun Array<out Float>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\n@kotlin.jvm.JvmName(\"averageOfDouble\")\npublic fun Array<out Double>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\npublic fun ByteArray.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\npublic fun ShortArray.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\npublic fun IntArray.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\npublic fun LongArray.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\npublic fun FloatArray.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\npublic fun DoubleArray.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfByte\")\npublic fun Array<out Byte>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfShort\")\npublic fun Array<out Short>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfInt\")\npublic fun Array<out Int>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfLong\")\npublic fun Array<out Long>.sum(): Long {\n    var sum: Long = 0L\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfFloat\")\npublic fun Array<out Float>.sum(): Float {\n    var sum: Float = 0.0f\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfDouble\")\npublic fun Array<out Double>.sum(): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\npublic fun ByteArray.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\npublic fun ShortArray.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\npublic fun IntArray.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\npublic fun LongArray.sum(): Long {\n    var sum: Long = 0L\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\npublic fun FloatArray.sum(): Float {\n    var sum: Float = 0.0f\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\npublic fun DoubleArray.sum(): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n","/*\n * Copyright 2010-2021 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"RangesKt\")\n\npackage kotlin.ranges\n\n//\n// NOTE: THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.random.*\n\n/**\n * Returns a random element from this range.\n * \n * @throws IllegalArgumentException if this range is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun IntRange.random(): Int {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this range.\n * \n * @throws IllegalArgumentException if this range is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun LongRange.random(): Long {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this range.\n * \n * @throws IllegalArgumentException if this range is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun CharRange.random(): Char {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this range using the specified source of randomness.\n * \n * @throws IllegalArgumentException if this range is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun IntRange.random(random: Random): Int {\n    try {\n        return random.nextInt(this)\n    } catch(e: IllegalArgumentException) {\n        throw NoSuchElementException(e.message)\n    }\n}\n\n/**\n * Returns a random element from this range using the specified source of randomness.\n * \n * @throws IllegalArgumentException if this range is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun LongRange.random(random: Random): Long {\n    try {\n        return random.nextLong(this)\n    } catch(e: IllegalArgumentException) {\n        throw NoSuchElementException(e.message)\n    }\n}\n\n/**\n * Returns a random element from this range using the specified source of randomness.\n * \n * @throws IllegalArgumentException if this range is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun CharRange.random(random: Random): Char {\n    try {\n        return random.nextInt(first.code, last.code + 1).toChar()\n    } catch(e: IllegalArgumentException) {\n        throw NoSuchElementException(e.message)\n    }\n}\n\n/**\n * Returns a random element from this range, or `null` if this range is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun IntRange.randomOrNull(): Int? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this range, or `null` if this range is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun LongRange.randomOrNull(): Long? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this range, or `null` if this range is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun CharRange.randomOrNull(): Char? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this range using the specified source of randomness, or `null` if this range is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun IntRange.randomOrNull(random: Random): Int? {\n    if (isEmpty())\n        return null\n    return random.nextInt(this)\n}\n\n/**\n * Returns a random element from this range using the specified source of randomness, or `null` if this range is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun LongRange.randomOrNull(random: Random): Long? {\n    if (isEmpty())\n        return null\n    return random.nextLong(this)\n}\n\n/**\n * Returns a random element from this range using the specified source of randomness, or `null` if this range is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun CharRange.randomOrNull(random: Random): Char? {\n    if (isEmpty())\n        return null\n    return random.nextInt(first.code, last.code + 1).toChar()\n}\n\n/**\n * Returns `true` if this range contains the specified [element].\n * \n * Always returns `false` if the [element] is `null`.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline operator fun IntRange.contains(element: Int?): Boolean {\n    return element != null && contains(element)\n}\n\n/**\n * Returns `true` if this range contains the specified [element].\n * \n * Always returns `false` if the [element] is `null`.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline operator fun LongRange.contains(element: Long?): Boolean {\n    return element != null && contains(element)\n}\n\n/**\n * Returns `true` if this range contains the specified [element].\n * \n * Always returns `false` if the [element] is `null`.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline operator fun CharRange.contains(element: Char?): Boolean {\n    return element != null && contains(element)\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@kotlin.jvm.JvmName(\"intRangeContains\")\npublic operator fun ClosedRange<Int>.contains(value: Byte): Boolean {\n    return contains(value.toInt())\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@kotlin.jvm.JvmName(\"longRangeContains\")\npublic operator fun ClosedRange<Long>.contains(value: Byte): Boolean {\n    return contains(value.toLong())\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@kotlin.jvm.JvmName(\"shortRangeContains\")\npublic operator fun ClosedRange<Short>.contains(value: Byte): Boolean {\n    return contains(value.toShort())\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@Deprecated(\"This `contains` operation mixing integer and floating point arguments has ambiguous semantics and is going to be removed.\")\n@DeprecatedSinceKotlin(warningSince = \"1.3\", errorSince = \"1.4\", hiddenSince = \"1.5\")\n@kotlin.jvm.JvmName(\"doubleRangeContains\")\npublic operator fun ClosedRange<Double>.contains(value: Byte): Boolean {\n    return contains(value.toDouble())\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@Deprecated(\"This `contains` operation mixing integer and floating point arguments has ambiguous semantics and is going to be removed.\")\n@DeprecatedSinceKotlin(warningSince = \"1.3\", errorSince = \"1.4\", hiddenSince = \"1.5\")\n@kotlin.jvm.JvmName(\"floatRangeContains\")\npublic operator fun ClosedRange<Float>.contains(value: Byte): Boolean {\n    return contains(value.toFloat())\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@Deprecated(\"This `contains` operation mixing integer and floating point arguments has ambiguous semantics and is going to be removed.\")\n@DeprecatedSinceKotlin(warningSince = \"1.3\", errorSince = \"1.4\", hiddenSince = \"1.5\")\n@kotlin.jvm.JvmName(\"intRangeContains\")\npublic operator fun ClosedRange<Int>.contains(value: Double): Boolean {\n    return value.toIntExactOrNull().let { if (it != null) contains(it) else false }\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@Deprecated(\"This `contains` operation mixing integer and floating point arguments has ambiguous semantics and is going to be removed.\")\n@DeprecatedSinceKotlin(warningSince = \"1.3\", errorSince = \"1.4\", hiddenSince = \"1.5\")\n@kotlin.jvm.JvmName(\"longRangeContains\")\npublic operator fun ClosedRange<Long>.contains(value: Double): Boolean {\n    return value.toLongExactOrNull().let { if (it != null) contains(it) else false }\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@Deprecated(\"This `contains` operation mixing integer and floating point arguments has ambiguous semantics and is going to be removed.\")\n@DeprecatedSinceKotlin(warningSince = \"1.3\", errorSince = \"1.4\", hiddenSince = \"1.5\")\n@kotlin.jvm.JvmName(\"byteRangeContains\")\npublic operator fun ClosedRange<Byte>.contains(value: Double): Boolean {\n    return value.toByteExactOrNull().let { if (it != null) contains(it) else false }\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@Deprecated(\"This `contains` operation mixing integer and floating point arguments has ambiguous semantics and is going to be removed.\")\n@DeprecatedSinceKotlin(warningSince = \"1.3\", errorSince = \"1.4\", hiddenSince = \"1.5\")\n@kotlin.jvm.JvmName(\"shortRangeContains\")\npublic operator fun ClosedRange<Short>.contains(value: Double): Boolean {\n    return value.toShortExactOrNull().let { if (it != null) contains(it) else false }\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@kotlin.jvm.JvmName(\"floatRangeContains\")\npublic operator fun ClosedRange<Float>.contains(value: Double): Boolean {\n    return contains(value.toFloat())\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@Deprecated(\"This `contains` operation mixing integer and floating point arguments has ambiguous semantics and is going to be removed.\")\n@DeprecatedSinceKotlin(warningSince = \"1.3\", errorSince = \"1.4\", hiddenSince = \"1.5\")\n@kotlin.jvm.JvmName(\"intRangeContains\")\npublic operator fun ClosedRange<Int>.contains(value: Float): Boolean {\n    return value.toIntExactOrNull().let { if (it != null) contains(it) else false }\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@Deprecated(\"This `contains` operation mixing integer and floating point arguments has ambiguous semantics and is going to be removed.\")\n@DeprecatedSinceKotlin(warningSince = \"1.3\", errorSince = \"1.4\", hiddenSince = \"1.5\")\n@kotlin.jvm.JvmName(\"longRangeContains\")\npublic operator fun ClosedRange<Long>.contains(value: Float): Boolean {\n    return value.toLongExactOrNull().let { if (it != null) contains(it) else false }\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@Deprecated(\"This `contains` operation mixing integer and floating point arguments has ambiguous semantics and is going to be removed.\")\n@DeprecatedSinceKotlin(warningSince = \"1.3\", errorSince = \"1.4\", hiddenSince = \"1.5\")\n@kotlin.jvm.JvmName(\"byteRangeContains\")\npublic operator fun ClosedRange<Byte>.contains(value: Float): Boolean {\n    return value.toByteExactOrNull().let { if (it != null) contains(it) else false }\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@Deprecated(\"This `contains` operation mixing integer and floating point arguments has ambiguous semantics and is going to be removed.\")\n@DeprecatedSinceKotlin(warningSince = \"1.3\", errorSince = \"1.4\", hiddenSince = \"1.5\")\n@kotlin.jvm.JvmName(\"shortRangeContains\")\npublic operator fun ClosedRange<Short>.contains(value: Float): Boolean {\n    return value.toShortExactOrNull().let { if (it != null) contains(it) else false }\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@kotlin.jvm.JvmName(\"doubleRangeContains\")\npublic operator fun ClosedRange<Double>.contains(value: Float): Boolean {\n    return contains(value.toDouble())\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@kotlin.jvm.JvmName(\"longRangeContains\")\npublic operator fun ClosedRange<Long>.contains(value: Int): Boolean {\n    return contains(value.toLong())\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@kotlin.jvm.JvmName(\"byteRangeContains\")\npublic operator fun ClosedRange<Byte>.contains(value: Int): Boolean {\n    return value.toByteExactOrNull().let { if (it != null) contains(it) else false }\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@kotlin.jvm.JvmName(\"shortRangeContains\")\npublic operator fun ClosedRange<Short>.contains(value: Int): Boolean {\n    return value.toShortExactOrNull().let { if (it != null) contains(it) else false }\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@Deprecated(\"This `contains` operation mixing integer and floating point arguments has ambiguous semantics and is going to be removed.\")\n@DeprecatedSinceKotlin(warningSince = \"1.3\", errorSince = \"1.4\", hiddenSince = \"1.5\")\n@kotlin.jvm.JvmName(\"doubleRangeContains\")\npublic operator fun ClosedRange<Double>.contains(value: Int): Boolean {\n    return contains(value.toDouble())\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@Deprecated(\"This `contains` operation mixing integer and floating point arguments has ambiguous semantics and is going to be removed.\")\n@DeprecatedSinceKotlin(warningSince = \"1.3\", errorSince = \"1.4\", hiddenSince = \"1.5\")\n@kotlin.jvm.JvmName(\"floatRangeContains\")\npublic operator fun ClosedRange<Float>.contains(value: Int): Boolean {\n    return contains(value.toFloat())\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@kotlin.jvm.JvmName(\"intRangeContains\")\npublic operator fun ClosedRange<Int>.contains(value: Long): Boolean {\n    return value.toIntExactOrNull().let { if (it != null) contains(it) else false }\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@kotlin.jvm.JvmName(\"byteRangeContains\")\npublic operator fun ClosedRange<Byte>.contains(value: Long): Boolean {\n    return value.toByteExactOrNull().let { if (it != null) contains(it) else false }\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@kotlin.jvm.JvmName(\"shortRangeContains\")\npublic operator fun ClosedRange<Short>.contains(value: Long): Boolean {\n    return value.toShortExactOrNull().let { if (it != null) contains(it) else false }\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@Deprecated(\"This `contains` operation mixing integer and floating point arguments has ambiguous semantics and is going to be removed.\")\n@DeprecatedSinceKotlin(warningSince = \"1.3\", errorSince = \"1.4\", hiddenSince = \"1.5\")\n@kotlin.jvm.JvmName(\"doubleRangeContains\")\npublic operator fun ClosedRange<Double>.contains(value: Long): Boolean {\n    return contains(value.toDouble())\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@Deprecated(\"This `contains` operation mixing integer and floating point arguments has ambiguous semantics and is going to be removed.\")\n@DeprecatedSinceKotlin(warningSince = \"1.3\", errorSince = \"1.4\", hiddenSince = \"1.5\")\n@kotlin.jvm.JvmName(\"floatRangeContains\")\npublic operator fun ClosedRange<Float>.contains(value: Long): Boolean {\n    return contains(value.toFloat())\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@kotlin.jvm.JvmName(\"intRangeContains\")\npublic operator fun ClosedRange<Int>.contains(value: Short): Boolean {\n    return contains(value.toInt())\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@kotlin.jvm.JvmName(\"longRangeContains\")\npublic operator fun ClosedRange<Long>.contains(value: Short): Boolean {\n    return contains(value.toLong())\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@kotlin.jvm.JvmName(\"byteRangeContains\")\npublic operator fun ClosedRange<Byte>.contains(value: Short): Boolean {\n    return value.toByteExactOrNull().let { if (it != null) contains(it) else false }\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@Deprecated(\"This `contains` operation mixing integer and floating point arguments has ambiguous semantics and is going to be removed.\")\n@DeprecatedSinceKotlin(warningSince = \"1.3\", errorSince = \"1.4\", hiddenSince = \"1.5\")\n@kotlin.jvm.JvmName(\"doubleRangeContains\")\npublic operator fun ClosedRange<Double>.contains(value: Short): Boolean {\n    return contains(value.toDouble())\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@Deprecated(\"This `contains` operation mixing integer and floating point arguments has ambiguous semantics and is going to be removed.\")\n@DeprecatedSinceKotlin(warningSince = \"1.3\", errorSince = \"1.4\", hiddenSince = \"1.5\")\n@kotlin.jvm.JvmName(\"floatRangeContains\")\npublic operator fun ClosedRange<Float>.contains(value: Short): Boolean {\n    return contains(value.toFloat())\n}\n\n/**\n * Returns a progression from this value down to the specified [to] value with the step -1.\n * \n * The [to] value should be less than or equal to `this` value.\n * If the [to] value is greater than `this` value the returned progression is empty.\n */\npublic infix fun Int.downTo(to: Byte): IntProgression {\n    return IntProgression.fromClosedRange(this, to.toInt(), -1)\n}\n\n/**\n * Returns a progression from this value down to the specified [to] value with the step -1.\n * \n * The [to] value should be less than or equal to `this` value.\n * If the [to] value is greater than `this` value the returned progression is empty.\n */\npublic infix fun Long.downTo(to: Byte): LongProgression {\n    return LongProgression.fromClosedRange(this, to.toLong(), -1L)\n}\n\n/**\n * Returns a progression from this value down to the specified [to] value with the step -1.\n * \n * The [to] value should be less than or equal to `this` value.\n * If the [to] value is greater than `this` value the returned progression is empty.\n */\npublic infix fun Byte.downTo(to: Byte): IntProgression {\n    return IntProgression.fromClosedRange(this.toInt(), to.toInt(), -1)\n}\n\n/**\n * Returns a progression from this value down to the specified [to] value with the step -1.\n * \n * The [to] value should be less than or equal to `this` value.\n * If the [to] value is greater than `this` value the returned progression is empty.\n */\npublic infix fun Short.downTo(to: Byte): IntProgression {\n    return IntProgression.fromClosedRange(this.toInt(), to.toInt(), -1)\n}\n\n/**\n * Returns a progression from this value down to the specified [to] value with the step -1.\n * \n * The [to] value should be less than or equal to `this` value.\n * If the [to] value is greater than `this` value the returned progression is empty.\n */\npublic infix fun Char.downTo(to: Char): CharProgression {\n    return CharProgression.fromClosedRange(this, to, -1)\n}\n\n/**\n * Returns a progression from this value down to the specified [to] value with the step -1.\n * \n * The [to] value should be less than or equal to `this` value.\n * If the [to] value is greater than `this` value the returned progression is empty.\n */\npublic infix fun Int.downTo(to: Int): IntProgression {\n    return IntProgression.fromClosedRange(this, to, -1)\n}\n\n/**\n * Returns a progression from this value down to the specified [to] value with the step -1.\n * \n * The [to] value should be less than or equal to `this` value.\n * If the [to] value is greater than `this` value the returned progression is empty.\n */\npublic infix fun Long.downTo(to: Int): LongProgression {\n    return LongProgression.fromClosedRange(this, to.toLong(), -1L)\n}\n\n/**\n * Returns a progression from this value down to the specified [to] value with the step -1.\n * \n * The [to] value should be less than or equal to `this` value.\n * If the [to] value is greater than `this` value the returned progression is empty.\n */\npublic infix fun Byte.downTo(to: Int): IntProgression {\n    return IntProgression.fromClosedRange(this.toInt(), to, -1)\n}\n\n/**\n * Returns a progression from this value down to the specified [to] value with the step -1.\n * \n * The [to] value should be less than or equal to `this` value.\n * If the [to] value is greater than `this` value the returned progression is empty.\n */\npublic infix fun Short.downTo(to: Int): IntProgression {\n    return IntProgression.fromClosedRange(this.toInt(), to, -1)\n}\n\n/**\n * Returns a progression from this value down to the specified [to] value with the step -1.\n * \n * The [to] value should be less than or equal to `this` value.\n * If the [to] value is greater than `this` value the returned progression is empty.\n */\npublic infix fun Int.downTo(to: Long): LongProgression {\n    return LongProgression.fromClosedRange(this.toLong(), to, -1L)\n}\n\n/**\n * Returns a progression from this value down to the specified [to] value with the step -1.\n * \n * The [to] value should be less than or equal to `this` value.\n * If the [to] value is greater than `this` value the returned progression is empty.\n */\npublic infix fun Long.downTo(to: Long): LongProgression {\n    return LongProgression.fromClosedRange(this, to, -1L)\n}\n\n/**\n * Returns a progression from this value down to the specified [to] value with the step -1.\n * \n * The [to] value should be less than or equal to `this` value.\n * If the [to] value is greater than `this` value the returned progression is empty.\n */\npublic infix fun Byte.downTo(to: Long): LongProgression {\n    return LongProgression.fromClosedRange(this.toLong(), to, -1L)\n}\n\n/**\n * Returns a progression from this value down to the specified [to] value with the step -1.\n * \n * The [to] value should be less than or equal to `this` value.\n * If the [to] value is greater than `this` value the returned progression is empty.\n */\npublic infix fun Short.downTo(to: Long): LongProgression {\n    return LongProgression.fromClosedRange(this.toLong(), to, -1L)\n}\n\n/**\n * Returns a progression from this value down to the specified [to] value with the step -1.\n * \n * The [to] value should be less than or equal to `this` value.\n * If the [to] value is greater than `this` value the returned progression is empty.\n */\npublic infix fun Int.downTo(to: Short): IntProgression {\n    return IntProgression.fromClosedRange(this, to.toInt(), -1)\n}\n\n/**\n * Returns a progression from this value down to the specified [to] value with the step -1.\n * \n * The [to] value should be less than or equal to `this` value.\n * If the [to] value is greater than `this` value the returned progression is empty.\n */\npublic infix fun Long.downTo(to: Short): LongProgression {\n    return LongProgression.fromClosedRange(this, to.toLong(), -1L)\n}\n\n/**\n * Returns a progression from this value down to the specified [to] value with the step -1.\n * \n * The [to] value should be less than or equal to `this` value.\n * If the [to] value is greater than `this` value the returned progression is empty.\n */\npublic infix fun Byte.downTo(to: Short): IntProgression {\n    return IntProgression.fromClosedRange(this.toInt(), to.toInt(), -1)\n}\n\n/**\n * Returns a progression from this value down to the specified [to] value with the step -1.\n * \n * The [to] value should be less than or equal to `this` value.\n * If the [to] value is greater than `this` value the returned progression is empty.\n */\npublic infix fun Short.downTo(to: Short): IntProgression {\n    return IntProgression.fromClosedRange(this.toInt(), to.toInt(), -1)\n}\n\n/**\n * Returns a progression that goes over the same range in the opposite direction with the same step.\n */\npublic fun IntProgression.reversed(): IntProgression {\n    return IntProgression.fromClosedRange(last, first, -step)\n}\n\n/**\n * Returns a progression that goes over the same range in the opposite direction with the same step.\n */\npublic fun LongProgression.reversed(): LongProgression {\n    return LongProgression.fromClosedRange(last, first, -step)\n}\n\n/**\n * Returns a progression that goes over the same range in the opposite direction with the same step.\n */\npublic fun CharProgression.reversed(): CharProgression {\n    return CharProgression.fromClosedRange(last, first, -step)\n}\n\n/**\n * Returns a progression that goes over the same range with the given step.\n */\npublic infix fun IntProgression.step(step: Int): IntProgression {\n    checkStepIsPositive(step > 0, step)\n    return IntProgression.fromClosedRange(first, last, if (this.step > 0) step else -step)\n}\n\n/**\n * Returns a progression that goes over the same range with the given step.\n */\npublic infix fun LongProgression.step(step: Long): LongProgression {\n    checkStepIsPositive(step > 0, step)\n    return LongProgression.fromClosedRange(first, last, if (this.step > 0) step else -step)\n}\n\n/**\n * Returns a progression that goes over the same range with the given step.\n */\npublic infix fun CharProgression.step(step: Int): CharProgression {\n    checkStepIsPositive(step > 0, step)\n    return CharProgression.fromClosedRange(first, last, if (this.step > 0) step else -step)\n}\n\ninternal fun Int.toByteExactOrNull(): Byte? {\n    return if (this in Byte.MIN_VALUE.toInt()..Byte.MAX_VALUE.toInt()) this.toByte() else null\n}\n\ninternal fun Long.toByteExactOrNull(): Byte? {\n    return if (this in Byte.MIN_VALUE.toLong()..Byte.MAX_VALUE.toLong()) this.toByte() else null\n}\n\ninternal fun Short.toByteExactOrNull(): Byte? {\n    return if (this in Byte.MIN_VALUE.toShort()..Byte.MAX_VALUE.toShort()) this.toByte() else null\n}\n\ninternal fun Double.toByteExactOrNull(): Byte? {\n    return if (this in Byte.MIN_VALUE.toDouble()..Byte.MAX_VALUE.toDouble()) this.toInt().toByte() else null\n}\n\ninternal fun Float.toByteExactOrNull(): Byte? {\n    return if (this in Byte.MIN_VALUE.toFloat()..Byte.MAX_VALUE.toFloat()) this.toInt().toByte() else null\n}\n\ninternal fun Long.toIntExactOrNull(): Int? {\n    return if (this in Int.MIN_VALUE.toLong()..Int.MAX_VALUE.toLong()) this.toInt() else null\n}\n\ninternal fun Double.toIntExactOrNull(): Int? {\n    return if (this in Int.MIN_VALUE.toDouble()..Int.MAX_VALUE.toDouble()) this.toInt() else null\n}\n\ninternal fun Float.toIntExactOrNull(): Int? {\n    return if (this in Int.MIN_VALUE.toFloat()..Int.MAX_VALUE.toFloat()) this.toInt() else null\n}\n\ninternal fun Double.toLongExactOrNull(): Long? {\n    return if (this in Long.MIN_VALUE.toDouble()..Long.MAX_VALUE.toDouble()) this.toLong() else null\n}\n\ninternal fun Float.toLongExactOrNull(): Long? {\n    return if (this in Long.MIN_VALUE.toFloat()..Long.MAX_VALUE.toFloat()) this.toLong() else null\n}\n\ninternal fun Int.toShortExactOrNull(): Short? {\n    return if (this in Short.MIN_VALUE.toInt()..Short.MAX_VALUE.toInt()) this.toShort() else null\n}\n\ninternal fun Long.toShortExactOrNull(): Short? {\n    return if (this in Short.MIN_VALUE.toLong()..Short.MAX_VALUE.toLong()) this.toShort() else null\n}\n\ninternal fun Double.toShortExactOrNull(): Short? {\n    return if (this in Short.MIN_VALUE.toDouble()..Short.MAX_VALUE.toDouble()) this.toInt().toShort() else null\n}\n\ninternal fun Float.toShortExactOrNull(): Short? {\n    return if (this in Short.MIN_VALUE.toFloat()..Short.MAX_VALUE.toFloat()) this.toInt().toShort() else null\n}\n\n/**\n * Returns a range from this value up to but excluding the specified [to] value.\n * \n * If the [to] value is less than or equal to `this` value, then the returned range is empty.\n */\npublic infix fun Int.until(to: Byte): IntRange {\n    return this .. (to.toInt() - 1).toInt()\n}\n\n/**\n * Returns a range from this value up to but excluding the specified [to] value.\n * \n * If the [to] value is less than or equal to `this` value, then the returned range is empty.\n */\npublic infix fun Long.until(to: Byte): LongRange {\n    return this .. (to.toLong() - 1).toLong()\n}\n\n/**\n * Returns a range from this value up to but excluding the specified [to] value.\n * \n * If the [to] value is less than or equal to `this` value, then the returned range is empty.\n */\npublic infix fun Byte.until(to: Byte): IntRange {\n    return this.toInt() .. (to.toInt() - 1).toInt()\n}\n\n/**\n * Returns a range from this value up to but excluding the specified [to] value.\n * \n * If the [to] value is less than or equal to `this` value, then the returned range is empty.\n */\npublic infix fun Short.until(to: Byte): IntRange {\n    return this.toInt() .. (to.toInt() - 1).toInt()\n}\n\n/**\n * Returns a range from this value up to but excluding the specified [to] value.\n * \n * If the [to] value is less than or equal to `this` value, then the returned range is empty.\n */\npublic infix fun Char.until(to: Char): CharRange {\n    if (to <= '\\u0000') return CharRange.EMPTY\n    return this .. (to - 1).toChar()\n}\n\n/**\n * Returns a range from this value up to but excluding the specified [to] value.\n * \n * If the [to] value is less than or equal to `this` value, then the returned range is empty.\n */\npublic infix fun Int.until(to: Int): IntRange {\n    if (to <= Int.MIN_VALUE) return IntRange.EMPTY\n    return this .. (to - 1).toInt()\n}\n\n/**\n * Returns a range from this value up to but excluding the specified [to] value.\n * \n * If the [to] value is less than or equal to `this` value, then the returned range is empty.\n */\npublic infix fun Long.until(to: Int): LongRange {\n    return this .. (to.toLong() - 1).toLong()\n}\n\n/**\n * Returns a range from this value up to but excluding the specified [to] value.\n * \n * If the [to] value is less than or equal to `this` value, then the returned range is empty.\n */\npublic infix fun Byte.until(to: Int): IntRange {\n    if (to <= Int.MIN_VALUE) return IntRange.EMPTY\n    return this.toInt() .. (to - 1).toInt()\n}\n\n/**\n * Returns a range from this value up to but excluding the specified [to] value.\n * \n * If the [to] value is less than or equal to `this` value, then the returned range is empty.\n */\npublic infix fun Short.until(to: Int): IntRange {\n    if (to <= Int.MIN_VALUE) return IntRange.EMPTY\n    return this.toInt() .. (to - 1).toInt()\n}\n\n/**\n * Returns a range from this value up to but excluding the specified [to] value.\n * \n * If the [to] value is less than or equal to `this` value, then the returned range is empty.\n */\npublic infix fun Int.until(to: Long): LongRange {\n    if (to <= Long.MIN_VALUE) return LongRange.EMPTY\n    return this.toLong() .. (to - 1).toLong()\n}\n\n/**\n * Returns a range from this value up to but excluding the specified [to] value.\n * \n * If the [to] value is less than or equal to `this` value, then the returned range is empty.\n */\npublic infix fun Long.until(to: Long): LongRange {\n    if (to <= Long.MIN_VALUE) return LongRange.EMPTY\n    return this .. (to - 1).toLong()\n}\n\n/**\n * Returns a range from this value up to but excluding the specified [to] value.\n * \n * If the [to] value is less than or equal to `this` value, then the returned range is empty.\n */\npublic infix fun Byte.until(to: Long): LongRange {\n    if (to <= Long.MIN_VALUE) return LongRange.EMPTY\n    return this.toLong() .. (to - 1).toLong()\n}\n\n/**\n * Returns a range from this value up to but excluding the specified [to] value.\n * \n * If the [to] value is less than or equal to `this` value, then the returned range is empty.\n */\npublic infix fun Short.until(to: Long): LongRange {\n    if (to <= Long.MIN_VALUE) return LongRange.EMPTY\n    return this.toLong() .. (to - 1).toLong()\n}\n\n/**\n * Returns a range from this value up to but excluding the specified [to] value.\n * \n * If the [to] value is less than or equal to `this` value, then the returned range is empty.\n */\npublic infix fun Int.until(to: Short): IntRange {\n    return this .. (to.toInt() - 1).toInt()\n}\n\n/**\n * Returns a range from this value up to but excluding the specified [to] value.\n * \n * If the [to] value is less than or equal to `this` value, then the returned range is empty.\n */\npublic infix fun Long.until(to: Short): LongRange {\n    return this .. (to.toLong() - 1).toLong()\n}\n\n/**\n * Returns a range from this value up to but excluding the specified [to] value.\n * \n * If the [to] value is less than or equal to `this` value, then the returned range is empty.\n */\npublic infix fun Byte.until(to: Short): IntRange {\n    return this.toInt() .. (to.toInt() - 1).toInt()\n}\n\n/**\n * Returns a range from this value up to but excluding the specified [to] value.\n * \n * If the [to] value is less than or equal to `this` value, then the returned range is empty.\n */\npublic infix fun Short.until(to: Short): IntRange {\n    return this.toInt() .. (to.toInt() - 1).toInt()\n}\n\n/**\n * Ensures that this value is not less than the specified [minimumValue].\n * \n * @return this value if it's greater than or equal to the [minimumValue] or the [minimumValue] otherwise.\n * \n * @sample samples.comparisons.ComparableOps.coerceAtLeastComparable\n */\npublic fun <T : Comparable<T>> T.coerceAtLeast(minimumValue: T): T {\n    return if (this < minimumValue) minimumValue else this\n}\n\n/**\n * Ensures that this value is not less than the specified [minimumValue].\n * \n * @return this value if it's greater than or equal to the [minimumValue] or the [minimumValue] otherwise.\n * \n * @sample samples.comparisons.ComparableOps.coerceAtLeast\n */\npublic fun Byte.coerceAtLeast(minimumValue: Byte): Byte {\n    return if (this < minimumValue) minimumValue else this\n}\n\n/**\n * Ensures that this value is not less than the specified [minimumValue].\n * \n * @return this value if it's greater than or equal to the [minimumValue] or the [minimumValue] otherwise.\n * \n * @sample samples.comparisons.ComparableOps.coerceAtLeast\n */\npublic fun Short.coerceAtLeast(minimumValue: Short): Short {\n    return if (this < minimumValue) minimumValue else this\n}\n\n/**\n * Ensures that this value is not less than the specified [minimumValue].\n * \n * @return this value if it's greater than or equal to the [minimumValue] or the [minimumValue] otherwise.\n * \n * @sample samples.comparisons.ComparableOps.coerceAtLeast\n */\npublic fun Int.coerceAtLeast(minimumValue: Int): Int {\n    return if (this < minimumValue) minimumValue else this\n}\n\n/**\n * Ensures that this value is not less than the specified [minimumValue].\n * \n * @return this value if it's greater than or equal to the [minimumValue] or the [minimumValue] otherwise.\n * \n * @sample samples.comparisons.ComparableOps.coerceAtLeast\n */\npublic fun Long.coerceAtLeast(minimumValue: Long): Long {\n    return if (this < minimumValue) minimumValue else this\n}\n\n/**\n * Ensures that this value is not less than the specified [minimumValue].\n * \n * @return this value if it's greater than or equal to the [minimumValue] or the [minimumValue] otherwise.\n * \n * @sample samples.comparisons.ComparableOps.coerceAtLeast\n */\npublic fun Float.coerceAtLeast(minimumValue: Float): Float {\n    return if (this < minimumValue) minimumValue else this\n}\n\n/**\n * Ensures that this value is not less than the specified [minimumValue].\n * \n * @return this value if it's greater than or equal to the [minimumValue] or the [minimumValue] otherwise.\n * \n * @sample samples.comparisons.ComparableOps.coerceAtLeast\n */\npublic fun Double.coerceAtLeast(minimumValue: Double): Double {\n    return if (this < minimumValue) minimumValue else this\n}\n\n/**\n * Ensures that this value is not greater than the specified [maximumValue].\n * \n * @return this value if it's less than or equal to the [maximumValue] or the [maximumValue] otherwise.\n * \n * @sample samples.comparisons.ComparableOps.coerceAtMostComparable\n */\npublic fun <T : Comparable<T>> T.coerceAtMost(maximumValue: T): T {\n    return if (this > maximumValue) maximumValue else this\n}\n\n/**\n * Ensures that this value is not greater than the specified [maximumValue].\n * \n * @return this value if it's less than or equal to the [maximumValue] or the [maximumValue] otherwise.\n * \n * @sample samples.comparisons.ComparableOps.coerceAtMost\n */\npublic fun Byte.coerceAtMost(maximumValue: Byte): Byte {\n    return if (this > maximumValue) maximumValue else this\n}\n\n/**\n * Ensures that this value is not greater than the specified [maximumValue].\n * \n * @return this value if it's less than or equal to the [maximumValue] or the [maximumValue] otherwise.\n * \n * @sample samples.comparisons.ComparableOps.coerceAtMost\n */\npublic fun Short.coerceAtMost(maximumValue: Short): Short {\n    return if (this > maximumValue) maximumValue else this\n}\n\n/**\n * Ensures that this value is not greater than the specified [maximumValue].\n * \n * @return this value if it's less than or equal to the [maximumValue] or the [maximumValue] otherwise.\n * \n * @sample samples.comparisons.ComparableOps.coerceAtMost\n */\npublic fun Int.coerceAtMost(maximumValue: Int): Int {\n    return if (this > maximumValue) maximumValue else this\n}\n\n/**\n * Ensures that this value is not greater than the specified [maximumValue].\n * \n * @return this value if it's less than or equal to the [maximumValue] or the [maximumValue] otherwise.\n * \n * @sample samples.comparisons.ComparableOps.coerceAtMost\n */\npublic fun Long.coerceAtMost(maximumValue: Long): Long {\n    return if (this > maximumValue) maximumValue else this\n}\n\n/**\n * Ensures that this value is not greater than the specified [maximumValue].\n * \n * @return this value if it's less than or equal to the [maximumValue] or the [maximumValue] otherwise.\n * \n * @sample samples.comparisons.ComparableOps.coerceAtMost\n */\npublic fun Float.coerceAtMost(maximumValue: Float): Float {\n    return if (this > maximumValue) maximumValue else this\n}\n\n/**\n * Ensures that this value is not greater than the specified [maximumValue].\n * \n * @return this value if it's less than or equal to the [maximumValue] or the [maximumValue] otherwise.\n * \n * @sample samples.comparisons.ComparableOps.coerceAtMost\n */\npublic fun Double.coerceAtMost(maximumValue: Double): Double {\n    return if (this > maximumValue) maximumValue else this\n}\n\n/**\n * Ensures that this value lies in the specified range [minimumValue]..[maximumValue].\n * \n * @return this value if it's in the range, or [minimumValue] if this value is less than [minimumValue], or [maximumValue] if this value is greater than [maximumValue].\n * \n * @sample samples.comparisons.ComparableOps.coerceInComparable\n */\npublic fun <T : Comparable<T>> T.coerceIn(minimumValue: T?, maximumValue: T?): T {\n    if (minimumValue !== null && maximumValue !== null) {\n        if (minimumValue > maximumValue) throw IllegalArgumentException(\"Cannot coerce value to an empty range: maximum $maximumValue is less than minimum $minimumValue.\")\n        if (this < minimumValue) return minimumValue\n        if (this > maximumValue) return maximumValue\n    }\n    else {\n        if (minimumValue !== null && this < minimumValue) return minimumValue\n        if (maximumValue !== null && this > maximumValue) return maximumValue\n    }\n    return this\n}\n\n/**\n * Ensures that this value lies in the specified range [minimumValue]..[maximumValue].\n * \n * @return this value if it's in the range, or [minimumValue] if this value is less than [minimumValue], or [maximumValue] if this value is greater than [maximumValue].\n * \n * @sample samples.comparisons.ComparableOps.coerceIn\n */\npublic fun Byte.coerceIn(minimumValue: Byte, maximumValue: Byte): Byte {\n    if (minimumValue > maximumValue) throw IllegalArgumentException(\"Cannot coerce value to an empty range: maximum $maximumValue is less than minimum $minimumValue.\")\n    if (this < minimumValue) return minimumValue\n    if (this > maximumValue) return maximumValue\n    return this\n}\n\n/**\n * Ensures that this value lies in the specified range [minimumValue]..[maximumValue].\n * \n * @return this value if it's in the range, or [minimumValue] if this value is less than [minimumValue], or [maximumValue] if this value is greater than [maximumValue].\n * \n * @sample samples.comparisons.ComparableOps.coerceIn\n */\npublic fun Short.coerceIn(minimumValue: Short, maximumValue: Short): Short {\n    if (minimumValue > maximumValue) throw IllegalArgumentException(\"Cannot coerce value to an empty range: maximum $maximumValue is less than minimum $minimumValue.\")\n    if (this < minimumValue) return minimumValue\n    if (this > maximumValue) return maximumValue\n    return this\n}\n\n/**\n * Ensures that this value lies in the specified range [minimumValue]..[maximumValue].\n * \n * @return this value if it's in the range, or [minimumValue] if this value is less than [minimumValue], or [maximumValue] if this value is greater than [maximumValue].\n * \n * @sample samples.comparisons.ComparableOps.coerceIn\n */\npublic fun Int.coerceIn(minimumValue: Int, maximumValue: Int): Int {\n    if (minimumValue > maximumValue) throw IllegalArgumentException(\"Cannot coerce value to an empty range: maximum $maximumValue is less than minimum $minimumValue.\")\n    if (this < minimumValue) return minimumValue\n    if (this > maximumValue) return maximumValue\n    return this\n}\n\n/**\n * Ensures that this value lies in the specified range [minimumValue]..[maximumValue].\n * \n * @return this value if it's in the range, or [minimumValue] if this value is less than [minimumValue], or [maximumValue] if this value is greater than [maximumValue].\n * \n * @sample samples.comparisons.ComparableOps.coerceIn\n */\npublic fun Long.coerceIn(minimumValue: Long, maximumValue: Long): Long {\n    if (minimumValue > maximumValue) throw IllegalArgumentException(\"Cannot coerce value to an empty range: maximum $maximumValue is less than minimum $minimumValue.\")\n    if (this < minimumValue) return minimumValue\n    if (this > maximumValue) return maximumValue\n    return this\n}\n\n/**\n * Ensures that this value lies in the specified range [minimumValue]..[maximumValue].\n * \n * @return this value if it's in the range, or [minimumValue] if this value is less than [minimumValue], or [maximumValue] if this value is greater than [maximumValue].\n * \n * @sample samples.comparisons.ComparableOps.coerceIn\n */\npublic fun Float.coerceIn(minimumValue: Float, maximumValue: Float): Float {\n    if (minimumValue > maximumValue) throw IllegalArgumentException(\"Cannot coerce value to an empty range: maximum $maximumValue is less than minimum $minimumValue.\")\n    if (this < minimumValue) return minimumValue\n    if (this > maximumValue) return maximumValue\n    return this\n}\n\n/**\n * Ensures that this value lies in the specified range [minimumValue]..[maximumValue].\n * \n * @return this value if it's in the range, or [minimumValue] if this value is less than [minimumValue], or [maximumValue] if this value is greater than [maximumValue].\n * \n * @sample samples.comparisons.ComparableOps.coerceIn\n */\npublic fun Double.coerceIn(minimumValue: Double, maximumValue: Double): Double {\n    if (minimumValue > maximumValue) throw IllegalArgumentException(\"Cannot coerce value to an empty range: maximum $maximumValue is less than minimum $minimumValue.\")\n    if (this < minimumValue) return minimumValue\n    if (this > maximumValue) return maximumValue\n    return this\n}\n\n/**\n * Ensures that this value lies in the specified [range].\n * \n * @return this value if it's in the [range], or `range.start` if this value is less than `range.start`, or `range.endInclusive` if this value is greater than `range.endInclusive`.\n * \n * @sample samples.comparisons.ComparableOps.coerceInFloatingPointRange\n */\n@SinceKotlin(\"1.1\")\npublic fun <T : Comparable<T>> T.coerceIn(range: ClosedFloatingPointRange<T>): T {\n    if (range.isEmpty()) throw IllegalArgumentException(\"Cannot coerce value to an empty range: $range.\")\n    return when {\n        // this < start equiv to this <= start && !(this >= start)\n        range.lessThanOrEquals(this, range.start) && !range.lessThanOrEquals(range.start, this) -> range.start\n        // this > end equiv to this >= end && !(this <= end)\n        range.lessThanOrEquals(range.endInclusive, this) && !range.lessThanOrEquals(this, range.endInclusive) -> range.endInclusive\n        else -> this\n    }\n}\n\n/**\n * Ensures that this value lies in the specified [range].\n * \n * @return this value if it's in the [range], or `range.start` if this value is less than `range.start`, or `range.endInclusive` if this value is greater than `range.endInclusive`.\n * \n * @sample samples.comparisons.ComparableOps.coerceInComparable\n */\npublic fun <T : Comparable<T>> T.coerceIn(range: ClosedRange<T>): T {\n    if (range is ClosedFloatingPointRange) {\n        return this.coerceIn<T>(range)\n    }\n    if (range.isEmpty()) throw IllegalArgumentException(\"Cannot coerce value to an empty range: $range.\")\n    return when {\n        this < range.start -> range.start\n        this > range.endInclusive -> range.endInclusive\n        else -> this\n    }\n}\n\n/**\n * Ensures that this value lies in the specified [range].\n * \n * @return this value if it's in the [range], or `range.start` if this value is less than `range.start`, or `range.endInclusive` if this value is greater than `range.endInclusive`.\n * \n * @sample samples.comparisons.ComparableOps.coerceIn\n */\npublic fun Int.coerceIn(range: ClosedRange<Int>): Int {\n    if (range is ClosedFloatingPointRange) {\n        return this.coerceIn<Int>(range)\n    }\n    if (range.isEmpty()) throw IllegalArgumentException(\"Cannot coerce value to an empty range: $range.\")\n    return when {\n        this < range.start -> range.start\n        this > range.endInclusive -> range.endInclusive\n        else -> this\n    }\n}\n\n/**\n * Ensures that this value lies in the specified [range].\n * \n * @return this value if it's in the [range], or `range.start` if this value is less than `range.start`, or `range.endInclusive` if this value is greater than `range.endInclusive`.\n * \n * @sample samples.comparisons.ComparableOps.coerceIn\n */\npublic fun Long.coerceIn(range: ClosedRange<Long>): Long {\n    if (range is ClosedFloatingPointRange) {\n        return this.coerceIn<Long>(range)\n    }\n    if (range.isEmpty()) throw IllegalArgumentException(\"Cannot coerce value to an empty range: $range.\")\n    return when {\n        this < range.start -> range.start\n        this > range.endInclusive -> range.endInclusive\n        else -> this\n    }\n}\n\n","/*\n * Copyright 2010-2021 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n// Auto-generated file. DO NOT EDIT!\n\npackage kotlin\n\nimport kotlin.experimental.*\nimport kotlin.jvm.*\n\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@JvmInline\npublic value class UByte @PublishedApi internal constructor(@PublishedApi internal val data: Byte) : Comparable<UByte> {\n\n    companion object {\n        /**\n         * A constant holding the minimum value an instance of UByte can have.\n         */\n        public const val MIN_VALUE: UByte = UByte(0)\n\n        /**\n         * A constant holding the maximum value an instance of UByte can have.\n         */\n        public const val MAX_VALUE: UByte = UByte(-1)\n\n        /**\n         * The number of bytes used to represent an instance of UByte in a binary form.\n         */\n        public const val SIZE_BYTES: Int = 1\n\n        /**\n         * The number of bits used to represent an instance of UByte in a binary form.\n         */\n        public const val SIZE_BITS: Int = 8\n    }\n\n    /**\n     * Compares this value with the specified value for order.\n     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,\n     * or a positive number if it's greater than other.\n     */\n    @kotlin.internal.InlineOnly\n    @Suppress(\"OVERRIDE_BY_INLINE\")\n    public override inline operator fun compareTo(other: UByte): Int = this.toInt().compareTo(other.toInt())\n\n    /**\n     * Compares this value with the specified value for order.\n     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,\n     * or a positive number if it's greater than other.\n     */\n    @kotlin.internal.InlineOnly\n    public inline operator fun compareTo(other: UShort): Int = this.toInt().compareTo(other.toInt())\n\n    /**\n     * Compares this value with the specified value for order.\n     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,\n     * or a positive number if it's greater than other.\n     */\n    @kotlin.internal.InlineOnly\n    public inline operator fun compareTo(other: UInt): Int = this.toUInt().compareTo(other)\n\n    /**\n     * Compares this value with the specified value for order.\n     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,\n     * or a positive number if it's greater than other.\n     */\n    @kotlin.internal.InlineOnly\n    public inline operator fun compareTo(other: ULong): Int = this.toULong().compareTo(other)\n\n    /** Adds the other value to this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun plus(other: UByte): UInt = this.toUInt().plus(other.toUInt())\n    /** Adds the other value to this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun plus(other: UShort): UInt = this.toUInt().plus(other.toUInt())\n    /** Adds the other value to this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun plus(other: UInt): UInt = this.toUInt().plus(other)\n    /** Adds the other value to this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun plus(other: ULong): ULong = this.toULong().plus(other)\n\n    /** Subtracts the other value from this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun minus(other: UByte): UInt = this.toUInt().minus(other.toUInt())\n    /** Subtracts the other value from this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun minus(other: UShort): UInt = this.toUInt().minus(other.toUInt())\n    /** Subtracts the other value from this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun minus(other: UInt): UInt = this.toUInt().minus(other)\n    /** Subtracts the other value from this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun minus(other: ULong): ULong = this.toULong().minus(other)\n\n    /** Multiplies this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun times(other: UByte): UInt = this.toUInt().times(other.toUInt())\n    /** Multiplies this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun times(other: UShort): UInt = this.toUInt().times(other.toUInt())\n    /** Multiplies this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun times(other: UInt): UInt = this.toUInt().times(other)\n    /** Multiplies this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun times(other: ULong): ULong = this.toULong().times(other)\n\n    /** Divides this value by the other value, truncating the result to an integer that is closer to zero. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun div(other: UByte): UInt = this.toUInt().div(other.toUInt())\n    /** Divides this value by the other value, truncating the result to an integer that is closer to zero. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun div(other: UShort): UInt = this.toUInt().div(other.toUInt())\n    /** Divides this value by the other value, truncating the result to an integer that is closer to zero. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun div(other: UInt): UInt = this.toUInt().div(other)\n    /** Divides this value by the other value, truncating the result to an integer that is closer to zero. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun div(other: ULong): ULong = this.toULong().div(other)\n\n    /**\n     * Calculates the remainder of truncating division of this value by the other value.\n     * \n     * The result is always less than the divisor.\n     */\n    @kotlin.internal.InlineOnly\n    public inline operator fun rem(other: UByte): UInt = this.toUInt().rem(other.toUInt())\n    /**\n     * Calculates the remainder of truncating division of this value by the other value.\n     * \n     * The result is always less than the divisor.\n     */\n    @kotlin.internal.InlineOnly\n    public inline operator fun rem(other: UShort): UInt = this.toUInt().rem(other.toUInt())\n    /**\n     * Calculates the remainder of truncating division of this value by the other value.\n     * \n     * The result is always less than the divisor.\n     */\n    @kotlin.internal.InlineOnly\n    public inline operator fun rem(other: UInt): UInt = this.toUInt().rem(other)\n    /**\n     * Calculates the remainder of truncating division of this value by the other value.\n     * \n     * The result is always less than the divisor.\n     */\n    @kotlin.internal.InlineOnly\n    public inline operator fun rem(other: ULong): ULong = this.toULong().rem(other)\n\n    /**\n     * Divides this value by the other value, flooring the result to an integer that is closer to negative infinity.\n     * \n     * For unsigned types, the results of flooring division and truncating division are the same.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun floorDiv(other: UByte): UInt = this.toUInt().floorDiv(other.toUInt())\n    /**\n     * Divides this value by the other value, flooring the result to an integer that is closer to negative infinity.\n     * \n     * For unsigned types, the results of flooring division and truncating division are the same.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun floorDiv(other: UShort): UInt = this.toUInt().floorDiv(other.toUInt())\n    /**\n     * Divides this value by the other value, flooring the result to an integer that is closer to negative infinity.\n     * \n     * For unsigned types, the results of flooring division and truncating division are the same.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun floorDiv(other: UInt): UInt = this.toUInt().floorDiv(other)\n    /**\n     * Divides this value by the other value, flooring the result to an integer that is closer to negative infinity.\n     * \n     * For unsigned types, the results of flooring division and truncating division are the same.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun floorDiv(other: ULong): ULong = this.toULong().floorDiv(other)\n\n    /**\n     * Calculates the remainder of flooring division of this value by the other value.\n     * \n     * The result is always less than the divisor.\n     * \n     * For unsigned types, the remainders of flooring division and truncating division are the same.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun mod(other: UByte): UByte = this.toUInt().mod(other.toUInt()).toUByte()\n    /**\n     * Calculates the remainder of flooring division of this value by the other value.\n     * \n     * The result is always less than the divisor.\n     * \n     * For unsigned types, the remainders of flooring division and truncating division are the same.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun mod(other: UShort): UShort = this.toUInt().mod(other.toUInt()).toUShort()\n    /**\n     * Calculates the remainder of flooring division of this value by the other value.\n     * \n     * The result is always less than the divisor.\n     * \n     * For unsigned types, the remainders of flooring division and truncating division are the same.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun mod(other: UInt): UInt = this.toUInt().mod(other)\n    /**\n     * Calculates the remainder of flooring division of this value by the other value.\n     * \n     * The result is always less than the divisor.\n     * \n     * For unsigned types, the remainders of flooring division and truncating division are the same.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun mod(other: ULong): ULong = this.toULong().mod(other)\n\n    /** Increments this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun inc(): UByte = UByte(data.inc())\n    /** Decrements this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun dec(): UByte = UByte(data.dec())\n\n    /** Creates a range from this value to the specified [other] value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun rangeTo(other: UByte): UIntRange = UIntRange(this.toUInt(), other.toUInt())\n\n    /** Performs a bitwise AND operation between the two values. */\n    @kotlin.internal.InlineOnly\n    public inline infix fun and(other: UByte): UByte = UByte(this.data and other.data)\n    /** Performs a bitwise OR operation between the two values. */\n    @kotlin.internal.InlineOnly\n    public inline infix fun or(other: UByte): UByte = UByte(this.data or other.data)\n    /** Performs a bitwise XOR operation between the two values. */\n    @kotlin.internal.InlineOnly\n    public inline infix fun xor(other: UByte): UByte = UByte(this.data xor other.data)\n    /** Inverts the bits in this value. */\n    @kotlin.internal.InlineOnly\n    public inline fun inv(): UByte = UByte(data.inv())\n\n    /**\n     * Converts this [UByte] value to [Byte].\n     *\n     * If this value is less than or equals to [Byte.MAX_VALUE], the resulting `Byte` value represents\n     * the same numerical value as this `UByte`. Otherwise the result is negative.\n     *\n     * The resulting `Byte` value has the same binary representation as this `UByte` value.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toByte(): Byte = data\n    /**\n     * Converts this [UByte] value to [Short].\n     *\n     * The resulting `Short` value represents the same numerical value as this `UByte`.\n     *\n     * The least significant 8 bits of the resulting `Short` value are the same as the bits of this `UByte` value,\n     * whereas the most significant 8 bits are filled with zeros.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toShort(): Short = data.toShort() and 0xFF\n    /**\n     * Converts this [UByte] value to [Int].\n     *\n     * The resulting `Int` value represents the same numerical value as this `UByte`.\n     *\n     * The least significant 8 bits of the resulting `Int` value are the same as the bits of this `UByte` value,\n     * whereas the most significant 24 bits are filled with zeros.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toInt(): Int = data.toInt() and 0xFF\n    /**\n     * Converts this [UByte] value to [Long].\n     *\n     * The resulting `Long` value represents the same numerical value as this `UByte`.\n     *\n     * The least significant 8 bits of the resulting `Long` value are the same as the bits of this `UByte` value,\n     * whereas the most significant 56 bits are filled with zeros.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toLong(): Long = data.toLong() and 0xFF\n\n    /** Returns this value. */\n    @kotlin.internal.InlineOnly\n    public inline fun toUByte(): UByte = this\n    /**\n     * Converts this [UByte] value to [UShort].\n     *\n     * The resulting `UShort` value represents the same numerical value as this `UByte`.\n     *\n     * The least significant 8 bits of the resulting `UShort` value are the same as the bits of this `UByte` value,\n     * whereas the most significant 8 bits are filled with zeros.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toUShort(): UShort = UShort(data.toShort() and 0xFF)\n    /**\n     * Converts this [UByte] value to [UInt].\n     *\n     * The resulting `UInt` value represents the same numerical value as this `UByte`.\n     *\n     * The least significant 8 bits of the resulting `UInt` value are the same as the bits of this `UByte` value,\n     * whereas the most significant 24 bits are filled with zeros.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toUInt(): UInt = UInt(data.toInt() and 0xFF)\n    /**\n     * Converts this [UByte] value to [ULong].\n     *\n     * The resulting `ULong` value represents the same numerical value as this `UByte`.\n     *\n     * The least significant 8 bits of the resulting `ULong` value are the same as the bits of this `UByte` value,\n     * whereas the most significant 56 bits are filled with zeros.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toULong(): ULong = ULong(data.toLong() and 0xFF)\n\n    /**\n     * Converts this [UByte] value to [Float].\n     *\n     * The resulting `Float` value represents the same numerical value as this `UByte`.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toFloat(): Float = this.toInt().toFloat()\n    /**\n     * Converts this [UByte] value to [Double].\n     *\n     * The resulting `Double` value represents the same numerical value as this `UByte`.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toDouble(): Double = this.toInt().toDouble()\n\n    public override fun toString(): String = toInt().toString()\n\n}\n\n/**\n * Converts this [Byte] value to [UByte].\n *\n * If this value is positive, the resulting `UByte` value represents the same numerical value as this `Byte`.\n *\n * The resulting `UByte` value has the same binary representation as this `Byte` value.\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun Byte.toUByte(): UByte = UByte(this)\n/**\n * Converts this [Short] value to [UByte].\n *\n * If this value is positive and less than or equals to [UByte.MAX_VALUE], the resulting `UByte` value represents\n * the same numerical value as this `Short`.\n *\n * The resulting `UByte` value is represented by the least significant 8 bits of this `Short` value.\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun Short.toUByte(): UByte = UByte(this.toByte())\n/**\n * Converts this [Int] value to [UByte].\n *\n * If this value is positive and less than or equals to [UByte.MAX_VALUE], the resulting `UByte` value represents\n * the same numerical value as this `Int`.\n *\n * The resulting `UByte` value is represented by the least significant 8 bits of this `Int` value.\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun Int.toUByte(): UByte = UByte(this.toByte())\n/**\n * Converts this [Long] value to [UByte].\n *\n * If this value is positive and less than or equals to [UByte.MAX_VALUE], the resulting `UByte` value represents\n * the same numerical value as this `Long`.\n *\n * The resulting `UByte` value is represented by the least significant 8 bits of this `Long` value.\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun Long.toUByte(): UByte = UByte(this.toByte())\n","/*\n * Copyright 2010-2021 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n// Auto-generated file. DO NOT EDIT!\n\npackage kotlin\n\nimport kotlin.experimental.*\nimport kotlin.jvm.*\n\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@JvmInline\npublic value class UInt @PublishedApi internal constructor(@PublishedApi internal val data: Int) : Comparable<UInt> {\n\n    companion object {\n        /**\n         * A constant holding the minimum value an instance of UInt can have.\n         */\n        public const val MIN_VALUE: UInt = UInt(0)\n\n        /**\n         * A constant holding the maximum value an instance of UInt can have.\n         */\n        public const val MAX_VALUE: UInt = UInt(-1)\n\n        /**\n         * The number of bytes used to represent an instance of UInt in a binary form.\n         */\n        public const val SIZE_BYTES: Int = 4\n\n        /**\n         * The number of bits used to represent an instance of UInt in a binary form.\n         */\n        public const val SIZE_BITS: Int = 32\n    }\n\n    /**\n     * Compares this value with the specified value for order.\n     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,\n     * or a positive number if it's greater than other.\n     */\n    @kotlin.internal.InlineOnly\n    public inline operator fun compareTo(other: UByte): Int = this.compareTo(other.toUInt())\n\n    /**\n     * Compares this value with the specified value for order.\n     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,\n     * or a positive number if it's greater than other.\n     */\n    @kotlin.internal.InlineOnly\n    public inline operator fun compareTo(other: UShort): Int = this.compareTo(other.toUInt())\n\n    /**\n     * Compares this value with the specified value for order.\n     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,\n     * or a positive number if it's greater than other.\n     */\n    @kotlin.internal.InlineOnly\n    @Suppress(\"OVERRIDE_BY_INLINE\")\n    public override inline operator fun compareTo(other: UInt): Int = uintCompare(this.data, other.data)\n\n    /**\n     * Compares this value with the specified value for order.\n     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,\n     * or a positive number if it's greater than other.\n     */\n    @kotlin.internal.InlineOnly\n    public inline operator fun compareTo(other: ULong): Int = this.toULong().compareTo(other)\n\n    /** Adds the other value to this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun plus(other: UByte): UInt = this.plus(other.toUInt())\n    /** Adds the other value to this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun plus(other: UShort): UInt = this.plus(other.toUInt())\n    /** Adds the other value to this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun plus(other: UInt): UInt = UInt(this.data.plus(other.data))\n    /** Adds the other value to this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun plus(other: ULong): ULong = this.toULong().plus(other)\n\n    /** Subtracts the other value from this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun minus(other: UByte): UInt = this.minus(other.toUInt())\n    /** Subtracts the other value from this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun minus(other: UShort): UInt = this.minus(other.toUInt())\n    /** Subtracts the other value from this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun minus(other: UInt): UInt = UInt(this.data.minus(other.data))\n    /** Subtracts the other value from this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun minus(other: ULong): ULong = this.toULong().minus(other)\n\n    /** Multiplies this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun times(other: UByte): UInt = this.times(other.toUInt())\n    /** Multiplies this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun times(other: UShort): UInt = this.times(other.toUInt())\n    /** Multiplies this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun times(other: UInt): UInt = UInt(this.data.times(other.data))\n    /** Multiplies this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun times(other: ULong): ULong = this.toULong().times(other)\n\n    /** Divides this value by the other value, truncating the result to an integer that is closer to zero. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun div(other: UByte): UInt = this.div(other.toUInt())\n    /** Divides this value by the other value, truncating the result to an integer that is closer to zero. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun div(other: UShort): UInt = this.div(other.toUInt())\n    /** Divides this value by the other value, truncating the result to an integer that is closer to zero. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun div(other: UInt): UInt = uintDivide(this, other)\n    /** Divides this value by the other value, truncating the result to an integer that is closer to zero. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun div(other: ULong): ULong = this.toULong().div(other)\n\n    /**\n     * Calculates the remainder of truncating division of this value by the other value.\n     * \n     * The result is always less than the divisor.\n     */\n    @kotlin.internal.InlineOnly\n    public inline operator fun rem(other: UByte): UInt = this.rem(other.toUInt())\n    /**\n     * Calculates the remainder of truncating division of this value by the other value.\n     * \n     * The result is always less than the divisor.\n     */\n    @kotlin.internal.InlineOnly\n    public inline operator fun rem(other: UShort): UInt = this.rem(other.toUInt())\n    /**\n     * Calculates the remainder of truncating division of this value by the other value.\n     * \n     * The result is always less than the divisor.\n     */\n    @kotlin.internal.InlineOnly\n    public inline operator fun rem(other: UInt): UInt = uintRemainder(this, other)\n    /**\n     * Calculates the remainder of truncating division of this value by the other value.\n     * \n     * The result is always less than the divisor.\n     */\n    @kotlin.internal.InlineOnly\n    public inline operator fun rem(other: ULong): ULong = this.toULong().rem(other)\n\n    /**\n     * Divides this value by the other value, flooring the result to an integer that is closer to negative infinity.\n     * \n     * For unsigned types, the results of flooring division and truncating division are the same.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun floorDiv(other: UByte): UInt = this.floorDiv(other.toUInt())\n    /**\n     * Divides this value by the other value, flooring the result to an integer that is closer to negative infinity.\n     * \n     * For unsigned types, the results of flooring division and truncating division are the same.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun floorDiv(other: UShort): UInt = this.floorDiv(other.toUInt())\n    /**\n     * Divides this value by the other value, flooring the result to an integer that is closer to negative infinity.\n     * \n     * For unsigned types, the results of flooring division and truncating division are the same.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun floorDiv(other: UInt): UInt = div(other)\n    /**\n     * Divides this value by the other value, flooring the result to an integer that is closer to negative infinity.\n     * \n     * For unsigned types, the results of flooring division and truncating division are the same.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun floorDiv(other: ULong): ULong = this.toULong().floorDiv(other)\n\n    /**\n     * Calculates the remainder of flooring division of this value by the other value.\n     * \n     * The result is always less than the divisor.\n     * \n     * For unsigned types, the remainders of flooring division and truncating division are the same.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun mod(other: UByte): UByte = this.mod(other.toUInt()).toUByte()\n    /**\n     * Calculates the remainder of flooring division of this value by the other value.\n     * \n     * The result is always less than the divisor.\n     * \n     * For unsigned types, the remainders of flooring division and truncating division are the same.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun mod(other: UShort): UShort = this.mod(other.toUInt()).toUShort()\n    /**\n     * Calculates the remainder of flooring division of this value by the other value.\n     * \n     * The result is always less than the divisor.\n     * \n     * For unsigned types, the remainders of flooring division and truncating division are the same.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun mod(other: UInt): UInt = rem(other)\n    /**\n     * Calculates the remainder of flooring division of this value by the other value.\n     * \n     * The result is always less than the divisor.\n     * \n     * For unsigned types, the remainders of flooring division and truncating division are the same.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun mod(other: ULong): ULong = this.toULong().mod(other)\n\n    /** Increments this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun inc(): UInt = UInt(data.inc())\n    /** Decrements this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun dec(): UInt = UInt(data.dec())\n\n    /** Creates a range from this value to the specified [other] value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun rangeTo(other: UInt): UIntRange = UIntRange(this, other)\n\n    /**\n     * Shifts this value left by the [bitCount] number of bits.\n     *\n     * Note that only the five lowest-order bits of the [bitCount] are used as the shift distance.\n     * The shift distance actually used is therefore always in the range `0..31`.\n     */\n    @kotlin.internal.InlineOnly\n    public inline infix fun shl(bitCount: Int): UInt = UInt(data shl bitCount)\n\n    /**\n     * Shifts this value right by the [bitCount] number of bits, filling the leftmost bits with zeros.\n     *\n     * Note that only the five lowest-order bits of the [bitCount] are used as the shift distance.\n     * The shift distance actually used is therefore always in the range `0..31`.\n     */\n    @kotlin.internal.InlineOnly\n    public inline infix fun shr(bitCount: Int): UInt = UInt(data ushr bitCount)\n\n    /** Performs a bitwise AND operation between the two values. */\n    @kotlin.internal.InlineOnly\n    public inline infix fun and(other: UInt): UInt = UInt(this.data and other.data)\n    /** Performs a bitwise OR operation between the two values. */\n    @kotlin.internal.InlineOnly\n    public inline infix fun or(other: UInt): UInt = UInt(this.data or other.data)\n    /** Performs a bitwise XOR operation between the two values. */\n    @kotlin.internal.InlineOnly\n    public inline infix fun xor(other: UInt): UInt = UInt(this.data xor other.data)\n    /** Inverts the bits in this value. */\n    @kotlin.internal.InlineOnly\n    public inline fun inv(): UInt = UInt(data.inv())\n\n    /**\n     * Converts this [UInt] value to [Byte].\n     *\n     * If this value is less than or equals to [Byte.MAX_VALUE], the resulting `Byte` value represents\n     * the same numerical value as this `UInt`.\n     *\n     * The resulting `Byte` value is represented by the least significant 8 bits of this `UInt` value.\n     * Note that the resulting `Byte` value may be negative.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toByte(): Byte = data.toByte()\n    /**\n     * Converts this [UInt] value to [Short].\n     *\n     * If this value is less than or equals to [Short.MAX_VALUE], the resulting `Short` value represents\n     * the same numerical value as this `UInt`.\n     *\n     * The resulting `Short` value is represented by the least significant 16 bits of this `UInt` value.\n     * Note that the resulting `Short` value may be negative.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toShort(): Short = data.toShort()\n    /**\n     * Converts this [UInt] value to [Int].\n     *\n     * If this value is less than or equals to [Int.MAX_VALUE], the resulting `Int` value represents\n     * the same numerical value as this `UInt`. Otherwise the result is negative.\n     *\n     * The resulting `Int` value has the same binary representation as this `UInt` value.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toInt(): Int = data\n    /**\n     * Converts this [UInt] value to [Long].\n     *\n     * The resulting `Long` value represents the same numerical value as this `UInt`.\n     *\n     * The least significant 32 bits of the resulting `Long` value are the same as the bits of this `UInt` value,\n     * whereas the most significant 32 bits are filled with zeros.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toLong(): Long = data.toLong() and 0xFFFF_FFFF\n\n    /**\n     * Converts this [UInt] value to [UByte].\n     *\n     * If this value is less than or equals to [UByte.MAX_VALUE], the resulting `UByte` value represents\n     * the same numerical value as this `UInt`.\n     *\n     * The resulting `UByte` value is represented by the least significant 8 bits of this `UInt` value.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toUByte(): UByte = data.toUByte()\n    /**\n     * Converts this [UInt] value to [UShort].\n     *\n     * If this value is less than or equals to [UShort.MAX_VALUE], the resulting `UShort` value represents\n     * the same numerical value as this `UInt`.\n     *\n     * The resulting `UShort` value is represented by the least significant 16 bits of this `UInt` value.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toUShort(): UShort = data.toUShort()\n    /** Returns this value. */\n    @kotlin.internal.InlineOnly\n    public inline fun toUInt(): UInt = this\n    /**\n     * Converts this [UInt] value to [ULong].\n     *\n     * The resulting `ULong` value represents the same numerical value as this `UInt`.\n     *\n     * The least significant 32 bits of the resulting `ULong` value are the same as the bits of this `UInt` value,\n     * whereas the most significant 32 bits are filled with zeros.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toULong(): ULong = ULong(data.toLong() and 0xFFFF_FFFF)\n\n    /**\n     * Converts this [UInt] value to [Float].\n     *\n     * The resulting value is the closest `Float` to this `UInt` value.\n     * In case when this `UInt` value is exactly between two `Float`s,\n     * the one with zero at least significant bit of mantissa is selected.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toFloat(): Float = this.toDouble().toFloat()\n    /**\n     * Converts this [UInt] value to [Double].\n     *\n     * The resulting `Double` value represents the same numerical value as this `UInt`.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toDouble(): Double = uintToDouble(data)\n\n    public override fun toString(): String = toLong().toString()\n\n}\n\n/**\n * Converts this [Byte] value to [UInt].\n *\n * If this value is positive, the resulting `UInt` value represents the same numerical value as this `Byte`.\n *\n * The least significant 8 bits of the resulting `UInt` value are the same as the bits of this `Byte` value,\n * whereas the most significant 24 bits are filled with the sign bit of this value.\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun Byte.toUInt(): UInt = UInt(this.toInt())\n/**\n * Converts this [Short] value to [UInt].\n *\n * If this value is positive, the resulting `UInt` value represents the same numerical value as this `Short`.\n *\n * The least significant 16 bits of the resulting `UInt` value are the same as the bits of this `Short` value,\n * whereas the most significant 16 bits are filled with the sign bit of this value.\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun Short.toUInt(): UInt = UInt(this.toInt())\n/**\n * Converts this [Int] value to [UInt].\n *\n * If this value is positive, the resulting `UInt` value represents the same numerical value as this `Int`.\n *\n * The resulting `UInt` value has the same binary representation as this `Int` value.\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun Int.toUInt(): UInt = UInt(this)\n/**\n * Converts this [Long] value to [UInt].\n *\n * If this value is positive and less than or equals to [UInt.MAX_VALUE], the resulting `UInt` value represents\n * the same numerical value as this `Long`.\n *\n * The resulting `UInt` value is represented by the least significant 32 bits of this `Long` value.\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun Long.toUInt(): UInt = UInt(this.toInt())\n\n/**\n * Converts this [Float] value to [UInt].\n *\n * The fractional part, if any, is rounded down towards zero.\n * Returns zero if this `Float` value is negative or `NaN`, [UInt.MAX_VALUE] if it's bigger than `UInt.MAX_VALUE`.\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun Float.toUInt(): UInt = doubleToUInt(this.toDouble())\n/**\n * Converts this [Double] value to [UInt].\n *\n * The fractional part, if any, is rounded down towards zero.\n * Returns zero if this `Double` value is negative or `NaN`, [UInt.MAX_VALUE] if it's bigger than `UInt.MAX_VALUE`.\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun Double.toUInt(): UInt = doubleToUInt(this)\n","/*\n * Copyright 2010-2021 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n// Auto-generated file. DO NOT EDIT!\n\npackage kotlin\n\nimport kotlin.experimental.*\nimport kotlin.jvm.*\n\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@JvmInline\npublic value class UShort @PublishedApi internal constructor(@PublishedApi internal val data: Short) : Comparable<UShort> {\n\n    companion object {\n        /**\n         * A constant holding the minimum value an instance of UShort can have.\n         */\n        public const val MIN_VALUE: UShort = UShort(0)\n\n        /**\n         * A constant holding the maximum value an instance of UShort can have.\n         */\n        public const val MAX_VALUE: UShort = UShort(-1)\n\n        /**\n         * The number of bytes used to represent an instance of UShort in a binary form.\n         */\n        public const val SIZE_BYTES: Int = 2\n\n        /**\n         * The number of bits used to represent an instance of UShort in a binary form.\n         */\n        public const val SIZE_BITS: Int = 16\n    }\n\n    /**\n     * Compares this value with the specified value for order.\n     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,\n     * or a positive number if it's greater than other.\n     */\n    @kotlin.internal.InlineOnly\n    public inline operator fun compareTo(other: UByte): Int = this.toInt().compareTo(other.toInt())\n\n    /**\n     * Compares this value with the specified value for order.\n     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,\n     * or a positive number if it's greater than other.\n     */\n    @kotlin.internal.InlineOnly\n    @Suppress(\"OVERRIDE_BY_INLINE\")\n    public override inline operator fun compareTo(other: UShort): Int = this.toInt().compareTo(other.toInt())\n\n    /**\n     * Compares this value with the specified value for order.\n     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,\n     * or a positive number if it's greater than other.\n     */\n    @kotlin.internal.InlineOnly\n    public inline operator fun compareTo(other: UInt): Int = this.toUInt().compareTo(other)\n\n    /**\n     * Compares this value with the specified value for order.\n     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,\n     * or a positive number if it's greater than other.\n     */\n    @kotlin.internal.InlineOnly\n    public inline operator fun compareTo(other: ULong): Int = this.toULong().compareTo(other)\n\n    /** Adds the other value to this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun plus(other: UByte): UInt = this.toUInt().plus(other.toUInt())\n    /** Adds the other value to this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun plus(other: UShort): UInt = this.toUInt().plus(other.toUInt())\n    /** Adds the other value to this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun plus(other: UInt): UInt = this.toUInt().plus(other)\n    /** Adds the other value to this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun plus(other: ULong): ULong = this.toULong().plus(other)\n\n    /** Subtracts the other value from this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun minus(other: UByte): UInt = this.toUInt().minus(other.toUInt())\n    /** Subtracts the other value from this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun minus(other: UShort): UInt = this.toUInt().minus(other.toUInt())\n    /** Subtracts the other value from this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun minus(other: UInt): UInt = this.toUInt().minus(other)\n    /** Subtracts the other value from this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun minus(other: ULong): ULong = this.toULong().minus(other)\n\n    /** Multiplies this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun times(other: UByte): UInt = this.toUInt().times(other.toUInt())\n    /** Multiplies this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun times(other: UShort): UInt = this.toUInt().times(other.toUInt())\n    /** Multiplies this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun times(other: UInt): UInt = this.toUInt().times(other)\n    /** Multiplies this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun times(other: ULong): ULong = this.toULong().times(other)\n\n    /** Divides this value by the other value, truncating the result to an integer that is closer to zero. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun div(other: UByte): UInt = this.toUInt().div(other.toUInt())\n    /** Divides this value by the other value, truncating the result to an integer that is closer to zero. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun div(other: UShort): UInt = this.toUInt().div(other.toUInt())\n    /** Divides this value by the other value, truncating the result to an integer that is closer to zero. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun div(other: UInt): UInt = this.toUInt().div(other)\n    /** Divides this value by the other value, truncating the result to an integer that is closer to zero. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun div(other: ULong): ULong = this.toULong().div(other)\n\n    /**\n     * Calculates the remainder of truncating division of this value by the other value.\n     * \n     * The result is always less than the divisor.\n     */\n    @kotlin.internal.InlineOnly\n    public inline operator fun rem(other: UByte): UInt = this.toUInt().rem(other.toUInt())\n    /**\n     * Calculates the remainder of truncating division of this value by the other value.\n     * \n     * The result is always less than the divisor.\n     */\n    @kotlin.internal.InlineOnly\n    public inline operator fun rem(other: UShort): UInt = this.toUInt().rem(other.toUInt())\n    /**\n     * Calculates the remainder of truncating division of this value by the other value.\n     * \n     * The result is always less than the divisor.\n     */\n    @kotlin.internal.InlineOnly\n    public inline operator fun rem(other: UInt): UInt = this.toUInt().rem(other)\n    /**\n     * Calculates the remainder of truncating division of this value by the other value.\n     * \n     * The result is always less than the divisor.\n     */\n    @kotlin.internal.InlineOnly\n    public inline operator fun rem(other: ULong): ULong = this.toULong().rem(other)\n\n    /**\n     * Divides this value by the other value, flooring the result to an integer that is closer to negative infinity.\n     * \n     * For unsigned types, the results of flooring division and truncating division are the same.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun floorDiv(other: UByte): UInt = this.toUInt().floorDiv(other.toUInt())\n    /**\n     * Divides this value by the other value, flooring the result to an integer that is closer to negative infinity.\n     * \n     * For unsigned types, the results of flooring division and truncating division are the same.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun floorDiv(other: UShort): UInt = this.toUInt().floorDiv(other.toUInt())\n    /**\n     * Divides this value by the other value, flooring the result to an integer that is closer to negative infinity.\n     * \n     * For unsigned types, the results of flooring division and truncating division are the same.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun floorDiv(other: UInt): UInt = this.toUInt().floorDiv(other)\n    /**\n     * Divides this value by the other value, flooring the result to an integer that is closer to negative infinity.\n     * \n     * For unsigned types, the results of flooring division and truncating division are the same.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun floorDiv(other: ULong): ULong = this.toULong().floorDiv(other)\n\n    /**\n     * Calculates the remainder of flooring division of this value by the other value.\n     * \n     * The result is always less than the divisor.\n     * \n     * For unsigned types, the remainders of flooring division and truncating division are the same.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun mod(other: UByte): UByte = this.toUInt().mod(other.toUInt()).toUByte()\n    /**\n     * Calculates the remainder of flooring division of this value by the other value.\n     * \n     * The result is always less than the divisor.\n     * \n     * For unsigned types, the remainders of flooring division and truncating division are the same.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun mod(other: UShort): UShort = this.toUInt().mod(other.toUInt()).toUShort()\n    /**\n     * Calculates the remainder of flooring division of this value by the other value.\n     * \n     * The result is always less than the divisor.\n     * \n     * For unsigned types, the remainders of flooring division and truncating division are the same.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun mod(other: UInt): UInt = this.toUInt().mod(other)\n    /**\n     * Calculates the remainder of flooring division of this value by the other value.\n     * \n     * The result is always less than the divisor.\n     * \n     * For unsigned types, the remainders of flooring division and truncating division are the same.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun mod(other: ULong): ULong = this.toULong().mod(other)\n\n    /** Increments this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun inc(): UShort = UShort(data.inc())\n    /** Decrements this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun dec(): UShort = UShort(data.dec())\n\n    /** Creates a range from this value to the specified [other] value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun rangeTo(other: UShort): UIntRange = UIntRange(this.toUInt(), other.toUInt())\n\n    /** Performs a bitwise AND operation between the two values. */\n    @kotlin.internal.InlineOnly\n    public inline infix fun and(other: UShort): UShort = UShort(this.data and other.data)\n    /** Performs a bitwise OR operation between the two values. */\n    @kotlin.internal.InlineOnly\n    public inline infix fun or(other: UShort): UShort = UShort(this.data or other.data)\n    /** Performs a bitwise XOR operation between the two values. */\n    @kotlin.internal.InlineOnly\n    public inline infix fun xor(other: UShort): UShort = UShort(this.data xor other.data)\n    /** Inverts the bits in this value. */\n    @kotlin.internal.InlineOnly\n    public inline fun inv(): UShort = UShort(data.inv())\n\n    /**\n     * Converts this [UShort] value to [Byte].\n     *\n     * If this value is less than or equals to [Byte.MAX_VALUE], the resulting `Byte` value represents\n     * the same numerical value as this `UShort`.\n     *\n     * The resulting `Byte` value is represented by the least significant 8 bits of this `UShort` value.\n     * Note that the resulting `Byte` value may be negative.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toByte(): Byte = data.toByte()\n    /**\n     * Converts this [UShort] value to [Short].\n     *\n     * If this value is less than or equals to [Short.MAX_VALUE], the resulting `Short` value represents\n     * the same numerical value as this `UShort`. Otherwise the result is negative.\n     *\n     * The resulting `Short` value has the same binary representation as this `UShort` value.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toShort(): Short = data\n    /**\n     * Converts this [UShort] value to [Int].\n     *\n     * The resulting `Int` value represents the same numerical value as this `UShort`.\n     *\n     * The least significant 16 bits of the resulting `Int` value are the same as the bits of this `UShort` value,\n     * whereas the most significant 16 bits are filled with zeros.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toInt(): Int = data.toInt() and 0xFFFF\n    /**\n     * Converts this [UShort] value to [Long].\n     *\n     * The resulting `Long` value represents the same numerical value as this `UShort`.\n     *\n     * The least significant 16 bits of the resulting `Long` value are the same as the bits of this `UShort` value,\n     * whereas the most significant 48 bits are filled with zeros.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toLong(): Long = data.toLong() and 0xFFFF\n\n    /**\n     * Converts this [UShort] value to [UByte].\n     *\n     * If this value is less than or equals to [UByte.MAX_VALUE], the resulting `UByte` value represents\n     * the same numerical value as this `UShort`.\n     *\n     * The resulting `UByte` value is represented by the least significant 8 bits of this `UShort` value.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toUByte(): UByte = data.toUByte()\n    /** Returns this value. */\n    @kotlin.internal.InlineOnly\n    public inline fun toUShort(): UShort = this\n    /**\n     * Converts this [UShort] value to [UInt].\n     *\n     * The resulting `UInt` value represents the same numerical value as this `UShort`.\n     *\n     * The least significant 16 bits of the resulting `UInt` value are the same as the bits of this `UShort` value,\n     * whereas the most significant 16 bits are filled with zeros.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toUInt(): UInt = UInt(data.toInt() and 0xFFFF)\n    /**\n     * Converts this [UShort] value to [ULong].\n     *\n     * The resulting `ULong` value represents the same numerical value as this `UShort`.\n     *\n     * The least significant 16 bits of the resulting `ULong` value are the same as the bits of this `UShort` value,\n     * whereas the most significant 48 bits are filled with zeros.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toULong(): ULong = ULong(data.toLong() and 0xFFFF)\n\n    /**\n     * Converts this [UShort] value to [Float].\n     *\n     * The resulting `Float` value represents the same numerical value as this `UShort`.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toFloat(): Float = this.toInt().toFloat()\n    /**\n     * Converts this [UShort] value to [Double].\n     *\n     * The resulting `Double` value represents the same numerical value as this `UShort`.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toDouble(): Double = this.toInt().toDouble()\n\n    public override fun toString(): String = toInt().toString()\n\n}\n\n/**\n * Converts this [Byte] value to [UShort].\n *\n * If this value is positive, the resulting `UShort` value represents the same numerical value as this `Byte`.\n *\n * The least significant 8 bits of the resulting `UShort` value are the same as the bits of this `Byte` value,\n * whereas the most significant 8 bits are filled with the sign bit of this value.\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun Byte.toUShort(): UShort = UShort(this.toShort())\n/**\n * Converts this [Short] value to [UShort].\n *\n * If this value is positive, the resulting `UShort` value represents the same numerical value as this `Short`.\n *\n * The resulting `UShort` value has the same binary representation as this `Short` value.\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun Short.toUShort(): UShort = UShort(this)\n/**\n * Converts this [Int] value to [UShort].\n *\n * If this value is positive and less than or equals to [UShort.MAX_VALUE], the resulting `UShort` value represents\n * the same numerical value as this `Int`.\n *\n * The resulting `UShort` value is represented by the least significant 16 bits of this `Int` value.\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun Int.toUShort(): UShort = UShort(this.toShort())\n/**\n * Converts this [Long] value to [UShort].\n *\n * If this value is positive and less than or equals to [UShort.MAX_VALUE], the resulting `UShort` value represents\n * the same numerical value as this `Long`.\n *\n * The resulting `UShort` value is represented by the least significant 16 bits of this `Long` value.\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun Long.toUShort(): UShort = UShort(this.toShort())\n","/*\n * Copyright 2010-2021 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n// Auto-generated file. DO NOT EDIT!\n\npackage kotlin.ranges\n\n/**\n * A range of values of type `Char`.\n */\npublic class CharRange(start: Char, endInclusive: Char) : CharProgression(start, endInclusive, 1), ClosedRange<Char> {\n    override val start: Char get() = first\n    override val endInclusive: Char get() = last\n\n    override fun contains(value: Char): Boolean = first <= value && value <= last\n\n    /** \n     * Checks whether the range is empty.\n     *\n     * The range is empty if its start value is greater than the end value.\n     */\n    override fun isEmpty(): Boolean = first > last\n\n    override fun equals(other: Any?): Boolean =\n        other is CharRange && (isEmpty() && other.isEmpty() ||\n        first == other.first && last == other.last)\n\n    override fun hashCode(): Int =\n        if (isEmpty()) -1 else (31 * first.code + last.code)\n\n    override fun toString(): String = \"$first..$last\"\n\n    companion object {\n        /** An empty range of values of type Char. */\n        public val EMPTY: CharRange = CharRange(1.toChar(), 0.toChar())\n    }\n}\n\n/**\n * A range of values of type `Int`.\n */\npublic class IntRange(start: Int, endInclusive: Int) : IntProgression(start, endInclusive, 1), ClosedRange<Int> {\n    override val start: Int get() = first\n    override val endInclusive: Int get() = last\n\n    override fun contains(value: Int): Boolean = first <= value && value <= last\n\n    /** \n     * Checks whether the range is empty.\n     *\n     * The range is empty if its start value is greater than the end value.\n     */\n    override fun isEmpty(): Boolean = first > last\n\n    override fun equals(other: Any?): Boolean =\n        other is IntRange && (isEmpty() && other.isEmpty() ||\n        first == other.first && last == other.last)\n\n    override fun hashCode(): Int =\n        if (isEmpty()) -1 else (31 * first + last)\n\n    override fun toString(): String = \"$first..$last\"\n\n    companion object {\n        /** An empty range of values of type Int. */\n        public val EMPTY: IntRange = IntRange(1, 0)\n    }\n}\n\n/**\n * A range of values of type `Long`.\n */\npublic class LongRange(start: Long, endInclusive: Long) : LongProgression(start, endInclusive, 1), ClosedRange<Long> {\n    override val start: Long get() = first\n    override val endInclusive: Long get() = last\n\n    override fun contains(value: Long): Boolean = first <= value && value <= last\n\n    /** \n     * Checks whether the range is empty.\n     *\n     * The range is empty if its start value is greater than the end value.\n     */\n    override fun isEmpty(): Boolean = first > last\n\n    override fun equals(other: Any?): Boolean =\n        other is LongRange && (isEmpty() && other.isEmpty() ||\n        first == other.first && last == other.last)\n\n    override fun hashCode(): Int =\n        if (isEmpty()) -1 else (31 * (first xor (first ushr 32)) + (last xor (last ushr 32))).toInt()\n\n    override fun toString(): String = \"$first..$last\"\n\n    companion object {\n        /** An empty range of values of type Long. */\n        public val EMPTY: LongRange = LongRange(1, 0)\n    }\n}\n\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"SetsKt\")\n@file:OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n\npackage kotlin.collections\n\nimport kotlin.contracts.*\n\ninternal object EmptySet : Set<Nothing>, Serializable {\n    private const val serialVersionUID: Long = 3406603774387020532\n\n    override fun equals(other: Any?): Boolean = other is Set<*> && other.isEmpty()\n    override fun hashCode(): Int = 0\n    override fun toString(): String = \"[]\"\n\n    override val size: Int get() = 0\n    override fun isEmpty(): Boolean = true\n    override fun contains(element: Nothing): Boolean = false\n    override fun containsAll(elements: Collection<Nothing>): Boolean = elements.isEmpty()\n\n    override fun iterator(): Iterator<Nothing> = EmptyIterator\n\n    private fun readResolve(): Any = EmptySet\n}\n\n\n/**\n * Returns an empty read-only set.  The returned set is serializable (JVM).\n * @sample samples.collections.Collections.Sets.emptyReadOnlySet\n */\npublic fun <T> emptySet(): Set<T> = EmptySet\n\n/**\n * Returns a new read-only set with the given elements.\n * Elements of the set are iterated in the order they were specified.\n * The returned set is serializable (JVM).\n * @sample samples.collections.Collections.Sets.readOnlySet\n */\npublic fun <T> setOf(vararg elements: T): Set<T> = if (elements.size > 0) elements.toSet() else emptySet()\n\n/**\n * Returns an empty read-only set.  The returned set is serializable (JVM).\n * @sample samples.collections.Collections.Sets.emptyReadOnlySet\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> setOf(): Set<T> = emptySet()\n\n/**\n * Returns an empty new [MutableSet].\n *\n * The returned set preserves the element iteration order.\n * @sample samples.collections.Collections.Sets.emptyMutableSet\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> mutableSetOf(): MutableSet<T> = LinkedHashSet()\n\n/**\n * Returns a new [MutableSet] with the given elements.\n * Elements of the set are iterated in the order they were specified.\n * @sample samples.collections.Collections.Sets.mutableSet\n */\npublic fun <T> mutableSetOf(vararg elements: T): MutableSet<T> = elements.toCollection(LinkedHashSet(mapCapacity(elements.size)))\n\n/** Returns an empty new [HashSet]. */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> hashSetOf(): HashSet<T> = HashSet()\n\n/** Returns a new [HashSet] with the given elements. */\npublic fun <T> hashSetOf(vararg elements: T): HashSet<T> = elements.toCollection(HashSet(mapCapacity(elements.size)))\n\n/**\n * Returns an empty new [LinkedHashSet].\n * @sample samples.collections.Collections.Sets.emptyLinkedHashSet\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> linkedSetOf(): LinkedHashSet<T> = LinkedHashSet()\n\n/**\n * Returns a new [LinkedHashSet] with the given elements.\n * Elements of the set are iterated in the order they were specified.\n * @sample samples.collections.Collections.Sets.linkedHashSet\n */\npublic fun <T> linkedSetOf(vararg elements: T): LinkedHashSet<T> = elements.toCollection(LinkedHashSet(mapCapacity(elements.size)))\n\n/**\n * Returns a new read-only set either with single given element, if it is not null, or empty set if the element is null.\n * The returned set is serializable (JVM).\n * @sample samples.collections.Collections.Sets.setOfNotNull\n */\n@SinceKotlin(\"1.4\")\npublic fun <T : Any> setOfNotNull(element: T?): Set<T> = if (element != null) setOf(element) else emptySet()\n\n/**\n * Returns a new read-only set only with those given elements, that are not null.\n * Elements of the set are iterated in the order they were specified.\n * The returned set is serializable (JVM).\n * @sample samples.collections.Collections.Sets.setOfNotNull\n */\n@SinceKotlin(\"1.4\")\npublic fun <T : Any> setOfNotNull(vararg elements: T?): Set<T> {\n    return elements.filterNotNullTo(LinkedHashSet())\n}\n\n/**\n * Builds a new read-only [Set] by populating a [MutableSet] using the given [builderAction]\n * and returning a read-only set with the same elements.\n *\n * The set passed as a receiver to the [builderAction] is valid only inside that function.\n * Using it outside of the function produces an unspecified behavior.\n *\n * Elements of the set are iterated in the order they were added by the [builderAction].\n *\n * @sample samples.collections.Builders.Sets.buildSetSample\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <E> buildSet(@BuilderInference builderAction: MutableSet<E>.() -> Unit): Set<E> {\n    contract { callsInPlace(builderAction, InvocationKind.EXACTLY_ONCE) }\n    return buildSetInternal(builderAction)\n}\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\ninternal expect inline fun <E> buildSetInternal(builderAction: MutableSet<E>.() -> Unit): Set<E>\n\n/**\n * Builds a new read-only [Set] by populating a [MutableSet] using the given [builderAction]\n * and returning a read-only set with the same elements.\n *\n * The set passed as a receiver to the [builderAction] is valid only inside that function.\n * Using it outside of the function produces an unspecified behavior.\n *\n * [capacity] is used to hint the expected number of elements added in the [builderAction].\n *\n * Elements of the set are iterated in the order they were added by the [builderAction].\n *\n * @throws IllegalArgumentException if the given [capacity] is negative.\n *\n * @sample samples.collections.Builders.Sets.buildSetSample\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <E> buildSet(capacity: Int, @BuilderInference builderAction: MutableSet<E>.() -> Unit): Set<E> {\n    contract { callsInPlace(builderAction, InvocationKind.EXACTLY_ONCE) }\n    return buildSetInternal(capacity, builderAction)\n}\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\ninternal expect inline fun <E> buildSetInternal(capacity: Int, builderAction: MutableSet<E>.() -> Unit): Set<E>\n\n\n/** Returns this Set if it's not `null` and the empty set otherwise. */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Set<T>?.orEmpty(): Set<T> = this ?: emptySet()\n\ninternal fun <T> Set<T>.optimizeReadOnlySet() = when (size) {\n    0 -> emptySet()\n    1 -> setOf(iterator().next())\n    else -> this\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"StringsKt\")\n@file:Suppress(\"PLATFORM_CLASS_MAPPED_TO_KOTLIN\")\n\npackage kotlin.text\n\n/**\n * Parses the string as a signed [Byte] number and returns the result\n * or `null` if the string is not a valid representation of a number.\n */\n@SinceKotlin(\"1.1\")\npublic fun String.toByteOrNull(): Byte? = toByteOrNull(radix = 10)\n\n/**\n * Parses the string as a signed [Byte] number and returns the result\n * or `null` if the string is not a valid representation of a number.\n *\n * @throws IllegalArgumentException when [radix] is not a valid radix for string to number conversion.\n */\n@SinceKotlin(\"1.1\")\npublic fun String.toByteOrNull(radix: Int): Byte? {\n    val int = this.toIntOrNull(radix) ?: return null\n    if (int < Byte.MIN_VALUE || int > Byte.MAX_VALUE) return null\n    return int.toByte()\n}\n\n/**\n * Parses the string as a [Short] number and returns the result\n * or `null` if the string is not a valid representation of a number.\n */\n@SinceKotlin(\"1.1\")\npublic fun String.toShortOrNull(): Short? = toShortOrNull(radix = 10)\n\n/**\n * Parses the string as a [Short] number and returns the result\n * or `null` if the string is not a valid representation of a number.\n *\n * @throws IllegalArgumentException when [radix] is not a valid radix for string to number conversion.\n */\n@SinceKotlin(\"1.1\")\npublic fun String.toShortOrNull(radix: Int): Short? {\n    val int = this.toIntOrNull(radix) ?: return null\n    if (int < Short.MIN_VALUE || int > Short.MAX_VALUE) return null\n    return int.toShort()\n}\n\n/**\n * Parses the string as an [Int] number and returns the result\n * or `null` if the string is not a valid representation of a number.\n */\n@SinceKotlin(\"1.1\")\npublic fun String.toIntOrNull(): Int? = toIntOrNull(radix = 10)\n\n/**\n * Parses the string as an [Int] number and returns the result\n * or `null` if the string is not a valid representation of a number.\n *\n * @throws IllegalArgumentException when [radix] is not a valid radix for string to number conversion.\n */\n@SinceKotlin(\"1.1\")\npublic fun String.toIntOrNull(radix: Int): Int? {\n    checkRadix(radix)\n\n    val length = this.length\n    if (length == 0) return null\n\n    val start: Int\n    val isNegative: Boolean\n    val limit: Int\n\n    val firstChar = this[0]\n    if (firstChar < '0') {  // Possible leading sign\n        if (length == 1) return null  // non-digit (possible sign) only, no digits after\n\n        start = 1\n\n        if (firstChar == '-') {\n            isNegative = true\n            limit = Int.MIN_VALUE\n        } else if (firstChar == '+') {\n            isNegative = false\n            limit = -Int.MAX_VALUE\n        } else\n            return null\n    } else {\n        start = 0\n        isNegative = false\n        limit = -Int.MAX_VALUE\n    }\n\n\n    val limitForMaxRadix = (-Int.MAX_VALUE) / 36\n\n    var limitBeforeMul = limitForMaxRadix\n    var result = 0\n    for (i in start until length) {\n        val digit = digitOf(this[i], radix)\n\n        if (digit < 0) return null\n        if (result < limitBeforeMul) {\n            if (limitBeforeMul == limitForMaxRadix) {\n                limitBeforeMul = limit / radix\n\n                if (result < limitBeforeMul) {\n                    return null\n                }\n            } else {\n                return null\n            }\n        }\n\n        result *= radix\n\n        if (result < limit + digit) return null\n\n        result -= digit\n    }\n\n    return if (isNegative) result else -result\n}\n\n/**\n * Parses the string as a [Long] number and returns the result\n * or `null` if the string is not a valid representation of a number.\n */\n@SinceKotlin(\"1.1\")\npublic fun String.toLongOrNull(): Long? = toLongOrNull(radix = 10)\n\n/**\n * Parses the string as a [Long] number and returns the result\n * or `null` if the string is not a valid representation of a number.\n *\n * @throws IllegalArgumentException when [radix] is not a valid radix for string to number conversion.\n */\n@SinceKotlin(\"1.1\")\npublic fun String.toLongOrNull(radix: Int): Long? {\n    checkRadix(radix)\n\n    val length = this.length\n    if (length == 0) return null\n\n    val start: Int\n    val isNegative: Boolean\n    val limit: Long\n\n    val firstChar = this[0]\n    if (firstChar < '0') {  // Possible leading sign\n        if (length == 1) return null  // non-digit (possible sign) only, no digits after\n\n        start = 1\n\n        if (firstChar == '-') {\n            isNegative = true\n            limit = Long.MIN_VALUE\n        } else if (firstChar == '+') {\n            isNegative = false\n            limit = -Long.MAX_VALUE\n        } else\n            return null\n    } else {\n        start = 0\n        isNegative = false\n        limit = -Long.MAX_VALUE\n    }\n\n\n    val limitForMaxRadix = (-Long.MAX_VALUE) / 36\n\n    var limitBeforeMul = limitForMaxRadix\n    var result = 0L\n    for (i in start until length) {\n        val digit = digitOf(this[i], radix)\n\n        if (digit < 0) return null\n        if (result < limitBeforeMul) {\n            if (limitBeforeMul == limitForMaxRadix) {\n                limitBeforeMul = limit / radix\n\n                if (result < limitBeforeMul) {\n                    return null\n                }\n            } else {\n                return null\n            }\n        }\n\n        result *= radix\n\n        if (result < limit + digit) return null\n\n        result -= digit\n    }\n\n    return if (isNegative) result else -result\n}\n\n\ninternal fun numberFormatError(input: String): Nothing = throw NumberFormatException(\"Invalid number format: '$input'\")\n","/*\n * Copyright 2010-2021 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.time\n\nimport kotlin.contracts.*\nimport kotlin.jvm.JvmInline\nimport kotlin.math.abs\nimport kotlin.math.roundToInt\nimport kotlin.math.sign\n\n/**\n * Represents the amount of time one instant of time is away from another instant.\n *\n * A negative duration is possible in a situation when the second instant is earlier than the first one.\n * An infinite duration value [Duration.INFINITE] can be used to represent infinite timeouts.\n *\n * The type can store duration values up to ±146 years with nanosecond precision,\n * and up to ±146 million years with millisecond precision.\n *\n * To construct a duration, use either the extension function [toDuration] available on [Int], [Long], and [Double] numeric types,\n * or the `Duration` companion object functions [Duration.hours], [Duration.minutes], [Duration.seconds], and so on,\n * taking [Int], [Long], or [Double] numbers as parameters.\n *\n * To get the value of this duration expressed in a particular [duration units][DurationUnit]\n * use the functions [toInt], [toLong], and [toDouble]\n * or the properties [inWholeHours], [inWholeMinutes], [inWholeSeconds], [inWholeNanoseconds], and so on.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\n@JvmInline\npublic value class Duration internal constructor(private val rawValue: Long) : Comparable<Duration> {\n\n    private val value: Long get() = rawValue shr 1\n    private inline val unitDiscriminator: Int get() = rawValue.toInt() and 1\n    private fun isInNanos() = unitDiscriminator == 0\n    private fun isInMillis() = unitDiscriminator == 1\n    private val storageUnit get() = if (isInNanos()) DurationUnit.NANOSECONDS else DurationUnit.MILLISECONDS\n\n    init {\n        // TODO: disable assertions in final version\n        if (isInNanos()) {\n            if (value !in -MAX_NANOS..MAX_NANOS) throw AssertionError(\"$value ns is out of nanoseconds range\")\n        } else {\n            if (value !in -MAX_MILLIS..MAX_MILLIS) throw AssertionError(\"$value ms is out of milliseconds range\")\n            if (value in -MAX_NANOS_IN_MILLIS..MAX_NANOS_IN_MILLIS) throw AssertionError(\"$value ms is denormalized\")\n        }\n    }\n\n    companion object {\n        /** The duration equal to exactly 0 seconds. */\n        public val ZERO: Duration = Duration(0L)\n\n        /** The duration whose value is positive infinity. It is useful for representing timeouts that should never expire. */\n        public val INFINITE: Duration = durationOfMillis(MAX_MILLIS)\n        internal val NEG_INFINITE: Duration = durationOfMillis(-MAX_MILLIS)\n\n        /** Converts the given time duration [value] expressed in the specified [sourceUnit] into the specified [targetUnit]. */\n        public fun convert(value: Double, sourceUnit: DurationUnit, targetUnit: DurationUnit): Double =\n            convertDurationUnit(value, sourceUnit, targetUnit)\n\n        /** Returns a [Duration] representing the specified [value] number of nanoseconds. */\n        @SinceKotlin(\"1.5\")\n        public fun nanoseconds(value: Int): Duration = value.toDuration(DurationUnit.NANOSECONDS)\n\n        /** Returns a [Duration] representing the specified [value] number of nanoseconds. */\n        @SinceKotlin(\"1.5\")\n        public fun nanoseconds(value: Long): Duration = value.toDuration(DurationUnit.NANOSECONDS)\n\n        /**\n         * Returns a [Duration] representing the specified [value] number of nanoseconds.\n         *\n         * @throws IllegalArgumentException if the provided `Double` [value] is `NaN`.\n         */\n        @SinceKotlin(\"1.5\")\n        public fun nanoseconds(value: Double): Duration = value.toDuration(DurationUnit.NANOSECONDS)\n\n        /** Returns a [Duration] representing the specified [value] number of microseconds. */\n        @SinceKotlin(\"1.5\")\n        public fun microseconds(value: Int): Duration = value.toDuration(DurationUnit.MICROSECONDS)\n\n        /** Returns a [Duration] representing the specified [value] number of microseconds. */\n        @SinceKotlin(\"1.5\")\n        public fun microseconds(value: Long): Duration = value.toDuration(DurationUnit.MICROSECONDS)\n\n        /**\n         * Returns a [Duration] representing the specified [value] number of microseconds.\n         *\n         * @throws IllegalArgumentException if the provided `Double` [value] is `NaN`.\n         */\n        @SinceKotlin(\"1.5\")\n        public fun microseconds(value: Double): Duration = value.toDuration(DurationUnit.MICROSECONDS)\n\n        /** Returns a [Duration] representing the specified [value] number of milliseconds. */\n        @SinceKotlin(\"1.5\")\n        public fun milliseconds(value: Int): Duration = value.toDuration(DurationUnit.MILLISECONDS)\n\n        /** Returns a [Duration] representing the specified [value] number of milliseconds. */\n        @SinceKotlin(\"1.5\")\n        public fun milliseconds(value: Long): Duration = value.toDuration(DurationUnit.MILLISECONDS)\n\n        /**\n         * Returns a [Duration] representing the specified [value] number of milliseconds.\n         *\n         * @throws IllegalArgumentException if the provided `Double` [value] is `NaN`.\n         */\n        @SinceKotlin(\"1.5\")\n        public fun milliseconds(value: Double): Duration = value.toDuration(DurationUnit.MILLISECONDS)\n\n        /** Returns a [Duration] representing the specified [value] number of seconds. */\n        @SinceKotlin(\"1.5\")\n        public fun seconds(value: Int): Duration = value.toDuration(DurationUnit.SECONDS)\n\n        /** Returns a [Duration] representing the specified [value] number of seconds. */\n        @SinceKotlin(\"1.5\")\n        public fun seconds(value: Long): Duration = value.toDuration(DurationUnit.SECONDS)\n\n        /**\n         * Returns a [Duration] representing the specified [value] number of seconds.\n         *\n         * @throws IllegalArgumentException if the provided `Double` [value] is `NaN`.\n         */\n        @SinceKotlin(\"1.5\")\n        public fun seconds(value: Double): Duration = value.toDuration(DurationUnit.SECONDS)\n\n        /** Returns a [Duration] representing the specified [value] number of minutes. */\n        @SinceKotlin(\"1.5\")\n        public fun minutes(value: Int): Duration = value.toDuration(DurationUnit.MINUTES)\n\n        /** Returns a [Duration] representing the specified [value] number of minutes. */\n        @SinceKotlin(\"1.5\")\n        public fun minutes(value: Long): Duration = value.toDuration(DurationUnit.MINUTES)\n\n        /**\n         * Returns a [Duration] representing the specified [value] number of minutes.\n         *\n         * @throws IllegalArgumentException if the provided `Double` [value] is `NaN`.\n         */\n        @SinceKotlin(\"1.5\")\n        public fun minutes(value: Double): Duration = value.toDuration(DurationUnit.MINUTES)\n\n        /** Returns a [Duration] representing the specified [value] number of hours. */\n        @SinceKotlin(\"1.5\")\n        public fun hours(value: Int): Duration = value.toDuration(DurationUnit.HOURS)\n\n        /** Returns a [Duration] representing the specified [value] number of hours. */\n        @SinceKotlin(\"1.5\")\n        public fun hours(value: Long): Duration = value.toDuration(DurationUnit.HOURS)\n\n        /**\n         * Returns a [Duration] representing the specified [value] number of hours.\n         *\n         * @throws IllegalArgumentException if the provided `Double` [value] is `NaN`.\n         */\n        @SinceKotlin(\"1.5\")\n        public fun hours(value: Double): Duration = value.toDuration(DurationUnit.HOURS)\n\n        /** Returns a [Duration] representing the specified [value] number of days. */\n        @SinceKotlin(\"1.5\")\n        public fun days(value: Int): Duration = value.toDuration(DurationUnit.DAYS)\n\n        /** Returns a [Duration] representing the specified [value] number of days. */\n        @SinceKotlin(\"1.5\")\n        public fun days(value: Long): Duration = value.toDuration(DurationUnit.DAYS)\n\n        /**\n         * Returns a [Duration] representing the specified [value] number of days.\n         *\n         * @throws IllegalArgumentException if the provided `Double` [value] is `NaN`.\n         */\n        @SinceKotlin(\"1.5\")\n        public fun days(value: Double): Duration = value.toDuration(DurationUnit.DAYS)\n\n    }\n\n    // arithmetic operators\n\n    /** Returns the negative of this value. */\n    public operator fun unaryMinus(): Duration = durationOf(-value, unitDiscriminator)\n\n    /**\n     * Returns a duration whose value is the sum of this and [other] duration values.\n     *\n     * @throws IllegalArgumentException if the operation results in an undefined value for the given arguments,\n     * e.g. when adding infinite durations of different sign.\n     */\n    public operator fun plus(other: Duration): Duration {\n        when {\n            this.isInfinite() -> {\n                if (other.isFinite() || (this.rawValue xor other.rawValue >= 0))\n                    return this\n                else\n                    throw IllegalArgumentException(\"Summing infinite durations of different signs yields an undefined result.\")\n            }\n            other.isInfinite() -> return other\n        }\n\n        return when {\n            this.unitDiscriminator == other.unitDiscriminator -> {\n                val result = this.value + other.value // never overflows long, but can overflow long63\n                when {\n                    isInNanos() ->\n                        durationOfNanosNormalized(result)\n                    else ->\n                        durationOfMillisNormalized(result)\n                }\n            }\n            this.isInMillis() ->\n                addValuesMixedRanges(this.value, other.value)\n            else ->\n                addValuesMixedRanges(other.value, this.value)\n        }\n    }\n\n    private fun addValuesMixedRanges(thisMillis: Long, otherNanos: Long): Duration {\n        val otherMillis = nanosToMillis(otherNanos)\n        val resultMillis = thisMillis + otherMillis\n        return if (resultMillis in -MAX_NANOS_IN_MILLIS..MAX_NANOS_IN_MILLIS) {\n            val otherNanoRemainder = otherNanos - millisToNanos(otherMillis)\n            durationOfNanos(millisToNanos(resultMillis) + otherNanoRemainder)\n        } else {\n            durationOfMillis(resultMillis.coerceIn(-MAX_MILLIS, MAX_MILLIS))\n        }\n    }\n\n    /**\n     * Returns a duration whose value is the difference between this and [other] duration values.\n     *\n     * @throws IllegalArgumentException if the operation results in an undefined value for the given arguments,\n     * e.g. when subtracting infinite durations of the same sign.\n     */\n    public operator fun minus(other: Duration): Duration = this + (-other)\n\n    /**\n     * Returns a duration whose value is this duration value multiplied by the given [scale] number.\n     *\n     * @throws IllegalArgumentException if the operation results in an undefined value for the given arguments,\n     * e.g. when multiplying an infinite duration by zero.\n     */\n    public operator fun times(scale: Int): Duration {\n        if (isInfinite()) {\n            return when {\n                scale == 0 -> throw IllegalArgumentException(\"Multiplying infinite duration by zero yields an undefined result.\")\n                scale > 0 -> this\n                else -> -this\n            }\n        }\n        if (scale == 0) return ZERO\n\n        val value = value\n        val result = value * scale\n        return if (isInNanos()) {\n            if (value in (MAX_NANOS / Int.MIN_VALUE)..(-MAX_NANOS / Int.MIN_VALUE)) {\n                // can't overflow nanos range for any scale\n                durationOfNanos(result)\n            } else {\n                if (result / scale == value) {\n                    durationOfNanosNormalized(result)\n                } else {\n                    val millis = nanosToMillis(value)\n                    val remNanos = value - millisToNanos(millis)\n                    val resultMillis = millis * scale\n                    val totalMillis = resultMillis + nanosToMillis(remNanos * scale)\n                    if (resultMillis / scale == millis && totalMillis xor resultMillis >= 0) {\n                        durationOfMillis(totalMillis.coerceIn(-MAX_MILLIS..MAX_MILLIS))\n                    } else {\n                        if (value.sign * scale.sign > 0) INFINITE else NEG_INFINITE\n                    }\n                }\n            }\n        } else {\n            if (result / scale == value) {\n                durationOfMillis(result.coerceIn(-MAX_MILLIS..MAX_MILLIS))\n            } else {\n                if (value.sign * scale.sign > 0) INFINITE else NEG_INFINITE\n            }\n        }\n    }\n\n    /**\n     * Returns a duration whose value is this duration value multiplied by the given [scale] number.\n     *\n     * @throws IllegalArgumentException if the operation results in an undefined value for the given arguments,\n     * e.g. when multiplying an infinite duration by zero.\n     */\n    public operator fun times(scale: Double): Duration {\n        val intScale = scale.roundToInt()\n        if (intScale.toDouble() == scale) {\n            return times(intScale)\n        }\n\n        val unit = storageUnit\n        val result = toDouble(unit) * scale\n        return result.toDuration(unit)\n    }\n\n    /**\n     * Returns a duration whose value is this duration value divided by the given [scale] number.\n     *\n     * @throws IllegalArgumentException if the operation results in an undefined value for the given arguments,\n     * e.g. when dividing zero duration by zero.\n     */\n    public operator fun div(scale: Int): Duration {\n        if (scale == 0) {\n            return when {\n                isPositive() -> INFINITE\n                isNegative() -> NEG_INFINITE\n                else -> throw IllegalArgumentException(\"Dividing zero duration by zero yields an undefined result.\")\n            }\n        }\n        if (isInNanos()) {\n            return durationOfNanos(value / scale)\n        } else {\n            if (isInfinite())\n                return this * scale.sign\n\n            val result = value / scale\n\n            if (result in -MAX_NANOS_IN_MILLIS..MAX_NANOS_IN_MILLIS) {\n                val rem = millisToNanos(value - (result * scale)) / scale\n                return durationOfNanos(millisToNanos(result) + rem)\n            }\n            return durationOfMillis(result)\n        }\n    }\n\n    /**\n     * Returns a duration whose value is this duration value divided by the given [scale] number.\n     *\n     * @throws IllegalArgumentException if the operation results in an undefined value for the given arguments,\n     * e.g. when dividing an infinite duration by infinity or zero duration by zero.\n     */\n    public operator fun div(scale: Double): Duration {\n        val intScale = scale.roundToInt()\n        if (intScale.toDouble() == scale && intScale != 0) {\n            return div(intScale)\n        }\n\n        val unit = storageUnit\n        val result = toDouble(unit) / scale\n        return result.toDuration(unit)\n    }\n\n    /** Returns a number that is the ratio of this and [other] duration values. */\n    public operator fun div(other: Duration): Double {\n        val coarserUnit = maxOf(this.storageUnit, other.storageUnit)\n        return this.toDouble(coarserUnit) / other.toDouble(coarserUnit)\n    }\n\n    /** Returns true, if the duration value is less than zero. */\n    public fun isNegative(): Boolean = rawValue < 0\n\n    /** Returns true, if the duration value is greater than zero. */\n    public fun isPositive(): Boolean = rawValue > 0\n\n    /** Returns true, if the duration value is infinite. */\n    public fun isInfinite(): Boolean = rawValue == INFINITE.rawValue || rawValue == NEG_INFINITE.rawValue\n\n    /** Returns true, if the duration value is finite. */\n    public fun isFinite(): Boolean = !isInfinite()\n\n    /** Returns the absolute value of this value. The returned value is always non-negative. */\n    public val absoluteValue: Duration get() = if (isNegative()) -this else this\n\n    override fun compareTo(other: Duration): Int {\n        val compareBits = this.rawValue xor other.rawValue\n        if (compareBits < 0 || compareBits.toInt() and 1 == 0) // different signs or same sign/same range\n            return this.rawValue.compareTo(other.rawValue)\n        // same sign/different ranges\n        val r = this.unitDiscriminator - other.unitDiscriminator // compare ranges\n        return if (isNegative()) -r else r\n    }\n\n\n    // splitting to components\n\n    /**\n     * Splits this duration into days, hours, minutes, seconds, and nanoseconds and executes the given [action] with these components.\n     * The result of [action] is returned as the result of this function.\n     *\n     * - `nanoseconds` represents the whole number of nanoseconds in this duration, and its absolute value is less than 1_000_000_000;\n     * - `seconds` represents the whole number of seconds in this duration, and its absolute value is less than 60;\n     * - `minutes` represents the whole number of minutes in this duration, and its absolute value is less than 60;\n     * - `hours` represents the whole number of hours in this duration, and its absolute value is less than 24;\n     * - `days` represents the whole number of days in this duration.\n     *   If the value doesn't fit in [Int] range, i.e. it's greater than [Int.MAX_VALUE] or less than [Int.MIN_VALUE],\n     *   it is coerced into that range.\n     */\n    public inline fun <T> toComponents(action: (days: Int, hours: Int, minutes: Int, seconds: Int, nanoseconds: Int) -> T): T {\n        contract { callsInPlace(action, InvocationKind.EXACTLY_ONCE) }\n        return action(toInt(DurationUnit.DAYS), hoursComponent, minutesComponent, secondsComponent, nanosecondsComponent)\n    }\n\n    /**\n     * Splits this duration into hours, minutes, seconds, and nanoseconds and executes the given [action] with these components.\n     * The result of [action] is returned as the result of this function.\n     *\n     * - `nanoseconds` represents the whole number of nanoseconds in this duration, and its absolute value is less than 1_000_000_000;\n     * - `seconds` represents the whole number of seconds in this duration, and its absolute value is less than 60;\n     * - `minutes` represents the whole number of minutes in this duration, and its absolute value is less than 60;\n     * - `hours` represents the whole number of hours in this duration.\n     *   If the value doesn't fit in [Int] range, i.e. it's greater than [Int.MAX_VALUE] or less than [Int.MIN_VALUE],\n     *   it is coerced into that range.\n     */\n    public inline fun <T> toComponents(action: (hours: Int, minutes: Int, seconds: Int, nanoseconds: Int) -> T): T {\n        contract { callsInPlace(action, InvocationKind.EXACTLY_ONCE) }\n        return action(toInt(DurationUnit.HOURS), minutesComponent, secondsComponent, nanosecondsComponent)\n    }\n\n    /**\n     * Splits this duration into minutes, seconds, and nanoseconds and executes the given [action] with these components.\n     * The result of [action] is returned as the result of this function.\n     *\n     * - `nanoseconds` represents the whole number of nanoseconds in this duration, and its absolute value is less than 1_000_000_000;\n     * - `seconds` represents the whole number of seconds in this duration, and its absolute value is less than 60;\n     * - `minutes` represents the whole number of minutes in this duration.\n     *   If the value doesn't fit in [Int] range, i.e. it's greater than [Int.MAX_VALUE] or less than [Int.MIN_VALUE],\n     *   it is coerced into that range.\n     */\n    public inline fun <T> toComponents(action: (minutes: Int, seconds: Int, nanoseconds: Int) -> T): T {\n        contract { callsInPlace(action, InvocationKind.EXACTLY_ONCE) }\n        return action(toInt(DurationUnit.MINUTES), secondsComponent, nanosecondsComponent)\n    }\n\n    /**\n     * Splits this duration into seconds, and nanoseconds and executes the given [action] with these components.\n     * The result of [action] is returned as the result of this function.\n     *\n     * - `nanoseconds` represents the whole number of nanoseconds in this duration, and its absolute value is less than 1_000_000_000;\n     * - `seconds` represents the whole number of seconds in this duration.\n     *   If the value doesn't fit in [Long] range, i.e. it's greater than [Long.MAX_VALUE] or less than [Long.MIN_VALUE],\n     *   it is coerced into that range.\n     */\n    public inline fun <T> toComponents(action: (seconds: Long, nanoseconds: Int) -> T): T {\n        contract { callsInPlace(action, InvocationKind.EXACTLY_ONCE) }\n        return action(inWholeSeconds, nanosecondsComponent)\n    }\n\n    @PublishedApi\n    internal val hoursComponent: Int\n        get() = if (isInfinite()) 0 else (inWholeHours % 24).toInt()\n\n    @PublishedApi\n    internal val minutesComponent: Int\n        get() = if (isInfinite()) 0 else (inWholeMinutes % 60).toInt()\n\n    @PublishedApi\n    internal val secondsComponent: Int\n        get() = if (isInfinite()) 0 else (inWholeSeconds % 60).toInt()\n\n    @PublishedApi\n    internal val nanosecondsComponent: Int\n        get() = when {\n            isInfinite() -> 0\n            isInMillis() -> millisToNanos(value % 1_000).toInt()\n            else -> (value % 1_000_000_000).toInt()\n        }\n\n\n    // conversion to units\n\n    /**\n     * Returns the value of this duration expressed as a [Double] number of the specified [unit].\n     *\n     * An infinite duration value is converted either to [Double.POSITIVE_INFINITY] or [Double.NEGATIVE_INFINITY] depending on its sign.\n     */\n    public fun toDouble(unit: DurationUnit): Double {\n        return when (rawValue) {\n            INFINITE.rawValue -> Double.POSITIVE_INFINITY\n            NEG_INFINITE.rawValue -> Double.NEGATIVE_INFINITY\n            else -> {\n                // TODO: whether it's ok to convert to Double before scaling\n                convertDurationUnit(value.toDouble(), storageUnit, unit)\n            }\n        }\n    }\n\n    /**\n     * Returns the value of this duration expressed as a [Long] number of the specified [unit].\n     *\n     * If the result doesn't fit in the range of [Long] type, it is coerced into that range:\n     * - [Long.MIN_VALUE] is returned if it's less than `Long.MIN_VALUE`,\n     * - [Long.MAX_VALUE] is returned if it's greater than `Long.MAX_VALUE`.\n     *\n     * An infinite duration value is converted either to [Long.MAX_VALUE] or [Long.MIN_VALUE] depending on its sign.\n     */\n    public fun toLong(unit: DurationUnit): Long {\n        return when (rawValue) {\n            INFINITE.rawValue -> Long.MAX_VALUE\n            NEG_INFINITE.rawValue -> Long.MIN_VALUE\n            else -> convertDurationUnit(value, storageUnit, unit)\n        }\n    }\n\n    /**\n     * Returns the value of this duration expressed as an [Int] number of the specified [unit].\n     *\n     * If the result doesn't fit in the range of [Int] type, it is coerced into that range:\n     * - [Int.MIN_VALUE] is returned if it's less than `Int.MIN_VALUE`,\n     * - [Int.MAX_VALUE] is returned if it's greater than `Int.MAX_VALUE`.\n     *\n     * An infinite duration value is converted either to [Int.MAX_VALUE] or [Int.MIN_VALUE] depending on its sign.\n     */\n    public fun toInt(unit: DurationUnit): Int =\n        toLong(unit).coerceIn(Int.MIN_VALUE.toLong(), Int.MAX_VALUE.toLong()).toInt()\n\n    /** The value of this duration expressed as a [Double] number of days. */\n    @Deprecated(\"Use inWholeDays property instead or convert toDouble(DAYS) if a double value is required.\", ReplaceWith(\"toDouble(DurationUnit.DAYS)\"))\n    public val inDays: Double get() = toDouble(DurationUnit.DAYS)\n\n    /** The value of this duration expressed as a [Double] number of hours. */\n    @Deprecated(\"Use inWholeHours property instead or convert toDouble(HOURS) if a double value is required.\", ReplaceWith(\"toDouble(DurationUnit.HOURS)\"))\n    public val inHours: Double get() = toDouble(DurationUnit.HOURS)\n\n    /** The value of this duration expressed as a [Double] number of minutes. */\n    @Deprecated(\"Use inWholeMinutes property instead or convert toDouble(MINUTES) if a double value is required.\", ReplaceWith(\"toDouble(DurationUnit.MINUTES)\"))\n    public val inMinutes: Double get() = toDouble(DurationUnit.MINUTES)\n\n    /** The value of this duration expressed as a [Double] number of seconds. */\n    @Deprecated(\"Use inWholeSeconds property instead or convert toDouble(SECONDS) if a double value is required.\", ReplaceWith(\"toDouble(DurationUnit.SECONDS)\"))\n    public val inSeconds: Double get() = toDouble(DurationUnit.SECONDS)\n\n    /** The value of this duration expressed as a [Double] number of milliseconds. */\n    @Deprecated(\"Use inWholeMilliseconds property instead or convert toDouble(MILLISECONDS) if a double value is required.\", ReplaceWith(\"toDouble(DurationUnit.MILLISECONDS)\"))\n    public val inMilliseconds: Double get() = toDouble(DurationUnit.MILLISECONDS)\n\n    /** The value of this duration expressed as a [Double] number of microseconds. */\n    @Deprecated(\"Use inWholeMicroseconds property instead or convert toDouble(MICROSECONDS) if a double value is required.\", ReplaceWith(\"toDouble(DurationUnit.MICROSECONDS)\"))\n    public val inMicroseconds: Double get() = toDouble(DurationUnit.MICROSECONDS)\n\n    /** The value of this duration expressed as a [Double] number of nanoseconds. */\n    @Deprecated(\"Use inWholeNanoseconds property instead or convert toDouble(NANOSECONDS) if a double value is required.\", ReplaceWith(\"toDouble(DurationUnit.NANOSECONDS)\"))\n    public val inNanoseconds: Double get() = toDouble(DurationUnit.NANOSECONDS)\n\n\n    /**\n     * The value of this duration expressed as a [Long] number of days.\n     *\n     * An infinite duration value is converted either to [Long.MAX_VALUE] or [Long.MIN_VALUE] depending on its sign.\n     */\n    @SinceKotlin(\"1.5\")\n    public val inWholeDays: Long\n        get() = toLong(DurationUnit.DAYS)\n\n    /**\n     * The value of this duration expressed as a [Long] number of hours.\n     *\n     * An infinite duration value is converted either to [Long.MAX_VALUE] or [Long.MIN_VALUE] depending on its sign.\n     */\n    @SinceKotlin(\"1.5\")\n    public val inWholeHours: Long\n        get() = toLong(DurationUnit.HOURS)\n\n    /**\n     * The value of this duration expressed as a [Long] number of minutes.\n     *\n     * An infinite duration value is converted either to [Long.MAX_VALUE] or [Long.MIN_VALUE] depending on its sign.\n     */\n    @SinceKotlin(\"1.5\")\n    public val inWholeMinutes: Long\n        get() = toLong(DurationUnit.MINUTES)\n\n    /**\n     * The value of this duration expressed as a [Long] number of seconds.\n     *\n     * An infinite duration value is converted either to [Long.MAX_VALUE] or [Long.MIN_VALUE] depending on its sign.\n     */\n    @SinceKotlin(\"1.5\")\n    public val inWholeSeconds: Long\n        get() = toLong(DurationUnit.SECONDS)\n\n    /**\n     * The value of this duration expressed as a [Long] number of milliseconds.\n     *\n     * An infinite duration value is converted either to [Long.MAX_VALUE] or [Long.MIN_VALUE] depending on its sign.\n     */\n    @SinceKotlin(\"1.5\")\n    public val inWholeMilliseconds: Long\n        get() {\n            return if (isInMillis() && isFinite()) value else toLong(DurationUnit.MILLISECONDS)\n        }\n\n    /**\n     * The value of this duration expressed as a [Long] number of microseconds.\n     *\n     * If the result doesn't fit in the range of [Long] type, it is coerced into that range:\n     * - [Long.MIN_VALUE] is returned if it's less than `Long.MIN_VALUE`,\n     * - [Long.MAX_VALUE] is returned if it's greater than `Long.MAX_VALUE`.\n     *\n     * An infinite duration value is converted either to [Long.MAX_VALUE] or [Long.MIN_VALUE] depending on its sign.\n     */\n    @SinceKotlin(\"1.5\")\n    public val inWholeMicroseconds: Long\n        get() = toLong(DurationUnit.MICROSECONDS)\n\n    /**\n     * The value of this duration expressed as a [Long] number of nanoseconds.\n     *\n     * If the result doesn't fit in the range of [Long] type, it is coerced into that range:\n     * - [Long.MIN_VALUE] is returned if it's less than `Long.MIN_VALUE`,\n     * - [Long.MAX_VALUE] is returned if it's greater than `Long.MAX_VALUE`.\n     *\n     * An infinite duration value is converted either to [Long.MAX_VALUE] or [Long.MIN_VALUE] depending on its sign.\n     */\n    @SinceKotlin(\"1.5\")\n    public val inWholeNanoseconds: Long\n        get() {\n            val value = value\n            return when {\n                isInNanos() -> value\n                value > Long.MAX_VALUE / NANOS_IN_MILLIS -> Long.MAX_VALUE\n                value < Long.MIN_VALUE / NANOS_IN_MILLIS -> Long.MIN_VALUE\n                else -> millisToNanos(value)\n            }\n        }\n\n    // shortcuts\n\n    /**\n     * Returns the value of this duration expressed as a [Long] number of nanoseconds.\n     *\n     * If the value doesn't fit in the range of [Long] type, it is coerced into that range, see the conversion [Double.toLong] for details.\n     *\n     * The range of durations that can be expressed as a `Long` number of nanoseconds is approximately ±292 years.\n     */\n    @Deprecated(\"Use inWholeNanoseconds property instead.\", ReplaceWith(\"this.inWholeNanoseconds\"))\n    public fun toLongNanoseconds(): Long = inWholeNanoseconds\n\n    /**\n     * Returns the value of this duration expressed as a [Long] number of milliseconds.\n     *\n     * The value is coerced to the range of [Long] type, if it doesn't fit in that range, see the conversion [Double.toLong] for details.\n     *\n     * The range of durations that can be expressed as a `Long` number of milliseconds is approximately ±292 million years.\n     */\n    @Deprecated(\"Use inWholeMilliseconds property instead.\", ReplaceWith(\"this.inWholeMilliseconds\"))\n    public fun toLongMilliseconds(): Long = inWholeMilliseconds\n\n    /**\n     * Returns a string representation of this duration value expressed in the unit which yields the most compact and readable number value.\n     *\n     * Special cases:\n     *  - zero duration is formatted as `\"0s\"`\n     *  - the infinite duration is formatted as `\"Infinity\"` without unit\n     *  - very small durations (less than 1e-15 s) are expressed in seconds and formatted in scientific notation\n     *  - very big durations (more than 1e+7 days) are expressed in days and formatted in scientific notation\n     *\n     * @return the value of duration in the automatically determined unit followed by that unit abbreviated name: `d`, `h`, `m`, `s`, `ms`, `us`, or `ns`.\n     *\n     * @sample samples.time.Durations.toStringDefault\n     */\n    override fun toString(): String = when (rawValue) {\n        0L -> \"0s\"\n        INFINITE.rawValue -> \"Infinity\"\n        NEG_INFINITE.rawValue -> \"-Infinity\"\n        else -> {\n            val absNs = absoluteValue.toDouble(DurationUnit.NANOSECONDS)\n            var scientific = false\n            var maxDecimals = 0\n            val unit = when {\n                absNs < 1e-6 -> DurationUnit.SECONDS.also { scientific = true }\n                absNs < 1 -> DurationUnit.NANOSECONDS.also { maxDecimals = 7 }\n                absNs < 1e3 -> DurationUnit.NANOSECONDS\n                absNs < 1e6 -> DurationUnit.MICROSECONDS\n                absNs < 1e9 -> DurationUnit.MILLISECONDS\n                absNs < 1000e9 -> DurationUnit.SECONDS\n                absNs < 60_000e9 -> DurationUnit.MINUTES\n                absNs < 3600_000e9 -> DurationUnit.HOURS\n                absNs < 86400e9 * 1e7 -> DurationUnit.DAYS\n                else -> DurationUnit.DAYS.also { scientific = true }\n            }\n            val value = toDouble(unit)\n            when {\n                scientific -> formatScientific(value)\n                maxDecimals > 0 -> formatUpToDecimals(value, maxDecimals)\n                else -> formatToExactDecimals(value, precision(abs(value)))\n            } + unit.shortName()\n        }\n    }\n\n    private fun precision(value: Double): Int = when {\n        value < 1 -> 3\n        value < 10 -> 2\n        value < 100 -> 1\n        else -> 0\n    }\n\n    /**\n     * Returns a string representation of this duration value expressed in the given [unit]\n     * and formatted with the specified [decimals] number of digits after decimal point.\n     *\n     * Special cases:\n     *  - the infinite duration is formatted as `\"Infinity\"` without unit\n     *\n     * @return the value of duration in the specified [unit] followed by that unit abbreviated name: `d`, `h`, `m`, `s`, `ms`, `us`, or `ns`.\n     *\n     * @throws IllegalArgumentException if [decimals] is less than zero.\n     *\n     * @sample samples.time.Durations.toStringDecimals\n     */\n    public fun toString(unit: DurationUnit, decimals: Int = 0): String {\n        require(decimals >= 0) { \"decimals must be not negative, but was $decimals\" }\n        val number = toDouble(unit)\n        if (number.isInfinite()) return number.toString()\n        return when {\n            abs(number) < 1e14 -> formatToExactDecimals(number, decimals.coerceAtMost(12))\n            else -> formatScientific(number)\n        } + unit.shortName()\n    }\n\n\n    /**\n     * Returns an ISO-8601 based string representation of this duration.\n     *\n     * The returned value is presented in the format `PThHmMs.fS`, where `h`, `m`, `s` are the integer components of this duration (see [toComponents])\n     * and `f` is a fractional part of second. Depending on the roundness of the value the fractional part can be formatted with either\n     * 0, 3, 6, or 9 decimal digits.\n     *\n     * If the hours component absolute value of this duration is greater than [Int.MAX_VALUE], it is replaced with [Int.MAX_VALUE],\n     * so the infinite duration is formatted as `\"PT2147483647H\".\n     *\n     * Negative durations are indicated with the sign `-` in the beginning of the returned string, for example, `\"-PT5M30S\"`.\n     *\n     * @sample samples.time.Durations.toIsoString\n     */\n    @OptIn(ExperimentalStdlibApi::class)\n    public fun toIsoString(): String = buildString {\n        if (isNegative()) append('-')\n        append(\"PT\")\n        absoluteValue.toComponents { hours, minutes, seconds, nanoseconds ->\n            val hasHours = hours != 0\n            val hasSeconds = seconds != 0 || nanoseconds != 0\n            val hasMinutes = minutes != 0 || (hasSeconds && hasHours)\n            if (hasHours) {\n                append(hours).append('H')\n            }\n            if (hasMinutes) {\n                append(minutes).append('M')\n            }\n            if (hasSeconds || (!hasHours && !hasMinutes)) {\n                append(seconds)\n                if (nanoseconds != 0) {\n                    append('.')\n                    val nss = nanoseconds.toString().padStart(9, '0')\n                    when {\n                        nanoseconds % 1_000_000 == 0 -> appendRange(nss, 0, 3)\n                        nanoseconds % 1_000 == 0 -> appendRange(nss, 0, 6)\n                        else -> append(nss)\n                    }\n                }\n                append('S')\n            }\n        }\n    }\n\n}\n\n// constructing from number of units\n// extension functions\n\n/** Returns a [Duration] equal to this [Int] number of the specified [unit]. */\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\npublic fun Int.toDuration(unit: DurationUnit): Duration {\n    return if (unit <= DurationUnit.SECONDS) {\n        durationOfNanos(convertDurationUnitOverflow(this.toLong(), unit, DurationUnit.NANOSECONDS))\n    } else\n        toLong().toDuration(unit)\n}\n\n/** Returns a [Duration] equal to this [Long] number of the specified [unit]. */\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\npublic fun Long.toDuration(unit: DurationUnit): Duration {\n    val maxNsInUnit = convertDurationUnitOverflow(MAX_NANOS, DurationUnit.NANOSECONDS, unit)\n    if (this in -maxNsInUnit..maxNsInUnit) {\n        return durationOfNanos(convertDurationUnitOverflow(this, unit, DurationUnit.NANOSECONDS))\n    } else {\n        val millis = convertDurationUnit(this, unit, DurationUnit.MILLISECONDS)\n        return durationOfMillis(millis.coerceIn(-MAX_MILLIS, MAX_MILLIS))\n    }\n}\n\n/**\n * Returns a [Duration] equal to this [Double] number of the specified [unit].\n *\n * @throws IllegalArgumentException if this `Double` value is `NaN`.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\npublic fun Double.toDuration(unit: DurationUnit): Duration {\n    val valueInNs = convertDurationUnit(this, unit, DurationUnit.NANOSECONDS)\n    require(!valueInNs.isNaN()) { \"Duration value cannot be NaN.\" }\n    val nanos = valueInNs.toLong()\n    return if (nanos in -MAX_NANOS..MAX_NANOS) {\n        durationOfNanos(nanos)\n    } else {\n        val millis = convertDurationUnit(this, unit, DurationUnit.MILLISECONDS).toLong()\n        durationOfMillisNormalized(millis)\n    }\n}\n\n// constructing from number of units\n// extension properties\n\n/** Returns a [Duration] equal to this [Int] number of nanoseconds. */\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\n@Deprecated(\"Use Duration.nanoseconds() function instead.\", ReplaceWith(\"Duration.nanoseconds(this)\", \"kotlin.time.Duration\"))\npublic val Int.nanoseconds get() = toDuration(DurationUnit.NANOSECONDS)\n\n/** Returns a [Duration] equal to this [Long] number of nanoseconds. */\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\n@Deprecated(\"Use Duration.nanoseconds() function instead.\", ReplaceWith(\"Duration.nanoseconds(this)\", \"kotlin.time.Duration\"))\npublic val Long.nanoseconds get() = toDuration(DurationUnit.NANOSECONDS)\n\n/**\n * Returns a [Duration] equal to this [Double] number of nanoseconds.\n *\n * @throws IllegalArgumentException if this `Double` value is `NaN`.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\n@Deprecated(\"Use Duration.nanoseconds() function instead.\", ReplaceWith(\"Duration.nanoseconds(this)\", \"kotlin.time.Duration\"))\npublic val Double.nanoseconds get() = toDuration(DurationUnit.NANOSECONDS)\n\n/** Returns a [Duration] equal to this [Int] number of microseconds. */\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\n@Deprecated(\"Use Duration.microseconds() function instead.\", ReplaceWith(\"Duration.microseconds(this)\", \"kotlin.time.Duration\"))\npublic val Int.microseconds get() = toDuration(DurationUnit.MICROSECONDS)\n\n/** Returns a [Duration] equal to this [Long] number of microseconds. */\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\n@Deprecated(\"Use Duration.microseconds() function instead.\", ReplaceWith(\"Duration.microseconds(this)\", \"kotlin.time.Duration\"))\npublic val Long.microseconds get() = toDuration(DurationUnit.MICROSECONDS)\n\n/**\n * Returns a [Duration] equal to this [Double] number of microseconds.\n *\n * @throws IllegalArgumentException if this `Double` value is `NaN`.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\n@Deprecated(\"Use Duration.microseconds() function instead.\", ReplaceWith(\"Duration.microseconds(this)\", \"kotlin.time.Duration\"))\npublic val Double.microseconds get() = toDuration(DurationUnit.MICROSECONDS)\n\n/** Returns a [Duration] equal to this [Int] number of milliseconds. */\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\n@Deprecated(\"Use Duration.milliseconds() function instead.\", ReplaceWith(\"Duration.milliseconds(this)\", \"kotlin.time.Duration\"))\npublic val Int.milliseconds get() = toDuration(DurationUnit.MILLISECONDS)\n\n/** Returns a [Duration] equal to this [Long] number of milliseconds. */\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\n@Deprecated(\"Use Duration.milliseconds() function instead.\", ReplaceWith(\"Duration.milliseconds(this)\", \"kotlin.time.Duration\"))\npublic val Long.milliseconds get() = toDuration(DurationUnit.MILLISECONDS)\n\n/**\n * Returns a [Duration] equal to this [Double] number of milliseconds.\n *\n * @throws IllegalArgumentException if this `Double` value is `NaN`.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\n@Deprecated(\"Use Duration.milliseconds() function instead.\", ReplaceWith(\"Duration.milliseconds(this)\", \"kotlin.time.Duration\"))\npublic val Double.milliseconds get() = toDuration(DurationUnit.MILLISECONDS)\n\n/** Returns a [Duration] equal to this [Int] number of seconds. */\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\n@Deprecated(\"Use Duration.seconds() function instead.\", ReplaceWith(\"Duration.seconds(this)\", \"kotlin.time.Duration\"))\npublic val Int.seconds get() = toDuration(DurationUnit.SECONDS)\n\n/** Returns a [Duration] equal to this [Long] number of seconds. */\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\n@Deprecated(\"Use Duration.seconds() function instead.\", ReplaceWith(\"Duration.seconds(this)\", \"kotlin.time.Duration\"))\npublic val Long.seconds get() = toDuration(DurationUnit.SECONDS)\n\n/**\n * Returns a [Duration] equal to this [Double] number of seconds.\n *\n * @throws IllegalArgumentException if this `Double` value is `NaN`.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\n@Deprecated(\"Use Duration.seconds() function instead.\", ReplaceWith(\"Duration.seconds(this)\", \"kotlin.time.Duration\"))\npublic val Double.seconds get() = toDuration(DurationUnit.SECONDS)\n\n/** Returns a [Duration] equal to this [Int] number of minutes. */\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\n@Deprecated(\"Use Duration.minutes() function instead.\", ReplaceWith(\"Duration.minutes(this)\", \"kotlin.time.Duration\"))\npublic val Int.minutes get() = toDuration(DurationUnit.MINUTES)\n\n/** Returns a [Duration] equal to this [Long] number of minutes. */\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\n@Deprecated(\"Use Duration.minutes() function instead.\", ReplaceWith(\"Duration.minutes(this)\", \"kotlin.time.Duration\"))\npublic val Long.minutes get() = toDuration(DurationUnit.MINUTES)\n\n/**\n * Returns a [Duration] equal to this [Double] number of minutes.\n *\n * @throws IllegalArgumentException if this `Double` value is `NaN`.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\n@Deprecated(\"Use Duration.minutes() function instead.\", ReplaceWith(\"Duration.minutes(this)\", \"kotlin.time.Duration\"))\npublic val Double.minutes get() = toDuration(DurationUnit.MINUTES)\n\n/** Returns a [Duration] equal to this [Int] number of hours. */\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\n@Deprecated(\"Use Duration.hours() function instead.\", ReplaceWith(\"Duration.hours(this)\", \"kotlin.time.Duration\"))\npublic val Int.hours get() = toDuration(DurationUnit.HOURS)\n\n/** Returns a [Duration] equal to this [Long] number of hours. */\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\n@Deprecated(\"Use Duration.hours() function instead.\", ReplaceWith(\"Duration.hours(this)\", \"kotlin.time.Duration\"))\npublic val Long.hours get() = toDuration(DurationUnit.HOURS)\n\n/**\n * Returns a [Duration] equal to this [Double] number of hours.\n *\n * @throws IllegalArgumentException if this `Double` value is `NaN`.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\n@Deprecated(\"Use Duration.hours() function instead.\", ReplaceWith(\"Duration.hours(this)\", \"kotlin.time.Duration\"))\npublic val Double.hours get() = toDuration(DurationUnit.HOURS)\n\n/** Returns a [Duration] equal to this [Int] number of days. */\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\n@Deprecated(\"Use Duration.days() function instead.\", ReplaceWith(\"Duration.days(this)\", \"kotlin.time.Duration\"))\npublic val Int.days get() = toDuration(DurationUnit.DAYS)\n\n/** Returns a [Duration] equal to this [Long] number of days. */\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\n@Deprecated(\"Use Duration.days() function instead.\", ReplaceWith(\"Duration.days(this)\", \"kotlin.time.Duration\"))\npublic val Long.days get() = toDuration(DurationUnit.DAYS)\n\n/**\n * Returns a [Duration] equal to this [Double] number of days.\n *\n * @throws IllegalArgumentException if this `Double` value is `NaN`.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\n@Deprecated(\"Use Duration.days() function instead.\", ReplaceWith(\"Duration.days(this)\", \"kotlin.time.Duration\"))\npublic val Double.days get() = toDuration(DurationUnit.DAYS)\n\n\n/** Returns a duration whose value is the specified [duration] value multiplied by this number. */\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\n@kotlin.internal.InlineOnly\npublic inline operator fun Int.times(duration: Duration): Duration = duration * this\n\n/**\n * Returns a duration whose value is the specified [duration] value multiplied by this number.\n *\n * @throws IllegalArgumentException if the operation results in a `NaN` value.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\n@kotlin.internal.InlineOnly\npublic inline operator fun Double.times(duration: Duration): Duration = duration * this\n\n\n// The ranges are chosen so that they are:\n// - symmetric relative to zero: this greatly simplifies operations with sign, e.g. unaryMinus and minus.\n// - non-overlapping, but adjacent: the first value that doesn't fit in nanos range, can be exactly represented in millis.\n\ninternal const val NANOS_IN_MILLIS = 1_000_000\n// maximum number duration can store in nanosecond range\ninternal const val MAX_NANOS = Long.MAX_VALUE / 2 / NANOS_IN_MILLIS * NANOS_IN_MILLIS - 1 // ends in ..._999_999\n// maximum number duration can store in millisecond range, also encodes an infinite value\ninternal const val MAX_MILLIS = Long.MAX_VALUE / 2\n// MAX_NANOS expressed in milliseconds\nprivate const val MAX_NANOS_IN_MILLIS = MAX_NANOS / NANOS_IN_MILLIS\n\nprivate fun nanosToMillis(nanos: Long): Long = nanos / NANOS_IN_MILLIS\nprivate fun millisToNanos(millis: Long): Long = millis * NANOS_IN_MILLIS\n\n@ExperimentalTime private fun durationOfNanos(normalNanos: Long) = Duration(normalNanos shl 1)\n@ExperimentalTime private fun durationOfMillis(normalMillis: Long) = Duration((normalMillis shl 1) + 1)\n@ExperimentalTime private fun durationOf(normalValue: Long, unitDiscriminator: Int) = Duration((normalValue shl 1) + unitDiscriminator)\n@ExperimentalTime private fun durationOfNanosNormalized(nanos: Long) =\n    if (nanos in -MAX_NANOS..MAX_NANOS) {\n        durationOfNanos(nanos)\n    } else {\n        durationOfMillis(nanosToMillis(nanos))\n    }\n\n@ExperimentalTime private fun durationOfMillisNormalized(millis: Long) =\n    if (millis in -MAX_NANOS_IN_MILLIS..MAX_NANOS_IN_MILLIS) {\n        durationOfNanos(millisToNanos(millis))\n    } else {\n        durationOfMillis(millis.coerceIn(-MAX_MILLIS, MAX_MILLIS))\n    }\n\n\ninternal expect fun formatToExactDecimals(value: Double, decimals: Int): String\ninternal expect fun formatUpToDecimals(value: Double, decimals: Int): String\ninternal expect fun formatScientific(value: Double): String","/*\n * Copyright 2010-2021 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n@file:kotlin.jvm.JvmName(\"UnsignedKt\")\npackage kotlin\n\n@PublishedApi\ninternal fun uintCompare(v1: Int, v2: Int): Int = (v1 xor Int.MIN_VALUE).compareTo(v2 xor Int.MIN_VALUE)\n@PublishedApi\ninternal fun ulongCompare(v1: Long, v2: Long): Int = (v1 xor Long.MIN_VALUE).compareTo(v2 xor Long.MIN_VALUE)\n\n@PublishedApi\ninternal fun uintDivide(v1: UInt, v2: UInt): UInt = (v1.toLong() / v2.toLong()).toUInt()\n@PublishedApi\ninternal fun uintRemainder(v1: UInt, v2: UInt): UInt = (v1.toLong() % v2.toLong()).toUInt()\n\n// Division and remainder are based on Guava's UnsignedLongs implementation\n// Copyright 2011 The Guava Authors\n\n@PublishedApi\ninternal fun ulongDivide(v1: ULong, v2: ULong): ULong {\n    val dividend = v1.toLong()\n    val divisor = v2.toLong()\n    if (divisor < 0) { // i.e., divisor >= 2^63:\n        return if (v1 < v2) ULong(0) else ULong(1)\n    }\n\n    // Optimization - use signed division if both dividend and divisor < 2^63\n    if (dividend >= 0) {\n        return ULong(dividend / divisor)\n    }\n\n    // Otherwise, approximate the quotient, check, and correct if necessary.\n    val quotient = ((dividend ushr 1) / divisor) shl 1\n    val rem = dividend - quotient * divisor\n    return ULong(quotient + if (ULong(rem) >= ULong(divisor)) 1 else 0)\n\n}\n\n@PublishedApi\ninternal fun ulongRemainder(v1: ULong, v2: ULong): ULong {\n    val dividend = v1.toLong()\n    val divisor = v2.toLong()\n    if (divisor < 0) { // i.e., divisor >= 2^63:\n        return if (v1 < v2) {\n            v1 // dividend < divisor\n        } else {\n            v1 - v2 // dividend >= divisor\n        }\n    }\n\n    // Optimization - use signed modulus if both dividend and divisor < 2^63\n    if (dividend >= 0) {\n        return ULong(dividend % divisor)\n    }\n\n    // Otherwise, approximate the quotient, check, and correct if necessary.\n    val quotient = ((dividend ushr 1) / divisor) shl 1\n    val rem = dividend - quotient * divisor\n    return ULong(rem - if (ULong(rem) >= ULong(divisor)) divisor else 0)\n}\n\n@PublishedApi\ninternal fun doubleToUInt(v: Double): UInt = when {\n    v.isNaN() -> 0u\n    v <= UInt.MIN_VALUE.toDouble() -> UInt.MIN_VALUE\n    v >= UInt.MAX_VALUE.toDouble() -> UInt.MAX_VALUE\n    v <= Int.MAX_VALUE -> v.toInt().toUInt()\n    else -> (v - Int.MAX_VALUE).toInt().toUInt() + Int.MAX_VALUE.toUInt()      // Int.MAX_VALUE < v < UInt.MAX_VALUE\n}\n\n@PublishedApi\ninternal fun doubleToULong(v: Double): ULong = when {\n    v.isNaN() -> 0u\n    v <= ULong.MIN_VALUE.toDouble() -> ULong.MIN_VALUE\n    v >= ULong.MAX_VALUE.toDouble() -> ULong.MAX_VALUE\n    v < Long.MAX_VALUE -> v.toLong().toULong()\n\n    // Real values from Long.MAX_VALUE to (Long.MAX_VALUE + 1) are not representable in Double, so don't handle them.\n    else -> (v - 9223372036854775808.0).toLong().toULong() + 9223372036854775808uL      // Long.MAX_VALUE + 1 < v < ULong.MAX_VALUE\n}\n\n\n@PublishedApi\ninternal fun uintToDouble(v: Int): Double = (v and Int.MAX_VALUE).toDouble() + (v ushr 31 shl 30).toDouble() * 2\n\n@PublishedApi\ninternal fun ulongToDouble(v: Long): Double = (v ushr 11).toDouble() * 2048 + (v and 2047)\n\n\ninternal fun ulongToString(v: Long): String = ulongToString(v, 10)\n\ninternal fun ulongToString(v: Long, base: Int): String {\n    if (v >= 0) return v.toString(base)\n\n    var quotient = ((v ushr 1) / base) shl 1\n    var rem = v - quotient * base\n    if (rem >= base) {\n        rem -= base\n        quotient += 1\n    }\n    return quotient.toString(base) + rem.toString(base)\n}\n\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"CollectionsKt\")\n\npackage kotlin.collections\n\n/**\n * Given an [iterator] function constructs an [Iterable] instance that returns values through the [Iterator]\n * provided by that function.\n * @sample samples.collections.Iterables.Building.iterable\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable(crossinline iterator: () -> Iterator<T>): Iterable<T> = object : Iterable<T> {\n    override fun iterator(): Iterator<T> = iterator()\n}\n\n/**\n * A wrapper over another [Iterable] (or any other object that can produce an [Iterator]) that returns\n * an indexing iterator.\n */\ninternal class IndexingIterable<out T>(private val iteratorFactory: () -> Iterator<T>) : Iterable<IndexedValue<T>> {\n    override fun iterator(): Iterator<IndexedValue<T>> = IndexingIterator(iteratorFactory())\n}\n\n\n/**\n * Returns the size of this iterable if it is known, or `null` otherwise.\n */\n@PublishedApi\ninternal fun <T> Iterable<T>.collectionSizeOrNull(): Int? = if (this is Collection<*>) this.size else null\n\n/**\n * Returns the size of this iterable if it is known, or the specified [default] value otherwise.\n */\n@PublishedApi\ninternal fun <T> Iterable<T>.collectionSizeOrDefault(default: Int): Int = if (this is Collection<*>) this.size else default\n\n/** Returns true when it's safe to convert this collection to a set without changing contains method behavior. */\nprivate fun <T> Collection<T>.safeToConvertToSet() = size > 2 && this is ArrayList\n\n/** Converts this collection to a set, when it's worth so and it doesn't change contains method behavior. */\ninternal fun <T> Iterable<T>.convertToSetForSetOperationWith(source: Iterable<T>): Collection<T> =\n    when (this) {\n        is Set -> this\n        is Collection ->\n            when {\n                source is Collection && source.size < 2 -> this\n                else -> if (this.safeToConvertToSet()) toHashSet() else this\n            }\n        else -> toHashSet()\n    }\n\n/** Converts this collection to a set, when it's worth so and it doesn't change contains method behavior. */\ninternal fun <T> Iterable<T>.convertToSetForSetOperation(): Collection<T> =\n    when (this) {\n        is Set -> this\n        is Collection -> if (this.safeToConvertToSet()) toHashSet() else this\n        else -> toHashSet()\n    }\n\n\n/**\n * Returns a single list of all elements from all collections in the given collection.\n * @sample samples.collections.Iterables.Operations.flattenIterable\n */\npublic fun <T> Iterable<Iterable<T>>.flatten(): List<T> {\n    val result = ArrayList<T>()\n    for (element in this) {\n        result.addAll(element)\n    }\n    return result\n}\n\n/**\n * Returns a pair of lists, where\n * *first* list is built from the first values of each pair from this collection,\n * *second* list is built from the second values of each pair from this collection.\n * @sample samples.collections.Iterables.Operations.unzipIterable\n */\npublic fun <T, R> Iterable<Pair<T, R>>.unzip(): Pair<List<T>, List<R>> {\n    val expectedSize = collectionSizeOrDefault(10)\n    val listT = ArrayList<T>(expectedSize)\n    val listR = ArrayList<R>(expectedSize)\n    for (pair in this) {\n        listT.add(pair.first)\n        listR.add(pair.second)\n    }\n    return listT to listR\n}\n","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"SequencesKt\")\n\npackage kotlin.sequences\n\nimport kotlin.random.Random\n\n/**\n * Given an [iterator] function constructs a [Sequence] that returns values through the [Iterator]\n * provided by that function.\n * The values are evaluated lazily, and the sequence is potentially infinite.\n *\n * @sample samples.collections.Sequences.Building.sequenceFromIterator\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Sequence(crossinline iterator: () -> Iterator<T>): Sequence<T> = object : Sequence<T> {\n    override fun iterator(): Iterator<T> = iterator()\n}\n\n/**\n * Creates a sequence that returns all elements from this iterator. The sequence is constrained to be iterated only once.\n *\n * @sample samples.collections.Sequences.Building.sequenceFromIterator\n */\npublic fun <T> Iterator<T>.asSequence(): Sequence<T> = Sequence { this }.constrainOnce()\n\n/**\n * Creates a sequence that returns the specified values.\n *\n * @sample samples.collections.Sequences.Building.sequenceOfValues\n */\npublic fun <T> sequenceOf(vararg elements: T): Sequence<T> = if (elements.isEmpty()) emptySequence() else elements.asSequence()\n\n/**\n * Returns an empty sequence.\n */\npublic fun <T> emptySequence(): Sequence<T> = EmptySequence\n\nprivate object EmptySequence : Sequence<Nothing>, DropTakeSequence<Nothing> {\n    override fun iterator(): Iterator<Nothing> = EmptyIterator\n    override fun drop(n: Int) = EmptySequence\n    override fun take(n: Int) = EmptySequence\n}\n\n/**\n * Returns this sequence if it's not `null` and the empty sequence otherwise.\n * @sample samples.collections.Sequences.Usage.sequenceOrEmpty\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Sequence<T>?.orEmpty(): Sequence<T> = this ?: emptySequence()\n\n\n/**\n * Returns a sequence that iterates through the elements either of this sequence\n * or, if this sequence turns out to be empty, of the sequence returned by [defaultValue] function.\n *\n * @sample samples.collections.Sequences.Usage.sequenceIfEmpty\n */\n@SinceKotlin(\"1.3\")\npublic fun <T> Sequence<T>.ifEmpty(defaultValue: () -> Sequence<T>): Sequence<T> = sequence {\n    val iterator = this@ifEmpty.iterator()\n    if (iterator.hasNext()) {\n        yieldAll(iterator)\n    } else {\n        yieldAll(defaultValue())\n    }\n}\n\n/**\n * Returns a sequence of all elements from all sequences in this sequence.\n *\n * The operation is _intermediate_ and _stateless_.\n *\n * @sample samples.collections.Sequences.Transformations.flattenSequenceOfSequences\n */\npublic fun <T> Sequence<Sequence<T>>.flatten(): Sequence<T> = flatten { it.iterator() }\n\n/**\n * Returns a sequence of all elements from all iterables in this sequence.\n *\n * The operation is _intermediate_ and _stateless_.\n *\n * @sample samples.collections.Sequences.Transformations.flattenSequenceOfLists\n */\n@kotlin.jvm.JvmName(\"flattenSequenceOfIterable\")\npublic fun <T> Sequence<Iterable<T>>.flatten(): Sequence<T> = flatten { it.iterator() }\n\nprivate fun <T, R> Sequence<T>.flatten(iterator: (T) -> Iterator<R>): Sequence<R> {\n    if (this is TransformingSequence<*, *>) {\n        return (this as TransformingSequence<*, T>).flatten(iterator)\n    }\n    return FlatteningSequence(this, { it }, iterator)\n}\n\n/**\n * Returns a pair of lists, where\n * *first* list is built from the first values of each pair from this sequence,\n * *second* list is built from the second values of each pair from this sequence.\n *\n * The operation is _terminal_.\n *\n * @sample samples.collections.Sequences.Transformations.unzip\n */\npublic fun <T, R> Sequence<Pair<T, R>>.unzip(): Pair<List<T>, List<R>> {\n    val listT = ArrayList<T>()\n    val listR = ArrayList<R>()\n    for (pair in this) {\n        listT.add(pair.first)\n        listR.add(pair.second)\n    }\n    return listT to listR\n}\n\n/**\n * Returns a sequence that yields elements of this sequence randomly shuffled.\n *\n * Note that every iteration of the sequence returns elements in a different order.\n *\n * The operation is _intermediate_ and _stateful_.\n */\n@SinceKotlin(\"1.4\")\npublic fun <T> Sequence<T>.shuffled(): Sequence<T> = shuffled(Random)\n\n/**\n * Returns a sequence that yields elements of this sequence randomly shuffled\n * using the specified [random] instance as the source of randomness.\n *\n * Note that every iteration of the sequence returns elements in a different order.\n *\n * The operation is _intermediate_ and _stateful_.\n */\n@SinceKotlin(\"1.4\")\npublic fun <T> Sequence<T>.shuffled(random: Random): Sequence<T> = sequence<T> {\n    val buffer = toMutableList()\n    while (buffer.isNotEmpty()) {\n        val j = random.nextInt(buffer.size)\n        val last = @OptIn(ExperimentalStdlibApi::class) buffer.removeLast()\n        val value = if (j < buffer.size) buffer.set(j, last) else last\n        yield(value)\n    }\n}\n\n\n/**\n * A sequence that returns the values from the underlying [sequence] that either match or do not match\n * the specified [predicate].\n *\n * @param sendWhen If `true`, values for which the predicate returns `true` are returned. Otherwise,\n * values for which the predicate returns `false` are returned\n */\ninternal class FilteringSequence<T>(\n    private val sequence: Sequence<T>,\n    private val sendWhen: Boolean = true,\n    private val predicate: (T) -> Boolean\n) : Sequence<T> {\n\n    override fun iterator(): Iterator<T> = object : Iterator<T> {\n        val iterator = sequence.iterator()\n        var nextState: Int = -1 // -1 for unknown, 0 for done, 1 for continue\n        var nextItem: T? = null\n\n        private fun calcNext() {\n            while (iterator.hasNext()) {\n                val item = iterator.next()\n                if (predicate(item) == sendWhen) {\n                    nextItem = item\n                    nextState = 1\n                    return\n                }\n            }\n            nextState = 0\n        }\n\n        override fun next(): T {\n            if (nextState == -1)\n                calcNext()\n            if (nextState == 0)\n                throw NoSuchElementException()\n            val result = nextItem\n            nextItem = null\n            nextState = -1\n            @Suppress(\"UNCHECKED_CAST\")\n            return result as T\n        }\n\n        override fun hasNext(): Boolean {\n            if (nextState == -1)\n                calcNext()\n            return nextState == 1\n        }\n    }\n}\n\n/**\n * A sequence which returns the results of applying the given [transformer] function to the values\n * in the underlying [sequence].\n */\n\ninternal class TransformingSequence<T, R>\nconstructor(private val sequence: Sequence<T>, private val transformer: (T) -> R) : Sequence<R> {\n    override fun iterator(): Iterator<R> = object : Iterator<R> {\n        val iterator = sequence.iterator()\n        override fun next(): R {\n            return transformer(iterator.next())\n        }\n\n        override fun hasNext(): Boolean {\n            return iterator.hasNext()\n        }\n    }\n\n    internal fun <E> flatten(iterator: (R) -> Iterator<E>): Sequence<E> {\n        return FlatteningSequence<T, R, E>(sequence, transformer, iterator)\n    }\n}\n\n/**\n * A sequence which returns the results of applying the given [transformer] function to the values\n * in the underlying [sequence], where the transformer function takes the index of the value in the underlying\n * sequence along with the value itself.\n */\ninternal class TransformingIndexedSequence<T, R>\nconstructor(private val sequence: Sequence<T>, private val transformer: (Int, T) -> R) : Sequence<R> {\n    override fun iterator(): Iterator<R> = object : Iterator<R> {\n        val iterator = sequence.iterator()\n        var index = 0\n        override fun next(): R {\n            return transformer(checkIndexOverflow(index++), iterator.next())\n        }\n\n        override fun hasNext(): Boolean {\n            return iterator.hasNext()\n        }\n    }\n}\n\n/**\n * A sequence which combines values from the underlying [sequence] with their indices and returns them as\n * [IndexedValue] objects.\n */\ninternal class IndexingSequence<T>\nconstructor(private val sequence: Sequence<T>) : Sequence<IndexedValue<T>> {\n    override fun iterator(): Iterator<IndexedValue<T>> = object : Iterator<IndexedValue<T>> {\n        val iterator = sequence.iterator()\n        var index = 0\n        override fun next(): IndexedValue<T> {\n            return IndexedValue(checkIndexOverflow(index++), iterator.next())\n        }\n\n        override fun hasNext(): Boolean {\n            return iterator.hasNext()\n        }\n    }\n}\n\n/**\n * A sequence which takes the values from two parallel underlying sequences, passes them to the given\n * [transform] function and returns the values returned by that function. The sequence stops returning\n * values as soon as one of the underlying sequences stops returning values.\n */\ninternal class MergingSequence<T1, T2, V>\nconstructor(\n    private val sequence1: Sequence<T1>,\n    private val sequence2: Sequence<T2>,\n    private val transform: (T1, T2) -> V\n) : Sequence<V> {\n    override fun iterator(): Iterator<V> = object : Iterator<V> {\n        val iterator1 = sequence1.iterator()\n        val iterator2 = sequence2.iterator()\n        override fun next(): V {\n            return transform(iterator1.next(), iterator2.next())\n        }\n\n        override fun hasNext(): Boolean {\n            return iterator1.hasNext() && iterator2.hasNext()\n        }\n    }\n}\n\ninternal class FlatteningSequence<T, R, E>\nconstructor(\n    private val sequence: Sequence<T>,\n    private val transformer: (T) -> R,\n    private val iterator: (R) -> Iterator<E>\n) : Sequence<E> {\n    override fun iterator(): Iterator<E> = object : Iterator<E> {\n        val iterator = sequence.iterator()\n        var itemIterator: Iterator<E>? = null\n\n        override fun next(): E {\n            if (!ensureItemIterator())\n                throw NoSuchElementException()\n            return itemIterator!!.next()\n        }\n\n        override fun hasNext(): Boolean {\n            return ensureItemIterator()\n        }\n\n        private fun ensureItemIterator(): Boolean {\n            if (itemIterator?.hasNext() == false)\n                itemIterator = null\n\n            while (itemIterator == null) {\n                if (!iterator.hasNext()) {\n                    return false\n                } else {\n                    val element = iterator.next()\n                    val nextItemIterator = iterator(transformer(element))\n                    if (nextItemIterator.hasNext()) {\n                        itemIterator = nextItemIterator\n                        return true\n                    }\n                }\n            }\n            return true\n        }\n    }\n}\n\ninternal fun <T, C, R> flatMapIndexed(source: Sequence<T>, transform: (Int, T) -> C, iterator: (C) -> Iterator<R>): Sequence<R> =\n    sequence {\n        var index = 0\n        for (element in source) {\n            val result = transform(checkIndexOverflow(index++), element)\n            yieldAll(iterator(result))\n        }\n    }\n\n/**\n * A sequence that supports drop(n) and take(n) operations\n */\ninternal interface DropTakeSequence<T> : Sequence<T> {\n    fun drop(n: Int): Sequence<T>\n    fun take(n: Int): Sequence<T>\n}\n\n/**\n * A sequence that skips [startIndex] values from the underlying [sequence]\n * and stops returning values right before [endIndex], i.e. stops at `endIndex - 1`\n */\ninternal class SubSequence<T>(\n    private val sequence: Sequence<T>,\n    private val startIndex: Int,\n    private val endIndex: Int\n) : Sequence<T>, DropTakeSequence<T> {\n\n    init {\n        require(startIndex >= 0) { \"startIndex should be non-negative, but is $startIndex\" }\n        require(endIndex >= 0) { \"endIndex should be non-negative, but is $endIndex\" }\n        require(endIndex >= startIndex) { \"endIndex should be not less than startIndex, but was $endIndex < $startIndex\" }\n    }\n\n    private val count: Int get() = endIndex - startIndex\n\n    override fun drop(n: Int): Sequence<T> = if (n >= count) emptySequence() else SubSequence(sequence, startIndex + n, endIndex)\n    override fun take(n: Int): Sequence<T> = if (n >= count) this else SubSequence(sequence, startIndex, startIndex + n)\n\n    override fun iterator() = object : Iterator<T> {\n\n        val iterator = sequence.iterator()\n        var position = 0\n\n        // Shouldn't be called from constructor to avoid premature iteration\n        private fun drop() {\n            while (position < startIndex && iterator.hasNext()) {\n                iterator.next()\n                position++\n            }\n        }\n\n        override fun hasNext(): Boolean {\n            drop()\n            return (position < endIndex) && iterator.hasNext()\n        }\n\n        override fun next(): T {\n            drop()\n            if (position >= endIndex)\n                throw NoSuchElementException()\n            position++\n            return iterator.next()\n        }\n    }\n}\n\n/**\n * A sequence that returns at most [count] values from the underlying [sequence], and stops returning values\n * as soon as that count is reached.\n */\ninternal class TakeSequence<T>(\n    private val sequence: Sequence<T>,\n    private val count: Int\n) : Sequence<T>, DropTakeSequence<T> {\n\n    init {\n        require(count >= 0) { \"count must be non-negative, but was $count.\" }\n    }\n\n    override fun drop(n: Int): Sequence<T> = if (n >= count) emptySequence() else SubSequence(sequence, n, count)\n    override fun take(n: Int): Sequence<T> = if (n >= count) this else TakeSequence(sequence, n)\n\n    override fun iterator(): Iterator<T> = object : Iterator<T> {\n        var left = count\n        val iterator = sequence.iterator()\n\n        override fun next(): T {\n            if (left == 0)\n                throw NoSuchElementException()\n            left--\n            return iterator.next()\n        }\n\n        override fun hasNext(): Boolean {\n            return left > 0 && iterator.hasNext()\n        }\n    }\n}\n\n/**\n * A sequence that returns values from the underlying [sequence] while the [predicate] function returns\n * `true`, and stops returning values once the function returns `false` for the next element.\n */\ninternal class TakeWhileSequence<T>\nconstructor(\n    private val sequence: Sequence<T>,\n    private val predicate: (T) -> Boolean\n) : Sequence<T> {\n    override fun iterator(): Iterator<T> = object : Iterator<T> {\n        val iterator = sequence.iterator()\n        var nextState: Int = -1 // -1 for unknown, 0 for done, 1 for continue\n        var nextItem: T? = null\n\n        private fun calcNext() {\n            if (iterator.hasNext()) {\n                val item = iterator.next()\n                if (predicate(item)) {\n                    nextState = 1\n                    nextItem = item\n                    return\n                }\n            }\n            nextState = 0\n        }\n\n        override fun next(): T {\n            if (nextState == -1)\n                calcNext() // will change nextState\n            if (nextState == 0)\n                throw NoSuchElementException()\n            @Suppress(\"UNCHECKED_CAST\")\n            val result = nextItem as T\n\n            // Clean next to avoid keeping reference on yielded instance\n            nextItem = null\n            nextState = -1\n            return result\n        }\n\n        override fun hasNext(): Boolean {\n            if (nextState == -1)\n                calcNext() // will change nextState\n            return nextState == 1\n        }\n    }\n}\n\n/**\n * A sequence that skips the specified number of values from the underlying [sequence] and returns\n * all values after that.\n */\ninternal class DropSequence<T>(\n    private val sequence: Sequence<T>,\n    private val count: Int\n) : Sequence<T>, DropTakeSequence<T> {\n    init {\n        require(count >= 0) { \"count must be non-negative, but was $count.\" }\n    }\n\n    override fun drop(n: Int): Sequence<T> = (count + n).let { n1 -> if (n1 < 0) DropSequence(this, n) else DropSequence(sequence, n1) }\n    override fun take(n: Int): Sequence<T> = (count + n).let { n1 -> if (n1 < 0) TakeSequence(this, n) else SubSequence(sequence, count, n1) }\n\n    override fun iterator(): Iterator<T> = object : Iterator<T> {\n        val iterator = sequence.iterator()\n        var left = count\n\n        // Shouldn't be called from constructor to avoid premature iteration\n        private fun drop() {\n            while (left > 0 && iterator.hasNext()) {\n                iterator.next()\n                left--\n            }\n        }\n\n        override fun next(): T {\n            drop()\n            return iterator.next()\n        }\n\n        override fun hasNext(): Boolean {\n            drop()\n            return iterator.hasNext()\n        }\n    }\n}\n\n/**\n * A sequence that skips the values from the underlying [sequence] while the given [predicate] returns `true` and returns\n * all values after that.\n */\ninternal class DropWhileSequence<T>\nconstructor(\n    private val sequence: Sequence<T>,\n    private val predicate: (T) -> Boolean\n) : Sequence<T> {\n\n    override fun iterator(): Iterator<T> = object : Iterator<T> {\n        val iterator = sequence.iterator()\n        var dropState: Int = -1 // -1 for not dropping, 1 for nextItem, 0 for normal iteration\n        var nextItem: T? = null\n\n        private fun drop() {\n            while (iterator.hasNext()) {\n                val item = iterator.next()\n                if (!predicate(item)) {\n                    nextItem = item\n                    dropState = 1\n                    return\n                }\n            }\n            dropState = 0\n        }\n\n        override fun next(): T {\n            if (dropState == -1)\n                drop()\n\n            if (dropState == 1) {\n                @Suppress(\"UNCHECKED_CAST\")\n                val result = nextItem as T\n                nextItem = null\n                dropState = 0\n                return result\n            }\n            return iterator.next()\n        }\n\n        override fun hasNext(): Boolean {\n            if (dropState == -1)\n                drop()\n            return dropState == 1 || iterator.hasNext()\n        }\n    }\n}\n\ninternal class DistinctSequence<T, K>(private val source: Sequence<T>, private val keySelector: (T) -> K) : Sequence<T> {\n    override fun iterator(): Iterator<T> = DistinctIterator(source.iterator(), keySelector)\n}\n\nprivate class DistinctIterator<T, K>(private val source: Iterator<T>, private val keySelector: (T) -> K) : AbstractIterator<T>() {\n    private val observed = HashSet<K>()\n\n    override fun computeNext() {\n        while (source.hasNext()) {\n            val next = source.next()\n            val key = keySelector(next)\n\n            if (observed.add(key)) {\n                setNext(next)\n                return\n            }\n        }\n\n        done()\n    }\n}\n\n\nprivate class GeneratorSequence<T : Any>(private val getInitialValue: () -> T?, private val getNextValue: (T) -> T?) : Sequence<T> {\n    override fun iterator(): Iterator<T> = object : Iterator<T> {\n        var nextItem: T? = null\n        var nextState: Int = -2 // -2 for initial unknown, -1 for next unknown, 0 for done, 1 for continue\n\n        private fun calcNext() {\n            nextItem = if (nextState == -2) getInitialValue() else getNextValue(nextItem!!)\n            nextState = if (nextItem == null) 0 else 1\n        }\n\n        override fun next(): T {\n            if (nextState < 0)\n                calcNext()\n\n            if (nextState == 0)\n                throw NoSuchElementException()\n            val result = nextItem as T\n            // Do not clean nextItem (to avoid keeping reference on yielded instance) -- need to keep state for getNextValue\n            nextState = -1\n            return result\n        }\n\n        override fun hasNext(): Boolean {\n            if (nextState < 0)\n                calcNext()\n            return nextState == 1\n        }\n    }\n}\n\n/**\n * Returns a wrapper sequence that provides values of this sequence, but ensures it can be iterated only one time.\n *\n * The operation is _intermediate_ and _stateless_.\n *\n * [IllegalStateException] is thrown on iterating the returned sequence from the second time.\n *\n */\npublic fun <T> Sequence<T>.constrainOnce(): Sequence<T> {\n    // as? does not work in js\n    //return this as? ConstrainedOnceSequence<T> ?: ConstrainedOnceSequence(this)\n    return if (this is ConstrainedOnceSequence<T>) this else ConstrainedOnceSequence(this)\n}\n\n\n/**\n * Returns a sequence which invokes the function to calculate the next value on each iteration until the function returns `null`.\n *\n * The returned sequence is constrained to be iterated only once.\n *\n * @see constrainOnce\n * @see kotlin.sequences.sequence\n *\n * @sample samples.collections.Sequences.Building.generateSequence\n */\npublic fun <T : Any> generateSequence(nextFunction: () -> T?): Sequence<T> {\n    return GeneratorSequence(nextFunction, { nextFunction() }).constrainOnce()\n}\n\n/**\n * Returns a sequence defined by the starting value [seed] and the function [nextFunction],\n * which is invoked to calculate the next value based on the previous one on each iteration.\n *\n * The sequence produces values until it encounters first `null` value.\n * If [seed] is `null`, an empty sequence is produced.\n *\n * The sequence can be iterated multiple times, each time starting with [seed].\n *\n * @see kotlin.sequences.sequence\n *\n * @sample samples.collections.Sequences.Building.generateSequenceWithSeed\n */\n@kotlin.internal.LowPriorityInOverloadResolution\npublic fun <T : Any> generateSequence(seed: T?, nextFunction: (T) -> T?): Sequence<T> =\n    if (seed == null)\n        EmptySequence\n    else\n        GeneratorSequence({ seed }, nextFunction)\n\n/**\n * Returns a sequence defined by the function [seedFunction], which is invoked to produce the starting value,\n * and the [nextFunction], which is invoked to calculate the next value based on the previous one on each iteration.\n *\n * The sequence produces values until it encounters first `null` value.\n * If [seedFunction] returns `null`, an empty sequence is produced.\n *\n * The sequence can be iterated multiple times.\n *\n * @see kotlin.sequences.sequence\n *\n * @sample samples.collections.Sequences.Building.generateSequenceWithLazySeed\n */\npublic fun <T : Any> generateSequence(seedFunction: () -> T?, nextFunction: (T) -> T?): Sequence<T> =\n    GeneratorSequence(seedFunction, nextFunction)\n\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"PreconditionsKt\")\n\npackage kotlin\n\nimport kotlin.contracts.contract\n\n/**\n * Throws an [IllegalArgumentException] if the [value] is false.\n *\n * @sample samples.misc.Preconditions.failRequireWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun require(value: Boolean): Unit {\n    contract {\n        returns() implies value\n    }\n    require(value) { \"Failed requirement.\" }\n}\n\n/**\n * Throws an [IllegalArgumentException] with the result of calling [lazyMessage] if the [value] is false.\n *\n * @sample samples.misc.Preconditions.failRequireWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun require(value: Boolean, lazyMessage: () -> Any): Unit {\n    contract {\n        returns() implies value\n    }\n    if (!value) {\n        val message = lazyMessage()\n        throw IllegalArgumentException(message.toString())\n    }\n}\n\n/**\n * Throws an [IllegalArgumentException] if the [value] is null. Otherwise returns the not null value.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T : Any> requireNotNull(value: T?): T {\n    contract {\n        returns() implies (value != null)\n    }\n    return requireNotNull(value) { \"Required value was null.\" }\n}\n\n/**\n * Throws an [IllegalArgumentException] with the result of calling [lazyMessage] if the [value] is null. Otherwise\n * returns the not null value.\n *\n * @sample samples.misc.Preconditions.failRequireNotNullWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T : Any> requireNotNull(value: T?, lazyMessage: () -> Any): T {\n    contract {\n        returns() implies (value != null)\n    }\n\n    if (value == null) {\n        val message = lazyMessage()\n        throw IllegalArgumentException(message.toString())\n    } else {\n        return value\n    }\n}\n\n/**\n * Throws an [IllegalStateException] if the [value] is false.\n *\n * @sample samples.misc.Preconditions.failCheckWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun check(value: Boolean): Unit {\n    contract {\n        returns() implies value\n    }\n    check(value) { \"Check failed.\" }\n}\n\n/**\n * Throws an [IllegalStateException] with the result of calling [lazyMessage] if the [value] is false.\n *\n * @sample samples.misc.Preconditions.failCheckWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun check(value: Boolean, lazyMessage: () -> Any): Unit {\n    contract {\n        returns() implies value\n    }\n    if (!value) {\n        val message = lazyMessage()\n        throw IllegalStateException(message.toString())\n    }\n}\n\n/**\n * Throws an [IllegalStateException] if the [value] is null. Otherwise\n * returns the not null value.\n *\n * @sample samples.misc.Preconditions.failCheckWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T : Any> checkNotNull(value: T?): T {\n    contract {\n        returns() implies (value != null)\n    }\n    return checkNotNull(value) { \"Required value was null.\" }\n}\n\n/**\n * Throws an [IllegalStateException] with the result of calling [lazyMessage]  if the [value] is null. Otherwise\n * returns the not null value.\n *\n * @sample samples.misc.Preconditions.failCheckWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T : Any> checkNotNull(value: T?, lazyMessage: () -> Any): T {\n    contract {\n        returns() implies (value != null)\n    }\n\n    if (value == null) {\n        val message = lazyMessage()\n        throw IllegalStateException(message.toString())\n    } else {\n        return value\n    }\n}\n\n\n/**\n * Throws an [IllegalStateException] with the given [message].\n *\n * @sample samples.misc.Preconditions.failWithError\n */\n@kotlin.internal.InlineOnly\npublic inline fun error(message: Any): Nothing = throw IllegalStateException(message.toString())\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n@file:kotlin.jvm.JvmName(\"ComparisonsKt\")\n@file:kotlin.jvm.JvmMultifileClass\n\npackage kotlin.comparisons\n\n/**\n * Compares two values using the specified functions [selectors] to calculate the result of the comparison.\n * The functions are called sequentially, receive the given values [a] and [b] and return [Comparable]\n * objects. As soon as the [Comparable] instances returned by a function for [a] and [b] values do not\n * compare as equal, the result of that comparison is returned.\n *\n * @sample samples.comparisons.Comparisons.compareValuesByWithSelectors\n */\npublic fun <T> compareValuesBy(a: T, b: T, vararg selectors: (T) -> Comparable<*>?): Int {\n    require(selectors.size > 0)\n    return compareValuesByImpl(a, b, selectors)\n}\n\nprivate fun <T> compareValuesByImpl(a: T, b: T, selectors: Array<out (T) -> Comparable<*>?>): Int {\n    for (fn in selectors) {\n        val v1 = fn(a)\n        val v2 = fn(b)\n        val diff = compareValues(v1, v2)\n        if (diff != 0) return diff\n    }\n    return 0\n}\n\n/**\n * Compares two values using the specified [selector] function to calculate the result of the comparison.\n * The function is applied to the given values [a] and [b] and return [Comparable] objects.\n * The result of comparison of these [Comparable] instances is returned.\n *\n * @sample samples.comparisons.Comparisons.compareValuesByWithSingleSelector\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> compareValuesBy(a: T, b: T, selector: (T) -> Comparable<*>?): Int {\n    return compareValues(selector(a), selector(b))\n}\n\n/**\n * Compares two values using the specified [selector] function to calculate the result of the comparison.\n * The function is applied to the given values [a] and [b] and return objects of type K which are then being\n * compared with the given [comparator].\n *\n * @sample samples.comparisons.Comparisons.compareValuesByWithComparator\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, K> compareValuesBy(a: T, b: T, comparator: Comparator<in K>, selector: (T) -> K): Int {\n    return comparator.compare(selector(a), selector(b))\n}\n\n//// Not so useful without type inference for receiver of expression\n//// compareValuesWith(v1, v2, compareBy { it.prop1 } thenByDescending { it.prop2 })\n///**\n// * Compares two values using the specified [comparator].\n// */\n//@Suppress(\"NOTHING_TO_INLINE\")\n//public inline fun <T> compareValuesWith(a: T, b: T, comparator: Comparator<T>): Int = comparator.compare(a, b)\n//\n\n\n/**\n * Compares two nullable [Comparable] values. Null is considered less than any value.\n *\n * @sample samples.comparisons.Comparisons.compareValues\n */\npublic fun <T : Comparable<*>> compareValues(a: T?, b: T?): Int {\n    if (a === b) return 0\n    if (a == null) return -1\n    if (b == null) return 1\n\n    @Suppress(\"UNCHECKED_CAST\")\n    return (a as Comparable<Any>).compareTo(b)\n}\n\n/**\n * Creates a comparator using the sequence of functions to calculate a result of comparison.\n * The functions are called sequentially, receive the given values `a` and `b` and return [Comparable]\n * objects. As soon as the [Comparable] instances returned by a function for `a` and `b` values do not\n * compare as equal, the result of that comparison is returned from the [Comparator].\n *\n * @sample samples.comparisons.Comparisons.compareByWithSelectors\n */\npublic fun <T> compareBy(vararg selectors: (T) -> Comparable<*>?): Comparator<T> {\n    require(selectors.size > 0)\n    return Comparator { a, b -> compareValuesByImpl(a, b, selectors) }\n}\n\n\n/**\n * Creates a comparator using the function to transform value to a [Comparable] instance for comparison.\n *\n * @sample samples.comparisons.Comparisons.compareByWithSingleSelector\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> compareBy(crossinline selector: (T) -> Comparable<*>?): Comparator<T> =\n    Comparator { a, b -> compareValuesBy(a, b, selector) }\n\n/**\n * Creates a comparator using the [selector] function to transform values being compared and then applying\n * the specified [comparator] to compare transformed values.\n *\n * @sample samples.comparisons.Comparisons.compareByWithComparator\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, K> compareBy(comparator: Comparator<in K>, crossinline selector: (T) -> K): Comparator<T> =\n    Comparator { a, b -> compareValuesBy(a, b, comparator, selector) }\n\n/**\n * Creates a descending comparator using the function to transform value to a [Comparable] instance for comparison.\n *\n * @sample samples.comparisons.Comparisons.compareByDescendingWithSingleSelector\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> compareByDescending(crossinline selector: (T) -> Comparable<*>?): Comparator<T> =\n    Comparator { a, b -> compareValuesBy(b, a, selector) }\n\n/**\n * Creates a descending comparator using the [selector] function to transform values being compared and then applying\n * the specified [comparator] to compare transformed values.\n *\n * Note that an order of [comparator] is reversed by this wrapper.\n *\n * @sample samples.comparisons.Comparisons.compareByDescendingWithComparator\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, K> compareByDescending(comparator: Comparator<in K>, crossinline selector: (T) -> K): Comparator<T> =\n    Comparator { a, b -> compareValuesBy(b, a, comparator, selector) }\n\n/**\n * Creates a comparator comparing values after the primary comparator defined them equal. It uses\n * the function to transform value to a [Comparable] instance for comparison.\n *\n * @sample samples.comparisons.Comparisons.thenBy\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Comparator<T>.thenBy(crossinline selector: (T) -> Comparable<*>?): Comparator<T> =\n    Comparator { a, b ->\n        val previousCompare = this@thenBy.compare(a, b)\n        if (previousCompare != 0) previousCompare else compareValuesBy(a, b, selector)\n    }\n\n/**\n * Creates a comparator comparing values after the primary comparator defined them equal. It uses\n * the [selector] function to transform values and then compares them with the given [comparator].\n *\n * @sample samples.comparisons.Comparisons.thenByWithComparator\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, K> Comparator<T>.thenBy(comparator: Comparator<in K>, crossinline selector: (T) -> K): Comparator<T> =\n    Comparator { a, b ->\n        val previousCompare = this@thenBy.compare(a, b)\n        if (previousCompare != 0) previousCompare else compareValuesBy(a, b, comparator, selector)\n    }\n\n/**\n * Creates a descending comparator using the primary comparator and\n * the function to transform value to a [Comparable] instance for comparison.\n *\n * @sample samples.comparisons.Comparisons.thenByDescending\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Comparator<T>.thenByDescending(crossinline selector: (T) -> Comparable<*>?): Comparator<T> =\n    Comparator { a, b ->\n        val previousCompare = this@thenByDescending.compare(a, b)\n        if (previousCompare != 0) previousCompare else compareValuesBy(b, a, selector)\n    }\n\n/**\n * Creates a descending comparator comparing values after the primary comparator defined them equal. It uses\n * the [selector] function to transform values and then compares them with the given [comparator].\n *\n * @sample samples.comparisons.Comparisons.thenByDescendingWithComparator\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, K> Comparator<T>.thenByDescending(comparator: Comparator<in K>, crossinline selector: (T) -> K): Comparator<T> =\n    Comparator { a, b ->\n        val previousCompare = this@thenByDescending.compare(a, b)\n        if (previousCompare != 0) previousCompare else compareValuesBy(b, a, comparator, selector)\n    }\n\n\n/**\n * Creates a comparator using the primary comparator and function to calculate a result of comparison.\n *\n * @sample samples.comparisons.Comparisons.thenComparator\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Comparator<T>.thenComparator(crossinline comparison: (a: T, b: T) -> Int): Comparator<T> =\n    Comparator { a, b ->\n        val previousCompare = this@thenComparator.compare(a, b)\n        if (previousCompare != 0) previousCompare else comparison(a, b)\n    }\n\n/**\n * Combines this comparator and the given [comparator] such that the latter is applied only\n * when the former considered values equal.\n *\n * @sample samples.comparisons.Comparisons.then\n */\npublic infix fun <T> Comparator<T>.then(comparator: Comparator<in T>): Comparator<T> =\n    Comparator { a, b ->\n        val previousCompare = this@then.compare(a, b)\n        if (previousCompare != 0) previousCompare else comparator.compare(a, b)\n    }\n\n/**\n * Combines this comparator and the given [comparator] such that the latter is applied only\n * when the former considered values equal.\n *\n * @sample samples.comparisons.Comparisons.thenDescending\n */\npublic infix fun <T> Comparator<T>.thenDescending(comparator: Comparator<in T>): Comparator<T> =\n    Comparator<T> { a, b ->\n        val previousCompare = this@thenDescending.compare(a, b)\n        if (previousCompare != 0) previousCompare else comparator.compare(b, a)\n    }\n\n// Not so useful without type inference for receiver of expression\n/**\n * Extends the given [comparator] of non-nullable values to a comparator of nullable values\n * considering `null` value less than any other value.\n *\n * @sample samples.comparisons.Comparisons.nullsFirstLastWithComparator\n */\npublic fun <T : Any> nullsFirst(comparator: Comparator<in T>): Comparator<T?> =\n    Comparator { a, b ->\n        when {\n            a === b -> 0\n            a == null -> -1\n            b == null -> 1\n            else -> comparator.compare(a, b)\n        }\n    }\n\n/**\n * Provides a comparator of nullable [Comparable] values\n * considering `null` value less than any other value.\n *\n * @sample samples.comparisons.Comparisons.nullsFirstLastComparator\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T : Comparable<T>> nullsFirst(): Comparator<T?> = nullsFirst(naturalOrder())\n\n/**\n * Extends the given [comparator] of non-nullable values to a comparator of nullable values\n * considering `null` value greater than any other value.\n *\n * @sample samples.comparisons.Comparisons.nullsFirstLastWithComparator\n */\npublic fun <T : Any> nullsLast(comparator: Comparator<in T>): Comparator<T?> =\n    Comparator { a, b ->\n        when {\n            a === b -> 0\n            a == null -> 1\n            b == null -> -1\n            else -> comparator.compare(a, b)\n        }\n    }\n\n/**\n * Provides a comparator of nullable [Comparable] values\n * considering `null` value greater than any other value.\n *\n * @sample samples.comparisons.Comparisons.nullsFirstLastComparator\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T : Comparable<T>> nullsLast(): Comparator<T?> = nullsLast(naturalOrder())\n\n/**\n * Returns a comparator that compares [Comparable] objects in natural order.\n *\n * @sample samples.comparisons.Comparisons.naturalOrderComparator\n */\npublic fun <T : Comparable<T>> naturalOrder(): Comparator<T> = @Suppress(\"UNCHECKED_CAST\") (NaturalOrderComparator as Comparator<T>)\n\n/**\n * Returns a comparator that compares [Comparable] objects in reversed natural order.\n *\n * @sample samples.comparisons.Comparisons.nullsFirstLastWithComparator\n */\npublic fun <T : Comparable<T>> reverseOrder(): Comparator<T> = @Suppress(\"UNCHECKED_CAST\") (ReverseOrderComparator as Comparator<T>)\n\n/**\n *  Returns a comparator that imposes the reverse ordering of this comparator.\n *\n *  @sample samples.comparisons.Comparisons.reversed\n */\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\")\npublic fun <T> Comparator<T>.reversed(): Comparator<T> = when (this) {\n    is ReversedComparator -> this.comparator\n    NaturalOrderComparator -> @Suppress(\"UNCHECKED_CAST\") (ReverseOrderComparator as Comparator<T>)\n    ReverseOrderComparator -> @Suppress(\"UNCHECKED_CAST\") (NaturalOrderComparator as Comparator<T>)\n    else -> ReversedComparator(this)\n}\n\n\nprivate class ReversedComparator<T>(public val comparator: Comparator<T>) : Comparator<T> {\n    override fun compare(a: T, b: T): Int = comparator.compare(b, a)\n    @Suppress(\"VIRTUAL_MEMBER_HIDDEN\")\n    fun reversed(): Comparator<T> = comparator\n}\n\nprivate object NaturalOrderComparator : Comparator<Comparable<Any>> {\n    override fun compare(a: Comparable<Any>, b: Comparable<Any>): Int = a.compareTo(b)\n    @Suppress(\"VIRTUAL_MEMBER_HIDDEN\")\n    fun reversed(): Comparator<Comparable<Any>> = ReverseOrderComparator\n}\n\nprivate object ReverseOrderComparator : Comparator<Comparable<Any>> {\n    override fun compare(a: Comparable<Any>, b: Comparable<Any>): Int = b.compareTo(a)\n    @Suppress(\"VIRTUAL_MEMBER_HIDDEN\")\n    fun reversed(): Comparator<Comparable<Any>> = NaturalOrderComparator\n}\n","/*\n * Copyright 2010-2021 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.collections\n\n//\n// NOTE: THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.js.*\nimport primitiveArrayConcat\nimport withType\nimport kotlin.ranges.contains\nimport kotlin.ranges.reversed\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic actual fun <T> Array<out T>.elementAt(index: Int): T {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, size: $size}\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic actual fun ByteArray.elementAt(index: Int): Byte {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, size: $size}\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic actual fun ShortArray.elementAt(index: Int): Short {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, size: $size}\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic actual fun IntArray.elementAt(index: Int): Int {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, size: $size}\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic actual fun LongArray.elementAt(index: Int): Long {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, size: $size}\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic actual fun FloatArray.elementAt(index: Int): Float {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, size: $size}\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic actual fun DoubleArray.elementAt(index: Int): Double {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, size: $size}\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic actual fun BooleanArray.elementAt(index: Int): Boolean {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, size: $size}\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic actual fun CharArray.elementAt(index: Int): Char {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, size: $size}\") }\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic actual fun <T> Array<out T>.asList(): List<T> {\n    return ArrayList<T>(this.unsafeCast<Array<Any?>>())\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun ByteArray.asList(): List<Byte> {\n    return this.unsafeCast<Array<Byte>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun ShortArray.asList(): List<Short> {\n    return this.unsafeCast<Array<Short>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun IntArray.asList(): List<Int> {\n    return this.unsafeCast<Array<Int>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun LongArray.asList(): List<Long> {\n    return this.unsafeCast<Array<Long>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun FloatArray.asList(): List<Float> {\n    return this.unsafeCast<Array<Float>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun DoubleArray.asList(): List<Double> {\n    return this.unsafeCast<Array<Double>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun BooleanArray.asList(): List<Boolean> {\n    return this.unsafeCast<Array<Boolean>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic actual fun CharArray.asList(): List<Char> {\n    return object : AbstractList<Char>(), RandomAccess {\n        override val size: Int get() = this@asList.size\n        override fun isEmpty(): Boolean = this@asList.isEmpty()\n        override fun contains(element: Char): Boolean = this@asList.contains(element)\n        override fun get(index: Int): Char {\n            AbstractList.checkElementIndex(index, size)\n            return this@asList[index]\n        }\n        override fun indexOf(element: Char): Int {\n            @Suppress(\"USELESS_CAST\")\n            if ((element as Any?) !is Char) return -1\n            return this@asList.indexOf(element)\n        }\n        override fun lastIndexOf(element: Char): Int {\n            @Suppress(\"USELESS_CAST\")\n            if ((element as Any?) !is Char) return -1\n            return this@asList.lastIndexOf(element)\n        }\n    }\n}\n\n/**\n * Returns `true` if the two specified arrays are *deeply* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * If two corresponding elements are nested arrays, they are also compared deeply.\n * If any of arrays contains itself on any nesting level the behavior is undefined.\n * \n * The elements of other types are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.LowPriorityInOverloadResolution\npublic actual infix fun <T> Array<out T>.contentDeepEquals(other: Array<out T>): Boolean {\n    return this.contentDeepEquals(other)\n}\n\n/**\n * Returns `true` if the two specified arrays are *deeply* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The specified arrays are also considered deeply equal if both are `null`.\n * \n * If two corresponding elements are nested arrays, they are also compared deeply.\n * If any of arrays contains itself on any nesting level the behavior is undefined.\n * \n * The elements of other types are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayDeepEquals\")\npublic actual infix fun <T> Array<out T>?.contentDeepEquals(other: Array<out T>?): Boolean {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n * Nested arrays are treated as lists too.\n * \n * If any of arrays contains itself on any nesting level the behavior is undefined.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.LowPriorityInOverloadResolution\npublic actual fun <T> Array<out T>.contentDeepHashCode(): Int {\n    return this.contentDeepHashCode()\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n * Nested arrays are treated as lists too.\n * \n * If any of arrays contains itself on any nesting level the behavior is undefined.\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayDeepHashCode\")\npublic actual fun <T> Array<out T>?.contentDeepHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of this array as if it is a [List].\n * Nested arrays are treated as lists too.\n * \n * If any of arrays contains itself on any nesting level that reference\n * is rendered as `\"[...]\"` to prevent recursion.\n * \n * @sample samples.collections.Arrays.ContentOperations.contentDeepToString\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.LowPriorityInOverloadResolution\npublic actual fun <T> Array<out T>.contentDeepToString(): String {\n    return this.contentDeepToString()\n}\n\n/**\n * Returns a string representation of the contents of this array as if it is a [List].\n * Nested arrays are treated as lists too.\n * \n * If any of arrays contains itself on any nesting level that reference\n * is rendered as `\"[...]\"` to prevent recursion.\n * \n * @sample samples.collections.Arrays.ContentOperations.contentDeepToString\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayDeepToString\")\npublic actual fun <T> Array<out T>?.contentDeepToString(): String {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual infix fun <T> Array<out T>.contentEquals(other: Array<out T>): Boolean {\n    return this.contentEquals(other)\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual infix fun ByteArray.contentEquals(other: ByteArray): Boolean {\n    return this.contentEquals(other)\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual infix fun ShortArray.contentEquals(other: ShortArray): Boolean {\n    return this.contentEquals(other)\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual infix fun IntArray.contentEquals(other: IntArray): Boolean {\n    return this.contentEquals(other)\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual infix fun LongArray.contentEquals(other: LongArray): Boolean {\n    return this.contentEquals(other)\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual infix fun FloatArray.contentEquals(other: FloatArray): Boolean {\n    return this.contentEquals(other)\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual infix fun DoubleArray.contentEquals(other: DoubleArray): Boolean {\n    return this.contentEquals(other)\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual infix fun BooleanArray.contentEquals(other: BooleanArray): Boolean {\n    return this.contentEquals(other)\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual infix fun CharArray.contentEquals(other: CharArray): Boolean {\n    return this.contentEquals(other)\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayEquals\")\npublic actual infix fun <T> Array<out T>?.contentEquals(other: Array<out T>?): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayEquals\")\npublic actual infix fun ByteArray?.contentEquals(other: ByteArray?): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayEquals\")\npublic actual infix fun ShortArray?.contentEquals(other: ShortArray?): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayEquals\")\npublic actual infix fun IntArray?.contentEquals(other: IntArray?): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayEquals\")\npublic actual infix fun LongArray?.contentEquals(other: LongArray?): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayEquals\")\npublic actual infix fun FloatArray?.contentEquals(other: FloatArray?): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayEquals\")\npublic actual infix fun DoubleArray?.contentEquals(other: DoubleArray?): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayEquals\")\npublic actual infix fun BooleanArray?.contentEquals(other: BooleanArray?): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayEquals\")\npublic actual infix fun CharArray?.contentEquals(other: CharArray?): Boolean {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual fun <T> Array<out T>.contentHashCode(): Int {\n    return this.contentHashCode()\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual fun ByteArray.contentHashCode(): Int {\n    return this.contentHashCode()\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual fun ShortArray.contentHashCode(): Int {\n    return this.contentHashCode()\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual fun IntArray.contentHashCode(): Int {\n    return this.contentHashCode()\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual fun LongArray.contentHashCode(): Int {\n    return this.contentHashCode()\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual fun FloatArray.contentHashCode(): Int {\n    return this.contentHashCode()\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual fun DoubleArray.contentHashCode(): Int {\n    return this.contentHashCode()\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual fun BooleanArray.contentHashCode(): Int {\n    return this.contentHashCode()\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual fun CharArray.contentHashCode(): Int {\n    return this.contentHashCode()\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayHashCode\")\npublic actual fun <T> Array<out T>?.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayHashCode\")\npublic actual fun ByteArray?.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayHashCode\")\npublic actual fun ShortArray?.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayHashCode\")\npublic actual fun IntArray?.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayHashCode\")\npublic actual fun LongArray?.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayHashCode\")\npublic actual fun FloatArray?.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayHashCode\")\npublic actual fun DoubleArray?.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayHashCode\")\npublic actual fun BooleanArray?.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayHashCode\")\npublic actual fun CharArray?.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual fun <T> Array<out T>.contentToString(): String {\n    return this.contentToString()\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual fun ByteArray.contentToString(): String {\n    return this.contentToString()\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual fun ShortArray.contentToString(): String {\n    return this.contentToString()\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual fun IntArray.contentToString(): String {\n    return this.contentToString()\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual fun LongArray.contentToString(): String {\n    return this.contentToString()\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual fun FloatArray.contentToString(): String {\n    return this.contentToString()\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual fun DoubleArray.contentToString(): String {\n    return this.contentToString()\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual fun BooleanArray.contentToString(): String {\n    return this.contentToString()\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual fun CharArray.contentToString(): String {\n    return this.contentToString()\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayToString\")\npublic actual fun <T> Array<out T>?.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayToString\")\npublic actual fun ByteArray?.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayToString\")\npublic actual fun ShortArray?.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayToString\")\npublic actual fun IntArray?.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayToString\")\npublic actual fun LongArray?.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayToString\")\npublic actual fun FloatArray?.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayToString\")\npublic actual fun DoubleArray?.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayToString\")\npublic actual fun BooleanArray?.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayToString\")\npublic actual fun CharArray?.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun <T> Array<out T>.copyInto(destination: Array<T>, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): Array<T> {\n    arrayCopy(this, destination, destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun ByteArray.copyInto(destination: ByteArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): ByteArray {\n    arrayCopy(this.unsafeCast<Array<Byte>>(), destination.unsafeCast<Array<Byte>>(), destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun ShortArray.copyInto(destination: ShortArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): ShortArray {\n    arrayCopy(this.unsafeCast<Array<Short>>(), destination.unsafeCast<Array<Short>>(), destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun IntArray.copyInto(destination: IntArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): IntArray {\n    arrayCopy(this.unsafeCast<Array<Int>>(), destination.unsafeCast<Array<Int>>(), destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun LongArray.copyInto(destination: LongArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): LongArray {\n    arrayCopy(this.unsafeCast<Array<Long>>(), destination.unsafeCast<Array<Long>>(), destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun FloatArray.copyInto(destination: FloatArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): FloatArray {\n    arrayCopy(this.unsafeCast<Array<Float>>(), destination.unsafeCast<Array<Float>>(), destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun DoubleArray.copyInto(destination: DoubleArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): DoubleArray {\n    arrayCopy(this.unsafeCast<Array<Double>>(), destination.unsafeCast<Array<Double>>(), destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun BooleanArray.copyInto(destination: BooleanArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): BooleanArray {\n    arrayCopy(this.unsafeCast<Array<Boolean>>(), destination.unsafeCast<Array<Boolean>>(), destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun CharArray.copyInto(destination: CharArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): CharArray {\n    arrayCopy(this.unsafeCast<Array<Char>>(), destination.unsafeCast<Array<Char>>(), destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\n@Suppress(\"ACTUAL_WITHOUT_EXPECT\", \"NOTHING_TO_INLINE\")\npublic actual inline fun <T> Array<out T>.copyOf(): Array<T> {\n    return this.asDynamic().slice()\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline fun ByteArray.copyOf(): ByteArray {\n    return this.asDynamic().slice()\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline fun ShortArray.copyOf(): ShortArray {\n    return this.asDynamic().slice()\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline fun IntArray.copyOf(): IntArray {\n    return this.asDynamic().slice()\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic actual fun LongArray.copyOf(): LongArray {\n    return withType(\"LongArray\", this.asDynamic().slice())\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline fun FloatArray.copyOf(): FloatArray {\n    return this.asDynamic().slice()\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline fun DoubleArray.copyOf(): DoubleArray {\n    return this.asDynamic().slice()\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic actual fun BooleanArray.copyOf(): BooleanArray {\n    return withType(\"BooleanArray\", this.asDynamic().slice())\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic actual fun CharArray.copyOf(): CharArray {\n    return withType(\"CharArray\", this.asDynamic().slice())\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic actual fun ByteArray.copyOf(newSize: Int): ByteArray {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return fillFrom(this, ByteArray(newSize))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic actual fun ShortArray.copyOf(newSize: Int): ShortArray {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return fillFrom(this, ShortArray(newSize))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic actual fun IntArray.copyOf(newSize: Int): IntArray {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return fillFrom(this, IntArray(newSize))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic actual fun LongArray.copyOf(newSize: Int): LongArray {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return withType(\"LongArray\", arrayCopyResize(this, newSize, 0L))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic actual fun FloatArray.copyOf(newSize: Int): FloatArray {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return fillFrom(this, FloatArray(newSize))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic actual fun DoubleArray.copyOf(newSize: Int): DoubleArray {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return fillFrom(this, DoubleArray(newSize))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with `false` values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with `false` values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic actual fun BooleanArray.copyOf(newSize: Int): BooleanArray {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return withType(\"BooleanArray\", arrayCopyResize(this, newSize, false))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with null char (`\\u0000`) values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with null char (`\\u0000`) values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic actual fun CharArray.copyOf(newSize: Int): CharArray {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return withType(\"CharArray\", fillFrom(this, CharArray(newSize)))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with `null` values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with `null` values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizingCopyOf\n */\n@Suppress(\"ACTUAL_WITHOUT_EXPECT\")\npublic actual fun <T> Array<out T>.copyOf(newSize: Int): Array<T?> {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return arrayCopyResize(this, newSize, null)\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive) to copy.\n * @param toIndex the end of the range (exclusive) to copy.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@Suppress(\"ACTUAL_WITHOUT_EXPECT\")\npublic actual fun <T> Array<out T>.copyOfRange(fromIndex: Int, toIndex: Int): Array<T> {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return this.asDynamic().slice(fromIndex, toIndex)\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive) to copy.\n * @param toIndex the end of the range (exclusive) to copy.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\npublic actual fun ByteArray.copyOfRange(fromIndex: Int, toIndex: Int): ByteArray {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return this.asDynamic().slice(fromIndex, toIndex)\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive) to copy.\n * @param toIndex the end of the range (exclusive) to copy.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\npublic actual fun ShortArray.copyOfRange(fromIndex: Int, toIndex: Int): ShortArray {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return this.asDynamic().slice(fromIndex, toIndex)\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive) to copy.\n * @param toIndex the end of the range (exclusive) to copy.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\npublic actual fun IntArray.copyOfRange(fromIndex: Int, toIndex: Int): IntArray {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return this.asDynamic().slice(fromIndex, toIndex)\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive) to copy.\n * @param toIndex the end of the range (exclusive) to copy.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\npublic actual fun LongArray.copyOfRange(fromIndex: Int, toIndex: Int): LongArray {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return withType(\"LongArray\", this.asDynamic().slice(fromIndex, toIndex))\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive) to copy.\n * @param toIndex the end of the range (exclusive) to copy.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\npublic actual fun FloatArray.copyOfRange(fromIndex: Int, toIndex: Int): FloatArray {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return this.asDynamic().slice(fromIndex, toIndex)\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive) to copy.\n * @param toIndex the end of the range (exclusive) to copy.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\npublic actual fun DoubleArray.copyOfRange(fromIndex: Int, toIndex: Int): DoubleArray {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return this.asDynamic().slice(fromIndex, toIndex)\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive) to copy.\n * @param toIndex the end of the range (exclusive) to copy.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\npublic actual fun BooleanArray.copyOfRange(fromIndex: Int, toIndex: Int): BooleanArray {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return withType(\"BooleanArray\", this.asDynamic().slice(fromIndex, toIndex))\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive) to copy.\n * @param toIndex the end of the range (exclusive) to copy.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\npublic actual fun CharArray.copyOfRange(fromIndex: Int, toIndex: Int): CharArray {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return withType(\"CharArray\", this.asDynamic().slice(fromIndex, toIndex))\n}\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive) to fill, 0 by default.\n * @param toIndex the end of the range (exclusive) to fill, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun <T> Array<T>.fill(element: T, fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    this.asDynamic().fill(element, fromIndex, toIndex);\n}\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive) to fill, 0 by default.\n * @param toIndex the end of the range (exclusive) to fill, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun ByteArray.fill(element: Byte, fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    this.asDynamic().fill(element, fromIndex, toIndex);\n}\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive) to fill, 0 by default.\n * @param toIndex the end of the range (exclusive) to fill, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun ShortArray.fill(element: Short, fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    this.asDynamic().fill(element, fromIndex, toIndex);\n}\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive) to fill, 0 by default.\n * @param toIndex the end of the range (exclusive) to fill, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun IntArray.fill(element: Int, fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    this.asDynamic().fill(element, fromIndex, toIndex);\n}\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive) to fill, 0 by default.\n * @param toIndex the end of the range (exclusive) to fill, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun LongArray.fill(element: Long, fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    this.asDynamic().fill(element, fromIndex, toIndex);\n}\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive) to fill, 0 by default.\n * @param toIndex the end of the range (exclusive) to fill, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun FloatArray.fill(element: Float, fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    this.asDynamic().fill(element, fromIndex, toIndex);\n}\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive) to fill, 0 by default.\n * @param toIndex the end of the range (exclusive) to fill, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun DoubleArray.fill(element: Double, fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    this.asDynamic().fill(element, fromIndex, toIndex);\n}\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive) to fill, 0 by default.\n * @param toIndex the end of the range (exclusive) to fill, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun BooleanArray.fill(element: Boolean, fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    this.asDynamic().fill(element, fromIndex, toIndex);\n}\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive) to fill, 0 by default.\n * @param toIndex the end of the range (exclusive) to fill, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun CharArray.fill(element: Char, fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    this.asDynamic().fill(element, fromIndex, toIndex);\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"ACTUAL_WITHOUT_EXPECT\", \"NOTHING_TO_INLINE\")\npublic actual inline operator fun <T> Array<out T>.plus(element: T): Array<T> {\n    return this.asDynamic().concat(arrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun ByteArray.plus(element: Byte): ByteArray {\n    return plus(byteArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun ShortArray.plus(element: Short): ShortArray {\n    return plus(shortArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun IntArray.plus(element: Int): IntArray {\n    return plus(intArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun LongArray.plus(element: Long): LongArray {\n    return plus(longArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun FloatArray.plus(element: Float): FloatArray {\n    return plus(floatArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun DoubleArray.plus(element: Double): DoubleArray {\n    return plus(doubleArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun BooleanArray.plus(element: Boolean): BooleanArray {\n    return plus(booleanArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun CharArray.plus(element: Char): CharArray {\n    return plus(charArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\n@Suppress(\"ACTUAL_WITHOUT_EXPECT\")\npublic actual operator fun <T> Array<out T>.plus(elements: Collection<T>): Array<T> {\n    return arrayPlusCollection(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic actual operator fun ByteArray.plus(elements: Collection<Byte>): ByteArray {\n    return fillFromCollection(this.copyOf(size + elements.size), this.size, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic actual operator fun ShortArray.plus(elements: Collection<Short>): ShortArray {\n    return fillFromCollection(this.copyOf(size + elements.size), this.size, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic actual operator fun IntArray.plus(elements: Collection<Int>): IntArray {\n    return fillFromCollection(this.copyOf(size + elements.size), this.size, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic actual operator fun LongArray.plus(elements: Collection<Long>): LongArray {\n    return arrayPlusCollection(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic actual operator fun FloatArray.plus(elements: Collection<Float>): FloatArray {\n    return fillFromCollection(this.copyOf(size + elements.size), this.size, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic actual operator fun DoubleArray.plus(elements: Collection<Double>): DoubleArray {\n    return fillFromCollection(this.copyOf(size + elements.size), this.size, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic actual operator fun BooleanArray.plus(elements: Collection<Boolean>): BooleanArray {\n    return arrayPlusCollection(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic actual operator fun CharArray.plus(elements: Collection<Char>): CharArray {\n    return fillFromCollection(this.copyOf(size + elements.size), this.size, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"ACTUAL_WITHOUT_EXPECT\", \"NOTHING_TO_INLINE\")\npublic actual inline operator fun <T> Array<out T>.plus(elements: Array<out T>): Array<T> {\n    return this.asDynamic().concat(elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun ByteArray.plus(elements: ByteArray): ByteArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun ShortArray.plus(elements: ShortArray): ShortArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun IntArray.plus(elements: IntArray): IntArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun LongArray.plus(elements: LongArray): LongArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun FloatArray.plus(elements: FloatArray): FloatArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun DoubleArray.plus(elements: DoubleArray): DoubleArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun BooleanArray.plus(elements: BooleanArray): BooleanArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun CharArray.plus(elements: CharArray): CharArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"ACTUAL_WITHOUT_EXPECT\", \"NOTHING_TO_INLINE\")\npublic actual inline fun <T> Array<out T>.plusElement(element: T): Array<T> {\n    return this.asDynamic().concat(arrayOf(element))\n}\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\n@library(\"primitiveArraySort\")\npublic actual fun IntArray.sort(): Unit {\n    definedExternally\n}\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\npublic actual fun LongArray.sort(): Unit {\n    if (size > 1) sort { a: Long, b: Long -> a.compareTo(b) }\n}\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\n@library(\"primitiveArraySort\")\npublic actual fun ByteArray.sort(): Unit {\n    definedExternally\n}\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\n@library(\"primitiveArraySort\")\npublic actual fun ShortArray.sort(): Unit {\n    definedExternally\n}\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\n@library(\"primitiveArraySort\")\npublic actual fun DoubleArray.sort(): Unit {\n    definedExternally\n}\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\n@library(\"primitiveArraySort\")\npublic actual fun FloatArray.sort(): Unit {\n    definedExternally\n}\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\n@library(\"primitiveArraySort\")\npublic actual fun CharArray.sort(): Unit {\n    definedExternally\n}\n\n/**\n * Sorts the array in-place according to the natural order of its elements.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n * \n * @sample samples.collections.Arrays.Sorting.sortArrayOfComparable\n */\npublic actual fun <T : Comparable<T>> Array<out T>.sort(): Unit {\n    if (size > 1) sortArray(this)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T> Array<out T>.sort(comparison: (a: T, b: T) -> Int): Unit {\n    if (size > 1) sortArrayWith(this, comparison)\n}\n\n/**\n * Sorts a range in the array in-place.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n * \n * @param fromIndex the start of the range (inclusive) to sort, 0 by default.\n * @param toIndex the end of the range (exclusive) to sort, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n * \n * @sample samples.collections.Arrays.Sorting.sortRangeOfArrayOfComparable\n */\n@SinceKotlin(\"1.4\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun <T : Comparable<T>> Array<out T>.sort(fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    sortArrayWith(this, fromIndex, toIndex, naturalOrder())\n}\n\n/**\n * Sorts a range in the array in-place.\n * \n * @param fromIndex the start of the range (inclusive) to sort, 0 by default.\n * @param toIndex the end of the range (exclusive) to sort, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n * \n * @sample samples.collections.Arrays.Sorting.sortRangeOfArray\n */\n@SinceKotlin(\"1.4\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun ByteArray.sort(fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    val subarray = this.asDynamic().subarray(fromIndex, toIndex).unsafeCast<ByteArray>()\n    subarray.sort()\n}\n\n/**\n * Sorts a range in the array in-place.\n * \n * @param fromIndex the start of the range (inclusive) to sort, 0 by default.\n * @param toIndex the end of the range (exclusive) to sort, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n * \n * @sample samples.collections.Arrays.Sorting.sortRangeOfArray\n */\n@SinceKotlin(\"1.4\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun ShortArray.sort(fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    val subarray = this.asDynamic().subarray(fromIndex, toIndex).unsafeCast<ShortArray>()\n    subarray.sort()\n}\n\n/**\n * Sorts a range in the array in-place.\n * \n * @param fromIndex the start of the range (inclusive) to sort, 0 by default.\n * @param toIndex the end of the range (exclusive) to sort, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n * \n * @sample samples.collections.Arrays.Sorting.sortRangeOfArray\n */\n@SinceKotlin(\"1.4\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun IntArray.sort(fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    val subarray = this.asDynamic().subarray(fromIndex, toIndex).unsafeCast<IntArray>()\n    subarray.sort()\n}\n\n/**\n * Sorts a range in the array in-place.\n * \n * @param fromIndex the start of the range (inclusive) to sort, 0 by default.\n * @param toIndex the end of the range (exclusive) to sort, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n * \n * @sample samples.collections.Arrays.Sorting.sortRangeOfArray\n */\n@SinceKotlin(\"1.4\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun LongArray.sort(fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    sortArrayWith(this.unsafeCast<Array<Long>>(), fromIndex, toIndex, naturalOrder())\n}\n\n/**\n * Sorts a range in the array in-place.\n * \n * @param fromIndex the start of the range (inclusive) to sort, 0 by default.\n * @param toIndex the end of the range (exclusive) to sort, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n * \n * @sample samples.collections.Arrays.Sorting.sortRangeOfArray\n */\n@SinceKotlin(\"1.4\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun FloatArray.sort(fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    val subarray = this.asDynamic().subarray(fromIndex, toIndex).unsafeCast<FloatArray>()\n    subarray.sort()\n}\n\n/**\n * Sorts a range in the array in-place.\n * \n * @param fromIndex the start of the range (inclusive) to sort, 0 by default.\n * @param toIndex the end of the range (exclusive) to sort, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n * \n * @sample samples.collections.Arrays.Sorting.sortRangeOfArray\n */\n@SinceKotlin(\"1.4\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun DoubleArray.sort(fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    val subarray = this.asDynamic().subarray(fromIndex, toIndex).unsafeCast<DoubleArray>()\n    subarray.sort()\n}\n\n/**\n * Sorts a range in the array in-place.\n * \n * @param fromIndex the start of the range (inclusive) to sort, 0 by default.\n * @param toIndex the end of the range (exclusive) to sort, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n * \n * @sample samples.collections.Arrays.Sorting.sortRangeOfArray\n */\n@SinceKotlin(\"1.4\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun CharArray.sort(fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    val subarray = this.asDynamic().subarray(fromIndex, toIndex).unsafeCast<CharArray>()\n    subarray.sort()\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.sort(noinline comparison: (a: Byte, b: Byte) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.sort(noinline comparison: (a: Short, b: Short) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.sort(noinline comparison: (a: Int, b: Int) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.sort(noinline comparison: (a: Long, b: Long) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.sort(noinline comparison: (a: Float, b: Float) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.sort(noinline comparison: (a: Double, b: Double) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.sort(noinline comparison: (a: Char, b: Char) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparator].\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic actual fun <T> Array<out T>.sortWith(comparator: Comparator<in T>): Unit {\n    if (size > 1) sortArrayWith(this, comparator)\n}\n\n/**\n * Sorts a range in the array in-place with the given [comparator].\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n * \n * @param fromIndex the start of the range (inclusive) to sort, 0 by default.\n * @param toIndex the end of the range (exclusive) to sort, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun <T> Array<out T>.sortWith(comparator: Comparator<in T>, fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    sortArrayWith(this, fromIndex, toIndex, comparator)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic actual fun ByteArray.toTypedArray(): Array<Byte> {\n    return js(\"[]\").slice.call(this)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic actual fun ShortArray.toTypedArray(): Array<Short> {\n    return js(\"[]\").slice.call(this)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic actual fun IntArray.toTypedArray(): Array<Int> {\n    return js(\"[]\").slice.call(this)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic actual fun LongArray.toTypedArray(): Array<Long> {\n    return js(\"[]\").slice.call(this)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic actual fun FloatArray.toTypedArray(): Array<Float> {\n    return js(\"[]\").slice.call(this)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic actual fun DoubleArray.toTypedArray(): Array<Double> {\n    return js(\"[]\").slice.call(this)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic actual fun BooleanArray.toTypedArray(): Array<Boolean> {\n    return js(\"[]\").slice.call(this)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic actual fun CharArray.toTypedArray(): Array<Char> {\n    return Array(size) { index -> this[index] }\n}\n\n","/*\n * Copyright 2010-2021 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.comparisons\n\n//\n// NOTE: THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.js.*\n\n/**\n * Returns the greater of two values.\n * \n * If values are equal, returns the first one.\n */\n@SinceKotlin(\"1.1\")\npublic actual fun <T : Comparable<T>> maxOf(a: T, b: T): T {\n    return if (a >= b) a else b\n}\n\n/**\n * Returns the greater of two values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic actual inline fun maxOf(a: Byte, b: Byte): Byte {\n    return maxOf(a.toInt(), b.toInt()).unsafeCast<Byte>()\n}\n\n/**\n * Returns the greater of two values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic actual inline fun maxOf(a: Short, b: Short): Short {\n    return maxOf(a.toInt(), b.toInt()).unsafeCast<Short>()\n}\n\n/**\n * Returns the greater of two values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic actual inline fun maxOf(a: Int, b: Int): Int {\n    return JsMath.max(a, b)\n}\n\n/**\n * Returns the greater of two values.\n */\n@SinceKotlin(\"1.1\")\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline fun maxOf(a: Long, b: Long): Long {\n    return if (a >= b) a else b\n}\n\n/**\n * Returns the greater of two values.\n * \n * If either value is `NaN`, returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic actual inline fun maxOf(a: Float, b: Float): Float {\n    return JsMath.max(a, b)\n}\n\n/**\n * Returns the greater of two values.\n * \n * If either value is `NaN`, returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic actual inline fun maxOf(a: Double, b: Double): Double {\n    return JsMath.max(a, b)\n}\n\n/**\n * Returns the greater of three values.\n * \n * If there are multiple equal maximal values, returns the first of them.\n */\n@SinceKotlin(\"1.1\")\npublic actual fun <T : Comparable<T>> maxOf(a: T, b: T, c: T): T {\n    return maxOf(a, maxOf(b, c))\n}\n\n/**\n * Returns the greater of three values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic actual inline fun maxOf(a: Byte, b: Byte, c: Byte): Byte {\n    return JsMath.max(a.toInt(), b.toInt(), c.toInt()).unsafeCast<Byte>()\n}\n\n/**\n * Returns the greater of three values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic actual inline fun maxOf(a: Short, b: Short, c: Short): Short {\n    return JsMath.max(a.toInt(), b.toInt(), c.toInt()).unsafeCast<Short>()\n}\n\n/**\n * Returns the greater of three values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic actual inline fun maxOf(a: Int, b: Int, c: Int): Int {\n    return JsMath.max(a, b, c)\n}\n\n/**\n * Returns the greater of three values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic actual inline fun maxOf(a: Long, b: Long, c: Long): Long {\n    return maxOf(a, maxOf(b, c))\n}\n\n/**\n * Returns the greater of three values.\n * \n * If any value is `NaN`, returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic actual inline fun maxOf(a: Float, b: Float, c: Float): Float {\n    return JsMath.max(a, b, c)\n}\n\n/**\n * Returns the greater of three values.\n * \n * If any value is `NaN`, returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic actual inline fun maxOf(a: Double, b: Double, c: Double): Double {\n    return JsMath.max(a, b, c)\n}\n\n/**\n * Returns the greater of the given values.\n * \n * If there are multiple equal maximal values, returns the first of them.\n */\n@SinceKotlin(\"1.4\")\npublic actual fun <T : Comparable<T>> maxOf(a: T, vararg other: T): T {\n    var max = a\n    for (e in other) max = maxOf(max, e)\n    return max\n}\n\n/**\n * Returns the greater of the given values.\n */\n@SinceKotlin(\"1.4\")\npublic actual fun maxOf(a: Byte, vararg other: Byte): Byte {\n    var max = a\n    for (e in other) max = maxOf(max, e)\n    return max\n}\n\n/**\n * Returns the greater of the given values.\n */\n@SinceKotlin(\"1.4\")\npublic actual fun maxOf(a: Short, vararg other: Short): Short {\n    var max = a\n    for (e in other) max = maxOf(max, e)\n    return max\n}\n\n/**\n * Returns the greater of the given values.\n */\n@SinceKotlin(\"1.4\")\npublic actual fun maxOf(a: Int, vararg other: Int): Int {\n    var max = a\n    for (e in other) max = maxOf(max, e)\n    return max\n}\n\n/**\n * Returns the greater of the given values.\n */\n@SinceKotlin(\"1.4\")\npublic actual fun maxOf(a: Long, vararg other: Long): Long {\n    var max = a\n    for (e in other) max = maxOf(max, e)\n    return max\n}\n\n/**\n * Returns the greater of the given values.\n * \n * If any value is `NaN`, returns `NaN`.\n */\n@SinceKotlin(\"1.4\")\npublic actual fun maxOf(a: Float, vararg other: Float): Float {\n    var max = a\n    for (e in other) max = maxOf(max, e)\n    return max\n}\n\n/**\n * Returns the greater of the given values.\n * \n * If any value is `NaN`, returns `NaN`.\n */\n@SinceKotlin(\"1.4\")\npublic actual fun maxOf(a: Double, vararg other: Double): Double {\n    var max = a\n    for (e in other) max = maxOf(max, e)\n    return max\n}\n\n/**\n * Returns the smaller of two values.\n * \n * If values are equal, returns the first one.\n */\n@SinceKotlin(\"1.1\")\npublic actual fun <T : Comparable<T>> minOf(a: T, b: T): T {\n    return if (a <= b) a else b\n}\n\n/**\n * Returns the smaller of two values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic actual inline fun minOf(a: Byte, b: Byte): Byte {\n    return minOf(a.toInt(), b.toInt()).unsafeCast<Byte>()\n}\n\n/**\n * Returns the smaller of two values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic actual inline fun minOf(a: Short, b: Short): Short {\n    return minOf(a.toInt(), b.toInt()).unsafeCast<Short>()\n}\n\n/**\n * Returns the smaller of two values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic actual inline fun minOf(a: Int, b: Int): Int {\n    return JsMath.min(a, b)\n}\n\n/**\n * Returns the smaller of two values.\n */\n@SinceKotlin(\"1.1\")\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline fun minOf(a: Long, b: Long): Long {\n    return if (a <= b) a else b\n}\n\n/**\n * Returns the smaller of two values.\n * \n * If either value is `NaN`, returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic actual inline fun minOf(a: Float, b: Float): Float {\n    return JsMath.min(a, b)\n}\n\n/**\n * Returns the smaller of two values.\n * \n * If either value is `NaN`, returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic actual inline fun minOf(a: Double, b: Double): Double {\n    return JsMath.min(a, b)\n}\n\n/**\n * Returns the smaller of three values.\n * \n * If there are multiple equal minimal values, returns the first of them.\n */\n@SinceKotlin(\"1.1\")\npublic actual fun <T : Comparable<T>> minOf(a: T, b: T, c: T): T {\n    return minOf(a, minOf(b, c))\n}\n\n/**\n * Returns the smaller of three values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic actual inline fun minOf(a: Byte, b: Byte, c: Byte): Byte {\n    return JsMath.min(a.toInt(), b.toInt(), c.toInt()).unsafeCast<Byte>()\n}\n\n/**\n * Returns the smaller of three values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic actual inline fun minOf(a: Short, b: Short, c: Short): Short {\n    return JsMath.min(a.toInt(), b.toInt(), c.toInt()).unsafeCast<Short>()\n}\n\n/**\n * Returns the smaller of three values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic actual inline fun minOf(a: Int, b: Int, c: Int): Int {\n    return JsMath.min(a, b, c)\n}\n\n/**\n * Returns the smaller of three values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic actual inline fun minOf(a: Long, b: Long, c: Long): Long {\n    return minOf(a, minOf(b, c))\n}\n\n/**\n * Returns the smaller of three values.\n * \n * If any value is `NaN`, returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic actual inline fun minOf(a: Float, b: Float, c: Float): Float {\n    return JsMath.min(a, b, c)\n}\n\n/**\n * Returns the smaller of three values.\n * \n * If any value is `NaN`, returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic actual inline fun minOf(a: Double, b: Double, c: Double): Double {\n    return JsMath.min(a, b, c)\n}\n\n/**\n * Returns the smaller of the given values.\n * \n * If there are multiple equal minimal values, returns the first of them.\n */\n@SinceKotlin(\"1.4\")\npublic actual fun <T : Comparable<T>> minOf(a: T, vararg other: T): T {\n    var min = a\n    for (e in other) min = minOf(min, e)\n    return min\n}\n\n/**\n * Returns the smaller of the given values.\n */\n@SinceKotlin(\"1.4\")\npublic actual fun minOf(a: Byte, vararg other: Byte): Byte {\n    var min = a\n    for (e in other) min = minOf(min, e)\n    return min\n}\n\n/**\n * Returns the smaller of the given values.\n */\n@SinceKotlin(\"1.4\")\npublic actual fun minOf(a: Short, vararg other: Short): Short {\n    var min = a\n    for (e in other) min = minOf(min, e)\n    return min\n}\n\n/**\n * Returns the smaller of the given values.\n */\n@SinceKotlin(\"1.4\")\npublic actual fun minOf(a: Int, vararg other: Int): Int {\n    var min = a\n    for (e in other) min = minOf(min, e)\n    return min\n}\n\n/**\n * Returns the smaller of the given values.\n */\n@SinceKotlin(\"1.4\")\npublic actual fun minOf(a: Long, vararg other: Long): Long {\n    var min = a\n    for (e in other) min = minOf(min, e)\n    return min\n}\n\n/**\n * Returns the smaller of the given values.\n * \n * If any value is `NaN`, returns `NaN`.\n */\n@SinceKotlin(\"1.4\")\npublic actual fun minOf(a: Float, vararg other: Float): Float {\n    var min = a\n    for (e in other) min = minOf(min, e)\n    return min\n}\n\n/**\n * Returns the smaller of the given values.\n * \n * If any value is `NaN`, returns `NaN`.\n */\n@SinceKotlin(\"1.4\")\npublic actual fun minOf(a: Double, vararg other: Double): Double {\n    var min = a\n    for (e in other) min = minOf(min, e)\n    return min\n}\n\n","/*\n * Copyright 2010-2021 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n// Auto-generated file. DO NOT EDIT!\n\npackage kotlin\n\nimport kotlin.experimental.*\nimport kotlin.jvm.*\n\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@JvmInline\npublic value class ULong @PublishedApi internal constructor(@PublishedApi internal val data: Long) : Comparable<ULong> {\n\n    companion object {\n        /**\n         * A constant holding the minimum value an instance of ULong can have.\n         */\n        public const val MIN_VALUE: ULong = ULong(0)\n\n        /**\n         * A constant holding the maximum value an instance of ULong can have.\n         */\n        public const val MAX_VALUE: ULong = ULong(-1)\n\n        /**\n         * The number of bytes used to represent an instance of ULong in a binary form.\n         */\n        public const val SIZE_BYTES: Int = 8\n\n        /**\n         * The number of bits used to represent an instance of ULong in a binary form.\n         */\n        public const val SIZE_BITS: Int = 64\n    }\n\n    /**\n     * Compares this value with the specified value for order.\n     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,\n     * or a positive number if it's greater than other.\n     */\n    @kotlin.internal.InlineOnly\n    public inline operator fun compareTo(other: UByte): Int = this.compareTo(other.toULong())\n\n    /**\n     * Compares this value with the specified value for order.\n     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,\n     * or a positive number if it's greater than other.\n     */\n    @kotlin.internal.InlineOnly\n    public inline operator fun compareTo(other: UShort): Int = this.compareTo(other.toULong())\n\n    /**\n     * Compares this value with the specified value for order.\n     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,\n     * or a positive number if it's greater than other.\n     */\n    @kotlin.internal.InlineOnly\n    public inline operator fun compareTo(other: UInt): Int = this.compareTo(other.toULong())\n\n    /**\n     * Compares this value with the specified value for order.\n     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,\n     * or a positive number if it's greater than other.\n     */\n    @kotlin.internal.InlineOnly\n    @Suppress(\"OVERRIDE_BY_INLINE\")\n    public override inline operator fun compareTo(other: ULong): Int = ulongCompare(this.data, other.data)\n\n    /** Adds the other value to this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun plus(other: UByte): ULong = this.plus(other.toULong())\n    /** Adds the other value to this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun plus(other: UShort): ULong = this.plus(other.toULong())\n    /** Adds the other value to this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun plus(other: UInt): ULong = this.plus(other.toULong())\n    /** Adds the other value to this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun plus(other: ULong): ULong = ULong(this.data.plus(other.data))\n\n    /** Subtracts the other value from this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun minus(other: UByte): ULong = this.minus(other.toULong())\n    /** Subtracts the other value from this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun minus(other: UShort): ULong = this.minus(other.toULong())\n    /** Subtracts the other value from this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun minus(other: UInt): ULong = this.minus(other.toULong())\n    /** Subtracts the other value from this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun minus(other: ULong): ULong = ULong(this.data.minus(other.data))\n\n    /** Multiplies this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun times(other: UByte): ULong = this.times(other.toULong())\n    /** Multiplies this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun times(other: UShort): ULong = this.times(other.toULong())\n    /** Multiplies this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun times(other: UInt): ULong = this.times(other.toULong())\n    /** Multiplies this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun times(other: ULong): ULong = ULong(this.data.times(other.data))\n\n    /** Divides this value by the other value, truncating the result to an integer that is closer to zero. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun div(other: UByte): ULong = this.div(other.toULong())\n    /** Divides this value by the other value, truncating the result to an integer that is closer to zero. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun div(other: UShort): ULong = this.div(other.toULong())\n    /** Divides this value by the other value, truncating the result to an integer that is closer to zero. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun div(other: UInt): ULong = this.div(other.toULong())\n    /** Divides this value by the other value, truncating the result to an integer that is closer to zero. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun div(other: ULong): ULong = ulongDivide(this, other)\n\n    /**\n     * Calculates the remainder of truncating division of this value by the other value.\n     * \n     * The result is always less than the divisor.\n     */\n    @kotlin.internal.InlineOnly\n    public inline operator fun rem(other: UByte): ULong = this.rem(other.toULong())\n    /**\n     * Calculates the remainder of truncating division of this value by the other value.\n     * \n     * The result is always less than the divisor.\n     */\n    @kotlin.internal.InlineOnly\n    public inline operator fun rem(other: UShort): ULong = this.rem(other.toULong())\n    /**\n     * Calculates the remainder of truncating division of this value by the other value.\n     * \n     * The result is always less than the divisor.\n     */\n    @kotlin.internal.InlineOnly\n    public inline operator fun rem(other: UInt): ULong = this.rem(other.toULong())\n    /**\n     * Calculates the remainder of truncating division of this value by the other value.\n     * \n     * The result is always less than the divisor.\n     */\n    @kotlin.internal.InlineOnly\n    public inline operator fun rem(other: ULong): ULong = ulongRemainder(this, other)\n\n    /**\n     * Divides this value by the other value, flooring the result to an integer that is closer to negative infinity.\n     * \n     * For unsigned types, the results of flooring division and truncating division are the same.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun floorDiv(other: UByte): ULong = this.floorDiv(other.toULong())\n    /**\n     * Divides this value by the other value, flooring the result to an integer that is closer to negative infinity.\n     * \n     * For unsigned types, the results of flooring division and truncating division are the same.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun floorDiv(other: UShort): ULong = this.floorDiv(other.toULong())\n    /**\n     * Divides this value by the other value, flooring the result to an integer that is closer to negative infinity.\n     * \n     * For unsigned types, the results of flooring division and truncating division are the same.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun floorDiv(other: UInt): ULong = this.floorDiv(other.toULong())\n    /**\n     * Divides this value by the other value, flooring the result to an integer that is closer to negative infinity.\n     * \n     * For unsigned types, the results of flooring division and truncating division are the same.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun floorDiv(other: ULong): ULong = div(other)\n\n    /**\n     * Calculates the remainder of flooring division of this value by the other value.\n     * \n     * The result is always less than the divisor.\n     * \n     * For unsigned types, the remainders of flooring division and truncating division are the same.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun mod(other: UByte): UByte = this.mod(other.toULong()).toUByte()\n    /**\n     * Calculates the remainder of flooring division of this value by the other value.\n     * \n     * The result is always less than the divisor.\n     * \n     * For unsigned types, the remainders of flooring division and truncating division are the same.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun mod(other: UShort): UShort = this.mod(other.toULong()).toUShort()\n    /**\n     * Calculates the remainder of flooring division of this value by the other value.\n     * \n     * The result is always less than the divisor.\n     * \n     * For unsigned types, the remainders of flooring division and truncating division are the same.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun mod(other: UInt): UInt = this.mod(other.toULong()).toUInt()\n    /**\n     * Calculates the remainder of flooring division of this value by the other value.\n     * \n     * The result is always less than the divisor.\n     * \n     * For unsigned types, the remainders of flooring division and truncating division are the same.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun mod(other: ULong): ULong = rem(other)\n\n    /** Increments this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun inc(): ULong = ULong(data.inc())\n    /** Decrements this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun dec(): ULong = ULong(data.dec())\n\n    /** Creates a range from this value to the specified [other] value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun rangeTo(other: ULong): ULongRange = ULongRange(this, other)\n\n    /**\n     * Shifts this value left by the [bitCount] number of bits.\n     *\n     * Note that only the six lowest-order bits of the [bitCount] are used as the shift distance.\n     * The shift distance actually used is therefore always in the range `0..63`.\n     */\n    @kotlin.internal.InlineOnly\n    public inline infix fun shl(bitCount: Int): ULong = ULong(data shl bitCount)\n\n    /**\n     * Shifts this value right by the [bitCount] number of bits, filling the leftmost bits with zeros.\n     *\n     * Note that only the six lowest-order bits of the [bitCount] are used as the shift distance.\n     * The shift distance actually used is therefore always in the range `0..63`.\n     */\n    @kotlin.internal.InlineOnly\n    public inline infix fun shr(bitCount: Int): ULong = ULong(data ushr bitCount)\n\n    /** Performs a bitwise AND operation between the two values. */\n    @kotlin.internal.InlineOnly\n    public inline infix fun and(other: ULong): ULong = ULong(this.data and other.data)\n    /** Performs a bitwise OR operation between the two values. */\n    @kotlin.internal.InlineOnly\n    public inline infix fun or(other: ULong): ULong = ULong(this.data or other.data)\n    /** Performs a bitwise XOR operation between the two values. */\n    @kotlin.internal.InlineOnly\n    public inline infix fun xor(other: ULong): ULong = ULong(this.data xor other.data)\n    /** Inverts the bits in this value. */\n    @kotlin.internal.InlineOnly\n    public inline fun inv(): ULong = ULong(data.inv())\n\n    /**\n     * Converts this [ULong] value to [Byte].\n     *\n     * If this value is less than or equals to [Byte.MAX_VALUE], the resulting `Byte` value represents\n     * the same numerical value as this `ULong`.\n     *\n     * The resulting `Byte` value is represented by the least significant 8 bits of this `ULong` value.\n     * Note that the resulting `Byte` value may be negative.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toByte(): Byte = data.toByte()\n    /**\n     * Converts this [ULong] value to [Short].\n     *\n     * If this value is less than or equals to [Short.MAX_VALUE], the resulting `Short` value represents\n     * the same numerical value as this `ULong`.\n     *\n     * The resulting `Short` value is represented by the least significant 16 bits of this `ULong` value.\n     * Note that the resulting `Short` value may be negative.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toShort(): Short = data.toShort()\n    /**\n     * Converts this [ULong] value to [Int].\n     *\n     * If this value is less than or equals to [Int.MAX_VALUE], the resulting `Int` value represents\n     * the same numerical value as this `ULong`.\n     *\n     * The resulting `Int` value is represented by the least significant 32 bits of this `ULong` value.\n     * Note that the resulting `Int` value may be negative.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toInt(): Int = data.toInt()\n    /**\n     * Converts this [ULong] value to [Long].\n     *\n     * If this value is less than or equals to [Long.MAX_VALUE], the resulting `Long` value represents\n     * the same numerical value as this `ULong`. Otherwise the result is negative.\n     *\n     * The resulting `Long` value has the same binary representation as this `ULong` value.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toLong(): Long = data\n\n    /**\n     * Converts this [ULong] value to [UByte].\n     *\n     * If this value is less than or equals to [UByte.MAX_VALUE], the resulting `UByte` value represents\n     * the same numerical value as this `ULong`.\n     *\n     * The resulting `UByte` value is represented by the least significant 8 bits of this `ULong` value.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toUByte(): UByte = data.toUByte()\n    /**\n     * Converts this [ULong] value to [UShort].\n     *\n     * If this value is less than or equals to [UShort.MAX_VALUE], the resulting `UShort` value represents\n     * the same numerical value as this `ULong`.\n     *\n     * The resulting `UShort` value is represented by the least significant 16 bits of this `ULong` value.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toUShort(): UShort = data.toUShort()\n    /**\n     * Converts this [ULong] value to [UInt].\n     *\n     * If this value is less than or equals to [UInt.MAX_VALUE], the resulting `UInt` value represents\n     * the same numerical value as this `ULong`.\n     *\n     * The resulting `UInt` value is represented by the least significant 32 bits of this `ULong` value.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toUInt(): UInt = data.toUInt()\n    /** Returns this value. */\n    @kotlin.internal.InlineOnly\n    public inline fun toULong(): ULong = this\n\n    /**\n     * Converts this [ULong] value to [Float].\n     *\n     * The resulting value is the closest `Float` to this `ULong` value.\n     * In case when this `ULong` value is exactly between two `Float`s,\n     * the one with zero at least significant bit of mantissa is selected.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toFloat(): Float = this.toDouble().toFloat()\n    /**\n     * Converts this [ULong] value to [Double].\n     *\n     * The resulting value is the closest `Double` to this `ULong` value.\n     * In case when this `ULong` value is exactly between two `Double`s,\n     * the one with zero at least significant bit of mantissa is selected.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toDouble(): Double = ulongToDouble(data)\n\n    public override fun toString(): String = ulongToString(data)\n\n}\n\n/**\n * Converts this [Byte] value to [ULong].\n *\n * If this value is positive, the resulting `ULong` value represents the same numerical value as this `Byte`.\n *\n * The least significant 8 bits of the resulting `ULong` value are the same as the bits of this `Byte` value,\n * whereas the most significant 56 bits are filled with the sign bit of this value.\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun Byte.toULong(): ULong = ULong(this.toLong())\n/**\n * Converts this [Short] value to [ULong].\n *\n * If this value is positive, the resulting `ULong` value represents the same numerical value as this `Short`.\n *\n * The least significant 16 bits of the resulting `ULong` value are the same as the bits of this `Short` value,\n * whereas the most significant 48 bits are filled with the sign bit of this value.\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun Short.toULong(): ULong = ULong(this.toLong())\n/**\n * Converts this [Int] value to [ULong].\n *\n * If this value is positive, the resulting `ULong` value represents the same numerical value as this `Int`.\n *\n * The least significant 32 bits of the resulting `ULong` value are the same as the bits of this `Int` value,\n * whereas the most significant 32 bits are filled with the sign bit of this value.\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun Int.toULong(): ULong = ULong(this.toLong())\n/**\n * Converts this [Long] value to [ULong].\n *\n * If this value is positive, the resulting `ULong` value represents the same numerical value as this `Long`.\n *\n * The resulting `ULong` value has the same binary representation as this `Long` value.\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun Long.toULong(): ULong = ULong(this)\n\n/**\n * Converts this [Float] value to [ULong].\n *\n * The fractional part, if any, is rounded down towards zero.\n * Returns zero if this `Float` value is negative or `NaN`, [ULong.MAX_VALUE] if it's bigger than `ULong.MAX_VALUE`.\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun Float.toULong(): ULong = doubleToULong(this.toDouble())\n/**\n * Converts this [Double] value to [ULong].\n *\n * The fractional part, if any, is rounded down towards zero.\n * Returns zero if this `Double` value is negative or `NaN`, [ULong.MAX_VALUE] if it's bigger than `ULong.MAX_VALUE`.\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun Double.toULong(): ULong = doubleToULong(this)\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.collections\n\nimport kotlin.comparisons.naturalOrder\nimport kotlin.random.Random\n\n/** Returns the array if it's not `null`, or an empty array otherwise. */\n@kotlin.internal.InlineOnly\npublic actual inline fun <T> Array<out T>?.orEmpty(): Array<out T> = this ?: emptyArray<T>()\n\n@kotlin.internal.InlineOnly\npublic actual inline fun <T> Collection<T>.toTypedArray(): Array<T> = copyToArray(this)\n\n@JsName(\"copyToArray\")\n@PublishedApi\ninternal fun <T> copyToArray(collection: Collection<T>): Array<T> {\n    return if (collection.asDynamic().toArray !== undefined)\n        collection.asDynamic().toArray().unsafeCast<Array<T>>()\n    else\n        copyToArrayImpl(collection).unsafeCast<Array<T>>()\n}\n\n@JsName(\"copyToArrayImpl\")\ninternal actual fun copyToArrayImpl(collection: Collection<*>): Array<Any?> {\n    val array = emptyArray<Any?>()\n    val iterator = collection.iterator()\n    while (iterator.hasNext())\n        array.asDynamic().push(iterator.next())\n    return array\n}\n\n@JsName(\"copyToExistingArrayImpl\")\ninternal actual fun <T> copyToArrayImpl(collection: Collection<*>, array: Array<T>): Array<T> {\n    if (array.size < collection.size)\n        return copyToArrayImpl(collection).unsafeCast<Array<T>>()\n\n    val iterator = collection.iterator()\n    var index = 0\n    while (iterator.hasNext()) {\n        array[index++] = iterator.next().unsafeCast<T>()\n    }\n    if (index < array.size) {\n        array[index] = null.unsafeCast<T>()\n    }\n    return array\n}\n\n\n/**\n * Returns an immutable list containing only the specified object [element].\n */\npublic fun <T> listOf(element: T): List<T> = arrayListOf(element)\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\ninternal actual inline fun <E> buildListInternal(builderAction: MutableList<E>.() -> Unit): List<E> {\n    return ArrayList<E>().apply(builderAction).build()\n}\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\ninternal actual inline fun <E> buildListInternal(capacity: Int, builderAction: MutableList<E>.() -> Unit): List<E> {\n    checkBuilderCapacity(capacity)\n    return ArrayList<E>(capacity).apply(builderAction).build()\n}\n\n\n/**\n * Returns an immutable set containing only the specified object [element].\n */\npublic fun <T> setOf(element: T): Set<T> = hashSetOf(element)\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\ninternal actual inline fun <E> buildSetInternal(builderAction: MutableSet<E>.() -> Unit): Set<E> {\n    return LinkedHashSet<E>().apply(builderAction).build()\n}\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\ninternal actual inline fun <E> buildSetInternal(capacity: Int, builderAction: MutableSet<E>.() -> Unit): Set<E> {\n    return LinkedHashSet<E>(capacity).apply(builderAction).build()\n}\n\n\n/**\n * Returns an immutable map, mapping only the specified key to the\n * specified value.\n */\npublic fun <K, V> mapOf(pair: Pair<K, V>): Map<K, V> = hashMapOf(pair)\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\ninternal actual inline fun <K, V> buildMapInternal(builderAction: MutableMap<K, V>.() -> Unit): Map<K, V> {\n    return LinkedHashMap<K, V>().apply(builderAction).build()\n}\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\ninternal actual inline fun <K, V> buildMapInternal(capacity: Int, builderAction: MutableMap<K, V>.() -> Unit): Map<K, V> {\n    return LinkedHashMap<K, V>(capacity).apply(builderAction).build()\n}\n\n\n/**\n * Fills the list with the provided [value].\n *\n * Each element in the list gets replaced with the [value].\n */\n@SinceKotlin(\"1.2\")\npublic actual fun <T> MutableList<T>.fill(value: T): Unit {\n    for (index in 0..lastIndex) {\n        this[index] = value\n    }\n}\n\n/**\n * Randomly shuffles elements in this list.\n *\n * See: https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#The_modern_algorithm\n */\n@SinceKotlin(\"1.2\")\npublic actual fun <T> MutableList<T>.shuffle(): Unit = shuffle(Random)\n\n/**\n * Returns a new list with the elements of this list randomly shuffled.\n */\n@SinceKotlin(\"1.2\")\npublic actual fun <T> Iterable<T>.shuffled(): List<T> = toMutableList().apply { shuffle() }\n\n/**\n * Sorts elements in the list in-place according to their natural sort order.\n *\n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic actual fun <T : Comparable<T>> MutableList<T>.sort(): Unit {\n    collectionsSort(this, naturalOrder())\n}\n\n/**\n * Sorts elements in the list in-place according to the order specified with [comparator].\n *\n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic actual fun <T> MutableList<T>.sortWith(comparator: Comparator<in T>): Unit {\n    collectionsSort(this, comparator)\n}\n\nprivate fun <T> collectionsSort(list: MutableList<T>, comparator: Comparator<in T>) {\n    if (list.size <= 1) return\n\n    val array = copyToArray(list)\n    sortArrayWith(array, comparator)\n\n    for (i in 0 until array.size) {\n        list[i] = array[i]\n    }\n}\n\ninternal actual fun <T> arrayOfNulls(reference: Array<T>, size: Int): Array<T> {\n    return arrayOfNulls<Any>(size).unsafeCast<Array<T>>()\n}\n\n@SinceKotlin(\"1.3\")\n@PublishedApi\n@JsName(\"arrayCopy\")\ninternal fun <T> arrayCopy(source: Array<out T>, destination: Array<in T>, destinationOffset: Int, startIndex: Int, endIndex: Int) {\n    AbstractList.checkRangeIndexes(startIndex, endIndex, source.size)\n    val rangeSize = endIndex - startIndex\n    AbstractList.checkRangeIndexes(destinationOffset, destinationOffset + rangeSize, destination.size)\n\n    if (js(\"ArrayBuffer\").isView(destination) && js(\"ArrayBuffer\").isView(source)) {\n        val subrange = source.asDynamic().subarray(startIndex, endIndex)\n        destination.asDynamic().set(subrange, destinationOffset)\n    } else {\n        if (source !== destination || destinationOffset <= startIndex) {\n            for (index in 0 until rangeSize) {\n                destination[destinationOffset + index] = source[startIndex + index]\n            }\n        } else {\n            for (index in rangeSize - 1 downTo 0) {\n                destination[destinationOffset + index] = source[startIndex + index]\n            }\n        }\n    }\n}\n\n// no singleton map implementation in js, return map as is\n@Suppress(\"NOTHING_TO_INLINE\")\ninternal actual inline fun <K, V> Map<K, V>.toSingletonMapOrSelf(): Map<K, V> = this\n\n@Suppress(\"NOTHING_TO_INLINE\")\ninternal actual inline fun <K, V> Map<out K, V>.toSingletonMap(): Map<K, V> = this.toMutableMap()\n\n\n@Suppress(\"NOTHING_TO_INLINE\")\ninternal actual inline fun <T> Array<out T>.copyToArrayOfAny(isVarargs: Boolean): Array<out Any?> =\n    if (isVarargs)\n    // no need to copy vararg array in JS\n        this\n    else\n        this.copyOf()\n\n\n\n@PublishedApi\ninternal actual fun checkIndexOverflow(index: Int): Int {\n    if (index < 0) {\n        throwIndexOverflow()\n    }\n    return index\n}\n\n@PublishedApi\ninternal actual fun checkCountOverflow(count: Int): Int {\n    if (count < 0) {\n        throwCountOverflow()\n    }\n    return count\n}\n\n\n/**\n * JS map and set implementations do not make use of capacities or load factors.\n */\n@PublishedApi\ninternal actual fun mapCapacity(expectedSize: Int) = expectedSize\n\n/**\n * Checks a collection builder function capacity argument.\n * In JS no validation is made in Map/Set constructor yet.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@PublishedApi\ninternal fun checkBuilderCapacity(capacity: Int) {\n    require(capacity >= 0) { \"capacity must be non-negative.\" }\n}","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"CollectionsKt\")\n\npackage kotlin.collections\n\n\n/**\n * Returns the given iterator itself. This allows to use an instance of iterator in a `for` loop.\n * @sample samples.collections.Iterators.iterator\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> Iterator<T>.iterator(): Iterator<T> = this\n\n/**\n * Returns an [Iterator] that wraps each element produced by the original iterator\n * into an [IndexedValue] containing the index of that element and the element itself.\n *\n * @sample samples.collections.Iterators.withIndexIterator\n */\npublic fun <T> Iterator<T>.withIndex(): Iterator<IndexedValue<T>> = IndexingIterator(this)\n\n/**\n * Performs the given [operation] on each element of this [Iterator].\n * @sample samples.collections.Iterators.forEachIterator\n */\npublic inline fun <T> Iterator<T>.forEach(operation: (T) -> Unit): Unit {\n    for (element in this) operation(element)\n}\n\n/**\n * Iterator transforming original `iterator` into iterator of [IndexedValue], counting index from zero.\n */\ninternal class IndexingIterator<out T>(private val iterator: Iterator<T>) : Iterator<IndexedValue<T>> {\n    private var index = 0\n    final override fun hasNext(): Boolean = iterator.hasNext()\n    final override fun next(): IndexedValue<T> = IndexedValue(checkIndexOverflow(index++), iterator.next())\n}\n","/*\n * Copyright 2010-2021 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"ComparisonsKt\")\n\npackage kotlin.comparisons\n\n//\n// NOTE: THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.random.*\n\n/**\n * Returns the greater of two values.\n * \n * If values are equal, returns the first one.\n */\n@SinceKotlin(\"1.1\")\npublic expect fun <T : Comparable<T>> maxOf(a: T, b: T): T\n\n/**\n * Returns the greater of two values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic expect inline fun maxOf(a: Byte, b: Byte): Byte\n\n/**\n * Returns the greater of two values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic expect inline fun maxOf(a: Short, b: Short): Short\n\n/**\n * Returns the greater of two values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic expect inline fun maxOf(a: Int, b: Int): Int\n\n/**\n * Returns the greater of two values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic expect inline fun maxOf(a: Long, b: Long): Long\n\n/**\n * Returns the greater of two values.\n * \n * If either value is `NaN`, returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic expect inline fun maxOf(a: Float, b: Float): Float\n\n/**\n * Returns the greater of two values.\n * \n * If either value is `NaN`, returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic expect inline fun maxOf(a: Double, b: Double): Double\n\n/**\n * Returns the greater of three values.\n * \n * If there are multiple equal maximal values, returns the first of them.\n */\n@SinceKotlin(\"1.1\")\npublic expect fun <T : Comparable<T>> maxOf(a: T, b: T, c: T): T\n\n/**\n * Returns the greater of three values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic expect inline fun maxOf(a: Byte, b: Byte, c: Byte): Byte\n\n/**\n * Returns the greater of three values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic expect inline fun maxOf(a: Short, b: Short, c: Short): Short\n\n/**\n * Returns the greater of three values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic expect inline fun maxOf(a: Int, b: Int, c: Int): Int\n\n/**\n * Returns the greater of three values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic expect inline fun maxOf(a: Long, b: Long, c: Long): Long\n\n/**\n * Returns the greater of three values.\n * \n * If any value is `NaN`, returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic expect inline fun maxOf(a: Float, b: Float, c: Float): Float\n\n/**\n * Returns the greater of three values.\n * \n * If any value is `NaN`, returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic expect inline fun maxOf(a: Double, b: Double, c: Double): Double\n\n/**\n * Returns the greater of three values according to the order specified by the given [comparator].\n * \n * If there are multiple equal maximal values, returns the first of them.\n */\n@SinceKotlin(\"1.1\")\npublic fun <T> maxOf(a: T, b: T, c: T, comparator: Comparator<in T>): T {\n    return maxOf(a, maxOf(b, c, comparator), comparator)\n}\n\n/**\n * Returns the greater of two values according to the order specified by the given [comparator].\n * \n * If values are equal, returns the first one.\n */\n@SinceKotlin(\"1.1\")\npublic fun <T> maxOf(a: T, b: T, comparator: Comparator<in T>): T {\n    return if (comparator.compare(a, b) >= 0) a else b\n}\n\n/**\n * Returns the greater of the given values.\n * \n * If there are multiple equal maximal values, returns the first of them.\n */\n@SinceKotlin(\"1.4\")\npublic expect fun <T : Comparable<T>> maxOf(a: T, vararg other: T): T\n\n/**\n * Returns the greater of the given values.\n */\n@SinceKotlin(\"1.4\")\npublic expect fun maxOf(a: Byte, vararg other: Byte): Byte\n\n/**\n * Returns the greater of the given values.\n */\n@SinceKotlin(\"1.4\")\npublic expect fun maxOf(a: Short, vararg other: Short): Short\n\n/**\n * Returns the greater of the given values.\n */\n@SinceKotlin(\"1.4\")\npublic expect fun maxOf(a: Int, vararg other: Int): Int\n\n/**\n * Returns the greater of the given values.\n */\n@SinceKotlin(\"1.4\")\npublic expect fun maxOf(a: Long, vararg other: Long): Long\n\n/**\n * Returns the greater of the given values.\n * \n * If any value is `NaN`, returns `NaN`.\n */\n@SinceKotlin(\"1.4\")\npublic expect fun maxOf(a: Float, vararg other: Float): Float\n\n/**\n * Returns the greater of the given values.\n * \n * If any value is `NaN`, returns `NaN`.\n */\n@SinceKotlin(\"1.4\")\npublic expect fun maxOf(a: Double, vararg other: Double): Double\n\n/**\n * Returns the greater of the given values according to the order specified by the given [comparator].\n * \n * If there are multiple equal maximal values, returns the first of them.\n */\n@SinceKotlin(\"1.4\")\npublic fun <T> maxOf(a: T, vararg other: T, comparator: Comparator<in T>): T {\n    var max = a\n    for (e in other) if (comparator.compare(max, e) < 0) max = e\n    return max\n}\n\n/**\n * Returns the smaller of two values.\n * \n * If values are equal, returns the first one.\n */\n@SinceKotlin(\"1.1\")\npublic expect fun <T : Comparable<T>> minOf(a: T, b: T): T\n\n/**\n * Returns the smaller of two values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic expect inline fun minOf(a: Byte, b: Byte): Byte\n\n/**\n * Returns the smaller of two values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic expect inline fun minOf(a: Short, b: Short): Short\n\n/**\n * Returns the smaller of two values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic expect inline fun minOf(a: Int, b: Int): Int\n\n/**\n * Returns the smaller of two values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic expect inline fun minOf(a: Long, b: Long): Long\n\n/**\n * Returns the smaller of two values.\n * \n * If either value is `NaN`, returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic expect inline fun minOf(a: Float, b: Float): Float\n\n/**\n * Returns the smaller of two values.\n * \n * If either value is `NaN`, returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic expect inline fun minOf(a: Double, b: Double): Double\n\n/**\n * Returns the smaller of three values.\n * \n * If there are multiple equal minimal values, returns the first of them.\n */\n@SinceKotlin(\"1.1\")\npublic expect fun <T : Comparable<T>> minOf(a: T, b: T, c: T): T\n\n/**\n * Returns the smaller of three values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic expect inline fun minOf(a: Byte, b: Byte, c: Byte): Byte\n\n/**\n * Returns the smaller of three values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic expect inline fun minOf(a: Short, b: Short, c: Short): Short\n\n/**\n * Returns the smaller of three values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic expect inline fun minOf(a: Int, b: Int, c: Int): Int\n\n/**\n * Returns the smaller of three values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic expect inline fun minOf(a: Long, b: Long, c: Long): Long\n\n/**\n * Returns the smaller of three values.\n * \n * If any value is `NaN`, returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic expect inline fun minOf(a: Float, b: Float, c: Float): Float\n\n/**\n * Returns the smaller of three values.\n * \n * If any value is `NaN`, returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic expect inline fun minOf(a: Double, b: Double, c: Double): Double\n\n/**\n * Returns the smaller of three values according to the order specified by the given [comparator].\n * \n * If there are multiple equal minimal values, returns the first of them.\n */\n@SinceKotlin(\"1.1\")\npublic fun <T> minOf(a: T, b: T, c: T, comparator: Comparator<in T>): T {\n    return minOf(a, minOf(b, c, comparator), comparator)\n}\n\n/**\n * Returns the smaller of two values according to the order specified by the given [comparator].\n * \n * If values are equal, returns the first one.\n */\n@SinceKotlin(\"1.1\")\npublic fun <T> minOf(a: T, b: T, comparator: Comparator<in T>): T {\n    return if (comparator.compare(a, b) <= 0) a else b\n}\n\n/**\n * Returns the smaller of the given values.\n * \n * If there are multiple equal minimal values, returns the first of them.\n */\n@SinceKotlin(\"1.4\")\npublic expect fun <T : Comparable<T>> minOf(a: T, vararg other: T): T\n\n/**\n * Returns the smaller of the given values.\n */\n@SinceKotlin(\"1.4\")\npublic expect fun minOf(a: Byte, vararg other: Byte): Byte\n\n/**\n * Returns the smaller of the given values.\n */\n@SinceKotlin(\"1.4\")\npublic expect fun minOf(a: Short, vararg other: Short): Short\n\n/**\n * Returns the smaller of the given values.\n */\n@SinceKotlin(\"1.4\")\npublic expect fun minOf(a: Int, vararg other: Int): Int\n\n/**\n * Returns the smaller of the given values.\n */\n@SinceKotlin(\"1.4\")\npublic expect fun minOf(a: Long, vararg other: Long): Long\n\n/**\n * Returns the smaller of the given values.\n * \n * If any value is `NaN`, returns `NaN`.\n */\n@SinceKotlin(\"1.4\")\npublic expect fun minOf(a: Float, vararg other: Float): Float\n\n/**\n * Returns the smaller of the given values.\n * \n * If any value is `NaN`, returns `NaN`.\n */\n@SinceKotlin(\"1.4\")\npublic expect fun minOf(a: Double, vararg other: Double): Double\n\n/**\n * Returns the smaller of the given values according to the order specified by the given [comparator].\n * \n * If there are multiple equal minimal values, returns the first of them.\n */\n@SinceKotlin(\"1.4\")\npublic fun <T> minOf(a: T, vararg other: T, comparator: Comparator<in T>): T {\n    var min = a\n    for (e in other) if (comparator.compare(min, e) > 0) min = e\n    return min\n}\n\n","/*\n * Copyright 2010-2021 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"MapsKt\")\n\npackage kotlin.collections\n\n//\n// NOTE: THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.random.*\nimport kotlin.ranges.contains\nimport kotlin.ranges.reversed\n\n/**\n * Returns the first non-null value produced by [transform] function being applied to entries of this map in iteration order,\n * or throws [NoSuchElementException] if no non-null value was produced.\n * \n * @sample samples.collections.Collections.Transformations.firstNotNullOf\n */\n@SinceKotlin(\"1.5\")\n@kotlin.internal.InlineOnly\npublic inline fun <K, V, R : Any> Map<out K, V>.firstNotNullOf(transform: (Map.Entry<K, V>) -> R?): R {\n    return firstNotNullOfOrNull(transform) ?: throw NoSuchElementException(\"No element of the map was transformed to a non-null value.\")\n}\n\n/**\n * Returns the first non-null value produced by [transform] function being applied to entries of this map in iteration order,\n * or `null` if no non-null value was produced.\n * \n * @sample samples.collections.Collections.Transformations.firstNotNullOf\n */\n@SinceKotlin(\"1.5\")\n@kotlin.internal.InlineOnly\npublic inline fun <K, V, R : Any> Map<out K, V>.firstNotNullOfOrNull(transform: (Map.Entry<K, V>) -> R?): R? {\n    for (element in this) {\n        val result = transform(element)\n        if (result != null) {\n            return result\n        }\n    }\n    return null\n}\n\n/**\n * Returns a [List] containing all key-value pairs.\n */\npublic fun <K, V> Map<out K, V>.toList(): List<Pair<K, V>> {\n    if (size == 0)\n        return emptyList()\n    val iterator = entries.iterator()\n    if (!iterator.hasNext())\n        return emptyList()\n    val first = iterator.next()\n    if (!iterator.hasNext())\n        return listOf(first.toPair())\n    val result = ArrayList<Pair<K, V>>(size)\n    result.add(first.toPair())\n    do {\n        result.add(iterator.next().toPair())\n    } while (iterator.hasNext())\n    return result\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each entry of original map.\n * \n * @sample samples.collections.Maps.Transformations.flatMap\n */\npublic inline fun <K, V, R> Map<out K, V>.flatMap(transform: (Map.Entry<K, V>) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each entry of original map.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapSequence\")\npublic inline fun <K, V, R> Map<out K, V>.flatMap(transform: (Map.Entry<K, V>) -> Sequence<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each entry of original map, to the given [destination].\n */\npublic inline fun <K, V, R, C : MutableCollection<in R>> Map<out K, V>.flatMapTo(destination: C, transform: (Map.Entry<K, V>) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each entry of original map, to the given [destination].\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapSequenceTo\")\npublic inline fun <K, V, R, C : MutableCollection<in R>> Map<out K, V>.flatMapTo(destination: C, transform: (Map.Entry<K, V>) -> Sequence<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each entry in the original map.\n * \n * @sample samples.collections.Maps.Transformations.mapToList\n */\npublic inline fun <K, V, R> Map<out K, V>.map(transform: (Map.Entry<K, V>) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each entry in the original map.\n * \n * @sample samples.collections.Maps.Transformations.mapNotNull\n */\npublic inline fun <K, V, R : Any> Map<out K, V>.mapNotNull(transform: (Map.Entry<K, V>) -> R?): List<R> {\n    return mapNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each entry in the original map\n * and appends only the non-null results to the given [destination].\n */\npublic inline fun <K, V, R : Any, C : MutableCollection<in R>> Map<out K, V>.mapNotNullTo(destination: C, transform: (Map.Entry<K, V>) -> R?): C {\n    forEach { element -> transform(element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each entry of the original map\n * and appends the results to the given [destination].\n */\npublic inline fun <K, V, R, C : MutableCollection<in R>> Map<out K, V>.mapTo(destination: C, transform: (Map.Entry<K, V>) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Returns `true` if all entries match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun <K, V> Map<out K, V>.all(predicate: (Map.Entry<K, V>) -> Boolean): Boolean {\n    if (isEmpty()) return true\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if map has at least one entry.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun <K, V> Map<out K, V>.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if at least one entry matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun <K, V> Map<out K, V>.any(predicate: (Map.Entry<K, V>) -> Boolean): Boolean {\n    if (isEmpty()) return false\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns the number of entries in this map.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<out K, V>.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of entries matching the given [predicate].\n */\npublic inline fun <K, V> Map<out K, V>.count(predicate: (Map.Entry<K, V>) -> Boolean): Int {\n    if (isEmpty()) return 0\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Performs the given [action] on each entry.\n */\n@kotlin.internal.HidesMembers\npublic inline fun <K, V> Map<out K, V>.forEach(action: (Map.Entry<K, V>) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n@Deprecated(\"Use maxByOrNull instead.\", ReplaceWith(\"this.maxByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\n@kotlin.internal.InlineOnly\npublic inline fun <K, V, R : Comparable<R>> Map<out K, V>.maxBy(selector: (Map.Entry<K, V>) -> R): Map.Entry<K, V>? {\n    return maxByOrNull(selector)\n}\n\n/**\n * Returns the first entry yielding the largest value of the given function or `null` if there are no entries.\n * \n * @sample samples.collections.Collections.Aggregates.maxByOrNull\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <K, V, R : Comparable<R>> Map<out K, V>.maxByOrNull(selector: (Map.Entry<K, V>) -> R): Map.Entry<K, V>? {\n    return entries.maxByOrNull(selector)\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each entry in the map.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the map is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<out K, V>.maxOf(selector: (Map.Entry<K, V>) -> Double): Double {\n    return entries.maxOf(selector)\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each entry in the map.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the map is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<out K, V>.maxOf(selector: (Map.Entry<K, V>) -> Float): Float {\n    return entries.maxOf(selector)\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each entry in the map.\n * \n * @throws NoSuchElementException if the map is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <K, V, R : Comparable<R>> Map<out K, V>.maxOf(selector: (Map.Entry<K, V>) -> R): R {\n    return entries.maxOf(selector)\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each entry in the map or `null` if there are no entries.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<out K, V>.maxOfOrNull(selector: (Map.Entry<K, V>) -> Double): Double? {\n    return entries.maxOfOrNull(selector)\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each entry in the map or `null` if there are no entries.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<out K, V>.maxOfOrNull(selector: (Map.Entry<K, V>) -> Float): Float? {\n    return entries.maxOfOrNull(selector)\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each entry in the map or `null` if there are no entries.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <K, V, R : Comparable<R>> Map<out K, V>.maxOfOrNull(selector: (Map.Entry<K, V>) -> R): R? {\n    return entries.maxOfOrNull(selector)\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each entry in the map.\n * \n * @throws NoSuchElementException if the map is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <K, V, R> Map<out K, V>.maxOfWith(comparator: Comparator<in R>, selector: (Map.Entry<K, V>) -> R): R {\n    return entries.maxOfWith(comparator, selector)\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each entry in the map or `null` if there are no entries.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <K, V, R> Map<out K, V>.maxOfWithOrNull(comparator: Comparator<in R>, selector: (Map.Entry<K, V>) -> R): R? {\n    return entries.maxOfWithOrNull(comparator, selector)\n}\n\n@Deprecated(\"Use maxWithOrNull instead.\", ReplaceWith(\"this.maxWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<out K, V>.maxWith(comparator: Comparator<in Map.Entry<K, V>>): Map.Entry<K, V>? {\n    return maxWithOrNull(comparator)\n}\n\n/**\n * Returns the first entry having the largest value according to the provided [comparator] or `null` if there are no entries.\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<out K, V>.maxWithOrNull(comparator: Comparator<in Map.Entry<K, V>>): Map.Entry<K, V>? {\n    return entries.maxWithOrNull(comparator)\n}\n\n@Deprecated(\"Use minByOrNull instead.\", ReplaceWith(\"this.minByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic inline fun <K, V, R : Comparable<R>> Map<out K, V>.minBy(selector: (Map.Entry<K, V>) -> R): Map.Entry<K, V>? {\n    return minByOrNull(selector)\n}\n\n/**\n * Returns the first entry yielding the smallest value of the given function or `null` if there are no entries.\n * \n * @sample samples.collections.Collections.Aggregates.minByOrNull\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <K, V, R : Comparable<R>> Map<out K, V>.minByOrNull(selector: (Map.Entry<K, V>) -> R): Map.Entry<K, V>? {\n    return entries.minByOrNull(selector)\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each entry in the map.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the map is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<out K, V>.minOf(selector: (Map.Entry<K, V>) -> Double): Double {\n    return entries.minOf(selector)\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each entry in the map.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the map is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<out K, V>.minOf(selector: (Map.Entry<K, V>) -> Float): Float {\n    return entries.minOf(selector)\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each entry in the map.\n * \n * @throws NoSuchElementException if the map is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <K, V, R : Comparable<R>> Map<out K, V>.minOf(selector: (Map.Entry<K, V>) -> R): R {\n    return entries.minOf(selector)\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each entry in the map or `null` if there are no entries.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<out K, V>.minOfOrNull(selector: (Map.Entry<K, V>) -> Double): Double? {\n    return entries.minOfOrNull(selector)\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each entry in the map or `null` if there are no entries.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<out K, V>.minOfOrNull(selector: (Map.Entry<K, V>) -> Float): Float? {\n    return entries.minOfOrNull(selector)\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each entry in the map or `null` if there are no entries.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <K, V, R : Comparable<R>> Map<out K, V>.minOfOrNull(selector: (Map.Entry<K, V>) -> R): R? {\n    return entries.minOfOrNull(selector)\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each entry in the map.\n * \n * @throws NoSuchElementException if the map is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <K, V, R> Map<out K, V>.minOfWith(comparator: Comparator<in R>, selector: (Map.Entry<K, V>) -> R): R {\n    return entries.minOfWith(comparator, selector)\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each entry in the map or `null` if there are no entries.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <K, V, R> Map<out K, V>.minOfWithOrNull(comparator: Comparator<in R>, selector: (Map.Entry<K, V>) -> R): R? {\n    return entries.minOfWithOrNull(comparator, selector)\n}\n\n@Deprecated(\"Use minWithOrNull instead.\", ReplaceWith(\"this.minWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic fun <K, V> Map<out K, V>.minWith(comparator: Comparator<in Map.Entry<K, V>>): Map.Entry<K, V>? {\n    return minWithOrNull(comparator)\n}\n\n/**\n * Returns the first entry having the smallest value according to the provided [comparator] or `null` if there are no entries.\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<out K, V>.minWithOrNull(comparator: Comparator<in Map.Entry<K, V>>): Map.Entry<K, V>? {\n    return entries.minWithOrNull(comparator)\n}\n\n/**\n * Returns `true` if the map has no entries.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun <K, V> Map<out K, V>.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if no entries match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun <K, V> Map<out K, V>.none(predicate: (Map.Entry<K, V>) -> Boolean): Boolean {\n    if (isEmpty()) return true\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Performs the given [action] on each entry and returns the map itself afterwards.\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <K, V, M : Map<out K, V>> M.onEach(action: (Map.Entry<K, V>) -> Unit): M {\n    return apply { for (element in this) action(element) }\n}\n\n/**\n * Performs the given [action] on each entry, providing sequential index with the entry,\n * and returns the map itself afterwards.\n * @param [action] function that takes the index of an entry and the entry itself\n * and performs the action on the entry.\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <K, V, M : Map<out K, V>> M.onEachIndexed(action: (index: Int, Map.Entry<K, V>) -> Unit): M {\n    return apply { entries.forEachIndexed(action) }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original map returning its entries when being iterated.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<out K, V>.asIterable(): Iterable<Map.Entry<K, V>> {\n    return entries\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original map returning its entries when being iterated.\n */\npublic fun <K, V> Map<out K, V>.asSequence(): Sequence<Map.Entry<K, V>> {\n    return entries.asSequence()\n}\n\n","/*\n * Copyright 2010-2021 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.text\n\n//\n// NOTE: THIS FILE IS AUTO-GENERATED by the GenerateUnicodeData.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\n// 10 mappings totally\n@OptIn(ExperimentalStdlibApi::class)\ninternal fun Char.titlecaseImpl(): String {\n    val uppercase = uppercase()\n    if (uppercase.length > 1) {\n        return if (this == '\\u0149') uppercase else uppercase[0] + uppercase.substring(1).lowercase()\n    }\n    return titlecaseChar().toString()\n}\n","/*\n * Copyright 2010-2021 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.text\n\n/**\n * Converts this character to lower case using Unicode mapping rules of the invariant locale.\n */\n@Deprecated(\"Use lowercaseChar() instead.\", ReplaceWith(\"lowercaseChar()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\n@kotlin.internal.InlineOnly\npublic actual inline fun Char.toLowerCase(): Char = lowercaseChar()\n\n/**\n * Converts this character to lower case using Unicode mapping rules of the invariant locale.\n *\n * This function performs one-to-one character mapping.\n * To support one-to-many character mapping use the [lowercase] function.\n * If this character has no mapping equivalent, the character itself is returned.\n *\n * @sample samples.text.Chars.lowercase\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic actual inline fun Char.lowercaseChar(): Char = lowercase()[0]\n\n/**\n * Converts this character to lower case using Unicode mapping rules of the invariant locale.\n *\n * This function supports one-to-many character mapping, thus the length of the returned string can be greater than one.\n * For example, `'\\u0130'.lowercase()` returns `\"\\u0069\\u0307\"`,\n * where `'\\u0130'` is the LATIN CAPITAL LETTER I WITH DOT ABOVE character (`İ`).\n * If this character has no lower case mapping, the result of `toString()` of this char is returned.\n *\n * @sample samples.text.Chars.lowercase\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic actual inline fun Char.lowercase(): String = toString().asDynamic().toLowerCase().unsafeCast<String>()\n\n/**\n * Converts this character to upper case using Unicode mapping rules of the invariant locale.\n */\n@Deprecated(\"Use uppercaseChar() instead.\", ReplaceWith(\"uppercaseChar()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\n@kotlin.internal.InlineOnly\npublic actual inline fun Char.toUpperCase(): Char = uppercaseChar()\n\n/**\n * Converts this character to upper case using Unicode mapping rules of the invariant locale.\n *\n * This function performs one-to-one character mapping.\n * To support one-to-many character mapping use the [uppercase] function.\n * If this character has no mapping equivalent, the character itself is returned.\n *\n * @sample samples.text.Chars.uppercase\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic actual fun Char.uppercaseChar(): Char {\n    val uppercase = uppercase()\n    return if (uppercase.length > 1) this else uppercase[0]\n}\n\n/**\n * Converts this character to upper case using Unicode mapping rules of the invariant locale.\n *\n * This function supports one-to-many character mapping, thus the length of the returned string can be greater than one.\n * For example, `'\\uFB00'.uppercase()` returns `\"\\u0046\\u0046\"`,\n * where `'\\uFB00'` is the LATIN SMALL LIGATURE FF character (`ﬀ`).\n * If this character has no upper case mapping, the result of `toString()` of this char is returned.\n *\n * @sample samples.text.Chars.uppercase\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic actual inline fun Char.uppercase(): String = toString().asDynamic().toUpperCase().unsafeCast<String>()\n\n/**\n * Converts this character to title case using Unicode mapping rules of the invariant locale.\n *\n * This function performs one-to-one character mapping.\n * To support one-to-many character mapping use the [titlecase] function.\n * If this character has no mapping equivalent, the result of calling [uppercaseChar] is returned.\n *\n * @sample samples.text.Chars.titlecase\n */\n@SinceKotlin(\"1.5\")\npublic actual fun Char.titlecaseChar(): Char = titlecaseCharImpl()\n\n/**\n * Returns `true` if this character is a Unicode high-surrogate code unit (also known as leading-surrogate code unit).\n */\npublic actual fun Char.isHighSurrogate(): Boolean = this in Char.MIN_HIGH_SURROGATE..Char.MAX_HIGH_SURROGATE\n\n/**\n * Returns `true` if this character is a Unicode low-surrogate code unit (also known as trailing-surrogate code unit).\n */\npublic actual fun Char.isLowSurrogate(): Boolean = this in Char.MIN_LOW_SURROGATE..Char.MAX_LOW_SURROGATE\n\n/**\n * Returns the Unicode general category of this character.\n */\n@SinceKotlin(\"1.5\")\npublic actual val Char.category: CharCategory\n    get() = CharCategory.valueOf(getCategoryValue())\n\n/**\n * Returns `true` if this character (Unicode code point) is defined in Unicode.\n *\n * A character is considered to be defined in Unicode if its [category] is not [CharCategory.UNASSIGNED].\n */\n@SinceKotlin(\"1.5\")\npublic actual fun Char.isDefined(): Boolean {\n    if (this < '\\u0080') {\n        return true\n    }\n    return getCategoryValue() != CharCategory.UNASSIGNED.value\n}\n\n/**\n * Returns `true` if this character is a letter.\n *\n * A character is considered to be a letter if its [category] is [CharCategory.UPPERCASE_LETTER],\n * [CharCategory.LOWERCASE_LETTER], [CharCategory.TITLECASE_LETTER], [CharCategory.MODIFIER_LETTER], or [CharCategory.OTHER_LETTER].\n *\n * @sample samples.text.Chars.isLetter\n */\n@SinceKotlin(\"1.5\")\npublic actual fun Char.isLetter(): Boolean {\n    if (this in 'a'..'z' || this in 'A'..'Z') {\n        return true\n    }\n    if (this < '\\u0080') {\n        return false\n    }\n    return isLetterImpl()\n}\n\n/**\n * Returns `true` if this character is a letter or digit.\n *\n * @see isLetter\n * @see isDigit\n *\n * @sample samples.text.Chars.isLetterOrDigit\n */\n@SinceKotlin(\"1.5\")\npublic actual fun Char.isLetterOrDigit(): Boolean {\n    if (this in 'a'..'z' || this in 'A'..'Z' || this in '0'..'9') {\n        return true\n    }\n    if (this < '\\u0080') {\n        return false\n    }\n\n    return isDigitImpl() || isLetterImpl()\n}\n\n/**\n * Returns `true` if this character is a digit.\n *\n * A character is considered to be a digit if its [category] is [CharCategory.DECIMAL_DIGIT_NUMBER].\n *\n * @sample samples.text.Chars.isDigit\n */\n@SinceKotlin(\"1.5\")\npublic actual fun Char.isDigit(): Boolean {\n    if (this in '0'..'9') {\n        return true\n    }\n    if (this < '\\u0080') {\n        return false\n    }\n    return isDigitImpl()\n}\n\n/**\n * Returns `true` if this character is an upper case letter.\n *\n * A character is considered to be an upper case letter if its [category] is [CharCategory.UPPERCASE_LETTER].\n *\n * @sample samples.text.Chars.isUpperCase\n */\n@SinceKotlin(\"1.5\")\npublic actual fun Char.isUpperCase(): Boolean {\n    if (this in 'A'..'Z') {\n        return true\n    }\n    if (this < '\\u0080') {\n        return false\n    }\n    return isUpperCaseImpl()\n}\n\n/**\n * Returns `true` if this character is a lower case letter.\n *\n * A character is considered to be a lower case letter if its [category] is [CharCategory.LOWERCASE_LETTER].\n *\n * @sample samples.text.Chars.isLowerCase\n */\n@SinceKotlin(\"1.5\")\npublic actual fun Char.isLowerCase(): Boolean {\n    if (this in 'a'..'z') {\n        return true\n    }\n    if (this < '\\u0080') {\n        return false\n    }\n    return isLowerCaseImpl()\n}\n\n/**\n * Returns `true` if this character is a title case letter.\n *\n * A character is considered to be a title case letter if its [category] is [CharCategory.TITLECASE_LETTER].\n *\n * @sample samples.text.Chars.isTitleCase\n */\n@SinceKotlin(\"1.5\")\npublic actual fun Char.isTitleCase(): Boolean {\n    if (this < '\\u0080') {\n        return false\n    }\n    return getCategoryValue() == CharCategory.TITLECASE_LETTER.value\n}\n\n/**\n * Returns `true` if this character is an ISO control character.\n *\n * A character is considered to be an ISO control character if its [category] is [CharCategory.CONTROL],\n * meaning the Char is in the range `'\\u0000'..'\\u001F'` or in the range `'\\u007F'..'\\u009F'`.\n *\n * @sample samples.text.Chars.isISOControl\n */\n@SinceKotlin(\"1.5\")\npublic actual fun Char.isISOControl(): Boolean {\n    return this <= '\\u001F' || this in '\\u007F'..'\\u009F'\n}\n\n/**\n * Determines whether a character is whitespace according to the Unicode standard.\n * Returns `true` if the character is whitespace.\n *\n * @sample samples.text.Chars.isWhitespace\n */\npublic actual fun Char.isWhitespace(): Boolean = isWhitespaceImpl()","/*\n * Copyright 2010-2021 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.text\n\nimport kotlin.js.RegExp\n\n/**\n * Converts the characters in the specified array to a string.\n */\n@SinceKotlin(\"1.2\")\n@Deprecated(\"Use CharArray.concatToString() instead\", ReplaceWith(\"chars.concatToString()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic actual fun String(chars: CharArray): String {\n    var result = \"\"\n    for (char in chars) {\n        result += char\n    }\n    return result\n}\n\n/**\n * Converts the characters from a portion of the specified array to a string.\n *\n * @throws IndexOutOfBoundsException if either [offset] or [length] are less than zero\n * or `offset + length` is out of [chars] array bounds.\n */\n@SinceKotlin(\"1.2\")\n@Deprecated(\"Use CharArray.concatToString(startIndex, endIndex) instead\", ReplaceWith(\"chars.concatToString(offset, offset + length)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic actual fun String(chars: CharArray, offset: Int, length: Int): String {\n    if (offset < 0 || length < 0 || chars.size - offset < length)\n        throw IndexOutOfBoundsException(\"size: ${chars.size}; offset: $offset; length: $length\")\n    var result = \"\"\n    for (index in offset until offset + length) {\n        result += chars[index]\n    }\n    return result\n}\n\n/**\n * Concatenates characters in this [CharArray] into a String.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic actual fun CharArray.concatToString(): String {\n    var result = \"\"\n    for (char in this) {\n        result += char\n    }\n    return result\n}\n\n/**\n * Concatenates characters in this [CharArray] or its subrange into a String.\n *\n * @param startIndex the beginning (inclusive) of the subrange of characters, 0 by default.\n * @param endIndex the end (exclusive) of the subrange of characters, size of this array by default.\n *\n * @throws IndexOutOfBoundsException if [startIndex] is less than zero or [endIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [startIndex] is greater than [endIndex].\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun CharArray.concatToString(startIndex: Int = 0, endIndex: Int = this.size): String {\n    AbstractList.checkBoundsIndexes(startIndex, endIndex, this.size)\n    var result = \"\"\n    for (index in startIndex until endIndex) {\n        result += this[index]\n    }\n    return result\n}\n\n/**\n * Returns a [CharArray] containing characters of this string.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic actual fun String.toCharArray(): CharArray {\n    return CharArray(length) { get(it) }\n}\n\n/**\n * Returns a [CharArray] containing characters of this string or its substring.\n *\n * @param startIndex the beginning (inclusive) of the substring, 0 by default.\n * @param endIndex the end (exclusive) of the substring, length of this string by default.\n *\n * @throws IndexOutOfBoundsException if [startIndex] is less than zero or [endIndex] is greater than the length of this string.\n * @throws IllegalArgumentException if [startIndex] is greater than [endIndex].\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun String.toCharArray(startIndex: Int = 0, endIndex: Int = this.length): CharArray {\n    AbstractList.checkBoundsIndexes(startIndex, endIndex, length)\n    return CharArray(endIndex - startIndex) { get(startIndex + it) }\n}\n\n/**\n * Decodes a string from the bytes in UTF-8 encoding in this array.\n *\n * Malformed byte sequences are replaced by the replacement char `\\uFFFD`.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic actual fun ByteArray.decodeToString(): String {\n    return decodeUtf8(this, 0, size, false)\n}\n\n/**\n * Decodes a string from the bytes in UTF-8 encoding in this array or its subrange.\n *\n * @param startIndex the beginning (inclusive) of the subrange to decode, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to decode, size of this array by default.\n * @param throwOnInvalidSequence specifies whether to throw an exception on malformed byte sequence or replace it by the replacement char `\\uFFFD`.\n *\n * @throws IndexOutOfBoundsException if [startIndex] is less than zero or [endIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [startIndex] is greater than [endIndex].\n * @throws CharacterCodingException if the byte array contains malformed UTF-8 byte sequence and [throwOnInvalidSequence] is true.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun ByteArray.decodeToString(\n    startIndex: Int = 0,\n    endIndex: Int = this.size,\n    throwOnInvalidSequence: Boolean = false\n): String {\n    AbstractList.checkBoundsIndexes(startIndex, endIndex, this.size)\n    return decodeUtf8(this, startIndex, endIndex, throwOnInvalidSequence)\n}\n\n/**\n * Encodes this string to an array of bytes in UTF-8 encoding.\n *\n * Any malformed char sequence is replaced by the replacement byte sequence.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic actual fun String.encodeToByteArray(): ByteArray {\n    return encodeUtf8(this, 0, length, false)\n}\n\n/**\n * Encodes this string or its substring to an array of bytes in UTF-8 encoding.\n *\n * @param startIndex the beginning (inclusive) of the substring to encode, 0 by default.\n * @param endIndex the end (exclusive) of the substring to encode, length of this string by default.\n * @param throwOnInvalidSequence specifies whether to throw an exception on malformed char sequence or replace.\n *\n * @throws IndexOutOfBoundsException if [startIndex] is less than zero or [endIndex] is greater than the length of this string.\n * @throws IllegalArgumentException if [startIndex] is greater than [endIndex].\n * @throws CharacterCodingException if this string contains malformed char sequence and [throwOnInvalidSequence] is true.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun String.encodeToByteArray(\n    startIndex: Int = 0,\n    endIndex: Int = this.length,\n    throwOnInvalidSequence: Boolean = false\n): ByteArray {\n    AbstractList.checkBoundsIndexes(startIndex, endIndex, length)\n    return encodeUtf8(this, startIndex, endIndex, throwOnInvalidSequence)\n}\n\n/**\n * Returns a copy of this string converted to upper case using the rules of the default locale.\n */\n@Deprecated(\"Use uppercase() instead.\", ReplaceWith(\"uppercase()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\n@kotlin.internal.InlineOnly\npublic actual inline fun String.toUpperCase(): String = asDynamic().toUpperCase()\n\n/**\n * Returns a copy of this string converted to upper case using Unicode mapping rules of the invariant locale.\n *\n * This function supports one-to-many and many-to-one character mapping,\n * thus the length of the returned string can be different from the length of the original string.\n *\n * @sample samples.text.Strings.uppercase\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic actual inline fun String.uppercase(): String = asDynamic().toUpperCase()\n\n/**\n * Returns a copy of this string converted to lower case using the rules of the default locale.\n */\n@Deprecated(\"Use lowercase() instead.\", ReplaceWith(\"lowercase()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\n@kotlin.internal.InlineOnly\npublic actual inline fun String.toLowerCase(): String = asDynamic().toLowerCase()\n\n/**\n * Returns a copy of this string converted to lower case using Unicode mapping rules of the invariant locale.\n *\n * This function supports one-to-many and many-to-one character mapping,\n * thus the length of the returned string can be different from the length of the original string.\n *\n * @sample samples.text.Strings.lowercase\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic actual inline fun String.lowercase(): String = asDynamic().toLowerCase()\n\n@kotlin.internal.InlineOnly\ninternal actual inline fun String.nativeIndexOf(str: String, fromIndex: Int): Int = asDynamic().indexOf(str, fromIndex)\n\n@kotlin.internal.InlineOnly\ninternal actual inline fun String.nativeLastIndexOf(str: String, fromIndex: Int): Int = asDynamic().lastIndexOf(str, fromIndex)\n\n@kotlin.internal.InlineOnly\ninternal inline fun String.nativeStartsWith(s: String, position: Int): Boolean = asDynamic().startsWith(s, position)\n\n@kotlin.internal.InlineOnly\ninternal inline fun String.nativeEndsWith(s: String): Boolean = asDynamic().endsWith(s)\n\n@kotlin.internal.InlineOnly\npublic actual inline fun String.substring(startIndex: Int): String = asDynamic().substring(startIndex)\n\n@kotlin.internal.InlineOnly\npublic actual inline fun String.substring(startIndex: Int, endIndex: Int): String = asDynamic().substring(startIndex, endIndex)\n\n@kotlin.internal.InlineOnly\npublic inline fun String.concat(str: String): String = asDynamic().concat(str)\n\n@kotlin.internal.InlineOnly\npublic inline fun String.match(regex: String): Array<String>? = asDynamic().match(regex)\n\n//native public fun String.trim(): String\n//TODO: String.replace to implement effective trimLeading and trimTrailing\n\n@kotlin.internal.InlineOnly\ninternal inline fun String.nativeReplace(pattern: RegExp, replacement: String): String = asDynamic().replace(pattern, replacement)\n\n@OptIn(ExperimentalStdlibApi::class)\n@SinceKotlin(\"1.2\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun String.compareTo(other: String, ignoreCase: Boolean = false): Int {\n    if (ignoreCase) {\n        val n1 = this.length\n        val n2 = other.length\n        val min = minOf(n1, n2)\n        if (min == 0) return n1 - n2\n        var start = 0\n        while (true) {\n            val end = minOf(start + 16, min)\n            var s1 = this.substring(start, end)\n            var s2 = other.substring(start, end)\n            if (s1 != s2) {\n                s1 = s1.uppercase()\n                s2 = s2.uppercase()\n                if (s1 != s2) {\n                    s1 = s1.lowercase()\n                    s2 = s2.lowercase()\n                    if (s1 != s2) {\n                        return s1.compareTo(s2)\n                    }\n                }\n            }\n            if (end == min) break\n            start = end\n        }\n        return n1 - n2\n    } else {\n        return compareTo(other)\n    }\n}\n\n/**\n * Returns `true` if the contents of this char sequence are equal to the contents of the specified [other],\n * i.e. both char sequences contain the same number of the same characters in the same order.\n *\n * @sample samples.text.Strings.contentEquals\n */\n@SinceKotlin(\"1.5\")\npublic actual infix fun CharSequence?.contentEquals(other: CharSequence?): Boolean = contentEqualsImpl(other)\n\n/**\n * Returns `true` if the contents of this char sequence are equal to the contents of the specified [other], optionally ignoring case difference.\n *\n * @param ignoreCase `true` to ignore character case when comparing contents.\n *\n * @sample samples.text.Strings.contentEquals\n */\n@SinceKotlin(\"1.5\")\npublic actual fun CharSequence?.contentEquals(other: CharSequence?, ignoreCase: Boolean): Boolean {\n    return if (ignoreCase)\n        this.contentEqualsIgnoreCaseImpl(other)\n    else\n        this.contentEqualsImpl(other)\n}\n\n\nprivate val STRING_CASE_INSENSITIVE_ORDER = Comparator<String> { a, b -> a.compareTo(b, ignoreCase = true) }\n\n@SinceKotlin(\"1.2\")\npublic actual val String.Companion.CASE_INSENSITIVE_ORDER: Comparator<String>\n    get() = STRING_CASE_INSENSITIVE_ORDER\n","/*\n * Copyright 2010-2021 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"CharsKt\")\n\npackage kotlin.text\n\n/**\n * Returns the numeric value of the decimal digit that this Char represents.\n * Throws an exception if this Char is not a valid decimal digit.\n *\n * A Char is considered to represent a decimal digit if [isDigit] is true for the Char.\n * In this case, the Unicode decimal digit value of the character is returned.\n *\n * @sample samples.text.Chars.digitToInt\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun Char.digitToInt(): Int {\n    return digitOf(this, 10).also {\n        if (it < 0) throw IllegalArgumentException(\"Char $this is not a decimal digit\")\n    }\n}\n\n/**\n * Returns the numeric value of the digit that this Char represents in the specified [radix].\n * Throws an exception if the [radix] is not in the range `2..36` or if this Char is not a valid digit in the specified [radix].\n *\n * A Char is considered to represent a digit in the specified [radix] if at least one of the following is true:\n *  - [isDigit] is `true` for the Char and the Unicode decimal digit value of the character is less than the specified [radix]. In this case the decimal digit value is returned.\n *  - The Char is one of the uppercase Latin letters 'A' through 'Z' and its [code] is less than `radix + 'A'.code - 10`. In this case, `this.code - 'A'.code + 10` is returned.\n *  - The Char is one of the lowercase Latin letters 'a' through 'z' and its [code] is less than `radix + 'a'.code - 10`. In this case, `this.code - 'a'.code + 10` is returned.\n *\n * @sample samples.text.Chars.digitToInt\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun Char.digitToInt(radix: Int): Int {\n    return digitToIntOrNull(radix) ?: throw IllegalArgumentException(\"Char $this is not a digit in the given radix=$radix\")\n}\n\n/**\n *\n * Returns the numeric value of the decimal digit that this Char represents, or `null` if this Char is not a valid decimal digit.\n *\n * A Char is considered to represent a decimal digit if [isDigit] is true for the Char.\n * In this case, the Unicode decimal digit value of the character is returned.\n *\n * @sample samples.text.Chars.digitToIntOrNull\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun Char.digitToIntOrNull(): Int? {\n    return digitOf(this, 10).takeIf { it >= 0 }\n}\n\n/**\n * Returns the numeric value of the digit that this Char represents in the specified [radix], or `null` if this Char is not a valid digit in the specified [radix].\n * Throws an exception if the [radix] is not in the range `2..36`.\n *\n * A Char is considered to represent a digit in the specified [radix] if at least one of the following is true:\n *  - [isDigit] is `true` for the Char and the Unicode decimal digit value of the character is less than the specified [radix]. In this case the decimal digit value is returned.\n *  - The Char is one of the uppercase Latin letters 'A' through 'Z' and its [code] is less than `radix + 'A'.code - 10`. In this case, `this.code - 'A'.code + 10` is returned.\n *  - The Char is one of the lowercase Latin letters 'a' through 'z' and its [code] is less than `radix + 'a'.code - 10`. In this case, `this.code - 'a'.code + 10` is returned.\n *\n * @sample samples.text.Chars.digitToIntOrNull\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun Char.digitToIntOrNull(radix: Int): Int? {\n    checkRadix(radix)\n    return digitOf(this, radix).takeIf { it >= 0 }\n}\n\n/**\n * Returns the Char that represents this decimal digit.\n * Throws an exception if this value is not in the range `0..9`.\n *\n * If this value is in `0..9`, the decimal digit Char with code `'0'.code + this` is returned.\n *\n * @sample samples.text.Chars.digitToChar\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun Int.digitToChar(): Char {\n    if (this in 0..9) {\n        return '0' + this\n    }\n    throw IllegalArgumentException(\"Int $this is not a decimal digit\")\n}\n\n/**\n * Returns the Char that represents this numeric digit value in the specified [radix].\n * Throws an exception if the [radix] is not in the range `2..36` or if this value is not in the range `0 until radix`.\n *\n * If this value is less than `10`, the decimal digit Char with code `'0'.code + this` is returned.\n * Otherwise, the uppercase Latin letter with code `'A'.code + this - 10` is returned.\n *\n * @sample samples.text.Chars.digitToChar\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun Int.digitToChar(radix: Int): Char {\n    if (radix !in 2..36) {\n        throw IllegalArgumentException(\"Invalid radix: $radix. Valid radix values are in range 2..36\")\n    }\n    if (this < 0 || this >= radix) {\n        throw IllegalArgumentException(\"Digit $this does not represent a valid digit in radix $radix\")\n    }\n    return if (this < 10) {\n        '0' + this\n    } else {\n        'A' + this - 10\n    }\n}\n\n/**\n * Converts this character to lower case using Unicode mapping rules of the invariant locale.\n */\n@Deprecated(\"Use lowercaseChar() instead.\", ReplaceWith(\"lowercaseChar()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\npublic expect fun Char.toLowerCase(): Char\n\n/**\n * Converts this character to lower case using Unicode mapping rules of the invariant locale.\n *\n * This function performs one-to-one character mapping.\n * To support one-to-many character mapping use the [lowercase] function.\n * If this character has no mapping equivalent, the character itself is returned.\n *\n * @sample samples.text.Chars.lowercase\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic expect fun Char.lowercaseChar(): Char\n\n/**\n * Converts this character to lower case using Unicode mapping rules of the invariant locale.\n *\n * This function supports one-to-many character mapping, thus the length of the returned string can be greater than one.\n * For example, `'\\u0130'.lowercase()` returns `\"\\u0069\\u0307\"`,\n * where `'\\u0130'` is the LATIN CAPITAL LETTER I WITH DOT ABOVE character (`İ`).\n * If this character has no lower case mapping, the result of `toString()` of this char is returned.\n *\n * @sample samples.text.Chars.lowercase\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic expect fun Char.lowercase(): String\n\n/**\n * Converts this character to upper case using Unicode mapping rules of the invariant locale.\n */\n@Deprecated(\"Use uppercaseChar() instead.\", ReplaceWith(\"uppercaseChar()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\npublic expect fun Char.toUpperCase(): Char\n\n/**\n * Converts this character to upper case using Unicode mapping rules of the invariant locale.\n *\n * This function performs one-to-one character mapping.\n * To support one-to-many character mapping use the [uppercase] function.\n * If this character has no mapping equivalent, the character itself is returned.\n *\n * @sample samples.text.Chars.uppercase\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic expect fun Char.uppercaseChar(): Char\n\n/**\n * Converts this character to upper case using Unicode mapping rules of the invariant locale.\n *\n * This function supports one-to-many character mapping, thus the length of the returned string can be greater than one.\n * For example, `'\\uFB00'.uppercase()` returns `\"\\u0046\\u0046\"`,\n * where `'\\uFB00'` is the LATIN SMALL LIGATURE FF character (`ﬀ`).\n * If this character has no upper case mapping, the result of `toString()` of this char is returned.\n *\n * @sample samples.text.Chars.uppercase\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic expect fun Char.uppercase(): String\n\n/**\n * Converts this character to title case using Unicode mapping rules of the invariant locale.\n *\n * This function performs one-to-one character mapping.\n * To support one-to-many character mapping use the [titlecase] function.\n * If this character has no mapping equivalent, the result of calling [uppercaseChar] is returned.\n *\n * @sample samples.text.Chars.titlecase\n */\n@SinceKotlin(\"1.5\")\npublic expect fun Char.titlecaseChar(): Char\n\n/**\n * Converts this character to title case using Unicode mapping rules of the invariant locale.\n *\n * This function supports one-to-many character mapping, thus the length of the returned string can be greater than one.\n * For example, `'\\uFB00'.titlecase()` returns `\"\\u0046\\u0066\"`,\n * where `'\\uFB00'` is the LATIN SMALL LIGATURE FF character (`ﬀ`).\n * If this character has no title case mapping, the result of [uppercase] is returned instead.\n *\n * @sample samples.text.Chars.titlecase\n */\n@SinceKotlin(\"1.5\")\npublic fun Char.titlecase(): String = titlecaseImpl()\n\n/**\n * Concatenates this Char and a String.\n *\n * @sample samples.text.Chars.plus\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun Char.plus(other: String): String = this.toString() + other\n\n/**\n * Returns `true` if this character is equal to the [other] character, optionally ignoring character case.\n *\n * @param ignoreCase `true` to ignore character case when comparing characters. By default `false`.\n *\n * Two characters are considered the same ignoring case if at least one of the following is `true`:\n *   - The two characters are the same (as compared by the == operator)\n *   - Applying the method [uppercaseChar] to each character produces the same result\n *   - Applying the method [lowercaseChar] to each character produces the same result\n *\n * @sample samples.text.Chars.equals\n */\npublic fun Char.equals(other: Char, ignoreCase: Boolean = false): Boolean {\n    if (this == other) return true\n    if (!ignoreCase) return false\n\n    val thisUpper = this.uppercaseChar()\n    val otherUpper = other.uppercaseChar()\n\n    return thisUpper == otherUpper || thisUpper.lowercaseChar() == otherUpper.lowercaseChar()\n}\n\n/**\n * Returns `true` if this character is a Unicode surrogate code unit.\n */\npublic fun Char.isSurrogate(): Boolean = this in Char.MIN_SURROGATE..Char.MAX_SURROGATE\n\n/**\n * Returns the Unicode general category of this character.\n */\n@SinceKotlin(\"1.5\")\npublic expect val Char.category: CharCategory\n\n/**\n * Returns `true` if this character (Unicode code point) is defined in Unicode.\n *\n * A character is considered to be defined in Unicode if its [category] is not [CharCategory.UNASSIGNED].\n */\n@SinceKotlin(\"1.5\")\npublic expect fun Char.isDefined(): Boolean\n\n/**\n * Returns `true` if this character is a letter.\n *\n * A character is considered to be a letter if its [category] is [CharCategory.UPPERCASE_LETTER],\n * [CharCategory.LOWERCASE_LETTER], [CharCategory.TITLECASE_LETTER], [CharCategory.MODIFIER_LETTER], or [CharCategory.OTHER_LETTER].\n *\n * @sample samples.text.Chars.isLetter\n */\n@SinceKotlin(\"1.5\")\npublic expect fun Char.isLetter(): Boolean\n\n/**\n * Returns `true` if this character is a letter or digit.\n *\n * @see isLetter\n * @see isDigit\n *\n * @sample samples.text.Chars.isLetterOrDigit\n */\n@SinceKotlin(\"1.5\")\npublic expect fun Char.isLetterOrDigit(): Boolean\n\n/**\n * Returns `true` if this character is a digit.\n *\n * A character is considered to be a digit if its [category] is [CharCategory.DECIMAL_DIGIT_NUMBER].\n *\n * @sample samples.text.Chars.isDigit\n */\n@SinceKotlin(\"1.5\")\npublic expect fun Char.isDigit(): Boolean\n\n/**\n * Returns `true` if this character is an upper case letter.\n *\n * A character is considered to be an upper case letter if its [category] is [CharCategory.UPPERCASE_LETTER].\n *\n * @sample samples.text.Chars.isUpperCase\n */\n@SinceKotlin(\"1.5\")\npublic expect fun Char.isUpperCase(): Boolean\n\n/**\n * Returns `true` if this character is a lower case letter.\n *\n * A character is considered to be a lower case letter if its [category] is [CharCategory.LOWERCASE_LETTER].\n *\n * @sample samples.text.Chars.isLowerCase\n */\n@SinceKotlin(\"1.5\")\npublic expect fun Char.isLowerCase(): Boolean\n\n/**\n * Returns `true` if this character is a title case letter.\n *\n * A character is considered to be a title case letter if its [category] is [CharCategory.TITLECASE_LETTER].\n *\n * @sample samples.text.Chars.isTitleCase\n */\n@SinceKotlin(\"1.5\")\npublic expect fun Char.isTitleCase(): Boolean\n\n/**\n * Returns `true` if this character is an ISO control character.\n *\n * A character is considered to be an ISO control character if its [category] is [CharCategory.CONTROL],\n * meaning the Char is in the range `'\\u0000'..'\\u001F'` or in the range `'\\u007F'..'\\u009F'`.\n *\n * @sample samples.text.Chars.isISOControl\n */\n@SinceKotlin(\"1.5\")\npublic expect fun Char.isISOControl(): Boolean\n\n/**\n * Determines whether a character is whitespace according to the Unicode standard.\n * Returns `true` if the character is whitespace.\n *\n * @sample samples.text.Chars.isWhitespace\n */\npublic expect fun Char.isWhitespace(): Boolean\n","/*\n * Copyright 2010-2021 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"SequencesKt\")\n\npackage kotlin.sequences\n\n//\n// NOTE: THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.random.*\n\n/**\n * Returns `true` if [element] is found in the sequence.\n *\n * The operation is _terminal_.\n */\npublic operator fun <@kotlin.internal.OnlyInputTypes T> Sequence<T>.contains(element: T): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this sequence.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic fun <T> Sequence<T>.elementAt(index: Int): T {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"Sequence doesn't contain element at index $index.\") }\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this sequence.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\npublic fun <T> Sequence<T>.elementAtOrElse(index: Int, defaultValue: (Int) -> T): T {\n    if (index < 0)\n        return defaultValue(index)\n    val iterator = iterator()\n    var count = 0\n    while (iterator.hasNext()) {\n        val element = iterator.next()\n        if (index == count++)\n            return element\n    }\n    return defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this sequence.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\npublic fun <T> Sequence<T>.elementAtOrNull(index: Int): T? {\n    if (index < 0)\n        return null\n    val iterator = iterator()\n    var count = 0\n    while (iterator.hasNext()) {\n        val element = iterator.next()\n        if (index == count++)\n            return element\n    }\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Sequence<T>.find(predicate: (T) -> Boolean): T? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Sequence<T>.findLast(predicate: (T) -> Boolean): T? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the sequence is empty.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.first(): T {\n    val iterator = iterator()\n    if (!iterator.hasNext())\n        throw NoSuchElementException(\"Sequence is empty.\")\n    return iterator.next()\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.first(predicate: (T) -> Boolean): T {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Sequence contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first non-null value produced by [transform] function being applied to elements of this sequence in iteration order,\n * or throws [NoSuchElementException] if no non-null value was produced.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Transformations.firstNotNullOf\n */\n@SinceKotlin(\"1.5\")\n@kotlin.internal.InlineOnly\npublic inline fun <T, R : Any> Sequence<T>.firstNotNullOf(transform: (T) -> R?): R {\n    return firstNotNullOfOrNull(transform) ?: throw NoSuchElementException(\"No element of the sequence was transformed to a non-null value.\")\n}\n\n/**\n * Returns the first non-null value produced by [transform] function being applied to elements of this sequence in iteration order,\n * or `null` if no non-null value was produced.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Transformations.firstNotNullOf\n */\n@SinceKotlin(\"1.5\")\n@kotlin.internal.InlineOnly\npublic inline fun <T, R : Any> Sequence<T>.firstNotNullOfOrNull(transform: (T) -> R?): R? {\n    for (element in this) {\n        val result = transform(element)\n        if (result != null) {\n            return result\n        }\n    }\n    return null\n}\n\n/**\n * Returns the first element, or `null` if the sequence is empty.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.firstOrNull(): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext())\n        return null\n    return iterator.next()\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.firstOrNull(predicate: (T) -> Boolean): T? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns first index of [element], or -1 if the sequence does not contain element.\n *\n * The operation is _terminal_.\n */\npublic fun <@kotlin.internal.OnlyInputTypes T> Sequence<T>.indexOf(element: T): Int {\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (element == item)\n            return index\n        index++\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the sequence does not contain such element.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.indexOfFirst(predicate: (T) -> Boolean): Int {\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (predicate(item))\n            return index\n        index++\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the sequence does not contain such element.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.indexOfLast(predicate: (T) -> Boolean): Int {\n    var lastIndex = -1\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (predicate(item))\n            lastIndex = index\n        index++\n    }\n    return lastIndex\n}\n\n/**\n * Returns the last element.\n *\n * The operation is _terminal_.\n * \n * @throws NoSuchElementException if the sequence is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic fun <T> Sequence<T>.last(): T {\n    val iterator = iterator()\n    if (!iterator.hasNext())\n        throw NoSuchElementException(\"Sequence is empty.\")\n    var last = iterator.next()\n    while (iterator.hasNext())\n        last = iterator.next()\n    return last\n}\n\n/**\n * Returns the last element matching the given [predicate].\n *\n * The operation is _terminal_.\n * \n * @throws NoSuchElementException if no such element is found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic inline fun <T> Sequence<T>.last(predicate: (T) -> Boolean): T {\n    var last: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            last = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Sequence contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return last as T\n}\n\n/**\n * Returns last index of [element], or -1 if the sequence does not contain element.\n *\n * The operation is _terminal_.\n */\npublic fun <@kotlin.internal.OnlyInputTypes T> Sequence<T>.lastIndexOf(element: T): Int {\n    var lastIndex = -1\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (element == item)\n            lastIndex = index\n        index++\n    }\n    return lastIndex\n}\n\n/**\n * Returns the last element, or `null` if the sequence is empty.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic fun <T> Sequence<T>.lastOrNull(): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext())\n        return null\n    var last = iterator.next()\n    while (iterator.hasNext())\n        last = iterator.next()\n    return last\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic inline fun <T> Sequence<T>.lastOrNull(predicate: (T) -> Boolean): T? {\n    var last: T? = null\n    for (element in this) {\n        if (predicate(element)) {\n            last = element\n        }\n    }\n    return last\n}\n\n/**\n * Returns the single element, or throws an exception if the sequence is empty or has more than one element.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.single(): T {\n    val iterator = iterator()\n    if (!iterator.hasNext())\n        throw NoSuchElementException(\"Sequence is empty.\")\n    val single = iterator.next()\n    if (iterator.hasNext())\n        throw IllegalArgumentException(\"Sequence has more than one element.\")\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.single(predicate: (T) -> Boolean): T {\n    var single: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Sequence contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Sequence contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as T\n}\n\n/**\n * Returns single element, or `null` if the sequence is empty or has more than one element.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.singleOrNull(): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext())\n        return null\n    val single = iterator.next()\n    if (iterator.hasNext())\n        return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.singleOrNull(predicate: (T) -> Boolean): T? {\n    var single: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns a sequence containing all elements except first [n] elements.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun <T> Sequence<T>.drop(n: Int): Sequence<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return when {\n        n == 0 -> this\n        this is DropTakeSequence -> this.drop(n)\n        else -> DropSequence(this, n)\n    }\n}\n\n/**\n * Returns a sequence containing all elements except first elements that satisfy the given [predicate].\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun <T> Sequence<T>.dropWhile(predicate: (T) -> Boolean): Sequence<T> {\n    return DropWhileSequence(this, predicate)\n}\n\n/**\n * Returns a sequence containing only elements matching the given [predicate].\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic fun <T> Sequence<T>.filter(predicate: (T) -> Boolean): Sequence<T> {\n    return FilteringSequence(this, true, predicate)\n}\n\n/**\n * Returns a sequence containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexed\n */\npublic fun <T> Sequence<T>.filterIndexed(predicate: (index: Int, T) -> Boolean): Sequence<T> {\n    // TODO: Rewrite with generalized MapFilterIndexingSequence\n    return TransformingSequence(FilteringSequence(IndexingSequence(this), true, { predicate(it.index, it.value) }), { it.value })\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexedTo\n */\npublic inline fun <T, C : MutableCollection<in T>> Sequence<T>.filterIndexedTo(destination: C, predicate: (index: Int, T) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Returns a sequence containing all elements that are instances of specified type parameter R.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Filtering.filterIsInstance\n */\npublic inline fun <reified R> Sequence<*>.filterIsInstance(): Sequence<@kotlin.internal.NoInfer R> {\n    @Suppress(\"UNCHECKED_CAST\")\n    return filter { it is R } as Sequence<R>\n}\n\n/**\n * Appends all elements that are instances of specified type parameter R to the given [destination].\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Filtering.filterIsInstanceTo\n */\npublic inline fun <reified R, C : MutableCollection<in R>> Sequence<*>.filterIsInstanceTo(destination: C): C {\n    for (element in this) if (element is R) destination.add(element)\n    return destination\n}\n\n/**\n * Returns a sequence containing all elements not matching the given [predicate].\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic fun <T> Sequence<T>.filterNot(predicate: (T) -> Boolean): Sequence<T> {\n    return FilteringSequence(this, false, predicate)\n}\n\n/**\n * Returns a sequence containing all elements that are not `null`.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Filtering.filterNotNull\n */\npublic fun <T : Any> Sequence<T?>.filterNotNull(): Sequence<T> {\n    @Suppress(\"UNCHECKED_CAST\")\n    return filterNot { it == null } as Sequence<T>\n}\n\n/**\n * Appends all elements that are not `null` to the given [destination].\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Filtering.filterNotNullTo\n */\npublic fun <C : MutableCollection<in T>, T : Any> Sequence<T?>.filterNotNullTo(destination: C): C {\n    for (element in this) if (element != null) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <T, C : MutableCollection<in T>> Sequence<T>.filterNotTo(destination: C, predicate: (T) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <T, C : MutableCollection<in T>> Sequence<T>.filterTo(destination: C, predicate: (T) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Returns a sequence containing first [n] elements.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun <T> Sequence<T>.take(n: Int): Sequence<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return when {\n        n == 0 -> emptySequence()\n        this is DropTakeSequence -> this.take(n)\n        else -> TakeSequence(this, n)\n    }\n}\n\n/**\n * Returns a sequence containing first elements satisfying the given [predicate].\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun <T> Sequence<T>.takeWhile(predicate: (T) -> Boolean): Sequence<T> {\n    return TakeWhileSequence(this, predicate)\n}\n\n/**\n * Returns a sequence that yields elements of this sequence sorted according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n *\n * The operation is _intermediate_ and _stateful_.\n */\npublic fun <T : Comparable<T>> Sequence<T>.sorted(): Sequence<T> {\n    return object : Sequence<T> {\n        override fun iterator(): Iterator<T> {\n            val sortedList = this@sorted.toMutableList()\n            sortedList.sort()\n            return sortedList.iterator()\n        }\n    }\n}\n\n/**\n * Returns a sequence that yields elements of this sequence sorted according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n *\n * The operation is _intermediate_ and _stateful_.\n * \n * @sample samples.collections.Collections.Sorting.sortedBy\n */\npublic inline fun <T, R : Comparable<R>> Sequence<T>.sortedBy(crossinline selector: (T) -> R?): Sequence<T> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a sequence that yields elements of this sequence sorted descending according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n *\n * The operation is _intermediate_ and _stateful_.\n */\npublic inline fun <T, R : Comparable<R>> Sequence<T>.sortedByDescending(crossinline selector: (T) -> R?): Sequence<T> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a sequence that yields elements of this sequence sorted descending according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n *\n * The operation is _intermediate_ and _stateful_.\n */\npublic fun <T : Comparable<T>> Sequence<T>.sortedDescending(): Sequence<T> {\n    return sortedWith(reverseOrder())\n}\n\n/**\n * Returns a sequence that yields elements of this sequence sorted according to the specified [comparator].\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n *\n * The operation is _intermediate_ and _stateful_.\n */\npublic fun <T> Sequence<T>.sortedWith(comparator: Comparator<in T>): Sequence<T> {\n    return object : Sequence<T> {\n        override fun iterator(): Iterator<T> {\n            val sortedList = this@sortedWith.toMutableList()\n            sortedList.sortWith(comparator)\n            return sortedList.iterator()\n        }\n    }\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given sequence.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original sequence.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Transformations.associate\n */\npublic inline fun <T, K, V> Sequence<T>.associate(transform: (T) -> Pair<K, V>): Map<K, V> {\n    return associateTo(LinkedHashMap<K, V>(), transform)\n}\n\n/**\n * Returns a [Map] containing the elements from the given sequence indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original sequence.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Transformations.associateBy\n */\npublic inline fun <T, K> Sequence<T>.associateBy(keySelector: (T) -> K): Map<K, T> {\n    return associateByTo(LinkedHashMap<K, T>(), keySelector)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given sequence.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original sequence.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Transformations.associateByWithValueTransform\n */\npublic inline fun <T, K, V> Sequence<T>.associateBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, V> {\n    return associateByTo(LinkedHashMap<K, V>(), keySelector, valueTransform)\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given sequence\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Transformations.associateByTo\n */\npublic inline fun <T, K, M : MutableMap<in K, in T>> Sequence<T>.associateByTo(destination: M, keySelector: (T) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given sequence.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Transformations.associateByToWithValueTransform\n */\npublic inline fun <T, K, V, M : MutableMap<in K, in V>> Sequence<T>.associateByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given sequence.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Transformations.associateTo\n */\npublic inline fun <T, K, V, M : MutableMap<in K, in V>> Sequence<T>.associateTo(destination: M, transform: (T) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Returns a [Map] where keys are elements from the given sequence and values are\n * produced by the [valueSelector] function applied to each element.\n * \n * If any two elements are equal, the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original sequence.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Transformations.associateWith\n */\n@SinceKotlin(\"1.3\")\npublic inline fun <K, V> Sequence<K>.associateWith(valueSelector: (K) -> V): Map<K, V> {\n    val result = LinkedHashMap<K, V>()\n    return associateWithTo(result, valueSelector)\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs for each element of the given sequence,\n * where key is the element itself and value is provided by the [valueSelector] function applied to that key.\n * \n * If any two elements are equal, the last one overwrites the former value in the map.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Transformations.associateWithTo\n */\n@SinceKotlin(\"1.3\")\npublic inline fun <K, V, M : MutableMap<in K, in V>> Sequence<K>.associateWithTo(destination: M, valueSelector: (K) -> V): M {\n    for (element in this) {\n        destination.put(element, valueSelector(element))\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n *\n * The operation is _terminal_.\n */\npublic fun <T, C : MutableCollection<in T>> Sequence<T>.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Returns a new [HashSet] of all elements.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.toHashSet(): HashSet<T> {\n    return toCollection(HashSet<T>())\n}\n\n/**\n * Returns a [List] containing all elements.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.toList(): List<T> {\n    return this.toMutableList().optimizeReadOnlyList()\n}\n\n/**\n * Returns a new [MutableList] filled with all elements of this sequence.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.toMutableList(): MutableList<T> {\n    return toCollection(ArrayList<T>())\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original sequence.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.toSet(): Set<T> {\n    return toCollection(LinkedHashSet<T>()).optimizeReadOnlySet()\n}\n\n/**\n * Returns a single sequence of all elements from results of [transform] function being invoked on each element of original sequence.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIterable\")\npublic fun <T, R> Sequence<T>.flatMap(transform: (T) -> Iterable<R>): Sequence<R> {\n    return FlatteningSequence(this, transform, Iterable<R>::iterator)\n}\n\n/**\n * Returns a single sequence of all elements from results of [transform] function being invoked on each element of original sequence.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic fun <T, R> Sequence<T>.flatMap(transform: (T) -> Sequence<R>): Sequence<R> {\n    return FlatteningSequence(this, transform, Sequence<R>::iterator)\n}\n\n/**\n * Returns a single sequence of all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original sequence.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Transformations.flatMapIndexed\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterable\")\npublic fun <T, R> Sequence<T>.flatMapIndexed(transform: (index: Int, T) -> Iterable<R>): Sequence<R> {\n    return flatMapIndexed(this, transform, Iterable<R>::iterator)\n}\n\n/**\n * Returns a single sequence of all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original sequence.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Transformations.flatMapIndexed\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedSequence\")\npublic fun <T, R> Sequence<T>.flatMapIndexed(transform: (index: Int, T) -> Sequence<R>): Sequence<R> {\n    return flatMapIndexed(this, transform, Sequence<R>::iterator)\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original sequence, to the given [destination].\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterableTo\")\n@kotlin.internal.InlineOnly\npublic inline fun <T, R, C : MutableCollection<in R>> Sequence<T>.flatMapIndexedTo(destination: C, transform: (index: Int, T) -> Iterable<R>): C {\n    var index = 0\n    for (element in this) {\n        val list = transform(checkIndexOverflow(index++), element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original sequence, to the given [destination].\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedSequenceTo\")\n@kotlin.internal.InlineOnly\npublic inline fun <T, R, C : MutableCollection<in R>> Sequence<T>.flatMapIndexedTo(destination: C, transform: (index: Int, T) -> Sequence<R>): C {\n    var index = 0\n    for (element in this) {\n        val list = transform(checkIndexOverflow(index++), element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original sequence, to the given [destination].\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIterableTo\")\npublic inline fun <T, R, C : MutableCollection<in R>> Sequence<T>.flatMapTo(destination: C, transform: (T) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original sequence, to the given [destination].\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Sequence<T>.flatMapTo(destination: C, transform: (T) -> Sequence<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original sequence by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original sequence.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <T, K> Sequence<T>.groupBy(keySelector: (T) -> K): Map<K, List<T>> {\n    return groupByTo(LinkedHashMap<K, MutableList<T>>(), keySelector)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original sequence\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original sequence.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <T, K, V> Sequence<T>.groupBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups elements of the original sequence by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <T, K, M : MutableMap<in K, MutableList<T>>> Sequence<T>.groupByTo(destination: M, keySelector: (T) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<T>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original sequence\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <T, K, V, M : MutableMap<in K, MutableList<V>>> Sequence<T>.groupByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Creates a [Grouping] source from a sequence to be used later with one of group-and-fold operations\n * using the specified [keySelector] function to extract a key from each element.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Grouping.groupingByEachCount\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <T, K> Sequence<T>.groupingBy(crossinline keySelector: (T) -> K): Grouping<T, K> {\n    return object : Grouping<T, K> {\n        override fun sourceIterator(): Iterator<T> = this@groupingBy.iterator()\n        override fun keyOf(element: T): K = keySelector(element)\n    }\n}\n\n/**\n * Returns a sequence containing the results of applying the given [transform] function\n * to each element in the original sequence.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic fun <T, R> Sequence<T>.map(transform: (T) -> R): Sequence<R> {\n    return TransformingSequence(this, transform)\n}\n\n/**\n * Returns a sequence containing the results of applying the given [transform] function\n * to each element and its index in the original sequence.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic fun <T, R> Sequence<T>.mapIndexed(transform: (index: Int, T) -> R): Sequence<R> {\n    return TransformingIndexedSequence(this, transform)\n}\n\n/**\n * Returns a sequence containing only the non-null results of applying the given [transform] function\n * to each element and its index in the original sequence.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic fun <T, R : Any> Sequence<T>.mapIndexedNotNull(transform: (index: Int, T) -> R?): Sequence<R> {\n    return TransformingIndexedSequence(this, transform).filterNotNull()\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original sequence\n * and appends only the non-null results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, R : Any, C : MutableCollection<in R>> Sequence<T>.mapIndexedNotNullTo(destination: C, transform: (index: Int, T) -> R?): C {\n    forEachIndexed { index, element -> transform(index, element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original sequence\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Sequence<T>.mapIndexedTo(destination: C, transform: (index: Int, T) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(checkIndexOverflow(index++), item))\n    return destination\n}\n\n/**\n * Returns a sequence containing only the non-null results of applying the given [transform] function\n * to each element in the original sequence.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Transformations.mapNotNull\n */\npublic fun <T, R : Any> Sequence<T>.mapNotNull(transform: (T) -> R?): Sequence<R> {\n    return TransformingSequence(this, transform).filterNotNull()\n}\n\n/**\n * Applies the given [transform] function to each element in the original sequence\n * and appends only the non-null results to the given [destination].\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, R : Any, C : MutableCollection<in R>> Sequence<T>.mapNotNullTo(destination: C, transform: (T) -> R?): C {\n    forEach { element -> transform(element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original sequence\n * and appends the results to the given [destination].\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Sequence<T>.mapTo(destination: C, transform: (T) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Returns a sequence that wraps each element of the original sequence\n * into an [IndexedValue] containing the index of that element and the element itself.\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic fun <T> Sequence<T>.withIndex(): Sequence<IndexedValue<T>> {\n    return IndexingSequence(this)\n}\n\n/**\n * Returns a sequence containing only distinct elements from the given sequence.\n * \n * Among equal elements of the given sequence, only the first one will be present in the resulting sequence.\n * The elements in the resulting sequence are in the same order as they were in the source sequence.\n *\n * The operation is _intermediate_ and _stateful_.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun <T> Sequence<T>.distinct(): Sequence<T> {\n    return this.distinctBy { it }\n}\n\n/**\n * Returns a sequence containing only elements from the given sequence\n * having distinct keys returned by the given [selector] function.\n * \n * Among elements of the given sequence with equal keys, only the first one will be present in the resulting sequence.\n * The elements in the resulting sequence are in the same order as they were in the source sequence.\n *\n * The operation is _intermediate_ and _stateful_.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun <T, K> Sequence<T>.distinctBy(selector: (T) -> K): Sequence<T> {\n    return DistinctSequence(this, selector)\n}\n\n/**\n * Returns a new [MutableSet] containing all distinct elements from the given sequence.\n * \n * The returned set preserves the element iteration order of the original sequence.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.toMutableSet(): MutableSet<T> {\n    val set = LinkedHashSet<T>()\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun <T> Sequence<T>.all(predicate: (T) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if sequence has at least one element.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun <T> Sequence<T>.any(): Boolean {\n    return iterator().hasNext()\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun <T> Sequence<T>.any(predicate: (T) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns the number of elements in this sequence.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.count(): Int {\n    var count = 0\n    for (element in this) checkCountOverflow(++count)\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.count(predicate: (T) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) checkCountOverflow(++count)\n    return count\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns the specified [initial] value if the sequence is empty.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, R> Sequence<T>.fold(initial: R, operation: (acc: R, T) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original sequence.\n * \n * Returns the specified [initial] value if the sequence is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, R> Sequence<T>.foldIndexed(initial: R, operation: (index: Int, acc: R, T) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(checkIndexOverflow(index++), accumulator, element)\n    return accumulator\n}\n\n/**\n * Performs the given [action] on each element.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.forEach(action: (T) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.forEachIndexed(action: (index: Int, T) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(checkIndexOverflow(index++), item)\n}\n\n@Deprecated(\"Use maxOrNull instead.\", ReplaceWith(\"this.maxOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\n@SinceKotlin(\"1.1\")\npublic fun Sequence<Double>.max(): Double? {\n    return maxOrNull()\n}\n\n@Deprecated(\"Use maxOrNull instead.\", ReplaceWith(\"this.maxOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\n@SinceKotlin(\"1.1\")\npublic fun Sequence<Float>.max(): Float? {\n    return maxOrNull()\n}\n\n@Deprecated(\"Use maxOrNull instead.\", ReplaceWith(\"this.maxOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic fun <T : Comparable<T>> Sequence<T>.max(): T? {\n    return maxOrNull()\n}\n\n@Deprecated(\"Use maxByOrNull instead.\", ReplaceWith(\"this.maxByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic inline fun <T, R : Comparable<R>> Sequence<T>.maxBy(selector: (T) -> R): T? {\n    return maxByOrNull(selector)\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Aggregates.maxByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <T, R : Comparable<R>> Sequence<T>.maxByOrNull(selector: (T) -> R): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var maxElem = iterator.next()\n    if (!iterator.hasNext()) return maxElem\n    var maxValue = selector(maxElem)\n    do {\n        val e = iterator.next()\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    } while (iterator.hasNext())\n    return maxElem\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the sequence.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the sequence is empty.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Sequence<T>.maxOf(selector: (T) -> Double): Double {\n    val iterator = iterator()\n    if (!iterator.hasNext()) throw NoSuchElementException()\n    var maxValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the sequence.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the sequence is empty.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Sequence<T>.maxOf(selector: (T) -> Float): Float {\n    val iterator = iterator()\n    if (!iterator.hasNext()) throw NoSuchElementException()\n    var maxValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the sequence.\n * \n * @throws NoSuchElementException if the sequence is empty.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R : Comparable<R>> Sequence<T>.maxOf(selector: (T) -> R): R {\n    val iterator = iterator()\n    if (!iterator.hasNext()) throw NoSuchElementException()\n    var maxValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the sequence or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Sequence<T>.maxOfOrNull(selector: (T) -> Double): Double? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var maxValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the sequence or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Sequence<T>.maxOfOrNull(selector: (T) -> Float): Float? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var maxValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the sequence or `null` if there are no elements.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R : Comparable<R>> Sequence<T>.maxOfOrNull(selector: (T) -> R): R? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var maxValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the sequence.\n * \n * @throws NoSuchElementException if the sequence is empty.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> Sequence<T>.maxOfWith(comparator: Comparator<in R>, selector: (T) -> R): R {\n    val iterator = iterator()\n    if (!iterator.hasNext()) throw NoSuchElementException()\n    var maxValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the sequence or `null` if there are no elements.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> Sequence<T>.maxOfWithOrNull(comparator: Comparator<in R>, selector: (T) -> R): R? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var maxValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\npublic fun Sequence<Double>.maxOrNull(): Double? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        max = maxOf(max, e)\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\npublic fun Sequence<Float>.maxOrNull(): Float? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        max = maxOf(max, e)\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\npublic fun <T : Comparable<T>> Sequence<T>.maxOrNull(): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (max < e) max = e\n    }\n    return max\n}\n\n@Deprecated(\"Use maxWithOrNull instead.\", ReplaceWith(\"this.maxWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic fun <T> Sequence<T>.maxWith(comparator: Comparator<in T>): T? {\n    return maxWithOrNull(comparator)\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\npublic fun <T> Sequence<T>.maxWithOrNull(comparator: Comparator<in T>): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n@Deprecated(\"Use minOrNull instead.\", ReplaceWith(\"this.minOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\n@SinceKotlin(\"1.1\")\npublic fun Sequence<Double>.min(): Double? {\n    return minOrNull()\n}\n\n@Deprecated(\"Use minOrNull instead.\", ReplaceWith(\"this.minOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\n@SinceKotlin(\"1.1\")\npublic fun Sequence<Float>.min(): Float? {\n    return minOrNull()\n}\n\n@Deprecated(\"Use minOrNull instead.\", ReplaceWith(\"this.minOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic fun <T : Comparable<T>> Sequence<T>.min(): T? {\n    return minOrNull()\n}\n\n@Deprecated(\"Use minByOrNull instead.\", ReplaceWith(\"this.minByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic inline fun <T, R : Comparable<R>> Sequence<T>.minBy(selector: (T) -> R): T? {\n    return minByOrNull(selector)\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Aggregates.minByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <T, R : Comparable<R>> Sequence<T>.minByOrNull(selector: (T) -> R): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var minElem = iterator.next()\n    if (!iterator.hasNext()) return minElem\n    var minValue = selector(minElem)\n    do {\n        val e = iterator.next()\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    } while (iterator.hasNext())\n    return minElem\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the sequence.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the sequence is empty.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Sequence<T>.minOf(selector: (T) -> Double): Double {\n    val iterator = iterator()\n    if (!iterator.hasNext()) throw NoSuchElementException()\n    var minValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the sequence.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the sequence is empty.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Sequence<T>.minOf(selector: (T) -> Float): Float {\n    val iterator = iterator()\n    if (!iterator.hasNext()) throw NoSuchElementException()\n    var minValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the sequence.\n * \n * @throws NoSuchElementException if the sequence is empty.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R : Comparable<R>> Sequence<T>.minOf(selector: (T) -> R): R {\n    val iterator = iterator()\n    if (!iterator.hasNext()) throw NoSuchElementException()\n    var minValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the sequence or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Sequence<T>.minOfOrNull(selector: (T) -> Double): Double? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var minValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the sequence or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Sequence<T>.minOfOrNull(selector: (T) -> Float): Float? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var minValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the sequence or `null` if there are no elements.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R : Comparable<R>> Sequence<T>.minOfOrNull(selector: (T) -> R): R? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var minValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the sequence.\n * \n * @throws NoSuchElementException if the sequence is empty.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> Sequence<T>.minOfWith(comparator: Comparator<in R>, selector: (T) -> R): R {\n    val iterator = iterator()\n    if (!iterator.hasNext()) throw NoSuchElementException()\n    var minValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the sequence or `null` if there are no elements.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> Sequence<T>.minOfWithOrNull(comparator: Comparator<in R>, selector: (T) -> R): R? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var minValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\npublic fun Sequence<Double>.minOrNull(): Double? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        min = minOf(min, e)\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\npublic fun Sequence<Float>.minOrNull(): Float? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        min = minOf(min, e)\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\npublic fun <T : Comparable<T>> Sequence<T>.minOrNull(): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (min > e) min = e\n    }\n    return min\n}\n\n@Deprecated(\"Use minWithOrNull instead.\", ReplaceWith(\"this.minWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic fun <T> Sequence<T>.minWith(comparator: Comparator<in T>): T? {\n    return minWithOrNull(comparator)\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\npublic fun <T> Sequence<T>.minWithOrNull(comparator: Comparator<in T>): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns `true` if the sequence has no elements.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun <T> Sequence<T>.none(): Boolean {\n    return !iterator().hasNext()\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun <T> Sequence<T>.none(predicate: (T) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns a sequence which performs the given [action] on each element of the original sequence as they pass through it.\n *\n * The operation is _intermediate_ and _stateless_.\n */\n@SinceKotlin(\"1.1\")\npublic fun <T> Sequence<T>.onEach(action: (T) -> Unit): Sequence<T> {\n    return map {\n        action(it)\n        it\n    }\n}\n\n/**\n * Returns a sequence which performs the given [action] on each element of the original sequence as they pass through it.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n *\n * The operation is _intermediate_ and _stateless_.\n */\n@SinceKotlin(\"1.4\")\npublic fun <T> Sequence<T>.onEachIndexed(action: (index: Int, T) -> Unit): Sequence<T> {\n    return mapIndexed { index, element ->\n        action(index, element)\n        element\n    }\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Throws an exception if this sequence is empty. If the sequence can be empty in an expected way,\n * please use [reduceOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun <S, T : S> Sequence<T>.reduce(operation: (acc: S, T) -> S): S {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) throw UnsupportedOperationException(\"Empty sequence can't be reduced.\")\n    var accumulator: S = iterator.next()\n    while (iterator.hasNext()) {\n        accumulator = operation(accumulator, iterator.next())\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original sequence.\n * \n * Throws an exception if this sequence is empty. If the sequence can be empty in an expected way,\n * please use [reduceIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun <S, T : S> Sequence<T>.reduceIndexed(operation: (index: Int, acc: S, T) -> S): S {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) throw UnsupportedOperationException(\"Empty sequence can't be reduced.\")\n    var index = 1\n    var accumulator: S = iterator.next()\n    while (iterator.hasNext()) {\n        accumulator = operation(checkIndexOverflow(index++), accumulator, iterator.next())\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original sequence.\n * \n * Returns `null` if the sequence is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <S, T : S> Sequence<T>.reduceIndexedOrNull(operation: (index: Int, acc: S, T) -> S): S? {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) return null\n    var index = 1\n    var accumulator: S = iterator.next()\n    while (iterator.hasNext()) {\n        accumulator = operation(checkIndexOverflow(index++), accumulator, iterator.next())\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns `null` if the sequence is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun <S, T : S> Sequence<T>.reduceOrNull(operation: (acc: S, T) -> S): S? {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) return null\n    var accumulator: S = iterator.next()\n    while (iterator.hasNext()) {\n        accumulator = operation(accumulator, iterator.next())\n    }\n    return accumulator\n}\n\n/**\n * Returns a sequence containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting sequence.\n * The [initial] value should also be immutable (or should not be mutated)\n * as it may be passed to [operation] function later because of sequence's lazy nature.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\npublic fun <T, R> Sequence<T>.runningFold(initial: R, operation: (acc: R, T) -> R): Sequence<R> {\n    return sequence {\n        yield(initial)\n        var accumulator = initial\n        for (element in this@runningFold) {\n            accumulator = operation(accumulator, element)\n            yield(accumulator)\n        }\n    }\n}\n\n/**\n * Returns a sequence containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original sequence and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting sequence.\n * The [initial] value should also be immutable (or should not be mutated)\n * as it may be passed to [operation] function later because of sequence's lazy nature.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\npublic fun <T, R> Sequence<T>.runningFoldIndexed(initial: R, operation: (index: Int, acc: R, T) -> R): Sequence<R> {\n    return sequence {\n        yield(initial)\n        var index = 0\n        var accumulator = initial\n        for (element in this@runningFoldIndexed) {\n            accumulator = operation(checkIndexOverflow(index++), accumulator, element)\n            yield(accumulator)\n        }\n    }\n}\n\n/**\n * Returns a sequence containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this sequence.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting sequence.\n * \n * @param [operation] function that takes current accumulator value and the element, and calculates the next accumulator value.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun <S, T : S> Sequence<T>.runningReduce(operation: (acc: S, T) -> S): Sequence<S> {\n    return sequence {\n        val iterator = iterator()\n        if (iterator.hasNext()) {\n            var accumulator: S = iterator.next()\n            yield(accumulator)\n            while (iterator.hasNext()) {\n                accumulator = operation(accumulator, iterator.next())\n                yield(accumulator)\n            }\n        }\n    }\n}\n\n/**\n * Returns a sequence containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original sequence and current accumulator value that starts with the first element of this sequence.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting sequence.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\npublic fun <S, T : S> Sequence<T>.runningReduceIndexed(operation: (index: Int, acc: S, T) -> S): Sequence<S> {\n    return sequence {\n        val iterator = iterator()\n        if (iterator.hasNext()) {\n            var accumulator: S = iterator.next()\n            yield(accumulator)\n            var index = 1\n            while (iterator.hasNext()) {\n                accumulator = operation(checkIndexOverflow(index++), accumulator, iterator.next())\n                yield(accumulator)\n            }\n        }\n    }\n}\n\n/**\n * Returns a sequence containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting sequence.\n * The [initial] value should also be immutable (or should not be mutated)\n * as it may be passed to [operation] function later because of sequence's lazy nature.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun <T, R> Sequence<T>.scan(initial: R, operation: (acc: R, T) -> R): Sequence<R> {\n    return runningFold(initial, operation)\n}\n\n/**\n * Returns a sequence containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original sequence and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting sequence.\n * The [initial] value should also be immutable (or should not be mutated)\n * as it may be passed to [operation] function later because of sequence's lazy nature.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun <T, R> Sequence<T>.scanIndexed(initial: R, operation: (index: Int, acc: R, T) -> R): Sequence<R> {\n    return runningFoldIndexed(initial, operation)\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the sequence.\n *\n * The operation is _terminal_.\n */\n@Deprecated(\"Use sumOf instead.\", ReplaceWith(\"this.sumOf(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\npublic inline fun <T> Sequence<T>.sumBy(selector: (T) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the sequence.\n *\n * The operation is _terminal_.\n */\n@Deprecated(\"Use sumOf instead.\", ReplaceWith(\"this.sumOf(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\npublic inline fun <T> Sequence<T>.sumByDouble(selector: (T) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the sequence.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfDouble\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Sequence<T>.sumOf(selector: (T) -> Double): Double {\n    var sum: Double = 0.toDouble()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the sequence.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfInt\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Sequence<T>.sumOf(selector: (T) -> Int): Int {\n    var sum: Int = 0.toInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the sequence.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfLong\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Sequence<T>.sumOf(selector: (T) -> Long): Long {\n    var sum: Long = 0.toLong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the sequence.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.5\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfUInt\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun <T> Sequence<T>.sumOf(selector: (T) -> UInt): UInt {\n    var sum: UInt = 0.toUInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the sequence.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.5\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfULong\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun <T> Sequence<T>.sumOf(selector: (T) -> ULong): ULong {\n    var sum: ULong = 0.toULong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns an original collection containing all the non-`null` elements, throwing an [IllegalArgumentException] if there are any `null` elements.\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic fun <T : Any> Sequence<T?>.requireNoNulls(): Sequence<T> {\n    return map { it ?: throw IllegalArgumentException(\"null element found in $this.\") }\n}\n\n/**\n * Splits this sequence into a sequence of lists each not exceeding the given [size].\n * \n * The last list in the resulting sequence may have fewer elements than the given [size].\n * \n * @param size the number of elements to take in each list, must be positive and can be greater than the number of elements in this sequence.\n *\n * The operation is _intermediate_ and _stateful_.\n * \n * @sample samples.collections.Collections.Transformations.chunked\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> Sequence<T>.chunked(size: Int): Sequence<List<T>> {\n    return windowed(size, size, partialWindows = true)\n}\n\n/**\n * Splits this sequence into several lists each not exceeding the given [size]\n * and applies the given [transform] function to an each.\n * \n * @return sequence of results of the [transform] applied to an each list.\n * \n * Note that the list passed to the [transform] function is ephemeral and is valid only inside that function.\n * You should not store it or allow it to escape in some way, unless you made a snapshot of it.\n * The last list may have fewer elements than the given [size].\n * \n * @param size the number of elements to take in each list, must be positive and can be greater than the number of elements in this sequence.\n *\n * The operation is _intermediate_ and _stateful_.\n * \n * @sample samples.text.Strings.chunkedTransform\n */\n@SinceKotlin(\"1.2\")\npublic fun <T, R> Sequence<T>.chunked(size: Int, transform: (List<T>) -> R): Sequence<R> {\n    return windowed(size, size, partialWindows = true, transform = transform)\n}\n\n/**\n * Returns a sequence containing all elements of the original sequence without the first occurrence of the given [element].\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic operator fun <T> Sequence<T>.minus(element: T): Sequence<T> {\n    return object: Sequence<T> {\n        override fun iterator(): Iterator<T> {\n            var removed = false\n            return this@minus.filter { if (!removed && it == element) { removed = true; false } else true }.iterator()\n        }\n    }\n}\n\n/**\n * Returns a sequence containing all elements of original sequence except the elements contained in the given [elements] array.\n * \n * Note that the source sequence and the array being subtracted are iterated only when an `iterator` is requested from\n * the resulting sequence. Changing any of them between successive calls to `iterator` may affect the result.\n * \n * The [elements] array may be converted to a [HashSet] to speed up the operation, thus the elements are required to have\n * a correct and stable implementation of `hashCode()` that doesn't change between successive invocations.\n *\n * The operation is _intermediate_ and _stateful_.\n */\npublic operator fun <T> Sequence<T>.minus(elements: Array<out T>): Sequence<T> {\n    if (elements.isEmpty()) return this\n    return object: Sequence<T> {\n        override fun iterator(): Iterator<T> {\n            val other = elements.toHashSet()\n            return this@minus.filterNot { it in other }.iterator()\n        }\n    }\n}\n\n/**\n * Returns a sequence containing all elements of original sequence except the elements contained in the given [elements] collection.\n * \n * Note that the source sequence and the collection being subtracted are iterated only when an `iterator` is requested from\n * the resulting sequence. Changing any of them between successive calls to `iterator` may affect the result.\n * \n * The [elements] collection may be converted to a [HashSet] to speed up the operation, thus the elements are required to have\n * a correct and stable implementation of `hashCode()` that doesn't change between successive invocations.\n *\n * The operation is _intermediate_ and _stateful_.\n */\npublic operator fun <T> Sequence<T>.minus(elements: Iterable<T>): Sequence<T> {\n    return object: Sequence<T> {\n        override fun iterator(): Iterator<T> {\n            val other = elements.convertToSetForSetOperation()\n            if (other.isEmpty())\n                return this@minus.iterator()\n            else\n                return this@minus.filterNot { it in other }.iterator()\n        }\n    }\n}\n\n/**\n * Returns a sequence containing all elements of original sequence except the elements contained in the given [elements] sequence.\n * \n * Note that the source sequence and the sequence being subtracted are iterated only when an `iterator` is requested from\n * the resulting sequence. Changing any of them between successive calls to `iterator` may affect the result.\n * \n * The operation is _intermediate_ for this sequence and _terminal_ and _stateful_ for the [elements] sequence.\n * \n * The [elements] sequence may be converted to a [HashSet] to speed up the operation, thus the elements are required to have\n * a correct and stable implementation of `hashCode()` that doesn't change between successive invocations.\n */\npublic operator fun <T> Sequence<T>.minus(elements: Sequence<T>): Sequence<T> {\n    return object: Sequence<T> {\n        override fun iterator(): Iterator<T> {\n            val other = elements.toHashSet()\n            if (other.isEmpty())\n                return this@minus.iterator()\n            else\n                return this@minus.filterNot { it in other }.iterator()\n        }\n    }\n}\n\n/**\n * Returns a sequence containing all elements of the original sequence without the first occurrence of the given [element].\n *\n * The operation is _intermediate_ and _stateless_.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Sequence<T>.minusElement(element: T): Sequence<T> {\n    return minus(element)\n}\n\n/**\n * Splits the original sequence into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Sequences.Transformations.partition\n */\npublic inline fun <T> Sequence<T>.partition(predicate: (T) -> Boolean): Pair<List<T>, List<T>> {\n    val first = ArrayList<T>()\n    val second = ArrayList<T>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Returns a sequence containing all elements of the original sequence and then the given [element].\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic operator fun <T> Sequence<T>.plus(element: T): Sequence<T> {\n    return sequenceOf(this, sequenceOf(element)).flatten()\n}\n\n/**\n * Returns a sequence containing all elements of original sequence and then all elements of the given [elements] array.\n * \n * Note that the source sequence and the array being added are iterated only when an `iterator` is requested from\n * the resulting sequence. Changing any of them between successive calls to `iterator` may affect the result.\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic operator fun <T> Sequence<T>.plus(elements: Array<out T>): Sequence<T> {\n    return this.plus(elements.asList())\n}\n\n/**\n * Returns a sequence containing all elements of original sequence and then all elements of the given [elements] collection.\n * \n * Note that the source sequence and the collection being added are iterated only when an `iterator` is requested from\n * the resulting sequence. Changing any of them between successive calls to `iterator` may affect the result.\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic operator fun <T> Sequence<T>.plus(elements: Iterable<T>): Sequence<T> {\n    return sequenceOf(this, elements.asSequence()).flatten()\n}\n\n/**\n * Returns a sequence containing all elements of original sequence and then all elements of the given [elements] sequence.\n * \n * Note that the source sequence and the sequence being added are iterated only when an `iterator` is requested from\n * the resulting sequence. Changing any of them between successive calls to `iterator` may affect the result.\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic operator fun <T> Sequence<T>.plus(elements: Sequence<T>): Sequence<T> {\n    return sequenceOf(this, elements).flatten()\n}\n\n/**\n * Returns a sequence containing all elements of the original sequence and then the given [element].\n *\n * The operation is _intermediate_ and _stateless_.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Sequence<T>.plusElement(element: T): Sequence<T> {\n    return plus(element)\n}\n\n/**\n * Returns a sequence of snapshots of the window of the given [size]\n * sliding along this sequence with the given [step], where each\n * snapshot is a list.\n * \n * Several last lists may have fewer elements than the given [size].\n * \n * Both [size] and [step] must be positive and can be greater than the number of elements in this sequence.\n * @param size the number of elements to take in each window\n * @param step the number of elements to move the window forward by on an each step, by default 1\n * @param partialWindows controls whether or not to keep partial windows in the end if any,\n * by default `false` which means partial windows won't be preserved\n * \n * @sample samples.collections.Sequences.Transformations.takeWindows\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> Sequence<T>.windowed(size: Int, step: Int = 1, partialWindows: Boolean = false): Sequence<List<T>> {\n    return windowedSequence(size, step, partialWindows, reuseBuffer = false)\n}\n\n/**\n * Returns a sequence of results of applying the given [transform] function to\n * an each list representing a view over the window of the given [size]\n * sliding along this sequence with the given [step].\n * \n * Note that the list passed to the [transform] function is ephemeral and is valid only inside that function.\n * You should not store it or allow it to escape in some way, unless you made a snapshot of it.\n * Several last lists may have fewer elements than the given [size].\n * \n * Both [size] and [step] must be positive and can be greater than the number of elements in this sequence.\n * @param size the number of elements to take in each window\n * @param step the number of elements to move the window forward by on an each step, by default 1\n * @param partialWindows controls whether or not to keep partial windows in the end if any,\n * by default `false` which means partial windows won't be preserved\n * \n * @sample samples.collections.Sequences.Transformations.averageWindows\n */\n@SinceKotlin(\"1.2\")\npublic fun <T, R> Sequence<T>.windowed(size: Int, step: Int = 1, partialWindows: Boolean = false, transform: (List<T>) -> R): Sequence<R> {\n    return windowedSequence(size, step, partialWindows, reuseBuffer = true).map(transform)\n}\n\n/**\n * Returns a sequence of values built from the elements of `this` sequence and the [other] sequence with the same index.\n * The resulting sequence ends as soon as the shortest input sequence ends.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Sequences.Transformations.zip\n */\npublic infix fun <T, R> Sequence<T>.zip(other: Sequence<R>): Sequence<Pair<T, R>> {\n    return MergingSequence(this, other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a sequence of values built from the elements of `this` sequence and the [other] sequence with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The resulting sequence ends as soon as the shortest input sequence ends.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Sequences.Transformations.zipWithTransform\n */\npublic fun <T, R, V> Sequence<T>.zip(other: Sequence<R>, transform: (a: T, b: R) -> V): Sequence<V> {\n    return MergingSequence(this, other, transform)\n}\n\n/**\n * Returns a sequence of pairs of each two adjacent elements in this sequence.\n * \n * The returned sequence is empty if this sequence contains less than two elements.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Transformations.zipWithNext\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> Sequence<T>.zipWithNext(): Sequence<Pair<T, T>> {\n    return zipWithNext { a, b -> a to b }\n}\n\n/**\n * Returns a sequence containing the results of applying the given [transform] function\n * to an each pair of two adjacent elements in this sequence.\n * \n * The returned sequence is empty if this sequence contains less than two elements.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Transformations.zipWithNextToFindDeltas\n */\n@SinceKotlin(\"1.2\")\npublic fun <T, R> Sequence<T>.zipWithNext(transform: (a: T, b: T) -> R): Sequence<R> {\n    return sequence result@ {\n        val iterator = iterator()\n        if (!iterator.hasNext()) return@result\n        var current = iterator.next()\n        while (iterator.hasNext()) {\n            val next = iterator.next()\n            yield(transform(current, next))\n            current = next\n        }\n    }\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <T, A : Appendable> Sequence<T>.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            buffer.appendElement(element, transform)\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun <T> Sequence<T>.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original sequence returning its elements when being iterated.\n */\npublic fun <T> Sequence<T>.asIterable(): Iterable<T> {\n    return Iterable { this.iterator() }\n}\n\n/**\n * Returns this sequence as a [Sequence].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Sequence<T>.asSequence(): Sequence<T> {\n    return this\n}\n\n/**\n * Returns an average value of elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"averageOfByte\")\npublic fun Sequence<Byte>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"averageOfShort\")\npublic fun Sequence<Short>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"averageOfInt\")\npublic fun Sequence<Int>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"averageOfLong\")\npublic fun Sequence<Long>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"averageOfFloat\")\npublic fun Sequence<Float>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"averageOfDouble\")\npublic fun Sequence<Double>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns the sum of all elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"sumOfByte\")\npublic fun Sequence<Byte>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"sumOfShort\")\npublic fun Sequence<Short>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"sumOfInt\")\npublic fun Sequence<Int>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"sumOfLong\")\npublic fun Sequence<Long>.sum(): Long {\n    var sum: Long = 0L\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"sumOfFloat\")\npublic fun Sequence<Float>.sum(): Float {\n    var sum: Float = 0.0f\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"sumOfDouble\")\npublic fun Sequence<Double>.sum(): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n","/*\n * Copyright 2010-2021 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"SetsKt\")\n\npackage kotlin.collections\n\n//\n// NOTE: THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.random.*\nimport kotlin.ranges.contains\nimport kotlin.ranges.reversed\n\n/**\n * Returns a set containing all elements of the original set except the given [element].\n * \n * The returned set preserves the element iteration order of the original set.\n */\npublic operator fun <T> Set<T>.minus(element: T): Set<T> {\n    val result = LinkedHashSet<T>(mapCapacity(size))\n    var removed = false\n    return this.filterTo(result) { if (!removed && it == element) { removed = true; false } else true }\n}\n\n/**\n * Returns a set containing all elements of the original set except the elements contained in the given [elements] array.\n * \n * The returned set preserves the element iteration order of the original set.\n * \n * The [elements] array may be converted to a [HashSet] to speed up the operation, thus the elements are required to have\n * a correct and stable implementation of `hashCode()` that doesn't change between successive invocations.\n */\npublic operator fun <T> Set<T>.minus(elements: Array<out T>): Set<T> {\n    val result = LinkedHashSet<T>(this)\n    result.removeAll(elements)\n    return result\n}\n\n/**\n * Returns a set containing all elements of the original set except the elements contained in the given [elements] collection.\n * \n * The returned set preserves the element iteration order of the original set.\n * \n * The [elements] collection may be converted to a [HashSet] to speed up the operation, thus the elements are required to have\n * a correct and stable implementation of `hashCode()` that doesn't change between successive invocations.\n */\npublic operator fun <T> Set<T>.minus(elements: Iterable<T>): Set<T> {\n    val other = elements.convertToSetForSetOperationWith(this)\n    if (other.isEmpty())\n        return this.toSet()\n    if (other is Set)\n        return this.filterNotTo(LinkedHashSet<T>()) { it in other }\n    val result = LinkedHashSet<T>(this)\n    result.removeAll(other)\n    return result\n}\n\n/**\n * Returns a set containing all elements of the original set except the elements contained in the given [elements] sequence.\n * \n * The returned set preserves the element iteration order of the original set.\n * \n * The [elements] sequence may be converted to a [HashSet] to speed up the operation, thus the elements are required to have\n * a correct and stable implementation of `hashCode()` that doesn't change between successive invocations.\n */\npublic operator fun <T> Set<T>.minus(elements: Sequence<T>): Set<T> {\n    val result = LinkedHashSet<T>(this)\n    result.removeAll(elements)\n    return result\n}\n\n/**\n * Returns a set containing all elements of the original set except the given [element].\n * \n * The returned set preserves the element iteration order of the original set.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Set<T>.minusElement(element: T): Set<T> {\n    return minus(element)\n}\n\n/**\n * Returns a set containing all elements of the original set and then the given [element] if it isn't already in this set.\n * \n * The returned set preserves the element iteration order of the original set.\n */\npublic operator fun <T> Set<T>.plus(element: T): Set<T> {\n    val result = LinkedHashSet<T>(mapCapacity(size + 1))\n    result.addAll(this)\n    result.add(element)\n    return result\n}\n\n/**\n * Returns a set containing all elements of the original set and the given [elements] array,\n * which aren't already in this set.\n * \n * The returned set preserves the element iteration order of the original set.\n */\npublic operator fun <T> Set<T>.plus(elements: Array<out T>): Set<T> {\n    val result = LinkedHashSet<T>(mapCapacity(this.size + elements.size))\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a set containing all elements of the original set and the given [elements] collection,\n * which aren't already in this set.\n * The returned set preserves the element iteration order of the original set.\n */\npublic operator fun <T> Set<T>.plus(elements: Iterable<T>): Set<T> {\n    val result = LinkedHashSet<T>(mapCapacity(elements.collectionSizeOrNull()?.let { this.size + it } ?: this.size * 2))\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a set containing all elements of the original set and the given [elements] sequence,\n * which aren't already in this set.\n * \n * The returned set preserves the element iteration order of the original set.\n */\npublic operator fun <T> Set<T>.plus(elements: Sequence<T>): Set<T> {\n    val result = LinkedHashSet<T>(mapCapacity(this.size * 2))\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a set containing all elements of the original set and then the given [element] if it isn't already in this set.\n * \n * The returned set preserves the element iteration order of the original set.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Set<T>.plusElement(element: T): Set<T> {\n    return plus(element)\n}\n\n","/*\n * Copyright 2010-2021 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"StringsKt\")\n\npackage kotlin.text\n\n//\n// NOTE: THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.random.*\n\n/**\n * Returns a character at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this char sequence.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun CharSequence.elementAt(index: Int): Char\n\n/**\n * Returns a character at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this char sequence.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.elementAtOrElse(index: Int, defaultValue: (Int) -> Char): Char {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns a character at the given [index] or `null` if the [index] is out of bounds of this char sequence.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.elementAtOrNull(index: Int): Char? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns the first character matching the given [predicate], or `null` if no such character was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.find(predicate: (Char) -> Boolean): Char? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the last character matching the given [predicate], or `null` if no such character was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.findLast(predicate: (Char) -> Boolean): Char? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns first character.\n * @throws [NoSuchElementException] if the char sequence is empty.\n */\npublic fun CharSequence.first(): Char {\n    if (isEmpty())\n        throw NoSuchElementException(\"Char sequence is empty.\")\n    return this[0]\n}\n\n/**\n * Returns the first character matching the given [predicate].\n * @throws [NoSuchElementException] if no such character is found.\n */\npublic inline fun CharSequence.first(predicate: (Char) -> Boolean): Char {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Char sequence contains no character matching the predicate.\")\n}\n\n/**\n * Returns the first non-null value produced by [transform] function being applied to characters of this char sequence in iteration order,\n * or throws [NoSuchElementException] if no non-null value was produced.\n * \n * @sample samples.collections.Collections.Transformations.firstNotNullOf\n */\n@SinceKotlin(\"1.5\")\n@kotlin.internal.InlineOnly\npublic inline fun <R : Any> CharSequence.firstNotNullOf(transform: (Char) -> R?): R {\n    return firstNotNullOfOrNull(transform) ?: throw NoSuchElementException(\"No element of the char sequence was transformed to a non-null value.\")\n}\n\n/**\n * Returns the first non-null value produced by [transform] function being applied to characters of this char sequence in iteration order,\n * or `null` if no non-null value was produced.\n * \n * @sample samples.collections.Collections.Transformations.firstNotNullOf\n */\n@SinceKotlin(\"1.5\")\n@kotlin.internal.InlineOnly\npublic inline fun <R : Any> CharSequence.firstNotNullOfOrNull(transform: (Char) -> R?): R? {\n    for (element in this) {\n        val result = transform(element)\n        if (result != null) {\n            return result\n        }\n    }\n    return null\n}\n\n/**\n * Returns the first character, or `null` if the char sequence is empty.\n */\npublic fun CharSequence.firstOrNull(): Char? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first character matching the given [predicate], or `null` if character was not found.\n */\npublic inline fun CharSequence.firstOrNull(predicate: (Char) -> Boolean): Char? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns a character at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this char sequence.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.getOrElse(index: Int, defaultValue: (Int) -> Char): Char {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns a character at the given [index] or `null` if the [index] is out of bounds of this char sequence.\n * \n * @sample samples.collections.Collections.Elements.getOrNull\n */\npublic fun CharSequence.getOrNull(index: Int): Char? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns index of the first character matching the given [predicate], or -1 if the char sequence does not contain such character.\n */\npublic inline fun CharSequence.indexOfFirst(predicate: (Char) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last character matching the given [predicate], or -1 if the char sequence does not contain such character.\n */\npublic inline fun CharSequence.indexOfLast(predicate: (Char) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns the last character.\n * \n * @throws NoSuchElementException if the char sequence is empty.\n * \n * @sample samples.text.Strings.last\n */\npublic fun CharSequence.last(): Char {\n    if (isEmpty())\n        throw NoSuchElementException(\"Char sequence is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last character matching the given [predicate].\n * \n * @throws NoSuchElementException if no such character is found.\n * \n * @sample samples.text.Strings.last\n */\npublic inline fun CharSequence.last(predicate: (Char) -> Boolean): Char {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Char sequence contains no character matching the predicate.\")\n}\n\n/**\n * Returns the last character, or `null` if the char sequence is empty.\n * \n * @sample samples.text.Strings.last\n */\npublic fun CharSequence.lastOrNull(): Char? {\n    return if (isEmpty()) null else this[length - 1]\n}\n\n/**\n * Returns the last character matching the given [predicate], or `null` if no such character was found.\n * \n * @sample samples.text.Strings.last\n */\npublic inline fun CharSequence.lastOrNull(predicate: (Char) -> Boolean): Char? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns a random character from this char sequence.\n * \n * @throws NoSuchElementException if this char sequence is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.random(): Char {\n    return random(Random)\n}\n\n/**\n * Returns a random character from this char sequence using the specified source of randomness.\n * \n * @throws NoSuchElementException if this char sequence is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun CharSequence.random(random: Random): Char {\n    if (isEmpty())\n        throw NoSuchElementException(\"Char sequence is empty.\")\n    return get(random.nextInt(length))\n}\n\n/**\n * Returns a random character from this char sequence, or `null` if this char sequence is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.randomOrNull(): Char? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random character from this char sequence using the specified source of randomness, or `null` if this char sequence is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun CharSequence.randomOrNull(random: Random): Char? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(length))\n}\n\n/**\n * Returns the single character, or throws an exception if the char sequence is empty or has more than one character.\n */\npublic fun CharSequence.single(): Char {\n    return when (length) {\n        0 -> throw NoSuchElementException(\"Char sequence is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Char sequence has more than one element.\")\n    }\n}\n\n/**\n * Returns the single character matching the given [predicate], or throws exception if there is no or more than one matching character.\n */\npublic inline fun CharSequence.single(predicate: (Char) -> Boolean): Char {\n    var single: Char? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Char sequence contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Char sequence contains no character matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Char\n}\n\n/**\n * Returns single character, or `null` if the char sequence is empty or has more than one character.\n */\npublic fun CharSequence.singleOrNull(): Char? {\n    return if (length == 1) this[0] else null\n}\n\n/**\n * Returns the single character matching the given [predicate], or `null` if character was not found or more than one character was found.\n */\npublic inline fun CharSequence.singleOrNull(predicate: (Char) -> Boolean): Char? {\n    var single: Char? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns a subsequence of this char sequence with the first [n] characters removed.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.text.Strings.drop\n */\npublic fun CharSequence.drop(n: Int): CharSequence {\n    require(n >= 0) { \"Requested character count $n is less than zero.\" }\n    return subSequence(n.coerceAtMost(length), length)\n}\n\n/**\n * Returns a string with the first [n] characters removed.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.text.Strings.drop\n */\npublic fun String.drop(n: Int): String {\n    require(n >= 0) { \"Requested character count $n is less than zero.\" }\n    return substring(n.coerceAtMost(length))\n}\n\n/**\n * Returns a subsequence of this char sequence with the last [n] characters removed.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.text.Strings.drop\n */\npublic fun CharSequence.dropLast(n: Int): CharSequence {\n    require(n >= 0) { \"Requested character count $n is less than zero.\" }\n    return take((length - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a string with the last [n] characters removed.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.text.Strings.drop\n */\npublic fun String.dropLast(n: Int): String {\n    require(n >= 0) { \"Requested character count $n is less than zero.\" }\n    return take((length - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a subsequence of this char sequence containing all characters except last characters that satisfy the given [predicate].\n * \n * @sample samples.text.Strings.drop\n */\npublic inline fun CharSequence.dropLastWhile(predicate: (Char) -> Boolean): CharSequence {\n    for (index in lastIndex downTo 0)\n        if (!predicate(this[index]))\n            return subSequence(0, index + 1)\n    return \"\"\n}\n\n/**\n * Returns a string containing all characters except last characters that satisfy the given [predicate].\n * \n * @sample samples.text.Strings.drop\n */\npublic inline fun String.dropLastWhile(predicate: (Char) -> Boolean): String {\n    for (index in lastIndex downTo 0)\n        if (!predicate(this[index]))\n            return substring(0, index + 1)\n    return \"\"\n}\n\n/**\n * Returns a subsequence of this char sequence containing all characters except first characters that satisfy the given [predicate].\n * \n * @sample samples.text.Strings.drop\n */\npublic inline fun CharSequence.dropWhile(predicate: (Char) -> Boolean): CharSequence {\n    for (index in this.indices)\n        if (!predicate(this[index]))\n            return subSequence(index, length)\n    return \"\"\n}\n\n/**\n * Returns a string containing all characters except first characters that satisfy the given [predicate].\n * \n * @sample samples.text.Strings.drop\n */\npublic inline fun String.dropWhile(predicate: (Char) -> Boolean): String {\n    for (index in this.indices)\n        if (!predicate(this[index]))\n            return substring(index)\n    return \"\"\n}\n\n/**\n * Returns a char sequence containing only those characters from the original char sequence that match the given [predicate].\n * \n * @sample samples.text.Strings.filter\n */\npublic inline fun CharSequence.filter(predicate: (Char) -> Boolean): CharSequence {\n    return filterTo(StringBuilder(), predicate)\n}\n\n/**\n * Returns a string containing only those characters from the original string that match the given [predicate].\n * \n * @sample samples.text.Strings.filter\n */\npublic inline fun String.filter(predicate: (Char) -> Boolean): String {\n    return filterTo(StringBuilder(), predicate).toString()\n}\n\n/**\n * Returns a char sequence containing only those characters from the original char sequence that match the given [predicate].\n * @param [predicate] function that takes the index of a character and the character itself\n * and returns the result of predicate evaluation on the character.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexed\n */\npublic inline fun CharSequence.filterIndexed(predicate: (index: Int, Char) -> Boolean): CharSequence {\n    return filterIndexedTo(StringBuilder(), predicate)\n}\n\n/**\n * Returns a string containing only those characters from the original string that match the given [predicate].\n * @param [predicate] function that takes the index of a character and the character itself\n * and returns the result of predicate evaluation on the character.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexed\n */\npublic inline fun String.filterIndexed(predicate: (index: Int, Char) -> Boolean): String {\n    return filterIndexedTo(StringBuilder(), predicate).toString()\n}\n\n/**\n * Appends all characters matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of a character and the character itself\n * and returns the result of predicate evaluation on the character.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexedTo\n */\npublic inline fun <C : Appendable> CharSequence.filterIndexedTo(destination: C, predicate: (index: Int, Char) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.append(element)\n    }\n    return destination\n}\n\n/**\n * Returns a char sequence containing only those characters from the original char sequence that do not match the given [predicate].\n * \n * @sample samples.text.Strings.filterNot\n */\npublic inline fun CharSequence.filterNot(predicate: (Char) -> Boolean): CharSequence {\n    return filterNotTo(StringBuilder(), predicate)\n}\n\n/**\n * Returns a string containing only those characters from the original string that do not match the given [predicate].\n * \n * @sample samples.text.Strings.filterNot\n */\npublic inline fun String.filterNot(predicate: (Char) -> Boolean): String {\n    return filterNotTo(StringBuilder(), predicate).toString()\n}\n\n/**\n * Appends all characters not matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <C : Appendable> CharSequence.filterNotTo(destination: C, predicate: (Char) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.append(element)\n    return destination\n}\n\n/**\n * Appends all characters matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <C : Appendable> CharSequence.filterTo(destination: C, predicate: (Char) -> Boolean): C {\n    for (index in 0 until length) {\n        val element = get(index)\n        if (predicate(element)) destination.append(element)\n    }\n    return destination\n}\n\n/**\n * Returns a char sequence containing characters of the original char sequence at the specified range of [indices].\n */\npublic fun CharSequence.slice(indices: IntRange): CharSequence {\n    if (indices.isEmpty()) return \"\"\n    return subSequence(indices)\n}\n\n/**\n * Returns a string containing characters of the original string at the specified range of [indices].\n */\npublic fun String.slice(indices: IntRange): String {\n    if (indices.isEmpty()) return \"\"\n    return substring(indices)\n}\n\n/**\n * Returns a char sequence containing characters of the original char sequence at specified [indices].\n */\npublic fun CharSequence.slice(indices: Iterable<Int>): CharSequence {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return \"\"\n    val result = StringBuilder(size)\n    for (i in indices) {\n        result.append(get(i))\n    }\n    return result\n}\n\n/**\n * Returns a string containing characters of the original string at specified [indices].\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.slice(indices: Iterable<Int>): String {\n    return (this as CharSequence).slice(indices).toString()\n}\n\n/**\n * Returns a subsequence of this char sequence containing the first [n] characters from this char sequence, or the entire char sequence if this char sequence is shorter.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.text.Strings.take\n */\npublic fun CharSequence.take(n: Int): CharSequence {\n    require(n >= 0) { \"Requested character count $n is less than zero.\" }\n    return subSequence(0, n.coerceAtMost(length))\n}\n\n/**\n * Returns a string containing the first [n] characters from this string, or the entire string if this string is shorter.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.text.Strings.take\n */\npublic fun String.take(n: Int): String {\n    require(n >= 0) { \"Requested character count $n is less than zero.\" }\n    return substring(0, n.coerceAtMost(length))\n}\n\n/**\n * Returns a subsequence of this char sequence containing the last [n] characters from this char sequence, or the entire char sequence if this char sequence is shorter.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.text.Strings.take\n */\npublic fun CharSequence.takeLast(n: Int): CharSequence {\n    require(n >= 0) { \"Requested character count $n is less than zero.\" }\n    val length = length\n    return subSequence(length - n.coerceAtMost(length), length)\n}\n\n/**\n * Returns a string containing the last [n] characters from this string, or the entire string if this string is shorter.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.text.Strings.take\n */\npublic fun String.takeLast(n: Int): String {\n    require(n >= 0) { \"Requested character count $n is less than zero.\" }\n    val length = length\n    return substring(length - n.coerceAtMost(length))\n}\n\n/**\n * Returns a subsequence of this char sequence containing last characters that satisfy the given [predicate].\n * \n * @sample samples.text.Strings.take\n */\npublic inline fun CharSequence.takeLastWhile(predicate: (Char) -> Boolean): CharSequence {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return subSequence(index + 1, length)\n        }\n    }\n    return subSequence(0, length)\n}\n\n/**\n * Returns a string containing last characters that satisfy the given [predicate].\n * \n * @sample samples.text.Strings.take\n */\npublic inline fun String.takeLastWhile(predicate: (Char) -> Boolean): String {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return substring(index + 1)\n        }\n    }\n    return this\n}\n\n/**\n * Returns a subsequence of this char sequence containing the first characters that satisfy the given [predicate].\n * \n * @sample samples.text.Strings.take\n */\npublic inline fun CharSequence.takeWhile(predicate: (Char) -> Boolean): CharSequence {\n    for (index in 0 until length)\n        if (!predicate(get(index))) {\n            return subSequence(0, index)\n        }\n    return subSequence(0, length)\n}\n\n/**\n * Returns a string containing the first characters that satisfy the given [predicate].\n * \n * @sample samples.text.Strings.take\n */\npublic inline fun String.takeWhile(predicate: (Char) -> Boolean): String {\n    for (index in 0 until length)\n        if (!predicate(get(index))) {\n            return substring(0, index)\n        }\n    return this\n}\n\n/**\n * Returns a char sequence with characters in reversed order.\n */\npublic fun CharSequence.reversed(): CharSequence {\n    return StringBuilder(this).reverse()\n}\n\n/**\n * Returns a string with characters in reversed order.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.reversed(): String {\n    return (this as CharSequence).reversed().toString()\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to characters of the given char sequence.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original char sequence.\n * \n * @sample samples.text.Strings.associate\n */\npublic inline fun <K, V> CharSequence.associate(transform: (Char) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(length).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing the characters from the given char sequence indexed by the key\n * returned from [keySelector] function applied to each character.\n * \n * If any two characters would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original char sequence.\n * \n * @sample samples.text.Strings.associateBy\n */\npublic inline fun <K> CharSequence.associateBy(keySelector: (Char) -> K): Map<K, Char> {\n    val capacity = mapCapacity(length).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Char>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to characters of the given char sequence.\n * \n * If any two characters would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original char sequence.\n * \n * @sample samples.text.Strings.associateByWithValueTransform\n */\npublic inline fun <K, V> CharSequence.associateBy(keySelector: (Char) -> K, valueTransform: (Char) -> V): Map<K, V> {\n    val capacity = mapCapacity(length).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each character of the given char sequence\n * and value is the character itself.\n * \n * If any two characters would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.text.Strings.associateByTo\n */\npublic inline fun <K, M : MutableMap<in K, in Char>> CharSequence.associateByTo(destination: M, keySelector: (Char) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to characters of the given char sequence.\n * \n * If any two characters would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.text.Strings.associateByToWithValueTransform\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> CharSequence.associateByTo(destination: M, keySelector: (Char) -> K, valueTransform: (Char) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each character of the given char sequence.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.text.Strings.associateTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> CharSequence.associateTo(destination: M, transform: (Char) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Returns a [Map] where keys are characters from the given char sequence and values are\n * produced by the [valueSelector] function applied to each character.\n * \n * If any two characters are equal, the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original char sequence.\n * \n * @sample samples.text.Strings.associateWith\n */\n@SinceKotlin(\"1.3\")\npublic inline fun <V> CharSequence.associateWith(valueSelector: (Char) -> V): Map<Char, V> {\n    val result = LinkedHashMap<Char, V>(mapCapacity(length.coerceAtMost(128)).coerceAtLeast(16))\n    return associateWithTo(result, valueSelector)\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs for each character of the given char sequence,\n * where key is the character itself and value is provided by the [valueSelector] function applied to that key.\n * \n * If any two characters are equal, the last one overwrites the former value in the map.\n * \n * @sample samples.text.Strings.associateWithTo\n */\n@SinceKotlin(\"1.3\")\npublic inline fun <V, M : MutableMap<in Char, in V>> CharSequence.associateWithTo(destination: M, valueSelector: (Char) -> V): M {\n    for (element in this) {\n        destination.put(element, valueSelector(element))\n    }\n    return destination\n}\n\n/**\n * Appends all characters to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Char>> CharSequence.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Returns a new [HashSet] of all characters.\n */\npublic fun CharSequence.toHashSet(): HashSet<Char> {\n    return toCollection(HashSet<Char>(mapCapacity(length.coerceAtMost(128))))\n}\n\n/**\n * Returns a [List] containing all characters.\n */\npublic fun CharSequence.toList(): List<Char> {\n    return when (length) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a new [MutableList] filled with all characters of this char sequence.\n */\npublic fun CharSequence.toMutableList(): MutableList<Char> {\n    return toCollection(ArrayList<Char>(length))\n}\n\n/**\n * Returns a [Set] of all characters.\n * \n * The returned set preserves the element iteration order of the original char sequence.\n */\npublic fun CharSequence.toSet(): Set<Char> {\n    return when (length) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Char>(mapCapacity(length.coerceAtMost(128))))\n    }\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each character of original char sequence.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <R> CharSequence.flatMap(transform: (Char) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each character\n * and its index in the original char sequence.\n * \n * @sample samples.collections.Collections.Transformations.flatMapIndexed\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterable\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> CharSequence.flatMapIndexed(transform: (index: Int, Char) -> Iterable<R>): List<R> {\n    return flatMapIndexedTo(ArrayList<R>(), transform)\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each character\n * and its index in the original char sequence, to the given [destination].\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterableTo\")\n@kotlin.internal.InlineOnly\npublic inline fun <R, C : MutableCollection<in R>> CharSequence.flatMapIndexedTo(destination: C, transform: (index: Int, Char) -> Iterable<R>): C {\n    var index = 0\n    for (element in this) {\n        val list = transform(index++, element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each character of original char sequence, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> CharSequence.flatMapTo(destination: C, transform: (Char) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Groups characters of the original char sequence by the key returned by the given [keySelector] function\n * applied to each character and returns a map where each group key is associated with a list of corresponding characters.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original char sequence.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> CharSequence.groupBy(keySelector: (Char) -> K): Map<K, List<Char>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Char>>(), keySelector)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each character of the original char sequence\n * by the key returned by the given [keySelector] function applied to the character\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original char sequence.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> CharSequence.groupBy(keySelector: (Char) -> K, valueTransform: (Char) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups characters of the original char sequence by the key returned by the given [keySelector] function\n * applied to each character and puts to the [destination] map each group key associated with a list of corresponding characters.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Char>>> CharSequence.groupByTo(destination: M, keySelector: (Char) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Char>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each character of the original char sequence\n * by the key returned by the given [keySelector] function applied to the character\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> CharSequence.groupByTo(destination: M, keySelector: (Char) -> K, valueTransform: (Char) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Creates a [Grouping] source from a char sequence to be used later with one of group-and-fold operations\n * using the specified [keySelector] function to extract a key from each character.\n * \n * @sample samples.collections.Grouping.groupingByEachCount\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <K> CharSequence.groupingBy(crossinline keySelector: (Char) -> K): Grouping<Char, K> {\n    return object : Grouping<Char, K> {\n        override fun sourceIterator(): Iterator<Char> = this@groupingBy.iterator()\n        override fun keyOf(element: Char): K = keySelector(element)\n    }\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each character in the original char sequence.\n * \n * @sample samples.text.Strings.map\n */\npublic inline fun <R> CharSequence.map(transform: (Char) -> R): List<R> {\n    return mapTo(ArrayList<R>(length), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each character and its index in the original char sequence.\n * @param [transform] function that takes the index of a character and the character itself\n * and returns the result of the transform applied to the character.\n */\npublic inline fun <R> CharSequence.mapIndexed(transform: (index: Int, Char) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(length), transform)\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each character and its index in the original char sequence.\n * @param [transform] function that takes the index of a character and the character itself\n * and returns the result of the transform applied to the character.\n */\npublic inline fun <R : Any> CharSequence.mapIndexedNotNull(transform: (index: Int, Char) -> R?): List<R> {\n    return mapIndexedNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each character and its index in the original char sequence\n * and appends only the non-null results to the given [destination].\n * @param [transform] function that takes the index of a character and the character itself\n * and returns the result of the transform applied to the character.\n */\npublic inline fun <R : Any, C : MutableCollection<in R>> CharSequence.mapIndexedNotNullTo(destination: C, transform: (index: Int, Char) -> R?): C {\n    forEachIndexed { index, element -> transform(index, element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each character and its index in the original char sequence\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of a character and the character itself\n * and returns the result of the transform applied to the character.\n */\npublic inline fun <R, C : MutableCollection<in R>> CharSequence.mapIndexedTo(destination: C, transform: (index: Int, Char) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each character in the original char sequence.\n * \n * @sample samples.collections.Collections.Transformations.mapNotNull\n */\npublic inline fun <R : Any> CharSequence.mapNotNull(transform: (Char) -> R?): List<R> {\n    return mapNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each character in the original char sequence\n * and appends only the non-null results to the given [destination].\n */\npublic inline fun <R : Any, C : MutableCollection<in R>> CharSequence.mapNotNullTo(destination: C, transform: (Char) -> R?): C {\n    forEach { element -> transform(element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each character of the original char sequence\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> CharSequence.mapTo(destination: C, transform: (Char) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each character of the original char sequence\n * into an [IndexedValue] containing the index of that character and the character itself.\n */\npublic fun CharSequence.withIndex(): Iterable<IndexedValue<Char>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns `true` if all characters match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun CharSequence.all(predicate: (Char) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if char sequence has at least one character.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun CharSequence.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if at least one character matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun CharSequence.any(predicate: (Char) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns the length of this char sequence.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.count(): Int {\n    return length\n}\n\n/**\n * Returns the number of characters matching the given [predicate].\n */\npublic inline fun CharSequence.count(predicate: (Char) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each character.\n * \n * Returns the specified [initial] value if the char sequence is empty.\n * \n * @param [operation] function that takes current accumulator value and a character, and calculates the next accumulator value.\n */\npublic inline fun <R> CharSequence.fold(initial: R, operation: (acc: R, Char) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each character with its index in the original char sequence.\n * \n * Returns the specified [initial] value if the char sequence is empty.\n * \n * @param [operation] function that takes the index of a character, current accumulator value\n * and the character itself, and calculates the next accumulator value.\n */\npublic inline fun <R> CharSequence.foldIndexed(initial: R, operation: (index: Int, acc: R, Char) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each character and current accumulator value.\n * \n * Returns the specified [initial] value if the char sequence is empty.\n * \n * @param [operation] function that takes a character and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> CharSequence.foldRight(initial: R, operation: (Char, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each character with its index in the original char sequence and current accumulator value.\n * \n * Returns the specified [initial] value if the char sequence is empty.\n * \n * @param [operation] function that takes the index of a character, the character itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> CharSequence.foldRightIndexed(initial: R, operation: (index: Int, Char, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Performs the given [action] on each character.\n */\npublic inline fun CharSequence.forEach(action: (Char) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each character, providing sequential index with the character.\n * @param [action] function that takes the index of a character and the character itself\n * and performs the action on the character.\n */\npublic inline fun CharSequence.forEachIndexed(action: (index: Int, Char) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n@Deprecated(\"Use maxOrNull instead.\", ReplaceWith(\"this.maxOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic fun CharSequence.max(): Char? {\n    return maxOrNull()\n}\n\n@Deprecated(\"Use maxByOrNull instead.\", ReplaceWith(\"this.maxByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic inline fun <R : Comparable<R>> CharSequence.maxBy(selector: (Char) -> R): Char? {\n    return maxByOrNull(selector)\n}\n\n/**\n * Returns the first character yielding the largest value of the given function or `null` if there are no characters.\n * \n * @sample samples.collections.Collections.Aggregates.maxByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <R : Comparable<R>> CharSequence.maxByOrNull(selector: (Char) -> R): Char? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each character in the char sequence.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the char sequence is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.maxOf(selector: (Char) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each character in the char sequence.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the char sequence is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.maxOf(selector: (Char) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each character in the char sequence.\n * \n * @throws NoSuchElementException if the char sequence is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> CharSequence.maxOf(selector: (Char) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each character in the char sequence or `null` if there are no characters.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.maxOfOrNull(selector: (Char) -> Double): Double? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each character in the char sequence or `null` if there are no characters.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.maxOfOrNull(selector: (Char) -> Float): Float? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each character in the char sequence or `null` if there are no characters.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> CharSequence.maxOfOrNull(selector: (Char) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each character in the char sequence.\n * \n * @throws NoSuchElementException if the char sequence is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> CharSequence.maxOfWith(comparator: Comparator<in R>, selector: (Char) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each character in the char sequence or `null` if there are no characters.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> CharSequence.maxOfWithOrNull(comparator: Comparator<in R>, selector: (Char) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest character or `null` if there are no characters.\n */\n@SinceKotlin(\"1.4\")\npublic fun CharSequence.maxOrNull(): Char? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n@Deprecated(\"Use maxWithOrNull instead.\", ReplaceWith(\"this.maxWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic fun CharSequence.maxWith(comparator: Comparator<in Char>): Char? {\n    return maxWithOrNull(comparator)\n}\n\n/**\n * Returns the first character having the largest value according to the provided [comparator] or `null` if there are no characters.\n */\n@SinceKotlin(\"1.4\")\npublic fun CharSequence.maxWithOrNull(comparator: Comparator<in Char>): Char? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n@Deprecated(\"Use minOrNull instead.\", ReplaceWith(\"this.minOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic fun CharSequence.min(): Char? {\n    return minOrNull()\n}\n\n@Deprecated(\"Use minByOrNull instead.\", ReplaceWith(\"this.minByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic inline fun <R : Comparable<R>> CharSequence.minBy(selector: (Char) -> R): Char? {\n    return minByOrNull(selector)\n}\n\n/**\n * Returns the first character yielding the smallest value of the given function or `null` if there are no characters.\n * \n * @sample samples.collections.Collections.Aggregates.minByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <R : Comparable<R>> CharSequence.minByOrNull(selector: (Char) -> R): Char? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each character in the char sequence.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the char sequence is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.minOf(selector: (Char) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each character in the char sequence.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the char sequence is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.minOf(selector: (Char) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each character in the char sequence.\n * \n * @throws NoSuchElementException if the char sequence is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> CharSequence.minOf(selector: (Char) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each character in the char sequence or `null` if there are no characters.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.minOfOrNull(selector: (Char) -> Double): Double? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each character in the char sequence or `null` if there are no characters.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.minOfOrNull(selector: (Char) -> Float): Float? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each character in the char sequence or `null` if there are no characters.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> CharSequence.minOfOrNull(selector: (Char) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each character in the char sequence.\n * \n * @throws NoSuchElementException if the char sequence is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> CharSequence.minOfWith(comparator: Comparator<in R>, selector: (Char) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each character in the char sequence or `null` if there are no characters.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> CharSequence.minOfWithOrNull(comparator: Comparator<in R>, selector: (Char) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest character or `null` if there are no characters.\n */\n@SinceKotlin(\"1.4\")\npublic fun CharSequence.minOrNull(): Char? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n@Deprecated(\"Use minWithOrNull instead.\", ReplaceWith(\"this.minWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic fun CharSequence.minWith(comparator: Comparator<in Char>): Char? {\n    return minWithOrNull(comparator)\n}\n\n/**\n * Returns the first character having the smallest value according to the provided [comparator] or `null` if there are no characters.\n */\n@SinceKotlin(\"1.4\")\npublic fun CharSequence.minWithOrNull(comparator: Comparator<in Char>): Char? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns `true` if the char sequence has no characters.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun CharSequence.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if no characters match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun CharSequence.none(predicate: (Char) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Performs the given [action] on each character and returns the char sequence itself afterwards.\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <S : CharSequence> S.onEach(action: (Char) -> Unit): S {\n    return apply { for (element in this) action(element) }\n}\n\n/**\n * Performs the given [action] on each character, providing sequential index with the character,\n * and returns the char sequence itself afterwards.\n * @param [action] function that takes the index of a character and the character itself\n * and performs the action on the character.\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <S : CharSequence> S.onEachIndexed(action: (index: Int, Char) -> Unit): S {\n    return apply { forEachIndexed(action) }\n}\n\n/**\n * Accumulates value starting with the first character and applying [operation] from left to right\n * to current accumulator value and each character.\n * \n * Throws an exception if this char sequence is empty. If the char sequence can be empty in an expected way,\n * please use [reduceOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes current accumulator value and a character,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun CharSequence.reduce(operation: (acc: Char, Char) -> Char): Char {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty char sequence can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first character and applying [operation] from left to right\n * to current accumulator value and each character with its index in the original char sequence.\n * \n * Throws an exception if this char sequence is empty. If the char sequence can be empty in an expected way,\n * please use [reduceIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of a character, current accumulator value and the character itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun CharSequence.reduceIndexed(operation: (index: Int, acc: Char, Char) -> Char): Char {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty char sequence can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first character and applying [operation] from left to right\n * to current accumulator value and each character with its index in the original char sequence.\n * \n * Returns `null` if the char sequence is empty.\n * \n * @param [operation] function that takes the index of a character, current accumulator value and the character itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun CharSequence.reduceIndexedOrNull(operation: (index: Int, acc: Char, Char) -> Char): Char? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first character and applying [operation] from left to right\n * to current accumulator value and each character.\n * \n * Returns `null` if the char sequence is empty.\n * \n * @param [operation] function that takes current accumulator value and a character,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun CharSequence.reduceOrNull(operation: (acc: Char, Char) -> Char): Char? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last character and applying [operation] from right to left\n * to each character and current accumulator value.\n * \n * Throws an exception if this char sequence is empty. If the char sequence can be empty in an expected way,\n * please use [reduceRightOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes a character and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun CharSequence.reduceRight(operation: (Char, acc: Char) -> Char): Char {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty char sequence can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last character and applying [operation] from right to left\n * to each character with its index in the original char sequence and current accumulator value.\n * \n * Throws an exception if this char sequence is empty. If the char sequence can be empty in an expected way,\n * please use [reduceRightIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of a character, the character itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun CharSequence.reduceRightIndexed(operation: (index: Int, Char, acc: Char) -> Char): Char {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty char sequence can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last character and applying [operation] from right to left\n * to each character with its index in the original char sequence and current accumulator value.\n * \n * Returns `null` if the char sequence is empty.\n * \n * @param [operation] function that takes the index of a character, the character itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun CharSequence.reduceRightIndexedOrNull(operation: (index: Int, Char, acc: Char) -> Char): Char? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last character and applying [operation] from right to left\n * to each character and current accumulator value.\n * \n * Returns `null` if the char sequence is empty.\n * \n * @param [operation] function that takes a character and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun CharSequence.reduceRightOrNull(operation: (Char, acc: Char) -> Char): Char? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each character and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and a character, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <R> CharSequence.runningFold(initial: R, operation: (acc: R, Char) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(length + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each character, its index in the original char sequence and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of a character, current accumulator value\n * and the character itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <R> CharSequence.runningFoldIndexed(initial: R, operation: (index: Int, acc: R, Char) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(length + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each character and current accumulator value that starts with the first character of this char sequence.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and a character, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\npublic inline fun CharSequence.runningReduce(operation: (acc: Char, Char) -> Char): List<Char> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Char>(length).apply { add(accumulator) }\n    for (index in 1 until length) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each character, its index in the original char sequence and current accumulator value that starts with the first character of this char sequence.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of a character, current accumulator value\n * and the character itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\npublic inline fun CharSequence.runningReduceIndexed(operation: (index: Int, acc: Char, Char) -> Char): List<Char> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Char>(length).apply { add(accumulator) }\n    for (index in 1 until length) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each character and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and a character, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun <R> CharSequence.scan(initial: R, operation: (acc: R, Char) -> R): List<R> {\n    return runningFold(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each character, its index in the original char sequence and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of a character, current accumulator value\n * and the character itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun <R> CharSequence.scanIndexed(initial: R, operation: (index: Int, acc: R, Char) -> R): List<R> {\n    return runningFoldIndexed(initial, operation)\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each character in the char sequence.\n */\n@Deprecated(\"Use sumOf instead.\", ReplaceWith(\"this.sumOf(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\npublic inline fun CharSequence.sumBy(selector: (Char) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each character in the char sequence.\n */\n@Deprecated(\"Use sumOf instead.\", ReplaceWith(\"this.sumOf(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\npublic inline fun CharSequence.sumByDouble(selector: (Char) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each character in the char sequence.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfDouble\")\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.sumOf(selector: (Char) -> Double): Double {\n    var sum: Double = 0.toDouble()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each character in the char sequence.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfInt\")\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.sumOf(selector: (Char) -> Int): Int {\n    var sum: Int = 0.toInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each character in the char sequence.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfLong\")\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.sumOf(selector: (Char) -> Long): Long {\n    var sum: Long = 0.toLong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each character in the char sequence.\n */\n@SinceKotlin(\"1.5\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfUInt\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.sumOf(selector: (Char) -> UInt): UInt {\n    var sum: UInt = 0.toUInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each character in the char sequence.\n */\n@SinceKotlin(\"1.5\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfULong\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.sumOf(selector: (Char) -> ULong): ULong {\n    var sum: ULong = 0.toULong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Splits this char sequence into a list of strings each not exceeding the given [size].\n * \n * The last string in the resulting list may have fewer characters than the given [size].\n * \n * @param size the number of elements to take in each string, must be positive and can be greater than the number of elements in this char sequence.\n * \n * @sample samples.text.Strings.chunked\n */\n@SinceKotlin(\"1.2\")\npublic fun CharSequence.chunked(size: Int): List<String> {\n    return windowed(size, size, partialWindows = true)\n}\n\n/**\n * Splits this char sequence into several char sequences each not exceeding the given [size]\n * and applies the given [transform] function to an each.\n * \n * @return list of results of the [transform] applied to an each char sequence.\n * \n * Note that the char sequence passed to the [transform] function is ephemeral and is valid only inside that function.\n * You should not store it or allow it to escape in some way, unless you made a snapshot of it.\n * The last char sequence may have fewer characters than the given [size].\n * \n * @param size the number of elements to take in each char sequence, must be positive and can be greater than the number of elements in this char sequence.\n * \n * @sample samples.text.Strings.chunkedTransform\n */\n@SinceKotlin(\"1.2\")\npublic fun <R> CharSequence.chunked(size: Int, transform: (CharSequence) -> R): List<R> {\n    return windowed(size, size, partialWindows = true, transform = transform)\n}\n\n/**\n * Splits this char sequence into a sequence of strings each not exceeding the given [size].\n * \n * The last string in the resulting sequence may have fewer characters than the given [size].\n * \n * @param size the number of elements to take in each string, must be positive and can be greater than the number of elements in this char sequence.\n * \n * @sample samples.collections.Collections.Transformations.chunked\n */\n@SinceKotlin(\"1.2\")\npublic fun CharSequence.chunkedSequence(size: Int): Sequence<String> {\n    return chunkedSequence(size) { it.toString() }\n}\n\n/**\n * Splits this char sequence into several char sequences each not exceeding the given [size]\n * and applies the given [transform] function to an each.\n * \n * @return sequence of results of the [transform] applied to an each char sequence.\n * \n * Note that the char sequence passed to the [transform] function is ephemeral and is valid only inside that function.\n * You should not store it or allow it to escape in some way, unless you made a snapshot of it.\n * The last char sequence may have fewer characters than the given [size].\n * \n * @param size the number of elements to take in each char sequence, must be positive and can be greater than the number of elements in this char sequence.\n * \n * @sample samples.text.Strings.chunkedTransformToSequence\n */\n@SinceKotlin(\"1.2\")\npublic fun <R> CharSequence.chunkedSequence(size: Int, transform: (CharSequence) -> R): Sequence<R> {\n    return windowedSequence(size, size, partialWindows = true, transform = transform)\n}\n\n/**\n * Splits the original char sequence into pair of char sequences,\n * where *first* char sequence contains characters for which [predicate] yielded `true`,\n * while *second* char sequence contains characters for which [predicate] yielded `false`.\n * \n * @sample samples.text.Strings.partition\n */\npublic inline fun CharSequence.partition(predicate: (Char) -> Boolean): Pair<CharSequence, CharSequence> {\n    val first = StringBuilder()\n    val second = StringBuilder()\n    for (element in this) {\n        if (predicate(element)) {\n            first.append(element)\n        } else {\n            second.append(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original string into pair of strings,\n * where *first* string contains characters for which [predicate] yielded `true`,\n * while *second* string contains characters for which [predicate] yielded `false`.\n * \n * @sample samples.text.Strings.partition\n */\npublic inline fun String.partition(predicate: (Char) -> Boolean): Pair<String, String> {\n    val first = StringBuilder()\n    val second = StringBuilder()\n    for (element in this) {\n        if (predicate(element)) {\n            first.append(element)\n        } else {\n            second.append(element)\n        }\n    }\n    return Pair(first.toString(), second.toString())\n}\n\n/**\n * Returns a list of snapshots of the window of the given [size]\n * sliding along this char sequence with the given [step], where each\n * snapshot is a string.\n * \n * Several last strings may have fewer characters than the given [size].\n * \n * Both [size] and [step] must be positive and can be greater than the number of elements in this char sequence.\n * @param size the number of elements to take in each window\n * @param step the number of elements to move the window forward by on an each step, by default 1\n * @param partialWindows controls whether or not to keep partial windows in the end if any,\n * by default `false` which means partial windows won't be preserved\n * \n * @sample samples.collections.Sequences.Transformations.takeWindows\n */\n@SinceKotlin(\"1.2\")\npublic fun CharSequence.windowed(size: Int, step: Int = 1, partialWindows: Boolean = false): List<String> {\n    return windowed(size, step, partialWindows) { it.toString() }\n}\n\n/**\n * Returns a list of results of applying the given [transform] function to\n * an each char sequence representing a view over the window of the given [size]\n * sliding along this char sequence with the given [step].\n * \n * Note that the char sequence passed to the [transform] function is ephemeral and is valid only inside that function.\n * You should not store it or allow it to escape in some way, unless you made a snapshot of it.\n * Several last char sequences may have fewer characters than the given [size].\n * \n * Both [size] and [step] must be positive and can be greater than the number of elements in this char sequence.\n * @param size the number of elements to take in each window\n * @param step the number of elements to move the window forward by on an each step, by default 1\n * @param partialWindows controls whether or not to keep partial windows in the end if any,\n * by default `false` which means partial windows won't be preserved\n * \n * @sample samples.collections.Sequences.Transformations.averageWindows\n */\n@SinceKotlin(\"1.2\")\npublic fun <R> CharSequence.windowed(size: Int, step: Int = 1, partialWindows: Boolean = false, transform: (CharSequence) -> R): List<R> {\n    checkWindowSizeStep(size, step)\n    val thisSize = this.length\n    val resultCapacity = thisSize / step + if (thisSize % step == 0) 0 else 1\n    val result = ArrayList<R>(resultCapacity)\n    var index = 0\n    while (index in 0 until thisSize) {\n        val end = index + size\n        val coercedEnd = if (end < 0 || end > thisSize) { if (partialWindows) thisSize else break } else end\n        result.add(transform(subSequence(index, coercedEnd)))\n        index += step\n    }\n    return result\n}\n\n/**\n * Returns a sequence of snapshots of the window of the given [size]\n * sliding along this char sequence with the given [step], where each\n * snapshot is a string.\n * \n * Several last strings may have fewer characters than the given [size].\n * \n * Both [size] and [step] must be positive and can be greater than the number of elements in this char sequence.\n * @param size the number of elements to take in each window\n * @param step the number of elements to move the window forward by on an each step, by default 1\n * @param partialWindows controls whether or not to keep partial windows in the end if any,\n * by default `false` which means partial windows won't be preserved\n * \n * @sample samples.collections.Sequences.Transformations.takeWindows\n */\n@SinceKotlin(\"1.2\")\npublic fun CharSequence.windowedSequence(size: Int, step: Int = 1, partialWindows: Boolean = false): Sequence<String> {\n    return windowedSequence(size, step, partialWindows) { it.toString() }\n}\n\n/**\n * Returns a sequence of results of applying the given [transform] function to\n * an each char sequence representing a view over the window of the given [size]\n * sliding along this char sequence with the given [step].\n * \n * Note that the char sequence passed to the [transform] function is ephemeral and is valid only inside that function.\n * You should not store it or allow it to escape in some way, unless you made a snapshot of it.\n * Several last char sequences may have fewer characters than the given [size].\n * \n * Both [size] and [step] must be positive and can be greater than the number of elements in this char sequence.\n * @param size the number of elements to take in each window\n * @param step the number of elements to move the window forward by on an each step, by default 1\n * @param partialWindows controls whether or not to keep partial windows in the end if any,\n * by default `false` which means partial windows won't be preserved\n * \n * @sample samples.collections.Sequences.Transformations.averageWindows\n */\n@SinceKotlin(\"1.2\")\npublic fun <R> CharSequence.windowedSequence(size: Int, step: Int = 1, partialWindows: Boolean = false, transform: (CharSequence) -> R): Sequence<R> {\n    checkWindowSizeStep(size, step)\n    val windows = (if (partialWindows) indices else 0 until length - size + 1) step step\n    return windows.asSequence().map { index ->\n        val end = index + size\n        val coercedEnd = if (end < 0 || end > length) length else end\n        transform(subSequence(index, coercedEnd))\n    }\n}\n\n/**\n * Returns a list of pairs built from the characters of `this` and the [other] char sequences with the same index\n * The returned list has length of the shortest char sequence.\n * \n * @sample samples.text.Strings.zip\n */\npublic infix fun CharSequence.zip(other: CharSequence): List<Pair<Char, Char>> {\n    return zip(other) { c1, c2 -> c1 to c2 }\n}\n\n/**\n * Returns a list of values built from the characters of `this` and the [other] char sequences with the same index\n * using the provided [transform] function applied to each pair of characters.\n * The returned list has length of the shortest char sequence.\n * \n * @sample samples.text.Strings.zipWithTransform\n */\npublic inline fun <V> CharSequence.zip(other: CharSequence, transform: (a: Char, b: Char) -> V): List<V> {\n    val length = minOf(this.length, other.length)\n    val list = ArrayList<V>(length)\n    for (i in 0 until length) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of pairs of each two adjacent characters in this char sequence.\n * \n * The returned list is empty if this char sequence contains less than two characters.\n * \n * @sample samples.collections.Collections.Transformations.zipWithNext\n */\n@SinceKotlin(\"1.2\")\npublic fun CharSequence.zipWithNext(): List<Pair<Char, Char>> {\n    return zipWithNext { a, b -> a to b }\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to an each pair of two adjacent characters in this char sequence.\n * \n * The returned list is empty if this char sequence contains less than two characters.\n * \n * @sample samples.collections.Collections.Transformations.zipWithNextToFindDeltas\n */\n@SinceKotlin(\"1.2\")\npublic inline fun <R> CharSequence.zipWithNext(transform: (a: Char, b: Char) -> R): List<R> {\n    val size = length - 1\n    if (size < 1) return emptyList()\n    val result = ArrayList<R>(size)\n    for (index in 0 until size) {\n        result.add(transform(this[index], this[index + 1]))\n    }\n    return result\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original char sequence returning its characters when being iterated.\n */\npublic fun CharSequence.asIterable(): Iterable<Char> {\n    if (this is String && isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original char sequence returning its characters when being iterated.\n */\npublic fun CharSequence.asSequence(): Sequence<Char> {\n    if (this is String && isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n","/*\n * Copyright 2010-2021 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"StringsKt\")\n\npackage kotlin.text\n\nimport kotlin.contracts.contract\nimport kotlin.jvm.JvmName\n\n/**\n * Returns a copy of this string converted to upper case using the rules of the default locale.\n */\n@Deprecated(\"Use uppercase() instead.\", ReplaceWith(\"uppercase()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\npublic expect fun String.toUpperCase(): String\n\n/**\n * Returns a copy of this string converted to upper case using Unicode mapping rules of the invariant locale.\n *\n * This function supports one-to-many and many-to-one character mapping,\n * thus the length of the returned string can be different from the length of the original string.\n *\n * @sample samples.text.Strings.uppercase\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic expect fun String.uppercase(): String\n\n/**\n * Returns a copy of this string converted to lower case using the rules of the default locale.\n */\n@Deprecated(\"Use lowercase() instead.\", ReplaceWith(\"lowercase()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\npublic expect fun String.toLowerCase(): String\n\n/**\n * Returns a copy of this string converted to lower case using Unicode mapping rules of the invariant locale.\n *\n * This function supports one-to-many and many-to-one character mapping,\n * thus the length of the returned string can be different from the length of the original string.\n *\n * @sample samples.text.Strings.lowercase\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic expect fun String.lowercase(): String\n\n/**\n * Returns a copy of this string having its first letter titlecased using the rules of the default locale,\n * or the original string if it's empty or already starts with a title case letter.\n *\n * The title case of a character is usually the same as its upper case with several exceptions.\n * The particular list of characters with the special title case form depends on the underlying platform.\n *\n * @sample samples.text.Strings.capitalize\n */\n@Deprecated(\"Use replaceFirstChar instead.\", ReplaceWith(\"replaceFirstChar { if (it.isLowerCase()) it.titlecase() else it.toString() }\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\npublic expect fun String.capitalize(): String\n\n/**\n * Returns a copy of this string having its first letter lowercased using the rules of the default locale,\n * or the original string if it's empty or already starts with a lower case letter.\n *\n * @sample samples.text.Strings.decapitalize\n */\n@Deprecated(\"Use replaceFirstChar instead.\", ReplaceWith(\"replaceFirstChar { it.lowercase() }\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\npublic expect fun String.decapitalize(): String\n\n/**\n * Returns a sub sequence of this char sequence having leading and trailing characters matching the [predicate] removed.\n */\npublic inline fun CharSequence.trim(predicate: (Char) -> Boolean): CharSequence {\n    var startIndex = 0\n    var endIndex = length - 1\n    var startFound = false\n\n    while (startIndex <= endIndex) {\n        val index = if (!startFound) startIndex else endIndex\n        val match = predicate(this[index])\n\n        if (!startFound) {\n            if (!match)\n                startFound = true\n            else\n                startIndex += 1\n        } else {\n            if (!match)\n                break\n            else\n                endIndex -= 1\n        }\n    }\n\n    return subSequence(startIndex, endIndex + 1)\n}\n\n/**\n * Returns a string having leading and trailing characters matching the [predicate] removed.\n */\npublic inline fun String.trim(predicate: (Char) -> Boolean): String =\n    (this as CharSequence).trim(predicate).toString()\n\n/**\n * Returns a sub sequence of this char sequence having leading characters matching the [predicate] removed.\n */\npublic inline fun CharSequence.trimStart(predicate: (Char) -> Boolean): CharSequence {\n    for (index in this.indices)\n        if (!predicate(this[index]))\n            return subSequence(index, length)\n\n    return \"\"\n}\n\n/**\n * Returns a string having leading characters matching the [predicate] removed.\n */\npublic inline fun String.trimStart(predicate: (Char) -> Boolean): String =\n    (this as CharSequence).trimStart(predicate).toString()\n\n/**\n * Returns a sub sequence of this char sequence having trailing characters matching the [predicate] removed.\n */\npublic inline fun CharSequence.trimEnd(predicate: (Char) -> Boolean): CharSequence {\n    for (index in this.indices.reversed())\n        if (!predicate(this[index]))\n            return subSequence(0, index + 1)\n\n    return \"\"\n}\n\n/**\n * Returns a string having trailing characters matching the [predicate] removed.\n */\npublic inline fun String.trimEnd(predicate: (Char) -> Boolean): String =\n    (this as CharSequence).trimEnd(predicate).toString()\n\n/**\n * Returns a sub sequence of this char sequence having leading and trailing characters from the [chars] array removed.\n */\npublic fun CharSequence.trim(vararg chars: Char): CharSequence = trim { it in chars }\n\n/**\n * Returns a string having leading and trailing characters from the [chars] array removed.\n */\npublic fun String.trim(vararg chars: Char): String = trim { it in chars }\n\n/**\n * Returns a sub sequence of this char sequence having leading characters from the [chars] array removed.\n */\npublic fun CharSequence.trimStart(vararg chars: Char): CharSequence = trimStart { it in chars }\n\n/**\n * Returns a string having leading characters from the [chars] array removed.\n */\npublic fun String.trimStart(vararg chars: Char): String = trimStart { it in chars }\n\n/**\n * Returns a sub sequence of this char sequence having trailing characters from the [chars] array removed.\n */\npublic fun CharSequence.trimEnd(vararg chars: Char): CharSequence = trimEnd { it in chars }\n\n/**\n * Returns a string having trailing characters from the [chars] array removed.\n */\npublic fun String.trimEnd(vararg chars: Char): String = trimEnd { it in chars }\n\n/**\n * Returns a sub sequence of this char sequence having leading and trailing whitespace removed.\n */\npublic fun CharSequence.trim(): CharSequence = trim(Char::isWhitespace)\n\n/**\n * Returns a string having leading and trailing whitespace removed.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.trim(): String = (this as CharSequence).trim().toString()\n\n/**\n * Returns a sub sequence of this char sequence having leading whitespace removed.\n */\npublic fun CharSequence.trimStart(): CharSequence = trimStart(Char::isWhitespace)\n\n/**\n * Returns a string having leading whitespace removed.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.trimStart(): String = (this as CharSequence).trimStart().toString()\n\n/**\n * Returns a sub sequence of this char sequence having trailing whitespace removed.\n */\npublic fun CharSequence.trimEnd(): CharSequence = trimEnd(Char::isWhitespace)\n\n/**\n * Returns a string having trailing whitespace removed.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.trimEnd(): String = (this as CharSequence).trimEnd().toString()\n\n/**\n * Returns a char sequence with content of this char sequence padded at the beginning\n * to the specified [length] with the specified character or space.\n *\n * @param length the desired string length.\n * @param padChar the character to pad string with, if it has length less than the [length] specified. Space is used by default.\n * @return Returns a char sequence of length at least [length] consisting of `this` char sequence prepended with [padChar] as many times\n * as are necessary to reach that length.\n * @sample samples.text.Strings.padStart\n */\npublic fun CharSequence.padStart(length: Int, padChar: Char = ' '): CharSequence {\n    if (length < 0)\n        throw IllegalArgumentException(\"Desired length $length is less than zero.\")\n    if (length <= this.length)\n        return this.subSequence(0, this.length)\n\n    val sb = StringBuilder(length)\n    for (i in 1..(length - this.length))\n        sb.append(padChar)\n    sb.append(this)\n    return sb\n}\n\n/**\n * Pads the string to the specified [length] at the beginning with the specified character or space.\n *\n * @param length the desired string length.\n * @param padChar the character to pad string with, if it has length less than the [length] specified. Space is used by default.\n * @return Returns a string of length at least [length] consisting of `this` string prepended with [padChar] as many times\n * as are necessary to reach that length.\n * @sample samples.text.Strings.padStart\n */\npublic fun String.padStart(length: Int, padChar: Char = ' '): String =\n    (this as CharSequence).padStart(length, padChar).toString()\n\n/**\n * Returns a char sequence with content of this char sequence padded at the end\n * to the specified [length] with the specified character or space.\n *\n * @param length the desired string length.\n * @param padChar the character to pad string with, if it has length less than the [length] specified. Space is used by default.\n * @return Returns a char sequence of length at least [length] consisting of `this` char sequence appended with [padChar] as many times\n * as are necessary to reach that length.\n * @sample samples.text.Strings.padEnd\n */\npublic fun CharSequence.padEnd(length: Int, padChar: Char = ' '): CharSequence {\n    if (length < 0)\n        throw IllegalArgumentException(\"Desired length $length is less than zero.\")\n    if (length <= this.length)\n        return this.subSequence(0, this.length)\n\n    val sb = StringBuilder(length)\n    sb.append(this)\n    for (i in 1..(length - this.length))\n        sb.append(padChar)\n    return sb\n}\n\n/**\n * Pads the string to the specified [length] at the end with the specified character or space.\n *\n * @param length the desired string length.\n * @param padChar the character to pad string with, if it has length less than the [length] specified. Space is used by default.\n * @return Returns a string of length at least [length] consisting of `this` string appended with [padChar] as many times\n * as are necessary to reach that length.\n * @sample samples.text.Strings.padEnd\n */\npublic fun String.padEnd(length: Int, padChar: Char = ' '): String =\n    (this as CharSequence).padEnd(length, padChar).toString()\n\n/**\n * Returns `true` if this nullable char sequence is either `null` or empty.\n *\n * @sample samples.text.Strings.stringIsNullOrEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence?.isNullOrEmpty(): Boolean {\n    contract {\n        returns(false) implies (this@isNullOrEmpty != null)\n    }\n\n    return this == null || this.length == 0\n}\n\n/**\n * Returns `true` if this char sequence is empty (contains no characters).\n *\n * @sample samples.text.Strings.stringIsEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.isEmpty(): Boolean = length == 0\n\n/**\n * Returns `true` if this char sequence is not empty.\n *\n * @sample samples.text.Strings.stringIsNotEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.isNotEmpty(): Boolean = length > 0\n\n// implemented differently in JVM and JS\n//public fun String.isBlank(): Boolean = length() == 0 || all { it.isWhitespace() }\n\n\n/**\n * Returns `true` if this char sequence is not empty and contains some characters except of whitespace characters.\n *\n * @sample samples.text.Strings.stringIsNotBlank\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.isNotBlank(): Boolean = !isBlank()\n\n/**\n * Returns `true` if this nullable char sequence is either `null` or empty or consists solely of whitespace characters.\n *\n * @sample samples.text.Strings.stringIsNullOrBlank\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence?.isNullOrBlank(): Boolean {\n    contract {\n        returns(false) implies (this@isNullOrBlank != null)\n    }\n\n    return this == null || this.isBlank()\n}\n\n/**\n * Iterator for characters of the given char sequence.\n */\npublic operator fun CharSequence.iterator(): CharIterator = object : CharIterator() {\n    private var index = 0\n\n    public override fun nextChar(): Char = get(index++)\n\n    public override fun hasNext(): Boolean = index < length\n}\n\n/** Returns the string if it is not `null`, or the empty string otherwise. */\n@kotlin.internal.InlineOnly\npublic inline fun String?.orEmpty(): String = this ?: \"\"\n\n/**\n * Returns this char sequence if it's not empty\n * or the result of calling [defaultValue] function if the char sequence is empty.\n *\n * @sample samples.text.Strings.stringIfEmpty\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <C, R> C.ifEmpty(defaultValue: () -> R): R where C : CharSequence, C : R =\n    if (isEmpty()) defaultValue() else this\n\n/**\n * Returns this char sequence if it is not empty and doesn't consist solely of whitespace characters,\n * or the result of calling [defaultValue] function otherwise.\n *\n * @sample samples.text.Strings.stringIfBlank\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <C, R> C.ifBlank(defaultValue: () -> R): R where C : CharSequence, C : R =\n    if (isBlank()) defaultValue() else this\n\n/**\n * Returns the range of valid character indices for this char sequence.\n */\npublic val CharSequence.indices: IntRange\n    get() = 0..length - 1\n\n/**\n * Returns the index of the last character in the char sequence or -1 if it is empty.\n */\npublic val CharSequence.lastIndex: Int\n    get() = this.length - 1\n\n/**\n * Returns `true` if this CharSequence has Unicode surrogate pair at the specified [index].\n */\npublic fun CharSequence.hasSurrogatePairAt(index: Int): Boolean {\n    return index in 0..length - 2\n            && this[index].isHighSurrogate()\n            && this[index + 1].isLowSurrogate()\n}\n\n/**\n * Returns a substring specified by the given [range] of indices.\n */\npublic fun String.substring(range: IntRange): String = substring(range.start, range.endInclusive + 1)\n\n/**\n * Returns a subsequence of this char sequence specified by the given [range] of indices.\n */\npublic fun CharSequence.subSequence(range: IntRange): CharSequence = subSequence(range.start, range.endInclusive + 1)\n\n/**\n * Returns a subsequence of this char sequence.\n *\n * This extension is chosen only for invocation with old-named parameters.\n * Replace parameter names with the same as those of [CharSequence.subSequence].\n */\n@kotlin.internal.InlineOnly\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning\n@Deprecated(\"Use parameters named startIndex and endIndex.\", ReplaceWith(\"subSequence(startIndex = start, endIndex = end)\"))\npublic inline fun String.subSequence(start: Int, end: Int): CharSequence = subSequence(start, end)\n\n/**\n * Returns a substring of chars from a range of this char sequence starting at the [startIndex] and ending right before the [endIndex].\n *\n * @param startIndex the start index (inclusive).\n * @param endIndex the end index (exclusive). If not specified, the length of the char sequence is used.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.substring(startIndex: Int, endIndex: Int = length): String = subSequence(startIndex, endIndex).toString()\n\n/**\n * Returns a substring of chars at indices from the specified [range] of this char sequence.\n */\npublic fun CharSequence.substring(range: IntRange): String = subSequence(range.start, range.endInclusive + 1).toString()\n\n/**\n * Returns a substring before the first occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringBefore(delimiter: Char, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(0, index)\n}\n\n/**\n * Returns a substring before the first occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringBefore(delimiter: String, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(0, index)\n}\n\n/**\n * Returns a substring after the first occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringAfter(delimiter: Char, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(index + 1, length)\n}\n\n/**\n * Returns a substring after the first occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringAfter(delimiter: String, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(index + delimiter.length, length)\n}\n\n/**\n * Returns a substring before the last occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringBeforeLast(delimiter: Char, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(0, index)\n}\n\n/**\n * Returns a substring before the last occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringBeforeLast(delimiter: String, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(0, index)\n}\n\n/**\n * Returns a substring after the last occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringAfterLast(delimiter: Char, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(index + 1, length)\n}\n\n/**\n * Returns a substring after the last occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringAfterLast(delimiter: String, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(index + delimiter.length, length)\n}\n\n/**\n * Returns a char sequence with content of this char sequence where its part at the given range\n * is replaced with the [replacement] char sequence.\n * @param startIndex the index of the first character to be replaced.\n * @param endIndex the index of the first character after the replacement to keep in the string.\n */\n@OptIn(ExperimentalStdlibApi::class)\npublic fun CharSequence.replaceRange(startIndex: Int, endIndex: Int, replacement: CharSequence): CharSequence {\n    if (endIndex < startIndex)\n        throw IndexOutOfBoundsException(\"End index ($endIndex) is less than start index ($startIndex).\")\n    val sb = StringBuilder()\n    sb.appendRange(this, 0, startIndex)\n    sb.append(replacement)\n    sb.appendRange(this, endIndex, length)\n    return sb\n}\n\n/**\n * Replaces the part of the string at the given range with the [replacement] char sequence.\n * @param startIndex the index of the first character to be replaced.\n * @param endIndex the index of the first character after the replacement to keep in the string.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.replaceRange(startIndex: Int, endIndex: Int, replacement: CharSequence): String =\n    (this as CharSequence).replaceRange(startIndex, endIndex, replacement).toString()\n\n/**\n * Returns a char sequence with content of this char sequence where its part at the given [range]\n * is replaced with the [replacement] char sequence.\n *\n * The end index of the [range] is included in the part to be replaced.\n */\npublic fun CharSequence.replaceRange(range: IntRange, replacement: CharSequence): CharSequence =\n    replaceRange(range.start, range.endInclusive + 1, replacement)\n\n/**\n * Replace the part of string at the given [range] with the [replacement] string.\n *\n * The end index of the [range] is included in the part to be replaced.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.replaceRange(range: IntRange, replacement: CharSequence): String =\n    (this as CharSequence).replaceRange(range, replacement).toString()\n\n/**\n * Returns a char sequence with content of this char sequence where its part at the given range is removed.\n *\n * @param startIndex the index of the first character to be removed.\n * @param endIndex the index of the first character after the removed part to keep in the string.\n *\n * [endIndex] is not included in the removed part.\n */\n@OptIn(ExperimentalStdlibApi::class)\npublic fun CharSequence.removeRange(startIndex: Int, endIndex: Int): CharSequence {\n    if (endIndex < startIndex)\n        throw IndexOutOfBoundsException(\"End index ($endIndex) is less than start index ($startIndex).\")\n\n    if (endIndex == startIndex)\n        return this.subSequence(0, length)\n\n    val sb = StringBuilder(length - (endIndex - startIndex))\n    sb.appendRange(this, 0, startIndex)\n    sb.appendRange(this, endIndex, length)\n    return sb\n}\n\n/**\n * Removes the part of a string at a given range.\n * @param startIndex the index of the first character to be removed.\n * @param endIndex the index of the first character after the removed part to keep in the string.\n *\n *  [endIndex] is not included in the removed part.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.removeRange(startIndex: Int, endIndex: Int): String =\n    (this as CharSequence).removeRange(startIndex, endIndex).toString()\n\n/**\n * Returns a char sequence with content of this char sequence where its part at the given [range] is removed.\n *\n * The end index of the [range] is included in the removed part.\n */\npublic fun CharSequence.removeRange(range: IntRange): CharSequence = removeRange(range.start, range.endInclusive + 1)\n\n/**\n * Removes the part of a string at the given [range].\n *\n * The end index of the [range] is included in the removed part.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.removeRange(range: IntRange): String =\n    (this as CharSequence).removeRange(range).toString()\n\n/**\n * If this char sequence starts with the given [prefix], returns a new char sequence\n * with the prefix removed. Otherwise, returns a new char sequence with the same characters.\n */\npublic fun CharSequence.removePrefix(prefix: CharSequence): CharSequence {\n    if (startsWith(prefix)) {\n        return subSequence(prefix.length, length)\n    }\n    return subSequence(0, length)\n}\n\n/**\n * If this string starts with the given [prefix], returns a copy of this string\n * with the prefix removed. Otherwise, returns this string.\n */\npublic fun String.removePrefix(prefix: CharSequence): String {\n    if (startsWith(prefix)) {\n        return substring(prefix.length)\n    }\n    return this\n}\n\n/**\n * If this char sequence ends with the given [suffix], returns a new char sequence\n * with the suffix removed. Otherwise, returns a new char sequence with the same characters.\n */\npublic fun CharSequence.removeSuffix(suffix: CharSequence): CharSequence {\n    if (endsWith(suffix)) {\n        return subSequence(0, length - suffix.length)\n    }\n    return subSequence(0, length)\n}\n\n/**\n * If this string ends with the given [suffix], returns a copy of this string\n * with the suffix removed. Otherwise, returns this string.\n */\npublic fun String.removeSuffix(suffix: CharSequence): String {\n    if (endsWith(suffix)) {\n        return substring(0, length - suffix.length)\n    }\n    return this\n}\n\n/**\n * When this char sequence starts with the given [prefix] and ends with the given [suffix],\n * returns a new char sequence having both the given [prefix] and [suffix] removed.\n * Otherwise returns a new char sequence with the same characters.\n */\npublic fun CharSequence.removeSurrounding(prefix: CharSequence, suffix: CharSequence): CharSequence {\n    if ((length >= prefix.length + suffix.length) && startsWith(prefix) && endsWith(suffix)) {\n        return subSequence(prefix.length, length - suffix.length)\n    }\n    return subSequence(0, length)\n}\n\n/**\n * Removes from a string both the given [prefix] and [suffix] if and only if\n * it starts with the [prefix] and ends with the [suffix].\n * Otherwise returns this string unchanged.\n */\npublic fun String.removeSurrounding(prefix: CharSequence, suffix: CharSequence): String {\n    if ((length >= prefix.length + suffix.length) && startsWith(prefix) && endsWith(suffix)) {\n        return substring(prefix.length, length - suffix.length)\n    }\n    return this\n}\n\n/**\n * When this char sequence starts with and ends with the given [delimiter],\n * returns a new char sequence having this [delimiter] removed both from the start and end.\n * Otherwise returns a new char sequence with the same characters.\n */\npublic fun CharSequence.removeSurrounding(delimiter: CharSequence): CharSequence = removeSurrounding(delimiter, delimiter)\n\n/**\n * Removes the given [delimiter] string from both the start and the end of this string\n * if and only if it starts with and ends with the [delimiter].\n * Otherwise returns this string unchanged.\n */\npublic fun String.removeSurrounding(delimiter: CharSequence): String = removeSurrounding(delimiter, delimiter)\n\n/**\n * Replace part of string before the first occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceBefore(delimiter: Char, replacement: String, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(0, index, replacement)\n}\n\n/**\n * Replace part of string before the first occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceBefore(delimiter: String, replacement: String, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(0, index, replacement)\n}\n\n/**\n * Replace part of string after the first occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceAfter(delimiter: Char, replacement: String, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(index + 1, length, replacement)\n}\n\n/**\n * Replace part of string after the first occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceAfter(delimiter: String, replacement: String, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(index + delimiter.length, length, replacement)\n}\n\n/**\n * Replace part of string after the last occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceAfterLast(delimiter: String, replacement: String, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(index + delimiter.length, length, replacement)\n}\n\n/**\n * Replace part of string after the last occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceAfterLast(delimiter: Char, replacement: String, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(index + 1, length, replacement)\n}\n\n/**\n * Replace part of string before the last occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceBeforeLast(delimiter: Char, replacement: String, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(0, index, replacement)\n}\n\n/**\n * Replace part of string before the last occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceBeforeLast(delimiter: String, replacement: String, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(0, index, replacement)\n}\n\n\n// public fun String.replace(oldChar: Char, newChar: Char, ignoreCase: Boolean): String // JVM- and JS-specific\n// public fun String.replace(oldValue: String, newValue: String, ignoreCase: Boolean): String // JVM- and JS-specific\n\n/**\n * Returns a new string obtained by replacing each substring of this char sequence that matches the given regular expression\n * with the given [replacement].\n *\n * The [replacement] can consist of any combination of literal text and $-substitutions. To treat the replacement string\n * literally escape it with the [kotlin.text.Regex.Companion.escapeReplacement] method.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.replace(regex: Regex, replacement: String): String = regex.replace(this, replacement)\n\n/**\n * Returns a new string obtained by replacing each substring of this char sequence that matches the given regular expression\n * with the result of the given function [transform] that takes [MatchResult] and returns a string to be used as a\n * replacement for that match.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.replace(regex: Regex, noinline transform: (MatchResult) -> CharSequence): String =\n    regex.replace(this, transform)\n\n/**\n * Replaces the first occurrence of the given regular expression [regex] in this char sequence with specified [replacement] expression.\n *\n * @param replacement A replacement expression that can include substitutions. See [Regex.replaceFirst] for details.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.replaceFirst(regex: Regex, replacement: String): String = regex.replaceFirst(this, replacement)\n\n/**\n * Returns a copy of this string having its first character replaced with the result of the specified [transform],\n * or the original string if it's empty.\n *\n * @param transform function that takes the first character and returns the result of the transform applied to the character.\n *\n * @sample samples.text.Strings.replaceFirstChar\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@JvmName(\"replaceFirstCharWithChar\")\n@kotlin.internal.InlineOnly\npublic inline fun String.replaceFirstChar(transform: (Char) -> Char): String {\n    return if (isNotEmpty()) transform(this[0]) + substring(1) else this\n}\n\n/**\n * Returns a copy of this string having its first character replaced with the result of the specified [transform],\n * or the original string if it's empty.\n *\n * @param transform function that takes the first character and returns the result of the transform applied to the character.\n *\n * @sample samples.text.Strings.replaceFirstChar\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@JvmName(\"replaceFirstCharWithCharSequence\")\n@kotlin.internal.InlineOnly\npublic inline fun String.replaceFirstChar(transform: (Char) -> CharSequence): String {\n    return if (isNotEmpty()) transform(this[0]).toString() + substring(1) else this\n}\n\n\n/**\n * Returns `true` if this char sequence matches the given regular expression.\n */\n@kotlin.internal.InlineOnly\npublic inline infix fun CharSequence.matches(regex: Regex): Boolean = regex.matches(this)\n\n/**\n * Implementation of [regionMatches] for CharSequences.\n * Invoked when it's already known that arguments are not Strings, so that no additional type checks are performed.\n */\ninternal fun CharSequence.regionMatchesImpl(thisOffset: Int, other: CharSequence, otherOffset: Int, length: Int, ignoreCase: Boolean): Boolean {\n    if ((otherOffset < 0) || (thisOffset < 0) || (thisOffset > this.length - length) || (otherOffset > other.length - length)) {\n        return false\n    }\n\n    for (index in 0 until length) {\n        if (!this[thisOffset + index].equals(other[otherOffset + index], ignoreCase))\n            return false\n    }\n    return true\n}\n\n/**\n * Returns `true` if this char sequence starts with the specified character.\n */\npublic fun CharSequence.startsWith(char: Char, ignoreCase: Boolean = false): Boolean =\n    this.length > 0 && this[0].equals(char, ignoreCase)\n\n/**\n * Returns `true` if this char sequence ends with the specified character.\n */\npublic fun CharSequence.endsWith(char: Char, ignoreCase: Boolean = false): Boolean =\n    this.length > 0 && this[lastIndex].equals(char, ignoreCase)\n\n/**\n * Returns `true` if this char sequence starts with the specified prefix.\n */\npublic fun CharSequence.startsWith(prefix: CharSequence, ignoreCase: Boolean = false): Boolean {\n    if (!ignoreCase && this is String && prefix is String)\n        return this.startsWith(prefix)\n    else\n        return regionMatchesImpl(0, prefix, 0, prefix.length, ignoreCase)\n}\n\n/**\n * Returns `true` if a substring of this char sequence starting at the specified offset [startIndex] starts with the specified prefix.\n */\npublic fun CharSequence.startsWith(prefix: CharSequence, startIndex: Int, ignoreCase: Boolean = false): Boolean {\n    if (!ignoreCase && this is String && prefix is String)\n        return this.startsWith(prefix, startIndex)\n    else\n        return regionMatchesImpl(startIndex, prefix, 0, prefix.length, ignoreCase)\n}\n\n/**\n * Returns `true` if this char sequence ends with the specified suffix.\n */\npublic fun CharSequence.endsWith(suffix: CharSequence, ignoreCase: Boolean = false): Boolean {\n    if (!ignoreCase && this is String && suffix is String)\n        return this.endsWith(suffix)\n    else\n        return regionMatchesImpl(length - suffix.length, suffix, 0, suffix.length, ignoreCase)\n}\n\n\n// common prefix and suffix\n\n/**\n * Returns the longest string `prefix` such that this char sequence and [other] char sequence both start with this prefix,\n * taking care not to split surrogate pairs.\n * If this and [other] have no common prefix, returns the empty string.\n\n * @param ignoreCase `true` to ignore character case when matching a character. By default `false`.\n * @sample samples.text.Strings.commonPrefixWith\n */\npublic fun CharSequence.commonPrefixWith(other: CharSequence, ignoreCase: Boolean = false): String {\n    val shortestLength = minOf(this.length, other.length)\n\n    var i = 0\n    while (i < shortestLength && this[i].equals(other[i], ignoreCase = ignoreCase)) {\n        i++\n    }\n    if (this.hasSurrogatePairAt(i - 1) || other.hasSurrogatePairAt(i - 1)) {\n        i--\n    }\n    return subSequence(0, i).toString()\n}\n\n/**\n * Returns the longest string `suffix` such that this char sequence and [other] char sequence both end with this suffix,\n * taking care not to split surrogate pairs.\n * If this and [other] have no common suffix, returns the empty string.\n\n * @param ignoreCase `true` to ignore character case when matching a character. By default `false`.\n * @sample samples.text.Strings.commonSuffixWith\n */\npublic fun CharSequence.commonSuffixWith(other: CharSequence, ignoreCase: Boolean = false): String {\n    val thisLength = this.length\n    val otherLength = other.length\n    val shortestLength = minOf(thisLength, otherLength)\n\n    var i = 0\n    while (i < shortestLength && this[thisLength - i - 1].equals(other[otherLength - i - 1], ignoreCase = ignoreCase)) {\n        i++\n    }\n    if (this.hasSurrogatePairAt(thisLength - i - 1) || other.hasSurrogatePairAt(otherLength - i - 1)) {\n        i--\n    }\n    return subSequence(thisLength - i, thisLength).toString()\n}\n\n\n// indexOfAny()\n\n/**\n * Finds the index of the first occurrence of any of the specified [chars] in this char sequence,\n * starting from the specified [startIndex] and optionally ignoring the case.\n *\n * @param ignoreCase `true` to ignore character case when matching a character. By default `false`.\n * @return An index of the first occurrence of matched character from [chars] or -1 if none of [chars] are found.\n *\n */\npublic fun CharSequence.indexOfAny(chars: CharArray, startIndex: Int = 0, ignoreCase: Boolean = false): Int {\n    if (!ignoreCase && chars.size == 1 && this is String) {\n        val char = chars.single()\n        return nativeIndexOf(char, startIndex)\n    }\n\n    for (index in startIndex.coerceAtLeast(0)..lastIndex) {\n        val charAtIndex = get(index)\n        if (chars.any { it.equals(charAtIndex, ignoreCase) })\n            return index\n    }\n    return -1\n}\n\n/**\n * Finds the index of the last occurrence of any of the specified [chars] in this char sequence,\n * starting from the specified [startIndex] and optionally ignoring the case.\n *\n * @param startIndex The index of character to start searching at. The search proceeds backward toward the beginning of the string.\n * @param ignoreCase `true` to ignore character case when matching a character. By default `false`.\n * @return An index of the last occurrence of matched character from [chars] or -1 if none of [chars] are found.\n *\n */\npublic fun CharSequence.lastIndexOfAny(chars: CharArray, startIndex: Int = lastIndex, ignoreCase: Boolean = false): Int {\n    if (!ignoreCase && chars.size == 1 && this is String) {\n        val char = chars.single()\n        return nativeLastIndexOf(char, startIndex)\n    }\n\n\n    for (index in startIndex.coerceAtMost(lastIndex) downTo 0) {\n        val charAtIndex = get(index)\n        if (chars.any { it.equals(charAtIndex, ignoreCase) })\n            return index\n    }\n\n    return -1\n}\n\n\nprivate fun CharSequence.indexOf(other: CharSequence, startIndex: Int, endIndex: Int, ignoreCase: Boolean, last: Boolean = false): Int {\n    val indices = if (!last)\n        startIndex.coerceAtLeast(0)..endIndex.coerceAtMost(length)\n    else\n        startIndex.coerceAtMost(lastIndex) downTo endIndex.coerceAtLeast(0)\n\n    if (this is String && other is String) { // smart cast\n        for (index in indices) {\n            if (other.regionMatches(0, this, index, other.length, ignoreCase))\n                return index\n        }\n    } else {\n        for (index in indices) {\n            if (other.regionMatchesImpl(0, this, index, other.length, ignoreCase))\n                return index\n        }\n    }\n    return -1\n}\n\nprivate fun CharSequence.findAnyOf(strings: Collection<String>, startIndex: Int, ignoreCase: Boolean, last: Boolean): Pair<Int, String>? {\n    if (!ignoreCase && strings.size == 1) {\n        val string = strings.single()\n        val index = if (!last) indexOf(string, startIndex) else lastIndexOf(string, startIndex)\n        return if (index < 0) null else index to string\n    }\n\n    val indices = if (!last) startIndex.coerceAtLeast(0)..length else startIndex.coerceAtMost(lastIndex) downTo 0\n\n    if (this is String) {\n        for (index in indices) {\n            val matchingString = strings.firstOrNull { it.regionMatches(0, this, index, it.length, ignoreCase) }\n            if (matchingString != null)\n                return index to matchingString\n        }\n    } else {\n        for (index in indices) {\n            val matchingString = strings.firstOrNull { it.regionMatchesImpl(0, this, index, it.length, ignoreCase) }\n            if (matchingString != null)\n                return index to matchingString\n        }\n    }\n\n    return null\n}\n\n/**\n * Finds the first occurrence of any of the specified [strings] in this char sequence,\n * starting from the specified [startIndex] and optionally ignoring the case.\n *\n * @param ignoreCase `true` to ignore character case when matching a string. By default `false`.\n * @return A pair of an index of the first occurrence of matched string from [strings] and the string matched\n * or `null` if none of [strings] are found.\n *\n * To avoid ambiguous results when strings in [strings] have characters in common, this method proceeds from\n * the beginning to the end of this string, and finds at each position the first element in [strings]\n * that matches this string at that position.\n */\npublic fun CharSequence.findAnyOf(strings: Collection<String>, startIndex: Int = 0, ignoreCase: Boolean = false): Pair<Int, String>? =\n    findAnyOf(strings, startIndex, ignoreCase, last = false)\n\n/**\n * Finds the last occurrence of any of the specified [strings] in this char sequence,\n * starting from the specified [startIndex] and optionally ignoring the case.\n *\n * @param startIndex The index of character to start searching at. The search proceeds backward toward the beginning of the string.\n * @param ignoreCase `true` to ignore character case when matching a string. By default `false`.\n * @return A pair of an index of the last occurrence of matched string from [strings] and the string matched or `null` if none of [strings] are found.\n *\n * To avoid ambiguous results when strings in [strings] have characters in common, this method proceeds from\n * the end toward the beginning of this string, and finds at each position the first element in [strings]\n * that matches this string at that position.\n */\npublic fun CharSequence.findLastAnyOf(strings: Collection<String>, startIndex: Int = lastIndex, ignoreCase: Boolean = false): Pair<Int, String>? =\n    findAnyOf(strings, startIndex, ignoreCase, last = true)\n\n/**\n * Finds the index of the first occurrence of any of the specified [strings] in this char sequence,\n * starting from the specified [startIndex] and optionally ignoring the case.\n *\n * @param ignoreCase `true` to ignore character case when matching a string. By default `false`.\n * @return An index of the first occurrence of matched string from [strings] or -1 if none of [strings] are found.\n *\n * To avoid ambiguous results when strings in [strings] have characters in common, this method proceeds from\n * the beginning to the end of this string, and finds at each position the first element in [strings]\n * that matches this string at that position.\n */\npublic fun CharSequence.indexOfAny(strings: Collection<String>, startIndex: Int = 0, ignoreCase: Boolean = false): Int =\n    findAnyOf(strings, startIndex, ignoreCase, last = false)?.first ?: -1\n\n/**\n * Finds the index of the last occurrence of any of the specified [strings] in this char sequence,\n * starting from the specified [startIndex] and optionally ignoring the case.\n *\n * @param startIndex The index of character to start searching at. The search proceeds backward toward the beginning of the string.\n * @param ignoreCase `true` to ignore character case when matching a string. By default `false`.\n * @return An index of the last occurrence of matched string from [strings] or -1 if none of [strings] are found.\n *\n * To avoid ambiguous results when strings in [strings] have characters in common, this method proceeds from\n * the end toward the beginning of this string, and finds at each position the first element in [strings]\n * that matches this string at that position.\n */\npublic fun CharSequence.lastIndexOfAny(strings: Collection<String>, startIndex: Int = lastIndex, ignoreCase: Boolean = false): Int =\n    findAnyOf(strings, startIndex, ignoreCase, last = true)?.first ?: -1\n\n\n// indexOf\n\n/**\n * Returns the index within this string of the first occurrence of the specified character, starting from the specified [startIndex].\n *\n * @param ignoreCase `true` to ignore character case when matching a character. By default `false`.\n * @return An index of the first occurrence of [char] or -1 if none is found.\n */\npublic fun CharSequence.indexOf(char: Char, startIndex: Int = 0, ignoreCase: Boolean = false): Int {\n    return if (ignoreCase || this !is String)\n        indexOfAny(charArrayOf(char), startIndex, ignoreCase)\n    else\n        nativeIndexOf(char, startIndex)\n}\n\n/**\n * Returns the index within this char sequence of the first occurrence of the specified [string],\n * starting from the specified [startIndex].\n *\n * @param ignoreCase `true` to ignore character case when matching a string. By default `false`.\n * @return An index of the first occurrence of [string] or `-1` if none is found.\n * @sample samples.text.Strings.indexOf\n */\npublic fun CharSequence.indexOf(string: String, startIndex: Int = 0, ignoreCase: Boolean = false): Int {\n    return if (ignoreCase || this !is String)\n        indexOf(string, startIndex, length, ignoreCase)\n    else\n        nativeIndexOf(string, startIndex)\n}\n\n/**\n * Returns the index within this char sequence of the last occurrence of the specified character,\n * starting from the specified [startIndex].\n *\n * @param startIndex The index of character to start searching at. The search proceeds backward toward the beginning of the string.\n * @param ignoreCase `true` to ignore character case when matching a character. By default `false`.\n * @return An index of the last occurrence of [char] or -1 if none is found.\n */\npublic fun CharSequence.lastIndexOf(char: Char, startIndex: Int = lastIndex, ignoreCase: Boolean = false): Int {\n    return if (ignoreCase || this !is String)\n        lastIndexOfAny(charArrayOf(char), startIndex, ignoreCase)\n    else\n        nativeLastIndexOf(char, startIndex)\n}\n\n/**\n * Returns the index within this char sequence of the last occurrence of the specified [string],\n * starting from the specified [startIndex].\n *\n * @param startIndex The index of character to start searching at. The search proceeds backward toward the beginning of the string.\n * @param ignoreCase `true` to ignore character case when matching a string. By default `false`.\n * @return An index of the last occurrence of [string] or -1 if none is found.\n */\npublic fun CharSequence.lastIndexOf(string: String, startIndex: Int = lastIndex, ignoreCase: Boolean = false): Int {\n    return if (ignoreCase || this !is String)\n        indexOf(string, startIndex, 0, ignoreCase, last = true)\n    else\n        nativeLastIndexOf(string, startIndex)\n}\n\n/**\n * Returns `true` if this char sequence contains the specified [other] sequence of characters as a substring.\n *\n * @param ignoreCase `true` to ignore character case when comparing strings. By default `false`.\n */\n@Suppress(\"INAPPLICABLE_OPERATOR_MODIFIER\")\npublic operator fun CharSequence.contains(other: CharSequence, ignoreCase: Boolean = false): Boolean =\n    if (other is String)\n        indexOf(other, ignoreCase = ignoreCase) >= 0\n    else\n        indexOf(other, 0, length, ignoreCase) >= 0\n\n\n\n/**\n * Returns `true` if this char sequence contains the specified character [char].\n *\n * @param ignoreCase `true` to ignore character case when comparing characters. By default `false`.\n */\n@Suppress(\"INAPPLICABLE_OPERATOR_MODIFIER\")\npublic operator fun CharSequence.contains(char: Char, ignoreCase: Boolean = false): Boolean =\n    indexOf(char, ignoreCase = ignoreCase) >= 0\n\n/**\n * Returns `true` if this char sequence contains at least one match of the specified regular expression [regex].\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun CharSequence.contains(regex: Regex): Boolean = regex.containsMatchIn(this)\n\n\n// rangesDelimitedBy\n\n\nprivate class DelimitedRangesSequence(\n    private val input: CharSequence,\n    private val startIndex: Int,\n    private val limit: Int,\n    private val getNextMatch: CharSequence.(currentIndex: Int) -> Pair<Int, Int>?\n) : Sequence<IntRange> {\n\n    override fun iterator(): Iterator<IntRange> = object : Iterator<IntRange> {\n        var nextState: Int = -1 // -1 for unknown, 0 for done, 1 for continue\n        var currentStartIndex: Int = startIndex.coerceIn(0, input.length)\n        var nextSearchIndex: Int = currentStartIndex\n        var nextItem: IntRange? = null\n        var counter: Int = 0\n\n        private fun calcNext() {\n            if (nextSearchIndex < 0) {\n                nextState = 0\n                nextItem = null\n            } else {\n                if (limit > 0 && ++counter >= limit || nextSearchIndex > input.length) {\n                    nextItem = currentStartIndex..input.lastIndex\n                    nextSearchIndex = -1\n                } else {\n                    val match = input.getNextMatch(nextSearchIndex)\n                    if (match == null) {\n                        nextItem = currentStartIndex..input.lastIndex\n                        nextSearchIndex = -1\n                    } else {\n                        val (index, length) = match\n                        nextItem = currentStartIndex until index\n                        currentStartIndex = index + length\n                        nextSearchIndex = currentStartIndex + if (length == 0) 1 else 0\n                    }\n                }\n                nextState = 1\n            }\n        }\n\n        override fun next(): IntRange {\n            if (nextState == -1)\n                calcNext()\n            if (nextState == 0)\n                throw NoSuchElementException()\n            val result = nextItem as IntRange\n            // Clean next to avoid keeping reference on yielded instance\n            nextItem = null\n            nextState = -1\n            return result\n        }\n\n        override fun hasNext(): Boolean {\n            if (nextState == -1)\n                calcNext()\n            return nextState == 1\n        }\n    }\n}\n\n/**\n * Returns a sequence of index ranges of substrings in this char sequence around occurrences of the specified [delimiters].\n *\n * @param delimiters One or more characters to be used as delimiters.\n * @param startIndex The index to start searching delimiters from.\n *  No range having its start value less than [startIndex] is returned.\n *  [startIndex] is coerced to be non-negative and not greater than length of this string.\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return. Zero by default means no limit is set.\n */\nprivate fun CharSequence.rangesDelimitedBy(delimiters: CharArray, startIndex: Int = 0, ignoreCase: Boolean = false, limit: Int = 0): Sequence<IntRange> {\n    require(limit >= 0, { \"Limit must be non-negative, but was $limit.\" })\n\n    return DelimitedRangesSequence(this, startIndex, limit, { currentIndex ->\n        indexOfAny(delimiters, currentIndex, ignoreCase = ignoreCase).let { if (it < 0) null else it to 1 }\n    })\n}\n\n\n/**\n * Returns a sequence of index ranges of substrings in this char sequence around occurrences of the specified [delimiters].\n *\n * @param delimiters One or more strings to be used as delimiters.\n * @param startIndex The index to start searching delimiters from.\n *  No range having its start value less than [startIndex] is returned.\n *  [startIndex] is coerced to be non-negative and not greater than length of this string.\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return. Zero by default means no limit is set.\n *\n * To avoid ambiguous results when strings in [delimiters] have characters in common, this method proceeds from\n * the beginning to the end of this string, and finds at each position the first element in [delimiters]\n * that matches this string at that position.\n */\nprivate fun CharSequence.rangesDelimitedBy(delimiters: Array<out String>, startIndex: Int = 0, ignoreCase: Boolean = false, limit: Int = 0): Sequence<IntRange> {\n    require(limit >= 0, { \"Limit must be non-negative, but was $limit.\" } )\n    val delimitersList = delimiters.asList()\n\n    return DelimitedRangesSequence(this, startIndex, limit, { currentIndex -> findAnyOf(delimitersList, currentIndex, ignoreCase = ignoreCase, last = false)?.let { it.first to it.second.length } })\n\n}\n\n\n// split\n\n/**\n * Splits this char sequence to a sequence of strings around occurrences of the specified [delimiters].\n *\n * @param delimiters One or more strings to be used as delimiters.\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return. Zero by default means no limit is set.\n *\n * To avoid ambiguous results when strings in [delimiters] have characters in common, this method proceeds from\n * the beginning to the end of this string, and finds at each position the first element in [delimiters]\n * that matches this string at that position.\n */\npublic fun CharSequence.splitToSequence(vararg delimiters: String, ignoreCase: Boolean = false, limit: Int = 0): Sequence<String> =\n    rangesDelimitedBy(delimiters, ignoreCase = ignoreCase, limit = limit).map { substring(it) }\n\n/**\n * Splits this char sequence to a list of strings around occurrences of the specified [delimiters].\n *\n * @param delimiters One or more strings to be used as delimiters.\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return. Zero by default means no limit is set.\n *\n * To avoid ambiguous results when strings in [delimiters] have characters in common, this method proceeds from\n * the beginning to the end of this string, and matches at each position the first element in [delimiters]\n * that is equal to a delimiter in this instance at that position.\n */\npublic fun CharSequence.split(vararg delimiters: String, ignoreCase: Boolean = false, limit: Int = 0): List<String> {\n    if (delimiters.size == 1) {\n        val delimiter = delimiters[0]\n        if (!delimiter.isEmpty()) {\n            return split(delimiter, ignoreCase, limit)\n        }\n    }\n\n    return rangesDelimitedBy(delimiters, ignoreCase = ignoreCase, limit = limit).asIterable().map { substring(it) }\n}\n\n/**\n * Splits this char sequence to a sequence of strings around occurrences of the specified [delimiters].\n *\n * @param delimiters One or more characters to be used as delimiters.\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return.\n */\npublic fun CharSequence.splitToSequence(vararg delimiters: Char, ignoreCase: Boolean = false, limit: Int = 0): Sequence<String> =\n    rangesDelimitedBy(delimiters, ignoreCase = ignoreCase, limit = limit).map { substring(it) }\n\n/**\n * Splits this char sequence to a list of strings around occurrences of the specified [delimiters].\n *\n * @param delimiters One or more characters to be used as delimiters.\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return.\n */\npublic fun CharSequence.split(vararg delimiters: Char, ignoreCase: Boolean = false, limit: Int = 0): List<String> {\n    if (delimiters.size == 1) {\n        return split(delimiters[0].toString(), ignoreCase, limit)\n    }\n\n    return rangesDelimitedBy(delimiters, ignoreCase = ignoreCase, limit = limit).asIterable().map { substring(it) }\n}\n\n/**\n * Splits this char sequence to a list of strings around occurrences of the specified [delimiter].\n * This is specialized version of split which receives single non-empty delimiter and offers better performance\n *\n * @param delimiter String used as delimiter\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return.\n */\nprivate fun CharSequence.split(delimiter: String, ignoreCase: Boolean, limit: Int): List<String> {\n    require(limit >= 0, { \"Limit must be non-negative, but was $limit.\" })\n\n    var currentOffset = 0\n    var nextIndex = indexOf(delimiter, currentOffset, ignoreCase)\n    if (nextIndex == -1 || limit == 1) {\n        return listOf(this.toString())\n    }\n\n    val isLimited = limit > 0\n    val result = ArrayList<String>(if (isLimited) limit.coerceAtMost(10) else 10)\n    do {\n        result.add(substring(currentOffset, nextIndex))\n        currentOffset = nextIndex + delimiter.length\n        // Do not search for next occurrence if we're reaching limit\n        if (isLimited && result.size == limit - 1) break\n        nextIndex = indexOf(delimiter, currentOffset, ignoreCase)\n    } while (nextIndex != -1)\n\n    result.add(substring(currentOffset, length))\n    return result\n}\n\n/**\n * Splits this char sequence around matches of the given regular expression.\n *\n * @param limit Non-negative value specifying the maximum number of substrings to return.\n * Zero by default means no limit is set.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.split(regex: Regex, limit: Int = 0): List<String> = regex.split(this, limit)\n\n/**\n * Splits this char sequence to a sequence of lines delimited by any of the following character sequences: CRLF, LF or CR.\n *\n * The lines returned do not include terminating line separators.\n */\npublic fun CharSequence.lineSequence(): Sequence<String> = splitToSequence(\"\\r\\n\", \"\\n\", \"\\r\")\n\n/**\n * Splits this char sequence to a list of lines delimited by any of the following character sequences: CRLF, LF or CR.\n *\n * The lines returned do not include terminating line separators.\n */\npublic fun CharSequence.lines(): List<String> = lineSequence().toList()\n\n/**\n * Returns `true` if the contents of this char sequence are equal to the contents of the specified [other],\n * i.e. both char sequences contain the same number of the same characters in the same order.\n *\n * @sample samples.text.Strings.contentEquals\n */\n@SinceKotlin(\"1.5\")\npublic expect infix fun CharSequence?.contentEquals(other: CharSequence?): Boolean\n\n/**\n * Returns `true` if the contents of this char sequence are equal to the contents of the specified [other], optionally ignoring case difference.\n *\n * @param ignoreCase `true` to ignore character case when comparing contents.\n *\n * @sample samples.text.Strings.contentEquals\n */\n@SinceKotlin(\"1.5\")\npublic expect fun CharSequence?.contentEquals(other: CharSequence?, ignoreCase: Boolean): Boolean\n\ninternal fun CharSequence?.contentEqualsIgnoreCaseImpl(other: CharSequence?): Boolean {\n    if (this is String && other is String) {\n        return this.equals(other, ignoreCase = true)\n    }\n\n    if (this === other) return true\n    if (this == null || other == null || this.length != other.length) return false\n\n    for (i in 0 until length) {\n        if (!this[i].equals(other[i], ignoreCase = true)) {\n            return false\n        }\n    }\n\n    return true\n}\n\ninternal fun CharSequence?.contentEqualsImpl(other: CharSequence?): Boolean {\n    if (this is String && other is String) {\n        return this == other\n    }\n\n    if (this === other) return true\n    if (this == null || other == null || this.length != other.length) return false\n\n    for (i in 0 until length) {\n        if (this[i] != other[i]) {\n            return false\n        }\n    }\n\n    return true\n}\n\n/**\n * Returns `true` if the content of this string is equal to the word \"true\", `false` if it is equal to \"false\",\n * and throws an exception otherwise.\n *\n * There is also a lenient version of the function available on nullable String, [String?.toBoolean].\n * Note that this function is case-sensitive.\n *\n * @sample samples.text.Strings.toBooleanStrict\n */\n@SinceKotlin(\"1.5\")\npublic fun String.toBooleanStrict(): Boolean = when (this) {\n    \"true\" -> true\n    \"false\" -> false\n    else -> throw IllegalArgumentException(\"The string doesn't represent a boolean value: $this\")\n}\n\n/**\n * Returns `true` if the content of this string is equal to the word \"true\", `false` if it is equal to \"false\",\n * and `null` otherwise.\n *\n * There is also a lenient version of the function available on nullable String, [String?.toBoolean].\n * Note that this function is case-sensitive.\n *\n * @sample samples.text.Strings.toBooleanStrictOrNull\n */\n@SinceKotlin(\"1.5\")\npublic fun String.toBooleanStrictOrNull(): Boolean? = when (this) {\n    \"true\" -> true\n    \"false\" -> false\n    else -> null\n}","/*\n * Copyright 2010-2021 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"UArraysKt\")\n@file:kotlin.jvm.JvmPackageName(\"kotlin.collections.unsigned\")\n\npackage kotlin.collections\n\n//\n// NOTE: THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.random.*\nimport kotlin.ranges.contains\nimport kotlin.ranges.reversed\n\n/**\n * Returns 1st *element* from the array.\n * \n * If the size of this array is less than 1, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline operator fun UIntArray.component1(): UInt {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the array.\n * \n * If the size of this array is less than 1, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline operator fun ULongArray.component1(): ULong {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the array.\n * \n * If the size of this array is less than 1, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline operator fun UByteArray.component1(): UByte {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the array.\n * \n * If the size of this array is less than 1, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline operator fun UShortArray.component1(): UShort {\n    return get(0)\n}\n\n/**\n * Returns 2nd *element* from the array.\n * \n * If the size of this array is less than 2, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline operator fun UIntArray.component2(): UInt {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the array.\n * \n * If the size of this array is less than 2, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline operator fun ULongArray.component2(): ULong {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the array.\n * \n * If the size of this array is less than 2, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline operator fun UByteArray.component2(): UByte {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the array.\n * \n * If the size of this array is less than 2, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline operator fun UShortArray.component2(): UShort {\n    return get(1)\n}\n\n/**\n * Returns 3rd *element* from the array.\n * \n * If the size of this array is less than 3, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline operator fun UIntArray.component3(): UInt {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the array.\n * \n * If the size of this array is less than 3, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline operator fun ULongArray.component3(): ULong {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the array.\n * \n * If the size of this array is less than 3, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline operator fun UByteArray.component3(): UByte {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the array.\n * \n * If the size of this array is less than 3, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline operator fun UShortArray.component3(): UShort {\n    return get(2)\n}\n\n/**\n * Returns 4th *element* from the array.\n * \n * If the size of this array is less than 4, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline operator fun UIntArray.component4(): UInt {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the array.\n * \n * If the size of this array is less than 4, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline operator fun ULongArray.component4(): ULong {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the array.\n * \n * If the size of this array is less than 4, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline operator fun UByteArray.component4(): UByte {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the array.\n * \n * If the size of this array is less than 4, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline operator fun UShortArray.component4(): UShort {\n    return get(3)\n}\n\n/**\n * Returns 5th *element* from the array.\n * \n * If the size of this array is less than 5, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline operator fun UIntArray.component5(): UInt {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the array.\n * \n * If the size of this array is less than 5, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline operator fun ULongArray.component5(): ULong {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the array.\n * \n * If the size of this array is less than 5, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline operator fun UByteArray.component5(): UByte {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the array.\n * \n * If the size of this array is less than 5, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline operator fun UShortArray.component5(): UShort {\n    return get(4)\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic expect fun UIntArray.elementAt(index: Int): UInt\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic expect fun ULongArray.elementAt(index: Int): ULong\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic expect fun UByteArray.elementAt(index: Int): UByte\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic expect fun UShortArray.elementAt(index: Int): UShort\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.elementAtOrElse(index: Int, defaultValue: (Int) -> UInt): UInt {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.elementAtOrElse(index: Int, defaultValue: (Int) -> ULong): ULong {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.elementAtOrElse(index: Int, defaultValue: (Int) -> UByte): UByte {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.elementAtOrElse(index: Int, defaultValue: (Int) -> UShort): UShort {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.elementAtOrNull(index: Int): UInt? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.elementAtOrNull(index: Int): ULong? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.elementAtOrNull(index: Int): UByte? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.elementAtOrNull(index: Int): UShort? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.find(predicate: (UInt) -> Boolean): UInt? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.find(predicate: (ULong) -> Boolean): ULong? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.find(predicate: (UByte) -> Boolean): UByte? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.find(predicate: (UShort) -> Boolean): UShort? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.findLast(predicate: (UInt) -> Boolean): UInt? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.findLast(predicate: (ULong) -> Boolean): ULong? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.findLast(predicate: (UByte) -> Boolean): UByte? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.findLast(predicate: (UShort) -> Boolean): UShort? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.first(): UInt {\n    return storage.first().toUInt()\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.first(): ULong {\n    return storage.first().toULong()\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.first(): UByte {\n    return storage.first().toUByte()\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.first(): UShort {\n    return storage.first().toUShort()\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.first(predicate: (UInt) -> Boolean): UInt {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.first(predicate: (ULong) -> Boolean): ULong {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.first(predicate: (UByte) -> Boolean): UByte {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.first(predicate: (UShort) -> Boolean): UShort {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UIntArray.firstOrNull(): UInt? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun ULongArray.firstOrNull(): ULong? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UByteArray.firstOrNull(): UByte? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UShortArray.firstOrNull(): UShort? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.firstOrNull(predicate: (UInt) -> Boolean): UInt? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.firstOrNull(predicate: (ULong) -> Boolean): ULong? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.firstOrNull(predicate: (UByte) -> Boolean): UByte? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.firstOrNull(predicate: (UShort) -> Boolean): UShort? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.getOrElse(index: Int, defaultValue: (Int) -> UInt): UInt {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.getOrElse(index: Int, defaultValue: (Int) -> ULong): ULong {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.getOrElse(index: Int, defaultValue: (Int) -> UByte): UByte {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.getOrElse(index: Int, defaultValue: (Int) -> UShort): UShort {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.getOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UIntArray.getOrNull(index: Int): UInt? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.getOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun ULongArray.getOrNull(index: Int): ULong? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.getOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UByteArray.getOrNull(index: Int): UByte? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.getOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UShortArray.getOrNull(index: Int): UShort? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.indexOf(element: UInt): Int {\n    return storage.indexOf(element.toInt())\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.indexOf(element: ULong): Int {\n    return storage.indexOf(element.toLong())\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.indexOf(element: UByte): Int {\n    return storage.indexOf(element.toByte())\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.indexOf(element: UShort): Int {\n    return storage.indexOf(element.toShort())\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.indexOfFirst(predicate: (UInt) -> Boolean): Int {\n    return storage.indexOfFirst { predicate(it.toUInt()) }\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.indexOfFirst(predicate: (ULong) -> Boolean): Int {\n    return storage.indexOfFirst { predicate(it.toULong()) }\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.indexOfFirst(predicate: (UByte) -> Boolean): Int {\n    return storage.indexOfFirst { predicate(it.toUByte()) }\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.indexOfFirst(predicate: (UShort) -> Boolean): Int {\n    return storage.indexOfFirst { predicate(it.toUShort()) }\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.indexOfLast(predicate: (UInt) -> Boolean): Int {\n    return storage.indexOfLast { predicate(it.toUInt()) }\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.indexOfLast(predicate: (ULong) -> Boolean): Int {\n    return storage.indexOfLast { predicate(it.toULong()) }\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.indexOfLast(predicate: (UByte) -> Boolean): Int {\n    return storage.indexOfLast { predicate(it.toUByte()) }\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.indexOfLast(predicate: (UShort) -> Boolean): Int {\n    return storage.indexOfLast { predicate(it.toUShort()) }\n}\n\n/**\n * Returns the last element.\n * \n * @throws NoSuchElementException if the array is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.last(): UInt {\n    return storage.last().toUInt()\n}\n\n/**\n * Returns the last element.\n * \n * @throws NoSuchElementException if the array is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.last(): ULong {\n    return storage.last().toULong()\n}\n\n/**\n * Returns the last element.\n * \n * @throws NoSuchElementException if the array is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.last(): UByte {\n    return storage.last().toUByte()\n}\n\n/**\n * Returns the last element.\n * \n * @throws NoSuchElementException if the array is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.last(): UShort {\n    return storage.last().toUShort()\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * \n * @throws NoSuchElementException if no such element is found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.last(predicate: (UInt) -> Boolean): UInt {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * \n * @throws NoSuchElementException if no such element is found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.last(predicate: (ULong) -> Boolean): ULong {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * \n * @throws NoSuchElementException if no such element is found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.last(predicate: (UByte) -> Boolean): UByte {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * \n * @throws NoSuchElementException if no such element is found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.last(predicate: (UShort) -> Boolean): UShort {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.lastIndexOf(element: UInt): Int {\n    return storage.lastIndexOf(element.toInt())\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.lastIndexOf(element: ULong): Int {\n    return storage.lastIndexOf(element.toLong())\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.lastIndexOf(element: UByte): Int {\n    return storage.lastIndexOf(element.toByte())\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.lastIndexOf(element: UShort): Int {\n    return storage.lastIndexOf(element.toShort())\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UIntArray.lastOrNull(): UInt? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun ULongArray.lastOrNull(): ULong? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UByteArray.lastOrNull(): UByte? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UShortArray.lastOrNull(): UShort? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.lastOrNull(predicate: (UInt) -> Boolean): UInt? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.lastOrNull(predicate: (ULong) -> Boolean): ULong? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.lastOrNull(predicate: (UByte) -> Boolean): UByte? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.lastOrNull(predicate: (UShort) -> Boolean): UShort? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.random(): UInt {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.random(): ULong {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.random(): UByte {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.random(): UShort {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UIntArray.random(random: Random): UInt {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun ULongArray.random(random: Random): ULong {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UByteArray.random(random: Random): UByte {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UShortArray.random(random: Random): UShort {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.randomOrNull(): UInt? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this array, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.randomOrNull(): ULong? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this array, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.randomOrNull(): UByte? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this array, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.randomOrNull(): UShort? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun UIntArray.randomOrNull(random: Random): UInt? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun ULongArray.randomOrNull(random: Random): ULong? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun UByteArray.randomOrNull(random: Random): UByte? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun UShortArray.randomOrNull(random: Random): UShort? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.single(): UInt {\n    return storage.single().toUInt()\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.single(): ULong {\n    return storage.single().toULong()\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.single(): UByte {\n    return storage.single().toUByte()\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.single(): UShort {\n    return storage.single().toUShort()\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.single(predicate: (UInt) -> Boolean): UInt {\n    var single: UInt? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as UInt\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.single(predicate: (ULong) -> Boolean): ULong {\n    var single: ULong? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as ULong\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.single(predicate: (UByte) -> Boolean): UByte {\n    var single: UByte? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as UByte\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.single(predicate: (UShort) -> Boolean): UShort {\n    var single: UShort? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as UShort\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UIntArray.singleOrNull(): UInt? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun ULongArray.singleOrNull(): ULong? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UByteArray.singleOrNull(): UByte? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UShortArray.singleOrNull(): UShort? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.singleOrNull(predicate: (UInt) -> Boolean): UInt? {\n    var single: UInt? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.singleOrNull(predicate: (ULong) -> Boolean): ULong? {\n    var single: ULong? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.singleOrNull(predicate: (UByte) -> Boolean): UByte? {\n    var single: UByte? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.singleOrNull(predicate: (UShort) -> Boolean): UShort? {\n    var single: UShort? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UIntArray.drop(n: Int): List<UInt> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun ULongArray.drop(n: Int): List<ULong> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UByteArray.drop(n: Int): List<UByte> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UShortArray.drop(n: Int): List<UShort> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UIntArray.dropLast(n: Int): List<UInt> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun ULongArray.dropLast(n: Int): List<ULong> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UByteArray.dropLast(n: Int): List<UByte> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UShortArray.dropLast(n: Int): List<UShort> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.dropLastWhile(predicate: (UInt) -> Boolean): List<UInt> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.dropLastWhile(predicate: (ULong) -> Boolean): List<ULong> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.dropLastWhile(predicate: (UByte) -> Boolean): List<UByte> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.dropLastWhile(predicate: (UShort) -> Boolean): List<UShort> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.dropWhile(predicate: (UInt) -> Boolean): List<UInt> {\n    var yielding = false\n    val list = ArrayList<UInt>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.dropWhile(predicate: (ULong) -> Boolean): List<ULong> {\n    var yielding = false\n    val list = ArrayList<ULong>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.dropWhile(predicate: (UByte) -> Boolean): List<UByte> {\n    var yielding = false\n    val list = ArrayList<UByte>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.dropWhile(predicate: (UShort) -> Boolean): List<UShort> {\n    var yielding = false\n    val list = ArrayList<UShort>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.filter(predicate: (UInt) -> Boolean): List<UInt> {\n    return filterTo(ArrayList<UInt>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.filter(predicate: (ULong) -> Boolean): List<ULong> {\n    return filterTo(ArrayList<ULong>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.filter(predicate: (UByte) -> Boolean): List<UByte> {\n    return filterTo(ArrayList<UByte>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.filter(predicate: (UShort) -> Boolean): List<UShort> {\n    return filterTo(ArrayList<UShort>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexed\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.filterIndexed(predicate: (index: Int, UInt) -> Boolean): List<UInt> {\n    return filterIndexedTo(ArrayList<UInt>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexed\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.filterIndexed(predicate: (index: Int, ULong) -> Boolean): List<ULong> {\n    return filterIndexedTo(ArrayList<ULong>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexed\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.filterIndexed(predicate: (index: Int, UByte) -> Boolean): List<UByte> {\n    return filterIndexedTo(ArrayList<UByte>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexed\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.filterIndexed(predicate: (index: Int, UShort) -> Boolean): List<UShort> {\n    return filterIndexedTo(ArrayList<UShort>(), predicate)\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexedTo\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <C : MutableCollection<in UInt>> UIntArray.filterIndexedTo(destination: C, predicate: (index: Int, UInt) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexedTo\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <C : MutableCollection<in ULong>> ULongArray.filterIndexedTo(destination: C, predicate: (index: Int, ULong) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexedTo\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <C : MutableCollection<in UByte>> UByteArray.filterIndexedTo(destination: C, predicate: (index: Int, UByte) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexedTo\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <C : MutableCollection<in UShort>> UShortArray.filterIndexedTo(destination: C, predicate: (index: Int, UShort) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.filterNot(predicate: (UInt) -> Boolean): List<UInt> {\n    return filterNotTo(ArrayList<UInt>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.filterNot(predicate: (ULong) -> Boolean): List<ULong> {\n    return filterNotTo(ArrayList<ULong>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.filterNot(predicate: (UByte) -> Boolean): List<UByte> {\n    return filterNotTo(ArrayList<UByte>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.filterNot(predicate: (UShort) -> Boolean): List<UShort> {\n    return filterNotTo(ArrayList<UShort>(), predicate)\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <C : MutableCollection<in UInt>> UIntArray.filterNotTo(destination: C, predicate: (UInt) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <C : MutableCollection<in ULong>> ULongArray.filterNotTo(destination: C, predicate: (ULong) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <C : MutableCollection<in UByte>> UByteArray.filterNotTo(destination: C, predicate: (UByte) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <C : MutableCollection<in UShort>> UShortArray.filterNotTo(destination: C, predicate: (UShort) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <C : MutableCollection<in UInt>> UIntArray.filterTo(destination: C, predicate: (UInt) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <C : MutableCollection<in ULong>> ULongArray.filterTo(destination: C, predicate: (ULong) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <C : MutableCollection<in UByte>> UByteArray.filterTo(destination: C, predicate: (UByte) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <C : MutableCollection<in UShort>> UShortArray.filterTo(destination: C, predicate: (UShort) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UIntArray.slice(indices: IntRange): List<UInt> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun ULongArray.slice(indices: IntRange): List<ULong> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UByteArray.slice(indices: IntRange): List<UByte> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UShortArray.slice(indices: IntRange): List<UShort> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UIntArray.slice(indices: Iterable<Int>): List<UInt> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<UInt>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun ULongArray.slice(indices: Iterable<Int>): List<ULong> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<ULong>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UByteArray.slice(indices: Iterable<Int>): List<UByte> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<UByte>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UShortArray.slice(indices: Iterable<Int>): List<UShort> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<UShort>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UIntArray.sliceArray(indices: Collection<Int>): UIntArray {\n    return UIntArray(storage.sliceArray(indices))\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun ULongArray.sliceArray(indices: Collection<Int>): ULongArray {\n    return ULongArray(storage.sliceArray(indices))\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UByteArray.sliceArray(indices: Collection<Int>): UByteArray {\n    return UByteArray(storage.sliceArray(indices))\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UShortArray.sliceArray(indices: Collection<Int>): UShortArray {\n    return UShortArray(storage.sliceArray(indices))\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UIntArray.sliceArray(indices: IntRange): UIntArray {\n    return UIntArray(storage.sliceArray(indices))\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun ULongArray.sliceArray(indices: IntRange): ULongArray {\n    return ULongArray(storage.sliceArray(indices))\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UByteArray.sliceArray(indices: IntRange): UByteArray {\n    return UByteArray(storage.sliceArray(indices))\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UShortArray.sliceArray(indices: IntRange): UShortArray {\n    return UShortArray(storage.sliceArray(indices))\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UIntArray.take(n: Int): List<UInt> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<UInt>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun ULongArray.take(n: Int): List<ULong> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<ULong>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UByteArray.take(n: Int): List<UByte> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<UByte>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UShortArray.take(n: Int): List<UShort> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<UShort>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UIntArray.takeLast(n: Int): List<UInt> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<UInt>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun ULongArray.takeLast(n: Int): List<ULong> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<ULong>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UByteArray.takeLast(n: Int): List<UByte> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<UByte>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UShortArray.takeLast(n: Int): List<UShort> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<UShort>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.takeLastWhile(predicate: (UInt) -> Boolean): List<UInt> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.takeLastWhile(predicate: (ULong) -> Boolean): List<ULong> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.takeLastWhile(predicate: (UByte) -> Boolean): List<UByte> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.takeLastWhile(predicate: (UShort) -> Boolean): List<UShort> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.takeWhile(predicate: (UInt) -> Boolean): List<UInt> {\n    val list = ArrayList<UInt>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.takeWhile(predicate: (ULong) -> Boolean): List<ULong> {\n    val list = ArrayList<ULong>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.takeWhile(predicate: (UByte) -> Boolean): List<UByte> {\n    val list = ArrayList<UByte>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.takeWhile(predicate: (UShort) -> Boolean): List<UShort> {\n    val list = ArrayList<UShort>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Reverses elements in the array in-place.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.reverse(): Unit {\n    storage.reverse()\n}\n\n/**\n * Reverses elements in the array in-place.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.reverse(): Unit {\n    storage.reverse()\n}\n\n/**\n * Reverses elements in the array in-place.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.reverse(): Unit {\n    storage.reverse()\n}\n\n/**\n * Reverses elements in the array in-place.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.reverse(): Unit {\n    storage.reverse()\n}\n\n/**\n * Reverses elements of the array in the specified range in-place.\n * \n * @param fromIndex the start of the range (inclusive) to reverse.\n * @param toIndex the end of the range (exclusive) to reverse.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.reverse(fromIndex: Int, toIndex: Int): Unit {\n    storage.reverse(fromIndex, toIndex)\n}\n\n/**\n * Reverses elements of the array in the specified range in-place.\n * \n * @param fromIndex the start of the range (inclusive) to reverse.\n * @param toIndex the end of the range (exclusive) to reverse.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.reverse(fromIndex: Int, toIndex: Int): Unit {\n    storage.reverse(fromIndex, toIndex)\n}\n\n/**\n * Reverses elements of the array in the specified range in-place.\n * \n * @param fromIndex the start of the range (inclusive) to reverse.\n * @param toIndex the end of the range (exclusive) to reverse.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.reverse(fromIndex: Int, toIndex: Int): Unit {\n    storage.reverse(fromIndex, toIndex)\n}\n\n/**\n * Reverses elements of the array in the specified range in-place.\n * \n * @param fromIndex the start of the range (inclusive) to reverse.\n * @param toIndex the end of the range (exclusive) to reverse.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.reverse(fromIndex: Int, toIndex: Int): Unit {\n    storage.reverse(fromIndex, toIndex)\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UIntArray.reversed(): List<UInt> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun ULongArray.reversed(): List<ULong> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UByteArray.reversed(): List<UByte> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UShortArray.reversed(): List<UShort> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.reversedArray(): UIntArray {\n    return UIntArray(storage.reversedArray())\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.reversedArray(): ULongArray {\n    return ULongArray(storage.reversedArray())\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.reversedArray(): UByteArray {\n    return UByteArray(storage.reversedArray())\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.reversedArray(): UShortArray {\n    return UShortArray(storage.reversedArray())\n}\n\n/**\n * Randomly shuffles elements in this array in-place.\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\npublic fun UIntArray.shuffle(): Unit {\n    shuffle(Random)\n}\n\n/**\n * Randomly shuffles elements in this array in-place.\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\npublic fun ULongArray.shuffle(): Unit {\n    shuffle(Random)\n}\n\n/**\n * Randomly shuffles elements in this array in-place.\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\npublic fun UByteArray.shuffle(): Unit {\n    shuffle(Random)\n}\n\n/**\n * Randomly shuffles elements in this array in-place.\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\npublic fun UShortArray.shuffle(): Unit {\n    shuffle(Random)\n}\n\n/**\n * Randomly shuffles elements in this array in-place using the specified [random] instance as the source of randomness.\n * \n * See: https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#The_modern_algorithm\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\npublic fun UIntArray.shuffle(random: Random): Unit {\n    for (i in lastIndex downTo 1) {\n        val j = random.nextInt(i + 1)\n        val copy = this[i]\n        this[i] = this[j]\n        this[j] = copy\n    }\n}\n\n/**\n * Randomly shuffles elements in this array in-place using the specified [random] instance as the source of randomness.\n * \n * See: https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#The_modern_algorithm\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\npublic fun ULongArray.shuffle(random: Random): Unit {\n    for (i in lastIndex downTo 1) {\n        val j = random.nextInt(i + 1)\n        val copy = this[i]\n        this[i] = this[j]\n        this[j] = copy\n    }\n}\n\n/**\n * Randomly shuffles elements in this array in-place using the specified [random] instance as the source of randomness.\n * \n * See: https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#The_modern_algorithm\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\npublic fun UByteArray.shuffle(random: Random): Unit {\n    for (i in lastIndex downTo 1) {\n        val j = random.nextInt(i + 1)\n        val copy = this[i]\n        this[i] = this[j]\n        this[j] = copy\n    }\n}\n\n/**\n * Randomly shuffles elements in this array in-place using the specified [random] instance as the source of randomness.\n * \n * See: https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#The_modern_algorithm\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\npublic fun UShortArray.shuffle(random: Random): Unit {\n    for (i in lastIndex downTo 1) {\n        val j = random.nextInt(i + 1)\n        val copy = this[i]\n        this[i] = this[j]\n        this[j] = copy\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UIntArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun ULongArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UByteArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UShortArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UIntArray.sorted(): List<UInt> {\n    return copyOf().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun ULongArray.sorted(): List<ULong> {\n    return copyOf().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UByteArray.sorted(): List<UByte> {\n    return copyOf().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UShortArray.sorted(): List<UShort> {\n    return copyOf().apply { sort() }.asList()\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UIntArray.sortedArray(): UIntArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun ULongArray.sortedArray(): ULongArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UByteArray.sortedArray(): UByteArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UShortArray.sortedArray(): UShortArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UIntArray.sortedArrayDescending(): UIntArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun ULongArray.sortedArrayDescending(): ULongArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UByteArray.sortedArrayDescending(): UByteArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UShortArray.sortedArrayDescending(): UShortArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UIntArray.sortedDescending(): List<UInt> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun ULongArray.sortedDescending(): List<ULong> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UByteArray.sortedDescending(): List<UByte> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UShortArray.sortedDescending(): List<UShort> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns an array of type [ByteArray], which is a view of this array where each element is a signed reinterpretation\n * of the corresponding element of this array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.asByteArray(): ByteArray {\n    return storage\n}\n\n/**\n * Returns an array of type [IntArray], which is a view of this array where each element is a signed reinterpretation\n * of the corresponding element of this array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.asIntArray(): IntArray {\n    return storage\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic expect fun UIntArray.asList(): List<UInt>\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic expect fun ULongArray.asList(): List<ULong>\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic expect fun UByteArray.asList(): List<UByte>\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic expect fun UShortArray.asList(): List<UShort>\n\n/**\n * Returns an array of type [LongArray], which is a view of this array where each element is a signed reinterpretation\n * of the corresponding element of this array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.asLongArray(): LongArray {\n    return storage\n}\n\n/**\n * Returns an array of type [ShortArray], which is a view of this array where each element is a signed reinterpretation\n * of the corresponding element of this array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.asShortArray(): ShortArray {\n    return storage\n}\n\n/**\n * Returns an array of type [UByteArray], which is a view of this array where each element is an unsigned reinterpretation\n * of the corresponding element of this array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.asUByteArray(): UByteArray {\n    return UByteArray(this)\n}\n\n/**\n * Returns an array of type [UIntArray], which is a view of this array where each element is an unsigned reinterpretation\n * of the corresponding element of this array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.asUIntArray(): UIntArray {\n    return UIntArray(this)\n}\n\n/**\n * Returns an array of type [ULongArray], which is a view of this array where each element is an unsigned reinterpretation\n * of the corresponding element of this array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.asULongArray(): ULongArray {\n    return ULongArray(this)\n}\n\n/**\n * Returns an array of type [UShortArray], which is a view of this array where each element is an unsigned reinterpretation\n * of the corresponding element of this array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.asUShortArray(): UShortArray {\n    return UShortArray(this)\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.3\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\n@ExperimentalUnsignedTypes\npublic infix fun UIntArray.contentEquals(other: UIntArray): Boolean {\n    return this.contentEquals(other)\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.3\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\n@ExperimentalUnsignedTypes\npublic infix fun ULongArray.contentEquals(other: ULongArray): Boolean {\n    return this.contentEquals(other)\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.3\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\n@ExperimentalUnsignedTypes\npublic infix fun UByteArray.contentEquals(other: UByteArray): Boolean {\n    return this.contentEquals(other)\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.3\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\n@ExperimentalUnsignedTypes\npublic infix fun UShortArray.contentEquals(other: UShortArray): Boolean {\n    return this.contentEquals(other)\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\npublic infix fun UIntArray?.contentEquals(other: UIntArray?): Boolean {\n    return this?.storage.contentEquals(other?.storage)\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\npublic infix fun ULongArray?.contentEquals(other: ULongArray?): Boolean {\n    return this?.storage.contentEquals(other?.storage)\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\npublic infix fun UByteArray?.contentEquals(other: UByteArray?): Boolean {\n    return this?.storage.contentEquals(other?.storage)\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\npublic infix fun UShortArray?.contentEquals(other: UShortArray?): Boolean {\n    return this?.storage.contentEquals(other?.storage)\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.3\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\n@ExperimentalUnsignedTypes\npublic fun UIntArray.contentHashCode(): Int {\n    return this.contentHashCode()\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.3\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\n@ExperimentalUnsignedTypes\npublic fun ULongArray.contentHashCode(): Int {\n    return this.contentHashCode()\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.3\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\n@ExperimentalUnsignedTypes\npublic fun UByteArray.contentHashCode(): Int {\n    return this.contentHashCode()\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.3\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\n@ExperimentalUnsignedTypes\npublic fun UShortArray.contentHashCode(): Int {\n    return this.contentHashCode()\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\npublic fun UIntArray?.contentHashCode(): Int {\n    return this?.storage.contentHashCode()\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\npublic fun ULongArray?.contentHashCode(): Int {\n    return this?.storage.contentHashCode()\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\npublic fun UByteArray?.contentHashCode(): Int {\n    return this?.storage.contentHashCode()\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\npublic fun UShortArray?.contentHashCode(): Int {\n    return this?.storage.contentHashCode()\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.3\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\n@ExperimentalUnsignedTypes\npublic fun UIntArray.contentToString(): String {\n    return this.contentToString()\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.3\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\n@ExperimentalUnsignedTypes\npublic fun ULongArray.contentToString(): String {\n    return this.contentToString()\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.3\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\n@ExperimentalUnsignedTypes\npublic fun UByteArray.contentToString(): String {\n    return this.contentToString()\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.3\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\n@ExperimentalUnsignedTypes\npublic fun UShortArray.contentToString(): String {\n    return this.contentToString()\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\npublic fun UIntArray?.contentToString(): String {\n    return this?.joinToString(\", \", \"[\", \"]\") ?: \"null\"\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\npublic fun ULongArray?.contentToString(): String {\n    return this?.joinToString(\", \", \"[\", \"]\") ?: \"null\"\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\npublic fun UByteArray?.contentToString(): String {\n    return this?.joinToString(\", \", \"[\", \"]\") ?: \"null\"\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\npublic fun UShortArray?.contentToString(): String {\n    return this?.joinToString(\", \", \"[\", \"]\") ?: \"null\"\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.copyInto(destination: UIntArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): UIntArray {\n    storage.copyInto(destination.storage, destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.copyInto(destination: ULongArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): ULongArray {\n    storage.copyInto(destination.storage, destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.copyInto(destination: UByteArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): UByteArray {\n    storage.copyInto(destination.storage, destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.copyInto(destination: UShortArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): UShortArray {\n    storage.copyInto(destination.storage, destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.copyOf(): UIntArray {\n    return UIntArray(storage.copyOf())\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.copyOf(): ULongArray {\n    return ULongArray(storage.copyOf())\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.copyOf(): UByteArray {\n    return UByteArray(storage.copyOf())\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.copyOf(): UShortArray {\n    return UShortArray(storage.copyOf())\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.copyOf(newSize: Int): UIntArray {\n    return UIntArray(storage.copyOf(newSize))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.copyOf(newSize: Int): ULongArray {\n    return ULongArray(storage.copyOf(newSize))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.copyOf(newSize: Int): UByteArray {\n    return UByteArray(storage.copyOf(newSize))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.copyOf(newSize: Int): UShortArray {\n    return UShortArray(storage.copyOf(newSize))\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive) to copy.\n * @param toIndex the end of the range (exclusive) to copy.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.copyOfRange(fromIndex: Int, toIndex: Int): UIntArray {\n    return UIntArray(storage.copyOfRange(fromIndex, toIndex))\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive) to copy.\n * @param toIndex the end of the range (exclusive) to copy.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.copyOfRange(fromIndex: Int, toIndex: Int): ULongArray {\n    return ULongArray(storage.copyOfRange(fromIndex, toIndex))\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive) to copy.\n * @param toIndex the end of the range (exclusive) to copy.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.copyOfRange(fromIndex: Int, toIndex: Int): UByteArray {\n    return UByteArray(storage.copyOfRange(fromIndex, toIndex))\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive) to copy.\n * @param toIndex the end of the range (exclusive) to copy.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.copyOfRange(fromIndex: Int, toIndex: Int): UShortArray {\n    return UShortArray(storage.copyOfRange(fromIndex, toIndex))\n}\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive) to fill, 0 by default.\n * @param toIndex the end of the range (exclusive) to fill, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UIntArray.fill(element: UInt, fromIndex: Int = 0, toIndex: Int = size): Unit {\n    storage.fill(element.toInt(), fromIndex, toIndex)\n}\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive) to fill, 0 by default.\n * @param toIndex the end of the range (exclusive) to fill, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun ULongArray.fill(element: ULong, fromIndex: Int = 0, toIndex: Int = size): Unit {\n    storage.fill(element.toLong(), fromIndex, toIndex)\n}\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive) to fill, 0 by default.\n * @param toIndex the end of the range (exclusive) to fill, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UByteArray.fill(element: UByte, fromIndex: Int = 0, toIndex: Int = size): Unit {\n    storage.fill(element.toByte(), fromIndex, toIndex)\n}\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive) to fill, 0 by default.\n * @param toIndex the end of the range (exclusive) to fill, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UShortArray.fill(element: UShort, fromIndex: Int = 0, toIndex: Int = size): Unit {\n    storage.fill(element.toShort(), fromIndex, toIndex)\n}\n\n/**\n * Returns the range of valid indices for the array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic inline val UIntArray.indices: IntRange\n    get() = storage.indices\n\n/**\n * Returns the range of valid indices for the array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic inline val ULongArray.indices: IntRange\n    get() = storage.indices\n\n/**\n * Returns the range of valid indices for the array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic inline val UByteArray.indices: IntRange\n    get() = storage.indices\n\n/**\n * Returns the range of valid indices for the array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic inline val UShortArray.indices: IntRange\n    get() = storage.indices\n\n/**\n * Returns the last valid index for the array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic inline val UIntArray.lastIndex: Int\n    get() = storage.lastIndex\n\n/**\n * Returns the last valid index for the array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic inline val ULongArray.lastIndex: Int\n    get() = storage.lastIndex\n\n/**\n * Returns the last valid index for the array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic inline val UByteArray.lastIndex: Int\n    get() = storage.lastIndex\n\n/**\n * Returns the last valid index for the array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic inline val UShortArray.lastIndex: Int\n    get() = storage.lastIndex\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline operator fun UIntArray.plus(element: UInt): UIntArray {\n    return UIntArray(storage + element.toInt())\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline operator fun ULongArray.plus(element: ULong): ULongArray {\n    return ULongArray(storage + element.toLong())\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline operator fun UByteArray.plus(element: UByte): UByteArray {\n    return UByteArray(storage + element.toByte())\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline operator fun UShortArray.plus(element: UShort): UShortArray {\n    return UShortArray(storage + element.toShort())\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic operator fun UIntArray.plus(elements: Collection<UInt>): UIntArray {\n    var index = size\n    val result = storage.copyOf(size + elements.size)\n    for (element in elements) result[index++] = element.toInt()\n    return UIntArray(result)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic operator fun ULongArray.plus(elements: Collection<ULong>): ULongArray {\n    var index = size\n    val result = storage.copyOf(size + elements.size)\n    for (element in elements) result[index++] = element.toLong()\n    return ULongArray(result)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic operator fun UByteArray.plus(elements: Collection<UByte>): UByteArray {\n    var index = size\n    val result = storage.copyOf(size + elements.size)\n    for (element in elements) result[index++] = element.toByte()\n    return UByteArray(result)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic operator fun UShortArray.plus(elements: Collection<UShort>): UShortArray {\n    var index = size\n    val result = storage.copyOf(size + elements.size)\n    for (element in elements) result[index++] = element.toShort()\n    return UShortArray(result)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline operator fun UIntArray.plus(elements: UIntArray): UIntArray {\n    return UIntArray(storage + elements.storage)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline operator fun ULongArray.plus(elements: ULongArray): ULongArray {\n    return ULongArray(storage + elements.storage)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline operator fun UByteArray.plus(elements: UByteArray): UByteArray {\n    return UByteArray(storage + elements.storage)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline operator fun UShortArray.plus(elements: UShortArray): UShortArray {\n    return UShortArray(storage + elements.storage)\n}\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UIntArray.sort(): Unit {\n    if (size > 1) sortArray(this, 0, size)\n}\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun ULongArray.sort(): Unit {\n    if (size > 1) sortArray(this, 0, size)\n}\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UByteArray.sort(): Unit {\n    if (size > 1) sortArray(this, 0, size)\n}\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UShortArray.sort(): Unit {\n    if (size > 1) sortArray(this, 0, size)\n}\n\n/**\n * Sorts a range in the array in-place.\n * \n * @param fromIndex the start of the range (inclusive) to sort, 0 by default.\n * @param toIndex the end of the range (exclusive) to sort, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n * \n * @sample samples.collections.Arrays.Sorting.sortRangeOfArray\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\npublic fun UIntArray.sort(fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    sortArray(this, fromIndex, toIndex)\n}\n\n/**\n * Sorts a range in the array in-place.\n * \n * @param fromIndex the start of the range (inclusive) to sort, 0 by default.\n * @param toIndex the end of the range (exclusive) to sort, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n * \n * @sample samples.collections.Arrays.Sorting.sortRangeOfArray\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\npublic fun ULongArray.sort(fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    sortArray(this, fromIndex, toIndex)\n}\n\n/**\n * Sorts a range in the array in-place.\n * \n * @param fromIndex the start of the range (inclusive) to sort, 0 by default.\n * @param toIndex the end of the range (exclusive) to sort, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n * \n * @sample samples.collections.Arrays.Sorting.sortRangeOfArray\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\npublic fun UByteArray.sort(fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    sortArray(this, fromIndex, toIndex)\n}\n\n/**\n * Sorts a range in the array in-place.\n * \n * @param fromIndex the start of the range (inclusive) to sort, 0 by default.\n * @param toIndex the end of the range (exclusive) to sort, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n * \n * @sample samples.collections.Arrays.Sorting.sortRangeOfArray\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\npublic fun UShortArray.sort(fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    sortArray(this, fromIndex, toIndex)\n}\n\n/**\n * Sorts elements of the array in the specified range in-place.\n * The elements are sorted descending according to their natural sort order.\n * \n * @param fromIndex the start of the range (inclusive) to sort.\n * @param toIndex the end of the range (exclusive) to sort.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\npublic fun UIntArray.sortDescending(fromIndex: Int, toIndex: Int): Unit {\n    sort(fromIndex, toIndex)\n    reverse(fromIndex, toIndex)\n}\n\n/**\n * Sorts elements of the array in the specified range in-place.\n * The elements are sorted descending according to their natural sort order.\n * \n * @param fromIndex the start of the range (inclusive) to sort.\n * @param toIndex the end of the range (exclusive) to sort.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\npublic fun ULongArray.sortDescending(fromIndex: Int, toIndex: Int): Unit {\n    sort(fromIndex, toIndex)\n    reverse(fromIndex, toIndex)\n}\n\n/**\n * Sorts elements of the array in the specified range in-place.\n * The elements are sorted descending according to their natural sort order.\n * \n * @param fromIndex the start of the range (inclusive) to sort.\n * @param toIndex the end of the range (exclusive) to sort.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\npublic fun UByteArray.sortDescending(fromIndex: Int, toIndex: Int): Unit {\n    sort(fromIndex, toIndex)\n    reverse(fromIndex, toIndex)\n}\n\n/**\n * Sorts elements of the array in the specified range in-place.\n * The elements are sorted descending according to their natural sort order.\n * \n * @param fromIndex the start of the range (inclusive) to sort.\n * @param toIndex the end of the range (exclusive) to sort.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\npublic fun UShortArray.sortDescending(fromIndex: Int, toIndex: Int): Unit {\n    sort(fromIndex, toIndex)\n    reverse(fromIndex, toIndex)\n}\n\n/**\n * Returns an array of type [ByteArray], which is a copy of this array where each element is a signed reinterpretation\n * of the corresponding element of this array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.toByteArray(): ByteArray {\n    return storage.copyOf()\n}\n\n/**\n * Returns an array of type [IntArray], which is a copy of this array where each element is a signed reinterpretation\n * of the corresponding element of this array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.toIntArray(): IntArray {\n    return storage.copyOf()\n}\n\n/**\n * Returns an array of type [LongArray], which is a copy of this array where each element is a signed reinterpretation\n * of the corresponding element of this array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.toLongArray(): LongArray {\n    return storage.copyOf()\n}\n\n/**\n * Returns an array of type [ShortArray], which is a copy of this array where each element is a signed reinterpretation\n * of the corresponding element of this array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.toShortArray(): ShortArray {\n    return storage.copyOf()\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UIntArray.toTypedArray(): Array<UInt> {\n    return Array(size) { index -> this[index] }\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun ULongArray.toTypedArray(): Array<ULong> {\n    return Array(size) { index -> this[index] }\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UByteArray.toTypedArray(): Array<UByte> {\n    return Array(size) { index -> this[index] }\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UShortArray.toTypedArray(): Array<UShort> {\n    return Array(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of UByte containing all of the elements of this generic array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun Array<out UByte>.toUByteArray(): UByteArray {\n    return UByteArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of type [UByteArray], which is a copy of this array where each element is an unsigned reinterpretation\n * of the corresponding element of this array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.toUByteArray(): UByteArray {\n    return UByteArray(this.copyOf())\n}\n\n/**\n * Returns an array of UInt containing all of the elements of this generic array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun Array<out UInt>.toUIntArray(): UIntArray {\n    return UIntArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of type [UIntArray], which is a copy of this array where each element is an unsigned reinterpretation\n * of the corresponding element of this array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.toUIntArray(): UIntArray {\n    return UIntArray(this.copyOf())\n}\n\n/**\n * Returns an array of ULong containing all of the elements of this generic array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun Array<out ULong>.toULongArray(): ULongArray {\n    return ULongArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of type [ULongArray], which is a copy of this array where each element is an unsigned reinterpretation\n * of the corresponding element of this array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.toULongArray(): ULongArray {\n    return ULongArray(this.copyOf())\n}\n\n/**\n * Returns an array of UShort containing all of the elements of this generic array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun Array<out UShort>.toUShortArray(): UShortArray {\n    return UShortArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of type [UShortArray], which is a copy of this array where each element is an unsigned reinterpretation\n * of the corresponding element of this array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.toUShortArray(): UShortArray {\n    return UShortArray(this.copyOf())\n}\n\n/**\n * Returns a [Map] where keys are elements from the given array and values are\n * produced by the [valueSelector] function applied to each element.\n * \n * If any two elements are equal, the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Collections.Transformations.associateWith\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <V> UIntArray.associateWith(valueSelector: (UInt) -> V): Map<UInt, V> {\n    val result = LinkedHashMap<UInt, V>(mapCapacity(size).coerceAtLeast(16))\n    return associateWithTo(result, valueSelector)\n}\n\n/**\n * Returns a [Map] where keys are elements from the given array and values are\n * produced by the [valueSelector] function applied to each element.\n * \n * If any two elements are equal, the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Collections.Transformations.associateWith\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <V> ULongArray.associateWith(valueSelector: (ULong) -> V): Map<ULong, V> {\n    val result = LinkedHashMap<ULong, V>(mapCapacity(size).coerceAtLeast(16))\n    return associateWithTo(result, valueSelector)\n}\n\n/**\n * Returns a [Map] where keys are elements from the given array and values are\n * produced by the [valueSelector] function applied to each element.\n * \n * If any two elements are equal, the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Collections.Transformations.associateWith\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <V> UByteArray.associateWith(valueSelector: (UByte) -> V): Map<UByte, V> {\n    val result = LinkedHashMap<UByte, V>(mapCapacity(size).coerceAtLeast(16))\n    return associateWithTo(result, valueSelector)\n}\n\n/**\n * Returns a [Map] where keys are elements from the given array and values are\n * produced by the [valueSelector] function applied to each element.\n * \n * If any two elements are equal, the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Collections.Transformations.associateWith\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <V> UShortArray.associateWith(valueSelector: (UShort) -> V): Map<UShort, V> {\n    val result = LinkedHashMap<UShort, V>(mapCapacity(size).coerceAtLeast(16))\n    return associateWithTo(result, valueSelector)\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs for each element of the given array,\n * where key is the element itself and value is provided by the [valueSelector] function applied to that key.\n * \n * If any two elements are equal, the last one overwrites the former value in the map.\n * \n * @sample samples.collections.Collections.Transformations.associateWithTo\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <V, M : MutableMap<in UInt, in V>> UIntArray.associateWithTo(destination: M, valueSelector: (UInt) -> V): M {\n    for (element in this) {\n        destination.put(element, valueSelector(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs for each element of the given array,\n * where key is the element itself and value is provided by the [valueSelector] function applied to that key.\n * \n * If any two elements are equal, the last one overwrites the former value in the map.\n * \n * @sample samples.collections.Collections.Transformations.associateWithTo\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <V, M : MutableMap<in ULong, in V>> ULongArray.associateWithTo(destination: M, valueSelector: (ULong) -> V): M {\n    for (element in this) {\n        destination.put(element, valueSelector(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs for each element of the given array,\n * where key is the element itself and value is provided by the [valueSelector] function applied to that key.\n * \n * If any two elements are equal, the last one overwrites the former value in the map.\n * \n * @sample samples.collections.Collections.Transformations.associateWithTo\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <V, M : MutableMap<in UByte, in V>> UByteArray.associateWithTo(destination: M, valueSelector: (UByte) -> V): M {\n    for (element in this) {\n        destination.put(element, valueSelector(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs for each element of the given array,\n * where key is the element itself and value is provided by the [valueSelector] function applied to that key.\n * \n * If any two elements are equal, the last one overwrites the former value in the map.\n * \n * @sample samples.collections.Collections.Transformations.associateWithTo\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <V, M : MutableMap<in UShort, in V>> UShortArray.associateWithTo(destination: M, valueSelector: (UShort) -> V): M {\n    for (element in this) {\n        destination.put(element, valueSelector(element))\n    }\n    return destination\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> UIntArray.flatMap(transform: (UInt) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> ULongArray.flatMap(transform: (ULong) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> UByteArray.flatMap(transform: (UByte) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> UShortArray.flatMap(transform: (UShort) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMapIndexed\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> UIntArray.flatMapIndexed(transform: (index: Int, UInt) -> Iterable<R>): List<R> {\n    return flatMapIndexedTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMapIndexed\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> ULongArray.flatMapIndexed(transform: (index: Int, ULong) -> Iterable<R>): List<R> {\n    return flatMapIndexedTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMapIndexed\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> UByteArray.flatMapIndexed(transform: (index: Int, UByte) -> Iterable<R>): List<R> {\n    return flatMapIndexedTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMapIndexed\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> UShortArray.flatMapIndexed(transform: (index: Int, UShort) -> Iterable<R>): List<R> {\n    return flatMapIndexedTo(ArrayList<R>(), transform)\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array, to the given [destination].\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R, C : MutableCollection<in R>> UIntArray.flatMapIndexedTo(destination: C, transform: (index: Int, UInt) -> Iterable<R>): C {\n    var index = 0\n    for (element in this) {\n        val list = transform(index++, element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array, to the given [destination].\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R, C : MutableCollection<in R>> ULongArray.flatMapIndexedTo(destination: C, transform: (index: Int, ULong) -> Iterable<R>): C {\n    var index = 0\n    for (element in this) {\n        val list = transform(index++, element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array, to the given [destination].\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R, C : MutableCollection<in R>> UByteArray.flatMapIndexedTo(destination: C, transform: (index: Int, UByte) -> Iterable<R>): C {\n    var index = 0\n    for (element in this) {\n        val list = transform(index++, element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array, to the given [destination].\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R, C : MutableCollection<in R>> UShortArray.flatMapIndexedTo(destination: C, transform: (index: Int, UShort) -> Iterable<R>): C {\n    var index = 0\n    for (element in this) {\n        val list = transform(index++, element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R, C : MutableCollection<in R>> UIntArray.flatMapTo(destination: C, transform: (UInt) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R, C : MutableCollection<in R>> ULongArray.flatMapTo(destination: C, transform: (ULong) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R, C : MutableCollection<in R>> UByteArray.flatMapTo(destination: C, transform: (UByte) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R, C : MutableCollection<in R>> UShortArray.flatMapTo(destination: C, transform: (UShort) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <K> UIntArray.groupBy(keySelector: (UInt) -> K): Map<K, List<UInt>> {\n    return groupByTo(LinkedHashMap<K, MutableList<UInt>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <K> ULongArray.groupBy(keySelector: (ULong) -> K): Map<K, List<ULong>> {\n    return groupByTo(LinkedHashMap<K, MutableList<ULong>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <K> UByteArray.groupBy(keySelector: (UByte) -> K): Map<K, List<UByte>> {\n    return groupByTo(LinkedHashMap<K, MutableList<UByte>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <K> UShortArray.groupBy(keySelector: (UShort) -> K): Map<K, List<UShort>> {\n    return groupByTo(LinkedHashMap<K, MutableList<UShort>>(), keySelector)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> UIntArray.groupBy(keySelector: (UInt) -> K, valueTransform: (UInt) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> ULongArray.groupBy(keySelector: (ULong) -> K, valueTransform: (ULong) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> UByteArray.groupBy(keySelector: (UByte) -> K, valueTransform: (UByte) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> UShortArray.groupBy(keySelector: (UShort) -> K, valueTransform: (UShort) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <K, M : MutableMap<in K, MutableList<UInt>>> UIntArray.groupByTo(destination: M, keySelector: (UInt) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<UInt>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <K, M : MutableMap<in K, MutableList<ULong>>> ULongArray.groupByTo(destination: M, keySelector: (ULong) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<ULong>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <K, M : MutableMap<in K, MutableList<UByte>>> UByteArray.groupByTo(destination: M, keySelector: (UByte) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<UByte>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <K, M : MutableMap<in K, MutableList<UShort>>> UShortArray.groupByTo(destination: M, keySelector: (UShort) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<UShort>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> UIntArray.groupByTo(destination: M, keySelector: (UInt) -> K, valueTransform: (UInt) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> ULongArray.groupByTo(destination: M, keySelector: (ULong) -> K, valueTransform: (ULong) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> UByteArray.groupByTo(destination: M, keySelector: (UByte) -> K, valueTransform: (UByte) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> UShortArray.groupByTo(destination: M, keySelector: (UShort) -> K, valueTransform: (UShort) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> UIntArray.map(transform: (UInt) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> ULongArray.map(transform: (ULong) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> UByteArray.map(transform: (UByte) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> UShortArray.map(transform: (UShort) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> UIntArray.mapIndexed(transform: (index: Int, UInt) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> ULongArray.mapIndexed(transform: (index: Int, ULong) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> UByteArray.mapIndexed(transform: (index: Int, UByte) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> UShortArray.mapIndexed(transform: (index: Int, UShort) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R, C : MutableCollection<in R>> UIntArray.mapIndexedTo(destination: C, transform: (index: Int, UInt) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R, C : MutableCollection<in R>> ULongArray.mapIndexedTo(destination: C, transform: (index: Int, ULong) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R, C : MutableCollection<in R>> UByteArray.mapIndexedTo(destination: C, transform: (index: Int, UByte) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R, C : MutableCollection<in R>> UShortArray.mapIndexedTo(destination: C, transform: (index: Int, UShort) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R, C : MutableCollection<in R>> UIntArray.mapTo(destination: C, transform: (UInt) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R, C : MutableCollection<in R>> ULongArray.mapTo(destination: C, transform: (ULong) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R, C : MutableCollection<in R>> UByteArray.mapTo(destination: C, transform: (UByte) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R, C : MutableCollection<in R>> UShortArray.mapTo(destination: C, transform: (UShort) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UIntArray.withIndex(): Iterable<IndexedValue<UInt>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun ULongArray.withIndex(): Iterable<IndexedValue<ULong>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UByteArray.withIndex(): Iterable<IndexedValue<UByte>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UShortArray.withIndex(): Iterable<IndexedValue<UShort>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.all(predicate: (UInt) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.all(predicate: (ULong) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.all(predicate: (UByte) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.all(predicate: (UShort) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.any(): Boolean {\n    return storage.any()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.any(): Boolean {\n    return storage.any()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.any(): Boolean {\n    return storage.any()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.any(): Boolean {\n    return storage.any()\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.any(predicate: (UInt) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.any(predicate: (ULong) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.any(predicate: (UByte) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.any(predicate: (UShort) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.count(predicate: (UInt) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.count(predicate: (ULong) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.count(predicate: (UByte) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.count(predicate: (UShort) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> UIntArray.fold(initial: R, operation: (acc: R, UInt) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> ULongArray.fold(initial: R, operation: (acc: R, ULong) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> UByteArray.fold(initial: R, operation: (acc: R, UByte) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> UShortArray.fold(initial: R, operation: (acc: R, UShort) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> UIntArray.foldIndexed(initial: R, operation: (index: Int, acc: R, UInt) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> ULongArray.foldIndexed(initial: R, operation: (index: Int, acc: R, ULong) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> UByteArray.foldIndexed(initial: R, operation: (index: Int, acc: R, UByte) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> UShortArray.foldIndexed(initial: R, operation: (index: Int, acc: R, UShort) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value, and calculates the next accumulator value.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> UIntArray.foldRight(initial: R, operation: (UInt, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value, and calculates the next accumulator value.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> ULongArray.foldRight(initial: R, operation: (ULong, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value, and calculates the next accumulator value.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> UByteArray.foldRight(initial: R, operation: (UByte, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value, and calculates the next accumulator value.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> UShortArray.foldRight(initial: R, operation: (UShort, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> UIntArray.foldRightIndexed(initial: R, operation: (index: Int, UInt, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> ULongArray.foldRightIndexed(initial: R, operation: (index: Int, ULong, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> UByteArray.foldRightIndexed(initial: R, operation: (index: Int, UByte, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> UShortArray.foldRightIndexed(initial: R, operation: (index: Int, UShort, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Performs the given [action] on each element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.forEach(action: (UInt) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.forEach(action: (ULong) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.forEach(action: (UByte) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.forEach(action: (UShort) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.forEachIndexed(action: (index: Int, UInt) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.forEachIndexed(action: (index: Int, ULong) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.forEachIndexed(action: (index: Int, UByte) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.forEachIndexed(action: (index: Int, UShort) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n@Deprecated(\"Use maxOrNull instead.\", ReplaceWith(\"this.maxOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UIntArray.max(): UInt? {\n    return maxOrNull()\n}\n\n@Deprecated(\"Use maxOrNull instead.\", ReplaceWith(\"this.maxOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun ULongArray.max(): ULong? {\n    return maxOrNull()\n}\n\n@Deprecated(\"Use maxOrNull instead.\", ReplaceWith(\"this.maxOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UByteArray.max(): UByte? {\n    return maxOrNull()\n}\n\n@Deprecated(\"Use maxOrNull instead.\", ReplaceWith(\"this.maxOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UShortArray.max(): UShort? {\n    return maxOrNull()\n}\n\n@Deprecated(\"Use maxByOrNull instead.\", ReplaceWith(\"this.maxByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> UIntArray.maxBy(selector: (UInt) -> R): UInt? {\n    return maxByOrNull(selector)\n}\n\n@Deprecated(\"Use maxByOrNull instead.\", ReplaceWith(\"this.maxByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> ULongArray.maxBy(selector: (ULong) -> R): ULong? {\n    return maxByOrNull(selector)\n}\n\n@Deprecated(\"Use maxByOrNull instead.\", ReplaceWith(\"this.maxByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> UByteArray.maxBy(selector: (UByte) -> R): UByte? {\n    return maxByOrNull(selector)\n}\n\n@Deprecated(\"Use maxByOrNull instead.\", ReplaceWith(\"this.maxByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> UShortArray.maxBy(selector: (UShort) -> R): UShort? {\n    return maxByOrNull(selector)\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxByOrNull\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> UIntArray.maxByOrNull(selector: (UInt) -> R): UInt? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxByOrNull\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> ULongArray.maxByOrNull(selector: (ULong) -> R): ULong? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxByOrNull\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> UByteArray.maxByOrNull(selector: (UByte) -> R): UByte? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxByOrNull\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> UShortArray.maxByOrNull(selector: (UShort) -> R): UShort? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.maxOf(selector: (UInt) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.maxOf(selector: (ULong) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.maxOf(selector: (UByte) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.maxOf(selector: (UShort) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.maxOf(selector: (UInt) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.maxOf(selector: (ULong) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.maxOf(selector: (UByte) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.maxOf(selector: (UShort) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> UIntArray.maxOf(selector: (UInt) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> ULongArray.maxOf(selector: (ULong) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> UByteArray.maxOf(selector: (UByte) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> UShortArray.maxOf(selector: (UShort) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.maxOfOrNull(selector: (UInt) -> Double): Double? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.maxOfOrNull(selector: (ULong) -> Double): Double? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.maxOfOrNull(selector: (UByte) -> Double): Double? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.maxOfOrNull(selector: (UShort) -> Double): Double? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.maxOfOrNull(selector: (UInt) -> Float): Float? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.maxOfOrNull(selector: (ULong) -> Float): Float? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.maxOfOrNull(selector: (UByte) -> Float): Float? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.maxOfOrNull(selector: (UShort) -> Float): Float? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> UIntArray.maxOfOrNull(selector: (UInt) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> ULongArray.maxOfOrNull(selector: (ULong) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> UByteArray.maxOfOrNull(selector: (UByte) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> UShortArray.maxOfOrNull(selector: (UShort) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> UIntArray.maxOfWith(comparator: Comparator<in R>, selector: (UInt) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> ULongArray.maxOfWith(comparator: Comparator<in R>, selector: (ULong) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> UByteArray.maxOfWith(comparator: Comparator<in R>, selector: (UByte) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> UShortArray.maxOfWith(comparator: Comparator<in R>, selector: (UShort) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> UIntArray.maxOfWithOrNull(comparator: Comparator<in R>, selector: (UInt) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> ULongArray.maxOfWithOrNull(comparator: Comparator<in R>, selector: (ULong) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> UByteArray.maxOfWithOrNull(comparator: Comparator<in R>, selector: (UByte) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> UShortArray.maxOfWithOrNull(comparator: Comparator<in R>, selector: (UShort) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\npublic fun UIntArray.maxOrNull(): UInt? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\npublic fun ULongArray.maxOrNull(): ULong? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\npublic fun UByteArray.maxOrNull(): UByte? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\npublic fun UShortArray.maxOrNull(): UShort? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n@Deprecated(\"Use maxWithOrNull instead.\", ReplaceWith(\"this.maxWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UIntArray.maxWith(comparator: Comparator<in UInt>): UInt? {\n    return maxWithOrNull(comparator)\n}\n\n@Deprecated(\"Use maxWithOrNull instead.\", ReplaceWith(\"this.maxWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun ULongArray.maxWith(comparator: Comparator<in ULong>): ULong? {\n    return maxWithOrNull(comparator)\n}\n\n@Deprecated(\"Use maxWithOrNull instead.\", ReplaceWith(\"this.maxWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UByteArray.maxWith(comparator: Comparator<in UByte>): UByte? {\n    return maxWithOrNull(comparator)\n}\n\n@Deprecated(\"Use maxWithOrNull instead.\", ReplaceWith(\"this.maxWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UShortArray.maxWith(comparator: Comparator<in UShort>): UShort? {\n    return maxWithOrNull(comparator)\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\npublic fun UIntArray.maxWithOrNull(comparator: Comparator<in UInt>): UInt? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\npublic fun ULongArray.maxWithOrNull(comparator: Comparator<in ULong>): ULong? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\npublic fun UByteArray.maxWithOrNull(comparator: Comparator<in UByte>): UByte? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\npublic fun UShortArray.maxWithOrNull(comparator: Comparator<in UShort>): UShort? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n@Deprecated(\"Use minOrNull instead.\", ReplaceWith(\"this.minOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UIntArray.min(): UInt? {\n    return minOrNull()\n}\n\n@Deprecated(\"Use minOrNull instead.\", ReplaceWith(\"this.minOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun ULongArray.min(): ULong? {\n    return minOrNull()\n}\n\n@Deprecated(\"Use minOrNull instead.\", ReplaceWith(\"this.minOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UByteArray.min(): UByte? {\n    return minOrNull()\n}\n\n@Deprecated(\"Use minOrNull instead.\", ReplaceWith(\"this.minOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UShortArray.min(): UShort? {\n    return minOrNull()\n}\n\n@Deprecated(\"Use minByOrNull instead.\", ReplaceWith(\"this.minByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> UIntArray.minBy(selector: (UInt) -> R): UInt? {\n    return minByOrNull(selector)\n}\n\n@Deprecated(\"Use minByOrNull instead.\", ReplaceWith(\"this.minByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> ULongArray.minBy(selector: (ULong) -> R): ULong? {\n    return minByOrNull(selector)\n}\n\n@Deprecated(\"Use minByOrNull instead.\", ReplaceWith(\"this.minByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> UByteArray.minBy(selector: (UByte) -> R): UByte? {\n    return minByOrNull(selector)\n}\n\n@Deprecated(\"Use minByOrNull instead.\", ReplaceWith(\"this.minByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> UShortArray.minBy(selector: (UShort) -> R): UShort? {\n    return minByOrNull(selector)\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minByOrNull\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> UIntArray.minByOrNull(selector: (UInt) -> R): UInt? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minByOrNull\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> ULongArray.minByOrNull(selector: (ULong) -> R): ULong? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minByOrNull\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> UByteArray.minByOrNull(selector: (UByte) -> R): UByte? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minByOrNull\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> UShortArray.minByOrNull(selector: (UShort) -> R): UShort? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.minOf(selector: (UInt) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.minOf(selector: (ULong) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.minOf(selector: (UByte) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.minOf(selector: (UShort) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.minOf(selector: (UInt) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.minOf(selector: (ULong) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.minOf(selector: (UByte) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.minOf(selector: (UShort) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> UIntArray.minOf(selector: (UInt) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> ULongArray.minOf(selector: (ULong) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> UByteArray.minOf(selector: (UByte) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> UShortArray.minOf(selector: (UShort) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.minOfOrNull(selector: (UInt) -> Double): Double? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.minOfOrNull(selector: (ULong) -> Double): Double? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.minOfOrNull(selector: (UByte) -> Double): Double? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.minOfOrNull(selector: (UShort) -> Double): Double? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.minOfOrNull(selector: (UInt) -> Float): Float? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.minOfOrNull(selector: (ULong) -> Float): Float? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.minOfOrNull(selector: (UByte) -> Float): Float? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.minOfOrNull(selector: (UShort) -> Float): Float? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> UIntArray.minOfOrNull(selector: (UInt) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> ULongArray.minOfOrNull(selector: (ULong) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> UByteArray.minOfOrNull(selector: (UByte) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> UShortArray.minOfOrNull(selector: (UShort) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> UIntArray.minOfWith(comparator: Comparator<in R>, selector: (UInt) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> ULongArray.minOfWith(comparator: Comparator<in R>, selector: (ULong) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> UByteArray.minOfWith(comparator: Comparator<in R>, selector: (UByte) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> UShortArray.minOfWith(comparator: Comparator<in R>, selector: (UShort) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> UIntArray.minOfWithOrNull(comparator: Comparator<in R>, selector: (UInt) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> ULongArray.minOfWithOrNull(comparator: Comparator<in R>, selector: (ULong) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> UByteArray.minOfWithOrNull(comparator: Comparator<in R>, selector: (UByte) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> UShortArray.minOfWithOrNull(comparator: Comparator<in R>, selector: (UShort) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\npublic fun UIntArray.minOrNull(): UInt? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\npublic fun ULongArray.minOrNull(): ULong? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\npublic fun UByteArray.minOrNull(): UByte? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\npublic fun UShortArray.minOrNull(): UShort? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n@Deprecated(\"Use minWithOrNull instead.\", ReplaceWith(\"this.minWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UIntArray.minWith(comparator: Comparator<in UInt>): UInt? {\n    return minWithOrNull(comparator)\n}\n\n@Deprecated(\"Use minWithOrNull instead.\", ReplaceWith(\"this.minWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun ULongArray.minWith(comparator: Comparator<in ULong>): ULong? {\n    return minWithOrNull(comparator)\n}\n\n@Deprecated(\"Use minWithOrNull instead.\", ReplaceWith(\"this.minWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UByteArray.minWith(comparator: Comparator<in UByte>): UByte? {\n    return minWithOrNull(comparator)\n}\n\n@Deprecated(\"Use minWithOrNull instead.\", ReplaceWith(\"this.minWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UShortArray.minWith(comparator: Comparator<in UShort>): UShort? {\n    return minWithOrNull(comparator)\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\npublic fun UIntArray.minWithOrNull(comparator: Comparator<in UInt>): UInt? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\npublic fun ULongArray.minWithOrNull(comparator: Comparator<in ULong>): ULong? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\npublic fun UByteArray.minWithOrNull(comparator: Comparator<in UByte>): UByte? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\npublic fun UShortArray.minWithOrNull(comparator: Comparator<in UShort>): UShort? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.none(predicate: (UInt) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.none(predicate: (ULong) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.none(predicate: (UByte) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.none(predicate: (UShort) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Performs the given [action] on each element and returns the array itself afterwards.\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.onEach(action: (UInt) -> Unit): UIntArray {\n    return apply { for (element in this) action(element) }\n}\n\n/**\n * Performs the given [action] on each element and returns the array itself afterwards.\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.onEach(action: (ULong) -> Unit): ULongArray {\n    return apply { for (element in this) action(element) }\n}\n\n/**\n * Performs the given [action] on each element and returns the array itself afterwards.\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.onEach(action: (UByte) -> Unit): UByteArray {\n    return apply { for (element in this) action(element) }\n}\n\n/**\n * Performs the given [action] on each element and returns the array itself afterwards.\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.onEach(action: (UShort) -> Unit): UShortArray {\n    return apply { for (element in this) action(element) }\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element,\n * and returns the array itself afterwards.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.onEachIndexed(action: (index: Int, UInt) -> Unit): UIntArray {\n    return apply { forEachIndexed(action) }\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element,\n * and returns the array itself afterwards.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.onEachIndexed(action: (index: Int, ULong) -> Unit): ULongArray {\n    return apply { forEachIndexed(action) }\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element,\n * and returns the array itself afterwards.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.onEachIndexed(action: (index: Int, UByte) -> Unit): UByteArray {\n    return apply { forEachIndexed(action) }\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element,\n * and returns the array itself afterwards.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.onEachIndexed(action: (index: Int, UShort) -> Unit): UShortArray {\n    return apply { forEachIndexed(action) }\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.reduce(operation: (acc: UInt, UInt) -> UInt): UInt {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.reduce(operation: (acc: ULong, ULong) -> ULong): ULong {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.reduce(operation: (acc: UByte, UByte) -> UByte): UByte {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.reduce(operation: (acc: UShort, UShort) -> UShort): UShort {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.reduceIndexed(operation: (index: Int, acc: UInt, UInt) -> UInt): UInt {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.reduceIndexed(operation: (index: Int, acc: ULong, ULong) -> ULong): ULong {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.reduceIndexed(operation: (index: Int, acc: UByte, UByte) -> UByte): UByte {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.reduceIndexed(operation: (index: Int, acc: UShort, UShort) -> UShort): UShort {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.reduceIndexedOrNull(operation: (index: Int, acc: UInt, UInt) -> UInt): UInt? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.reduceIndexedOrNull(operation: (index: Int, acc: ULong, ULong) -> ULong): ULong? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.reduceIndexedOrNull(operation: (index: Int, acc: UByte, UByte) -> UByte): UByte? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.reduceIndexedOrNull(operation: (index: Int, acc: UShort, UShort) -> UShort): UShort? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.reduceOrNull(operation: (acc: UInt, UInt) -> UInt): UInt? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.reduceOrNull(operation: (acc: ULong, ULong) -> ULong): ULong? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.reduceOrNull(operation: (acc: UByte, UByte) -> UByte): UByte? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.reduceOrNull(operation: (acc: UShort, UShort) -> UShort): UShort? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.reduceRight(operation: (UInt, acc: UInt) -> UInt): UInt {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.reduceRight(operation: (ULong, acc: ULong) -> ULong): ULong {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.reduceRight(operation: (UByte, acc: UByte) -> UByte): UByte {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.reduceRight(operation: (UShort, acc: UShort) -> UShort): UShort {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.reduceRightIndexed(operation: (index: Int, UInt, acc: UInt) -> UInt): UInt {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.reduceRightIndexed(operation: (index: Int, ULong, acc: ULong) -> ULong): ULong {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.reduceRightIndexed(operation: (index: Int, UByte, acc: UByte) -> UByte): UByte {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.reduceRightIndexed(operation: (index: Int, UShort, acc: UShort) -> UShort): UShort {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.reduceRightIndexedOrNull(operation: (index: Int, UInt, acc: UInt) -> UInt): UInt? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.reduceRightIndexedOrNull(operation: (index: Int, ULong, acc: ULong) -> ULong): ULong? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.reduceRightIndexedOrNull(operation: (index: Int, UByte, acc: UByte) -> UByte): UByte? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.reduceRightIndexedOrNull(operation: (index: Int, UShort, acc: UShort) -> UShort): UShort? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.reduceRightOrNull(operation: (UInt, acc: UInt) -> UInt): UInt? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.reduceRightOrNull(operation: (ULong, acc: ULong) -> ULong): ULong? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.reduceRightOrNull(operation: (UByte, acc: UByte) -> UByte): UByte? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.reduceRightOrNull(operation: (UShort, acc: UShort) -> UShort): UShort? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> UIntArray.runningFold(initial: R, operation: (acc: R, UInt) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> ULongArray.runningFold(initial: R, operation: (acc: R, ULong) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> UByteArray.runningFold(initial: R, operation: (acc: R, UByte) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> UShortArray.runningFold(initial: R, operation: (acc: R, UShort) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> UIntArray.runningFoldIndexed(initial: R, operation: (index: Int, acc: R, UInt) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> ULongArray.runningFoldIndexed(initial: R, operation: (index: Int, acc: R, ULong) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> UByteArray.runningFoldIndexed(initial: R, operation: (index: Int, acc: R, UByte) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> UShortArray.runningFoldIndexed(initial: R, operation: (index: Int, acc: R, UShort) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this array.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.runningReduce(operation: (acc: UInt, UInt) -> UInt): List<UInt> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<UInt>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this array.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.runningReduce(operation: (acc: ULong, ULong) -> ULong): List<ULong> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<ULong>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this array.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.runningReduce(operation: (acc: UByte, UByte) -> UByte): List<UByte> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<UByte>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this array.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.runningReduce(operation: (acc: UShort, UShort) -> UShort): List<UShort> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<UShort>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with the first element of this array.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.runningReduceIndexed(operation: (index: Int, acc: UInt, UInt) -> UInt): List<UInt> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<UInt>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with the first element of this array.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.runningReduceIndexed(operation: (index: Int, acc: ULong, ULong) -> ULong): List<ULong> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<ULong>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with the first element of this array.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.runningReduceIndexed(operation: (index: Int, acc: UByte, UByte) -> UByte): List<UByte> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<UByte>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with the first element of this array.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.runningReduceIndexed(operation: (index: Int, acc: UShort, UShort) -> UShort): List<UShort> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<UShort>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <R> UIntArray.scan(initial: R, operation: (acc: R, UInt) -> R): List<R> {\n    return runningFold(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <R> ULongArray.scan(initial: R, operation: (acc: R, ULong) -> R): List<R> {\n    return runningFold(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <R> UByteArray.scan(initial: R, operation: (acc: R, UByte) -> R): List<R> {\n    return runningFold(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <R> UShortArray.scan(initial: R, operation: (acc: R, UShort) -> R): List<R> {\n    return runningFold(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <R> UIntArray.scanIndexed(initial: R, operation: (index: Int, acc: R, UInt) -> R): List<R> {\n    return runningFoldIndexed(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <R> ULongArray.scanIndexed(initial: R, operation: (index: Int, acc: R, ULong) -> R): List<R> {\n    return runningFoldIndexed(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <R> UByteArray.scanIndexed(initial: R, operation: (index: Int, acc: R, UByte) -> R): List<R> {\n    return runningFoldIndexed(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <R> UShortArray.scanIndexed(initial: R, operation: (index: Int, acc: R, UShort) -> R): List<R> {\n    return runningFoldIndexed(initial, operation)\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@Deprecated(\"Use sumOf instead.\", ReplaceWith(\"this.sumOf(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.sumBy(selector: (UInt) -> UInt): UInt {\n    var sum: UInt = 0u\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@Deprecated(\"Use sumOf instead.\", ReplaceWith(\"this.sumOf(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.sumBy(selector: (ULong) -> UInt): UInt {\n    var sum: UInt = 0u\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@Deprecated(\"Use sumOf instead.\", ReplaceWith(\"this.sumOf(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.sumBy(selector: (UByte) -> UInt): UInt {\n    var sum: UInt = 0u\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@Deprecated(\"Use sumOf instead.\", ReplaceWith(\"this.sumOf(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.sumBy(selector: (UShort) -> UInt): UInt {\n    var sum: UInt = 0u\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@Deprecated(\"Use sumOf instead.\", ReplaceWith(\"this.sumOf(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.sumByDouble(selector: (UInt) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@Deprecated(\"Use sumOf instead.\", ReplaceWith(\"this.sumOf(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.sumByDouble(selector: (ULong) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@Deprecated(\"Use sumOf instead.\", ReplaceWith(\"this.sumOf(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.sumByDouble(selector: (UByte) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@Deprecated(\"Use sumOf instead.\", ReplaceWith(\"this.sumOf(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.sumByDouble(selector: (UShort) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@Suppress(\"INAPPLICABLE_JVM_NAME\")\n@kotlin.jvm.JvmName(\"sumOfDouble\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.sumOf(selector: (UInt) -> Double): Double {\n    var sum: Double = 0.toDouble()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@Suppress(\"INAPPLICABLE_JVM_NAME\")\n@kotlin.jvm.JvmName(\"sumOfDouble\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.sumOf(selector: (ULong) -> Double): Double {\n    var sum: Double = 0.toDouble()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@Suppress(\"INAPPLICABLE_JVM_NAME\")\n@kotlin.jvm.JvmName(\"sumOfDouble\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.sumOf(selector: (UByte) -> Double): Double {\n    var sum: Double = 0.toDouble()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@Suppress(\"INAPPLICABLE_JVM_NAME\")\n@kotlin.jvm.JvmName(\"sumOfDouble\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.sumOf(selector: (UShort) -> Double): Double {\n    var sum: Double = 0.toDouble()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@Suppress(\"INAPPLICABLE_JVM_NAME\")\n@kotlin.jvm.JvmName(\"sumOfInt\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.sumOf(selector: (UInt) -> Int): Int {\n    var sum: Int = 0.toInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@Suppress(\"INAPPLICABLE_JVM_NAME\")\n@kotlin.jvm.JvmName(\"sumOfInt\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.sumOf(selector: (ULong) -> Int): Int {\n    var sum: Int = 0.toInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@Suppress(\"INAPPLICABLE_JVM_NAME\")\n@kotlin.jvm.JvmName(\"sumOfInt\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.sumOf(selector: (UByte) -> Int): Int {\n    var sum: Int = 0.toInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@Suppress(\"INAPPLICABLE_JVM_NAME\")\n@kotlin.jvm.JvmName(\"sumOfInt\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.sumOf(selector: (UShort) -> Int): Int {\n    var sum: Int = 0.toInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@Suppress(\"INAPPLICABLE_JVM_NAME\")\n@kotlin.jvm.JvmName(\"sumOfLong\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.sumOf(selector: (UInt) -> Long): Long {\n    var sum: Long = 0.toLong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@Suppress(\"INAPPLICABLE_JVM_NAME\")\n@kotlin.jvm.JvmName(\"sumOfLong\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.sumOf(selector: (ULong) -> Long): Long {\n    var sum: Long = 0.toLong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@Suppress(\"INAPPLICABLE_JVM_NAME\")\n@kotlin.jvm.JvmName(\"sumOfLong\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.sumOf(selector: (UByte) -> Long): Long {\n    var sum: Long = 0.toLong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@Suppress(\"INAPPLICABLE_JVM_NAME\")\n@kotlin.jvm.JvmName(\"sumOfLong\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.sumOf(selector: (UShort) -> Long): Long {\n    var sum: Long = 0.toLong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.5\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@Suppress(\"INAPPLICABLE_JVM_NAME\")\n@kotlin.jvm.JvmName(\"sumOfUInt\")\n@ExperimentalUnsignedTypes\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.sumOf(selector: (UInt) -> UInt): UInt {\n    var sum: UInt = 0.toUInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.5\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@Suppress(\"INAPPLICABLE_JVM_NAME\")\n@kotlin.jvm.JvmName(\"sumOfUInt\")\n@ExperimentalUnsignedTypes\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.sumOf(selector: (ULong) -> UInt): UInt {\n    var sum: UInt = 0.toUInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.5\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@Suppress(\"INAPPLICABLE_JVM_NAME\")\n@kotlin.jvm.JvmName(\"sumOfUInt\")\n@ExperimentalUnsignedTypes\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.sumOf(selector: (UByte) -> UInt): UInt {\n    var sum: UInt = 0.toUInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.5\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@Suppress(\"INAPPLICABLE_JVM_NAME\")\n@kotlin.jvm.JvmName(\"sumOfUInt\")\n@ExperimentalUnsignedTypes\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.sumOf(selector: (UShort) -> UInt): UInt {\n    var sum: UInt = 0.toUInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.5\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@Suppress(\"INAPPLICABLE_JVM_NAME\")\n@kotlin.jvm.JvmName(\"sumOfULong\")\n@ExperimentalUnsignedTypes\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.sumOf(selector: (UInt) -> ULong): ULong {\n    var sum: ULong = 0.toULong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.5\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@Suppress(\"INAPPLICABLE_JVM_NAME\")\n@kotlin.jvm.JvmName(\"sumOfULong\")\n@ExperimentalUnsignedTypes\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.sumOf(selector: (ULong) -> ULong): ULong {\n    var sum: ULong = 0.toULong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.5\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@Suppress(\"INAPPLICABLE_JVM_NAME\")\n@kotlin.jvm.JvmName(\"sumOfULong\")\n@ExperimentalUnsignedTypes\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.sumOf(selector: (UByte) -> ULong): ULong {\n    var sum: ULong = 0.toULong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.5\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@Suppress(\"INAPPLICABLE_JVM_NAME\")\n@kotlin.jvm.JvmName(\"sumOfULong\")\n@ExperimentalUnsignedTypes\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.sumOf(selector: (UShort) -> ULong): ULong {\n    var sum: ULong = 0.toULong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic infix fun <R> UIntArray.zip(other: Array<out R>): List<Pair<UInt, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic infix fun <R> ULongArray.zip(other: Array<out R>): List<Pair<ULong, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic infix fun <R> UByteArray.zip(other: Array<out R>): List<Pair<UByte, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic infix fun <R> UShortArray.zip(other: Array<out R>): List<Pair<UShort, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R, V> UIntArray.zip(other: Array<out R>, transform: (a: UInt, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R, V> ULongArray.zip(other: Array<out R>, transform: (a: ULong, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R, V> UByteArray.zip(other: Array<out R>, transform: (a: UByte, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R, V> UShortArray.zip(other: Array<out R>, transform: (a: UShort, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic infix fun <R> UIntArray.zip(other: Iterable<R>): List<Pair<UInt, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic infix fun <R> ULongArray.zip(other: Iterable<R>): List<Pair<ULong, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic infix fun <R> UByteArray.zip(other: Iterable<R>): List<Pair<UByte, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic infix fun <R> UShortArray.zip(other: Iterable<R>): List<Pair<UShort, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R, V> UIntArray.zip(other: Iterable<R>, transform: (a: UInt, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R, V> ULongArray.zip(other: Iterable<R>, transform: (a: ULong, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R, V> UByteArray.zip(other: Iterable<R>, transform: (a: UByte, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R, V> UShortArray.zip(other: Iterable<R>, transform: (a: UShort, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic infix fun UIntArray.zip(other: UIntArray): List<Pair<UInt, UInt>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic infix fun ULongArray.zip(other: ULongArray): List<Pair<ULong, ULong>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic infix fun UByteArray.zip(other: UByteArray): List<Pair<UByte, UByte>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic infix fun UShortArray.zip(other: UShortArray): List<Pair<UShort, UShort>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <V> UIntArray.zip(other: UIntArray, transform: (a: UInt, b: UInt) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <V> ULongArray.zip(other: ULongArray, transform: (a: ULong, b: ULong) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <V> UByteArray.zip(other: UByteArray, transform: (a: UByte, b: UByte) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <V> UShortArray.zip(other: UShortArray, transform: (a: UShort, b: UShort) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfUInt\")\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\npublic fun Array<out UInt>.sum(): UInt {\n    var sum: UInt = 0u\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfULong\")\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\npublic fun Array<out ULong>.sum(): ULong {\n    var sum: ULong = 0uL\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfUByte\")\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\npublic fun Array<out UByte>.sum(): UInt {\n    var sum: UInt = 0u\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfUShort\")\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\npublic fun Array<out UShort>.sum(): UInt {\n    var sum: UInt = 0u\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.sum(): UInt {\n    return storage.sum().toUInt()\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.sum(): ULong {\n    return storage.sum().toULong()\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.sum(): UInt {\n    return sumOf { it.toUInt() }\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.sum(): UInt {\n    return sumOf { it.toUInt() }\n}\n\n","/*\n * Copyright 2010-2021 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"UComparisonsKt\")\n\npackage kotlin.comparisons\n\n//\n// NOTE: THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.random.*\n\n/**\n * Returns the greater of two values.\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\npublic fun maxOf(a: UInt, b: UInt): UInt {\n    return if (a >= b) a else b\n}\n\n/**\n * Returns the greater of two values.\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\npublic fun maxOf(a: ULong, b: ULong): ULong {\n    return if (a >= b) a else b\n}\n\n/**\n * Returns the greater of two values.\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\npublic fun maxOf(a: UByte, b: UByte): UByte {\n    return if (a >= b) a else b\n}\n\n/**\n * Returns the greater of two values.\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\npublic fun maxOf(a: UShort, b: UShort): UShort {\n    return if (a >= b) a else b\n}\n\n/**\n * Returns the greater of three values.\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun maxOf(a: UInt, b: UInt, c: UInt): UInt {\n    return maxOf(a, maxOf(b, c))\n}\n\n/**\n * Returns the greater of three values.\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun maxOf(a: ULong, b: ULong, c: ULong): ULong {\n    return maxOf(a, maxOf(b, c))\n}\n\n/**\n * Returns the greater of three values.\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun maxOf(a: UByte, b: UByte, c: UByte): UByte {\n    return maxOf(a, maxOf(b, c))\n}\n\n/**\n * Returns the greater of three values.\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun maxOf(a: UShort, b: UShort, c: UShort): UShort {\n    return maxOf(a, maxOf(b, c))\n}\n\n/**\n * Returns the greater of the given values.\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\npublic fun maxOf(a: UInt, vararg other: UInt): UInt {\n    var max = a\n    for (e in other) max = maxOf(max, e)\n    return max\n}\n\n/**\n * Returns the greater of the given values.\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\npublic fun maxOf(a: ULong, vararg other: ULong): ULong {\n    var max = a\n    for (e in other) max = maxOf(max, e)\n    return max\n}\n\n/**\n * Returns the greater of the given values.\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\npublic fun maxOf(a: UByte, vararg other: UByte): UByte {\n    var max = a\n    for (e in other) max = maxOf(max, e)\n    return max\n}\n\n/**\n * Returns the greater of the given values.\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\npublic fun maxOf(a: UShort, vararg other: UShort): UShort {\n    var max = a\n    for (e in other) max = maxOf(max, e)\n    return max\n}\n\n/**\n * Returns the smaller of two values.\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\npublic fun minOf(a: UInt, b: UInt): UInt {\n    return if (a <= b) a else b\n}\n\n/**\n * Returns the smaller of two values.\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\npublic fun minOf(a: ULong, b: ULong): ULong {\n    return if (a <= b) a else b\n}\n\n/**\n * Returns the smaller of two values.\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\npublic fun minOf(a: UByte, b: UByte): UByte {\n    return if (a <= b) a else b\n}\n\n/**\n * Returns the smaller of two values.\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\npublic fun minOf(a: UShort, b: UShort): UShort {\n    return if (a <= b) a else b\n}\n\n/**\n * Returns the smaller of three values.\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun minOf(a: UInt, b: UInt, c: UInt): UInt {\n    return minOf(a, minOf(b, c))\n}\n\n/**\n * Returns the smaller of three values.\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun minOf(a: ULong, b: ULong, c: ULong): ULong {\n    return minOf(a, minOf(b, c))\n}\n\n/**\n * Returns the smaller of three values.\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun minOf(a: UByte, b: UByte, c: UByte): UByte {\n    return minOf(a, minOf(b, c))\n}\n\n/**\n * Returns the smaller of three values.\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun minOf(a: UShort, b: UShort, c: UShort): UShort {\n    return minOf(a, minOf(b, c))\n}\n\n/**\n * Returns the smaller of the given values.\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\npublic fun minOf(a: UInt, vararg other: UInt): UInt {\n    var min = a\n    for (e in other) min = minOf(min, e)\n    return min\n}\n\n/**\n * Returns the smaller of the given values.\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\npublic fun minOf(a: ULong, vararg other: ULong): ULong {\n    var min = a\n    for (e in other) min = minOf(min, e)\n    return min\n}\n\n/**\n * Returns the smaller of the given values.\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\npublic fun minOf(a: UByte, vararg other: UByte): UByte {\n    var min = a\n    for (e in other) min = minOf(min, e)\n    return min\n}\n\n/**\n * Returns the smaller of the given values.\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\npublic fun minOf(a: UShort, vararg other: UShort): UShort {\n    var min = a\n    for (e in other) min = minOf(min, e)\n    return min\n}\n\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.js\n\nimport kotlin.annotation.AnnotationTarget.*\n\n/**\n * Gives a declaration (a function, a property or a class) specific name in JavaScript.\n */\n@Target(CLASS, FUNCTION, PROPERTY, CONSTRUCTOR, PROPERTY_GETTER, PROPERTY_SETTER)\n@OptionalExpectation\npublic expect annotation class JsName(val name: String)\n\n/**\n * Marks experimental JS export annotations.\n *\n * Note that behavior of these annotations will likely be changed in the future.\n *\n * Usages of such annotations will be reported as warnings unless an explicit opt-in with\n * the [OptIn] annotation, e.g. `@OptIn(ExperimentalJsExport::class)`,\n * or with the `-Xopt-in=kotlin.js.ExperimentalJsExport` compiler option is given.\n */\n@Suppress(\"DEPRECATION\")\n@Experimental(level = Experimental.Level.WARNING)\n@RequiresOptIn(level = RequiresOptIn.Level.WARNING)\n@MustBeDocumented\n@Retention(AnnotationRetention.BINARY)\n@SinceKotlin(\"1.4\")\npublic annotation class ExperimentalJsExport\n\n/**\n * Exports top-level declaration on JS platform.\n *\n * Compiled module exposes declarations that are marked with this annotation without name mangling.\n *\n * This annotation can be applied to either files or top-level declarations.\n *\n * It is currently prohibited to export the following kinds of declarations:\n *\n *   * `expect` declarations\n *   * inline functions with reified type parameters\n *   * suspend functions\n *   * secondary constructors without `@JsName`\n *   * extension properties\n *   * enum classes\n *   * annotation classes\n *\n * Signatures of exported declarations must only contain \"exportable\" types:\n *\n *   * `dynamic`, `Any`, `String`, `Boolean`, `Byte`, `Short`, `Int`, `Float`, `Double`\n *   * `BooleanArray`, `ByteArray`, `ShortArray`, `IntArray`, `FloatArray`, `DoubleArray`\n *   * `Array<exportable-type>`\n *   * Function types with exportable parameters and return types\n *   * `external` or `@JsExport` classes and interfaces\n *   * Nullable counterparts of types above\n *   * Unit return type. Must not be nullable\n *\n * This annotation is experimental, meaning that restrictions mentioned above are subject to change.\n */\n@ExperimentalJsExport\n@Retention(AnnotationRetention.BINARY)\n@Target(CLASS, PROPERTY, FUNCTION, FILE)\n@SinceKotlin(\"1.4\")\n@OptionalExpectation\npublic expect annotation class JsExport()","/*\n * Copyright 2010-2021 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n// Auto-generated file. DO NOT EDIT!\n\npackage kotlin.collections\n\n/** An iterator over a sequence of values of type `Byte`. */\npublic abstract class ByteIterator : Iterator<Byte> {\n    override final fun next() = nextByte()\n\n    /** Returns the next value in the sequence without boxing. */\n    public abstract fun nextByte(): Byte\n}\n\n/** An iterator over a sequence of values of type `Char`. */\npublic abstract class CharIterator : Iterator<Char> {\n    override final fun next() = nextChar()\n\n    /** Returns the next value in the sequence without boxing. */\n    public abstract fun nextChar(): Char\n}\n\n/** An iterator over a sequence of values of type `Short`. */\npublic abstract class ShortIterator : Iterator<Short> {\n    override final fun next() = nextShort()\n\n    /** Returns the next value in the sequence without boxing. */\n    public abstract fun nextShort(): Short\n}\n\n/** An iterator over a sequence of values of type `Int`. */\npublic abstract class IntIterator : Iterator<Int> {\n    override final fun next() = nextInt()\n\n    /** Returns the next value in the sequence without boxing. */\n    public abstract fun nextInt(): Int\n}\n\n/** An iterator over a sequence of values of type `Long`. */\npublic abstract class LongIterator : Iterator<Long> {\n    override final fun next() = nextLong()\n\n    /** Returns the next value in the sequence without boxing. */\n    public abstract fun nextLong(): Long\n}\n\n/** An iterator over a sequence of values of type `Float`. */\npublic abstract class FloatIterator : Iterator<Float> {\n    override final fun next() = nextFloat()\n\n    /** Returns the next value in the sequence without boxing. */\n    public abstract fun nextFloat(): Float\n}\n\n/** An iterator over a sequence of values of type `Double`. */\npublic abstract class DoubleIterator : Iterator<Double> {\n    override final fun next() = nextDouble()\n\n    /** Returns the next value in the sequence without boxing. */\n    public abstract fun nextDouble(): Double\n}\n\n/** An iterator over a sequence of values of type `Boolean`. */\npublic abstract class BooleanIterator : Iterator<Boolean> {\n    override final fun next() = nextBoolean()\n\n    /** Returns the next value in the sequence without boxing. */\n    public abstract fun nextBoolean(): Boolean\n}\n\n","/*\n * Copyright 2010-2021 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n// Auto-generated file. DO NOT EDIT!\n\npackage kotlin.ranges\n\n/**\n * An iterator over a progression of values of type `Char`.\n * @property step the number by which the value is incremented on each step.\n */\ninternal class CharProgressionIterator(first: Char, last: Char, val step: Int) : CharIterator() {\n    private val finalElement: Int = last.code\n    private var hasNext: Boolean = if (step > 0) first <= last else first >= last\n    private var next: Int = if (hasNext) first.code else finalElement\n\n    override fun hasNext(): Boolean = hasNext\n\n    override fun nextChar(): Char {\n        val value = next\n        if (value == finalElement) {\n            if (!hasNext) throw kotlin.NoSuchElementException()\n            hasNext = false\n        }\n        else {\n            next += step\n        }\n        return value.toChar()\n    }\n}\n\n/**\n * An iterator over a progression of values of type `Int`.\n * @property step the number by which the value is incremented on each step.\n */\ninternal class IntProgressionIterator(first: Int, last: Int, val step: Int) : IntIterator() {\n    private val finalElement: Int = last\n    private var hasNext: Boolean = if (step > 0) first <= last else first >= last\n    private var next: Int = if (hasNext) first else finalElement\n\n    override fun hasNext(): Boolean = hasNext\n\n    override fun nextInt(): Int {\n        val value = next\n        if (value == finalElement) {\n            if (!hasNext) throw kotlin.NoSuchElementException()\n            hasNext = false\n        }\n        else {\n            next += step\n        }\n        return value\n    }\n}\n\n/**\n * An iterator over a progression of values of type `Long`.\n * @property step the number by which the value is incremented on each step.\n */\ninternal class LongProgressionIterator(first: Long, last: Long, val step: Long) : LongIterator() {\n    private val finalElement: Long = last\n    private var hasNext: Boolean = if (step > 0) first <= last else first >= last\n    private var next: Long = if (hasNext) first else finalElement\n\n    override fun hasNext(): Boolean = hasNext\n\n    override fun nextLong(): Long {\n        val value = next\n        if (value == finalElement) {\n            if (!hasNext) throw kotlin.NoSuchElementException()\n            hasNext = false\n        }\n        else {\n            next += step\n        }\n        return value\n    }\n}\n\n","/*\n * Copyright 2010-2021 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin\n\n\n/**\n * Creates a Char with the specified [code], or throws an exception if the [code] is out of `Char.MIN_VALUE.code..Char.MAX_VALUE.code`.\n *\n * If the program that calls this function is written in a way that only valid [code] is passed as the argument,\n * using the overload that takes a [UShort] argument is preferable (`Char(intValue.toUShort())`).\n * That overload doesn't check validity of the argument, and may improve program performance when the function is called routinely inside a loop.\n *\n * @sample samples.text.Chars.charFromCode\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun Char(code: Int): Char {\n    if (code < Char.MIN_VALUE.code || code > Char.MAX_VALUE.code) {\n        throw IllegalArgumentException(\"Invalid Char code: $code\")\n    }\n    return Char(code.toUShort())\n}\n\n/**\n * Creates a Char with the specified [code].\n *\n * @sample samples.text.Chars.charFromCode\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@Suppress(\"NO_ACTUAL_FOR_EXPECT\")\npublic expect fun Char(code: UShort): Char\n\n/**\n * Returns the code of this Char.\n *\n * Code of a Char is the value it was constructed with, and the UTF-16 code unit corresponding to this Char.\n *\n * @sample samples.text.Chars.code\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\n@Suppress(\"DEPRECATION\")\npublic inline val Char.code: Int get() = this.toInt()\n","/*\n * Copyright 2010-2021 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n// Auto-generated file. DO NOT EDIT!\n\npackage kotlin.ranges\n\nimport kotlin.internal.getProgressionLastElement\n\n/**\n * A progression of values of type `Char`.\n */\npublic open class CharProgression\n    internal constructor\n    (\n            start: Char,\n            endInclusive: Char,\n            step: Int\n    ) : Iterable<Char> {\n    init {\n        if (step == 0) throw kotlin.IllegalArgumentException(\"Step must be non-zero.\")\n        if (step == Int.MIN_VALUE) throw kotlin.IllegalArgumentException(\"Step must be greater than Int.MIN_VALUE to avoid overflow on negation.\")\n    }\n\n    /**\n     * The first element in the progression.\n     */\n    public val first: Char = start\n\n    /**\n     * The last element in the progression.\n     */\n    public val last: Char = getProgressionLastElement(start.code, endInclusive.code, step).toChar()\n\n    /**\n     * The step of the progression.\n     */\n    public val step: Int = step\n\n    override fun iterator(): CharIterator = CharProgressionIterator(first, last, step)\n\n    /**\n     * Checks if the progression is empty.\n     *\n     * Progression with a positive step is empty if its first element is greater than the last element.\n     * Progression with a negative step is empty if its first element is less than the last element.\n     */\n    public open fun isEmpty(): Boolean = if (step > 0) first > last else first < last\n\n    override fun equals(other: Any?): Boolean =\n        other is CharProgression && (isEmpty() && other.isEmpty() ||\n        first == other.first && last == other.last && step == other.step)\n\n    override fun hashCode(): Int =\n        if (isEmpty()) -1 else (31 * (31 * first.code + last.code) + step)\n\n    override fun toString(): String = if (step > 0) \"$first..$last step $step\" else \"$first downTo $last step ${-step}\"\n\n    companion object {\n        /**\n         * Creates CharProgression within the specified bounds of a closed range.\n         *\n         * The progression starts with the [rangeStart] value and goes toward the [rangeEnd] value not excluding it, with the specified [step].\n         * In order to go backwards the [step] must be negative.\n         *\n         * [step] must be greater than `Int.MIN_VALUE` and not equal to zero.\n         */\n        public fun fromClosedRange(rangeStart: Char, rangeEnd: Char, step: Int): CharProgression = CharProgression(rangeStart, rangeEnd, step)\n    }\n}\n\n/**\n * A progression of values of type `Int`.\n */\npublic open class IntProgression\n    internal constructor\n    (\n            start: Int,\n            endInclusive: Int,\n            step: Int\n    ) : Iterable<Int> {\n    init {\n        if (step == 0) throw kotlin.IllegalArgumentException(\"Step must be non-zero.\")\n        if (step == Int.MIN_VALUE) throw kotlin.IllegalArgumentException(\"Step must be greater than Int.MIN_VALUE to avoid overflow on negation.\")\n    }\n\n    /**\n     * The first element in the progression.\n     */\n    public val first: Int = start\n\n    /**\n     * The last element in the progression.\n     */\n    public val last: Int = getProgressionLastElement(start, endInclusive, step)\n\n    /**\n     * The step of the progression.\n     */\n    public val step: Int = step\n\n    override fun iterator(): IntIterator = IntProgressionIterator(first, last, step)\n\n    /**\n     * Checks if the progression is empty.\n     *\n     * Progression with a positive step is empty if its first element is greater than the last element.\n     * Progression with a negative step is empty if its first element is less than the last element.\n     */\n    public open fun isEmpty(): Boolean = if (step > 0) first > last else first < last\n\n    override fun equals(other: Any?): Boolean =\n        other is IntProgression && (isEmpty() && other.isEmpty() ||\n        first == other.first && last == other.last && step == other.step)\n\n    override fun hashCode(): Int =\n        if (isEmpty()) -1 else (31 * (31 * first + last) + step)\n\n    override fun toString(): String = if (step > 0) \"$first..$last step $step\" else \"$first downTo $last step ${-step}\"\n\n    companion object {\n        /**\n         * Creates IntProgression within the specified bounds of a closed range.\n         *\n         * The progression starts with the [rangeStart] value and goes toward the [rangeEnd] value not excluding it, with the specified [step].\n         * In order to go backwards the [step] must be negative.\n         *\n         * [step] must be greater than `Int.MIN_VALUE` and not equal to zero.\n         */\n        public fun fromClosedRange(rangeStart: Int, rangeEnd: Int, step: Int): IntProgression = IntProgression(rangeStart, rangeEnd, step)\n    }\n}\n\n/**\n * A progression of values of type `Long`.\n */\npublic open class LongProgression\n    internal constructor\n    (\n            start: Long,\n            endInclusive: Long,\n            step: Long\n    ) : Iterable<Long> {\n    init {\n        if (step == 0L) throw kotlin.IllegalArgumentException(\"Step must be non-zero.\")\n        if (step == Long.MIN_VALUE) throw kotlin.IllegalArgumentException(\"Step must be greater than Long.MIN_VALUE to avoid overflow on negation.\")\n    }\n\n    /**\n     * The first element in the progression.\n     */\n    public val first: Long = start\n\n    /**\n     * The last element in the progression.\n     */\n    public val last: Long = getProgressionLastElement(start, endInclusive, step)\n\n    /**\n     * The step of the progression.\n     */\n    public val step: Long = step\n\n    override fun iterator(): LongIterator = LongProgressionIterator(first, last, step)\n\n    /**\n     * Checks if the progression is empty.\n     *\n     * Progression with a positive step is empty if its first element is greater than the last element.\n     * Progression with a negative step is empty if its first element is less than the last element.\n     */\n    public open fun isEmpty(): Boolean = if (step > 0) first > last else first < last\n\n    override fun equals(other: Any?): Boolean =\n        other is LongProgression && (isEmpty() && other.isEmpty() ||\n        first == other.first && last == other.last && step == other.step)\n\n    override fun hashCode(): Int =\n        if (isEmpty()) -1 else (31 * (31 * (first xor (first ushr 32)) + (last xor (last ushr 32))) + (step xor (step ushr 32))).toInt()\n\n    override fun toString(): String = if (step > 0) \"$first..$last step $step\" else \"$first downTo $last step ${-step}\"\n\n    companion object {\n        /**\n         * Creates LongProgression within the specified bounds of a closed range.\n         *\n         * The progression starts with the [rangeStart] value and goes toward the [rangeEnd] value not excluding it, with the specified [step].\n         * In order to go backwards the [step] must be negative.\n         *\n         * [step] must be greater than `Long.MIN_VALUE` and not equal to zero.\n         */\n        public fun fromClosedRange(rangeStart: Long, rangeEnd: Long, step: Long): LongProgression = LongProgression(rangeStart, rangeEnd, step)\n    }\n}\n\n","/*\n * Copyright 2010-2021 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"URangesKt\")\n\npackage kotlin.ranges\n\n//\n// NOTE: THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.random.*\n\n/**\n * Returns a random element from this range.\n * \n * @throws IllegalArgumentException if this range is empty.\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun UIntRange.random(): UInt {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this range.\n * \n * @throws IllegalArgumentException if this range is empty.\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun ULongRange.random(): ULong {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this range using the specified source of randomness.\n * \n * @throws IllegalArgumentException if this range is empty.\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\npublic fun UIntRange.random(random: Random): UInt {\n    try {\n        return random.nextUInt(this)\n    } catch(e: IllegalArgumentException) {\n        throw NoSuchElementException(e.message)\n    }\n}\n\n/**\n * Returns a random element from this range using the specified source of randomness.\n * \n * @throws IllegalArgumentException if this range is empty.\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\npublic fun ULongRange.random(random: Random): ULong {\n    try {\n        return random.nextULong(this)\n    } catch(e: IllegalArgumentException) {\n        throw NoSuchElementException(e.message)\n    }\n}\n\n/**\n * Returns a random element from this range, or `null` if this range is empty.\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalStdlibApi::class, ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun UIntRange.randomOrNull(): UInt? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this range, or `null` if this range is empty.\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalStdlibApi::class, ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun ULongRange.randomOrNull(): ULong? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this range using the specified source of randomness, or `null` if this range is empty.\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalStdlibApi::class, ExperimentalUnsignedTypes::class)\npublic fun UIntRange.randomOrNull(random: Random): UInt? {\n    if (isEmpty())\n        return null\n    return random.nextUInt(this)\n}\n\n/**\n * Returns a random element from this range using the specified source of randomness, or `null` if this range is empty.\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalStdlibApi::class, ExperimentalUnsignedTypes::class)\npublic fun ULongRange.randomOrNull(random: Random): ULong? {\n    if (isEmpty())\n        return null\n    return random.nextULong(this)\n}\n\n/**\n * Returns `true` if this range contains the specified [element].\n * \n * Always returns `false` if the [element] is `null`.\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline operator fun UIntRange.contains(element: UInt?): Boolean {\n    return element != null && contains(element)\n}\n\n/**\n * Returns `true` if this range contains the specified [element].\n * \n * Always returns `false` if the [element] is `null`.\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline operator fun ULongRange.contains(element: ULong?): Boolean {\n    return element != null && contains(element)\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\npublic operator fun UIntRange.contains(value: UByte): Boolean {\n    return contains(value.toUInt())\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\npublic operator fun ULongRange.contains(value: UByte): Boolean {\n    return contains(value.toULong())\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\npublic operator fun ULongRange.contains(value: UInt): Boolean {\n    return contains(value.toULong())\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\npublic operator fun UIntRange.contains(value: ULong): Boolean {\n    return (value shr UInt.SIZE_BITS) == 0uL && contains(value.toUInt())\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\npublic operator fun UIntRange.contains(value: UShort): Boolean {\n    return contains(value.toUInt())\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\npublic operator fun ULongRange.contains(value: UShort): Boolean {\n    return contains(value.toULong())\n}\n\n/**\n * Returns a progression from this value down to the specified [to] value with the step -1.\n * \n * The [to] value should be less than or equal to `this` value.\n * If the [to] value is greater than `this` value the returned progression is empty.\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\npublic infix fun UByte.downTo(to: UByte): UIntProgression {\n    return UIntProgression.fromClosedRange(this.toUInt(), to.toUInt(), -1)\n}\n\n/**\n * Returns a progression from this value down to the specified [to] value with the step -1.\n * \n * The [to] value should be less than or equal to `this` value.\n * If the [to] value is greater than `this` value the returned progression is empty.\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\npublic infix fun UInt.downTo(to: UInt): UIntProgression {\n    return UIntProgression.fromClosedRange(this, to, -1)\n}\n\n/**\n * Returns a progression from this value down to the specified [to] value with the step -1.\n * \n * The [to] value should be less than or equal to `this` value.\n * If the [to] value is greater than `this` value the returned progression is empty.\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\npublic infix fun ULong.downTo(to: ULong): ULongProgression {\n    return ULongProgression.fromClosedRange(this, to, -1L)\n}\n\n/**\n * Returns a progression from this value down to the specified [to] value with the step -1.\n * \n * The [to] value should be less than or equal to `this` value.\n * If the [to] value is greater than `this` value the returned progression is empty.\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\npublic infix fun UShort.downTo(to: UShort): UIntProgression {\n    return UIntProgression.fromClosedRange(this.toUInt(), to.toUInt(), -1)\n}\n\n/**\n * Returns a progression that goes over the same range in the opposite direction with the same step.\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\npublic fun UIntProgression.reversed(): UIntProgression {\n    return UIntProgression.fromClosedRange(last, first, -step)\n}\n\n/**\n * Returns a progression that goes over the same range in the opposite direction with the same step.\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\npublic fun ULongProgression.reversed(): ULongProgression {\n    return ULongProgression.fromClosedRange(last, first, -step)\n}\n\n/**\n * Returns a progression that goes over the same range with the given step.\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\npublic infix fun UIntProgression.step(step: Int): UIntProgression {\n    checkStepIsPositive(step > 0, step)\n    return UIntProgression.fromClosedRange(first, last, if (this.step > 0) step else -step)\n}\n\n/**\n * Returns a progression that goes over the same range with the given step.\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\npublic infix fun ULongProgression.step(step: Long): ULongProgression {\n    checkStepIsPositive(step > 0, step)\n    return ULongProgression.fromClosedRange(first, last, if (this.step > 0) step else -step)\n}\n\n/**\n * Returns a range from this value up to but excluding the specified [to] value.\n * \n * If the [to] value is less than or equal to `this` value, then the returned range is empty.\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\npublic infix fun UByte.until(to: UByte): UIntRange {\n    if (to <= UByte.MIN_VALUE) return UIntRange.EMPTY\n    return this.toUInt() .. (to - 1u).toUInt()\n}\n\n/**\n * Returns a range from this value up to but excluding the specified [to] value.\n * \n * If the [to] value is less than or equal to `this` value, then the returned range is empty.\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\npublic infix fun UInt.until(to: UInt): UIntRange {\n    if (to <= UInt.MIN_VALUE) return UIntRange.EMPTY\n    return this .. (to - 1u).toUInt()\n}\n\n/**\n * Returns a range from this value up to but excluding the specified [to] value.\n * \n * If the [to] value is less than or equal to `this` value, then the returned range is empty.\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\npublic infix fun ULong.until(to: ULong): ULongRange {\n    if (to <= ULong.MIN_VALUE) return ULongRange.EMPTY\n    return this .. (to - 1u).toULong()\n}\n\n/**\n * Returns a range from this value up to but excluding the specified [to] value.\n * \n * If the [to] value is less than or equal to `this` value, then the returned range is empty.\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\npublic infix fun UShort.until(to: UShort): UIntRange {\n    if (to <= UShort.MIN_VALUE) return UIntRange.EMPTY\n    return this.toUInt() .. (to - 1u).toUInt()\n}\n\n/**\n * Ensures that this value is not less than the specified [minimumValue].\n * \n * @return this value if it's greater than or equal to the [minimumValue] or the [minimumValue] otherwise.\n * \n * @sample samples.comparisons.ComparableOps.coerceAtLeastUnsigned\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\npublic fun UInt.coerceAtLeast(minimumValue: UInt): UInt {\n    return if (this < minimumValue) minimumValue else this\n}\n\n/**\n * Ensures that this value is not less than the specified [minimumValue].\n * \n * @return this value if it's greater than or equal to the [minimumValue] or the [minimumValue] otherwise.\n * \n * @sample samples.comparisons.ComparableOps.coerceAtLeastUnsigned\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\npublic fun ULong.coerceAtLeast(minimumValue: ULong): ULong {\n    return if (this < minimumValue) minimumValue else this\n}\n\n/**\n * Ensures that this value is not less than the specified [minimumValue].\n * \n * @return this value if it's greater than or equal to the [minimumValue] or the [minimumValue] otherwise.\n * \n * @sample samples.comparisons.ComparableOps.coerceAtLeastUnsigned\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\npublic fun UByte.coerceAtLeast(minimumValue: UByte): UByte {\n    return if (this < minimumValue) minimumValue else this\n}\n\n/**\n * Ensures that this value is not less than the specified [minimumValue].\n * \n * @return this value if it's greater than or equal to the [minimumValue] or the [minimumValue] otherwise.\n * \n * @sample samples.comparisons.ComparableOps.coerceAtLeastUnsigned\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\npublic fun UShort.coerceAtLeast(minimumValue: UShort): UShort {\n    return if (this < minimumValue) minimumValue else this\n}\n\n/**\n * Ensures that this value is not greater than the specified [maximumValue].\n * \n * @return this value if it's less than or equal to the [maximumValue] or the [maximumValue] otherwise.\n * \n * @sample samples.comparisons.ComparableOps.coerceAtMostUnsigned\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\npublic fun UInt.coerceAtMost(maximumValue: UInt): UInt {\n    return if (this > maximumValue) maximumValue else this\n}\n\n/**\n * Ensures that this value is not greater than the specified [maximumValue].\n * \n * @return this value if it's less than or equal to the [maximumValue] or the [maximumValue] otherwise.\n * \n * @sample samples.comparisons.ComparableOps.coerceAtMostUnsigned\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\npublic fun ULong.coerceAtMost(maximumValue: ULong): ULong {\n    return if (this > maximumValue) maximumValue else this\n}\n\n/**\n * Ensures that this value is not greater than the specified [maximumValue].\n * \n * @return this value if it's less than or equal to the [maximumValue] or the [maximumValue] otherwise.\n * \n * @sample samples.comparisons.ComparableOps.coerceAtMostUnsigned\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\npublic fun UByte.coerceAtMost(maximumValue: UByte): UByte {\n    return if (this > maximumValue) maximumValue else this\n}\n\n/**\n * Ensures that this value is not greater than the specified [maximumValue].\n * \n * @return this value if it's less than or equal to the [maximumValue] or the [maximumValue] otherwise.\n * \n * @sample samples.comparisons.ComparableOps.coerceAtMostUnsigned\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\npublic fun UShort.coerceAtMost(maximumValue: UShort): UShort {\n    return if (this > maximumValue) maximumValue else this\n}\n\n/**\n * Ensures that this value lies in the specified range [minimumValue]..[maximumValue].\n * \n * @return this value if it's in the range, or [minimumValue] if this value is less than [minimumValue], or [maximumValue] if this value is greater than [maximumValue].\n * \n * @sample samples.comparisons.ComparableOps.coerceInUnsigned\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\npublic fun UInt.coerceIn(minimumValue: UInt, maximumValue: UInt): UInt {\n    if (minimumValue > maximumValue) throw IllegalArgumentException(\"Cannot coerce value to an empty range: maximum $maximumValue is less than minimum $minimumValue.\")\n    if (this < minimumValue) return minimumValue\n    if (this > maximumValue) return maximumValue\n    return this\n}\n\n/**\n * Ensures that this value lies in the specified range [minimumValue]..[maximumValue].\n * \n * @return this value if it's in the range, or [minimumValue] if this value is less than [minimumValue], or [maximumValue] if this value is greater than [maximumValue].\n * \n * @sample samples.comparisons.ComparableOps.coerceInUnsigned\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\npublic fun ULong.coerceIn(minimumValue: ULong, maximumValue: ULong): ULong {\n    if (minimumValue > maximumValue) throw IllegalArgumentException(\"Cannot coerce value to an empty range: maximum $maximumValue is less than minimum $minimumValue.\")\n    if (this < minimumValue) return minimumValue\n    if (this > maximumValue) return maximumValue\n    return this\n}\n\n/**\n * Ensures that this value lies in the specified range [minimumValue]..[maximumValue].\n * \n * @return this value if it's in the range, or [minimumValue] if this value is less than [minimumValue], or [maximumValue] if this value is greater than [maximumValue].\n * \n * @sample samples.comparisons.ComparableOps.coerceInUnsigned\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\npublic fun UByte.coerceIn(minimumValue: UByte, maximumValue: UByte): UByte {\n    if (minimumValue > maximumValue) throw IllegalArgumentException(\"Cannot coerce value to an empty range: maximum $maximumValue is less than minimum $minimumValue.\")\n    if (this < minimumValue) return minimumValue\n    if (this > maximumValue) return maximumValue\n    return this\n}\n\n/**\n * Ensures that this value lies in the specified range [minimumValue]..[maximumValue].\n * \n * @return this value if it's in the range, or [minimumValue] if this value is less than [minimumValue], or [maximumValue] if this value is greater than [maximumValue].\n * \n * @sample samples.comparisons.ComparableOps.coerceInUnsigned\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\npublic fun UShort.coerceIn(minimumValue: UShort, maximumValue: UShort): UShort {\n    if (minimumValue > maximumValue) throw IllegalArgumentException(\"Cannot coerce value to an empty range: maximum $maximumValue is less than minimum $minimumValue.\")\n    if (this < minimumValue) return minimumValue\n    if (this > maximumValue) return maximumValue\n    return this\n}\n\n/**\n * Ensures that this value lies in the specified [range].\n * \n * @return this value if it's in the [range], or `range.start` if this value is less than `range.start`, or `range.endInclusive` if this value is greater than `range.endInclusive`.\n * \n * @sample samples.comparisons.ComparableOps.coerceInUnsigned\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\npublic fun UInt.coerceIn(range: ClosedRange<UInt>): UInt {\n    if (range is ClosedFloatingPointRange) {\n        return this.coerceIn<UInt>(range)\n    }\n    if (range.isEmpty()) throw IllegalArgumentException(\"Cannot coerce value to an empty range: $range.\")\n    return when {\n        this < range.start -> range.start\n        this > range.endInclusive -> range.endInclusive\n        else -> this\n    }\n}\n\n/**\n * Ensures that this value lies in the specified [range].\n * \n * @return this value if it's in the [range], or `range.start` if this value is less than `range.start`, or `range.endInclusive` if this value is greater than `range.endInclusive`.\n * \n * @sample samples.comparisons.ComparableOps.coerceInUnsigned\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\npublic fun ULong.coerceIn(range: ClosedRange<ULong>): ULong {\n    if (range is ClosedFloatingPointRange) {\n        return this.coerceIn<ULong>(range)\n    }\n    if (range.isEmpty()) throw IllegalArgumentException(\"Cannot coerce value to an empty range: $range.\")\n    return when {\n        this < range.start -> range.start\n        this > range.endInclusive -> range.endInclusive\n        else -> this\n    }\n}\n\n","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.collections\n\nimport kotlin.internal.PlatformDependent\n\n/**\n * Classes that inherit from this interface can be represented as a sequence of elements that can\n * be iterated over.\n * @param T the type of element being iterated over. The iterator is covariant in its element type.\n */\npublic interface Iterable<out T> {\n    /**\n     * Returns an iterator over the elements of this object.\n     */\n    public operator fun iterator(): Iterator<T>\n}\n\n/**\n * Classes that inherit from this interface can be represented as a sequence of elements that can\n * be iterated over and that supports removing elements during iteration.\n * @param T the type of element being iterated over. The mutable iterator is invariant in its element type.\n */\npublic interface MutableIterable<out T> : Iterable<T> {\n    /**\n     * Returns an iterator over the elements of this sequence that supports removing elements during iteration.\n     */\n    override fun iterator(): MutableIterator<T>\n}\n\n/**\n * A generic collection of elements. Methods in this interface support only read-only access to the collection;\n * read/write access is supported through the [MutableCollection] interface.\n * @param E the type of elements contained in the collection. The collection is covariant in its element type.\n */\npublic interface Collection<out E> : Iterable<E> {\n    // Query Operations\n    /**\n     * Returns the size of the collection.\n     */\n    public val size: Int\n\n    /**\n     * Returns `true` if the collection is empty (contains no elements), `false` otherwise.\n     */\n    public fun isEmpty(): Boolean\n\n    /**\n     * Checks if the specified element is contained in this collection.\n     */\n    public operator fun contains(element: @UnsafeVariance E): Boolean\n\n    override fun iterator(): Iterator<E>\n\n    // Bulk Operations\n    /**\n     * Checks if all elements in the specified collection are contained in this collection.\n     */\n    public fun containsAll(elements: Collection<@UnsafeVariance E>): Boolean\n}\n\n/**\n * A generic collection of elements that supports adding and removing elements.\n *\n * @param E the type of elements contained in the collection. The mutable collection is invariant in its element type.\n */\npublic interface MutableCollection<E> : Collection<E>, MutableIterable<E> {\n    // Query Operations\n    override fun iterator(): MutableIterator<E>\n\n    // Modification Operations\n    /**\n     * Adds the specified element to the collection.\n     *\n     * @return `true` if the element has been added, `false` if the collection does not support duplicates\n     * and the element is already contained in the collection.\n     */\n    public fun add(element: E): Boolean\n\n    /**\n     * Removes a single instance of the specified element from this\n     * collection, if it is present.\n     *\n     * @return `true` if the element has been successfully removed; `false` if it was not present in the collection.\n     */\n    public fun remove(element: E): Boolean\n\n    // Bulk Modification Operations\n    /**\n     * Adds all of the elements of the specified collection to this collection.\n     *\n     * @return `true` if any of the specified elements was added to the collection, `false` if the collection was not modified.\n     */\n    public fun addAll(elements: Collection<E>): Boolean\n\n    /**\n     * Removes all of this collection's elements that are also contained in the specified collection.\n     *\n     * @return `true` if any of the specified elements was removed from the collection, `false` if the collection was not modified.\n     */\n    public fun removeAll(elements: Collection<E>): Boolean\n\n    /**\n     * Retains only the elements in this collection that are contained in the specified collection.\n     *\n     * @return `true` if any element was removed from the collection, `false` if the collection was not modified.\n     */\n    public fun retainAll(elements: Collection<E>): Boolean\n\n    /**\n     * Removes all elements from this collection.\n     */\n    public fun clear(): Unit\n}\n\n/**\n * A generic ordered collection of elements. Methods in this interface support only read-only access to the list;\n * read/write access is supported through the [MutableList] interface.\n * @param E the type of elements contained in the list. The list is covariant in its element type.\n */\npublic interface List<out E> : Collection<E> {\n    // Query Operations\n\n    override val size: Int\n    override fun isEmpty(): Boolean\n    override fun contains(element: @UnsafeVariance E): Boolean\n    override fun iterator(): Iterator<E>\n\n    // Bulk Operations\n    override fun containsAll(elements: Collection<@UnsafeVariance E>): Boolean\n\n    // Positional Access Operations\n    /**\n     * Returns the element at the specified index in the list.\n     */\n    public operator fun get(index: Int): E\n\n    // Search Operations\n    /**\n     * Returns the index of the first occurrence of the specified element in the list, or -1 if the specified\n     * element is not contained in the list.\n     */\n    public fun indexOf(element: @UnsafeVariance E): Int\n\n    /**\n     * Returns the index of the last occurrence of the specified element in the list, or -1 if the specified\n     * element is not contained in the list.\n     */\n    public fun lastIndexOf(element: @UnsafeVariance E): Int\n\n    // List Iterators\n    /**\n     * Returns a list iterator over the elements in this list (in proper sequence).\n     */\n    public fun listIterator(): ListIterator<E>\n\n    /**\n     * Returns a list iterator over the elements in this list (in proper sequence), starting at the specified [index].\n     */\n    public fun listIterator(index: Int): ListIterator<E>\n\n    // View\n    /**\n     * Returns a view of the portion of this list between the specified [fromIndex] (inclusive) and [toIndex] (exclusive).\n     * The returned list is backed by this list, so non-structural changes in the returned list are reflected in this list, and vice-versa.\n     *\n     * Structural changes in the base list make the behavior of the view undefined.\n     */\n    public fun subList(fromIndex: Int, toIndex: Int): List<E>\n}\n\n/**\n * A generic ordered collection of elements that supports adding and removing elements.\n * @param E the type of elements contained in the list. The mutable list is invariant in its element type.\n */\npublic interface MutableList<E> : List<E>, MutableCollection<E> {\n    // Modification Operations\n    /**\n     * Adds the specified element to the end of this list.\n     *\n     * @return `true` because the list is always modified as the result of this operation.\n     */\n    override fun add(element: E): Boolean\n\n    override fun remove(element: E): Boolean\n\n    // Bulk Modification Operations\n    /**\n     * Adds all of the elements of the specified collection to the end of this list.\n     *\n     * The elements are appended in the order they appear in the [elements] collection.\n     *\n     * @return `true` if the list was changed as the result of the operation.\n     */\n    override fun addAll(elements: Collection<E>): Boolean\n\n    /**\n     * Inserts all of the elements of the specified collection [elements] into this list at the specified [index].\n     *\n     * @return `true` if the list was changed as the result of the operation.\n     */\n    public fun addAll(index: Int, elements: Collection<E>): Boolean\n\n    override fun removeAll(elements: Collection<E>): Boolean\n    override fun retainAll(elements: Collection<E>): Boolean\n    override fun clear(): Unit\n\n    // Positional Access Operations\n    /**\n     * Replaces the element at the specified position in this list with the specified element.\n     *\n     * @return the element previously at the specified position.\n     */\n    public operator fun set(index: Int, element: E): E\n\n    /**\n     * Inserts an element into the list at the specified [index].\n     */\n    public fun add(index: Int, element: E): Unit\n\n    /**\n     * Removes an element at the specified [index] from the list.\n     *\n     * @return the element that has been removed.\n     */\n    public fun removeAt(index: Int): E\n\n    // List Iterators\n    override fun listIterator(): MutableListIterator<E>\n\n    override fun listIterator(index: Int): MutableListIterator<E>\n\n    // View\n    override fun subList(fromIndex: Int, toIndex: Int): MutableList<E>\n}\n\n/**\n * A generic unordered collection of elements that does not support duplicate elements.\n * Methods in this interface support only read-only access to the set;\n * read/write access is supported through the [MutableSet] interface.\n * @param E the type of elements contained in the set. The set is covariant in its element type.\n */\npublic interface Set<out E> : Collection<E> {\n    // Query Operations\n\n    override val size: Int\n    override fun isEmpty(): Boolean\n    override fun contains(element: @UnsafeVariance E): Boolean\n    override fun iterator(): Iterator<E>\n\n    // Bulk Operations\n    override fun containsAll(elements: Collection<@UnsafeVariance E>): Boolean\n}\n\n/**\n * A generic unordered collection of elements that does not support duplicate elements, and supports\n * adding and removing elements.\n * @param E the type of elements contained in the set. The mutable set is invariant in its element type.\n */\npublic interface MutableSet<E> : Set<E>, MutableCollection<E> {\n    // Query Operations\n    override fun iterator(): MutableIterator<E>\n\n    // Modification Operations\n\n    /**\n     * Adds the specified element to the set.\n     *\n     * @return `true` if the element has been added, `false` if the element is already contained in the set.\n     */\n    override fun add(element: E): Boolean\n\n    override fun remove(element: E): Boolean\n\n    // Bulk Modification Operations\n\n    override fun addAll(elements: Collection<E>): Boolean\n    override fun removeAll(elements: Collection<E>): Boolean\n    override fun retainAll(elements: Collection<E>): Boolean\n    override fun clear(): Unit\n}\n\n/**\n * A collection that holds pairs of objects (keys and values) and supports efficiently retrieving\n * the value corresponding to each key. Map keys are unique; the map holds only one value for each key.\n * Methods in this interface support only read-only access to the map; read-write access is supported through\n * the [MutableMap] interface.\n * @param K the type of map keys. The map is invariant in its key type, as it\n *          can accept key as a parameter (of [containsKey] for example) and return it in [keys] set.\n * @param V the type of map values. The map is covariant in its value type.\n */\npublic interface Map<K, out V> {\n    // Query Operations\n    /**\n     * Returns the number of key/value pairs in the map.\n     */\n    public val size: Int\n\n    /**\n     * Returns `true` if the map is empty (contains no elements), `false` otherwise.\n     */\n    public fun isEmpty(): Boolean\n\n    /**\n     * Returns `true` if the map contains the specified [key].\n     */\n    public fun containsKey(key: K): Boolean\n\n    /**\n     * Returns `true` if the map maps one or more keys to the specified [value].\n     */\n    public fun containsValue(value: @UnsafeVariance V): Boolean\n\n    /**\n     * Returns the value corresponding to the given [key], or `null` if such a key is not present in the map.\n     */\n    public operator fun get(key: K): V?\n\n    /**\n     * Returns the value corresponding to the given [key], or [defaultValue] if such a key is not present in the map.\n     *\n     * @since JDK 1.8\n     */\n    @SinceKotlin(\"1.1\")\n    @PlatformDependent\n    public fun getOrDefault(key: K, defaultValue: @UnsafeVariance V): V {\n        // See default implementation in JDK sources\n        throw NotImplementedError()\n    }\n\n    // Views\n    /**\n     * Returns a read-only [Set] of all keys in this map.\n     */\n    public val keys: Set<K>\n\n    /**\n     * Returns a read-only [Collection] of all values in this map. Note that this collection may contain duplicate values.\n     */\n    public val values: Collection<V>\n\n    /**\n     * Returns a read-only [Set] of all key/value pairs in this map.\n     */\n    public val entries: Set<Map.Entry<K, V>>\n\n    /**\n     * Represents a key/value pair held by a [Map].\n     */\n    public interface Entry<out K, out V> {\n        /**\n         * Returns the key of this key/value pair.\n         */\n        public val key: K\n\n        /**\n         * Returns the value of this key/value pair.\n         */\n        public val value: V\n    }\n}\n\n/**\n * A modifiable collection that holds pairs of objects (keys and values) and supports efficiently retrieving\n * the value corresponding to each key. Map keys are unique; the map holds only one value for each key.\n * @param K the type of map keys. The map is invariant in its key type.\n * @param V the type of map values. The mutable map is invariant in its value type.\n */\npublic interface MutableMap<K, V> : Map<K, V> {\n    // Modification Operations\n    /**\n     * Associates the specified [value] with the specified [key] in the map.\n     *\n     * @return the previous value associated with the key, or `null` if the key was not present in the map.\n     */\n    public fun put(key: K, value: V): V?\n\n    /**\n     * Removes the specified key and its corresponding value from this map.\n     *\n     * @return the previous value associated with the key, or `null` if the key was not present in the map.\n     */\n    public fun remove(key: K): V?\n\n    /**\n     * Removes the entry for the specified key only if it is mapped to the specified value.\n     *\n     * @return true if entry was removed\n     */\n    @SinceKotlin(\"1.1\")\n    @PlatformDependent\n    public fun remove(key: K, value: V): Boolean {\n        // See default implementation in JDK sources\n        return true\n    }\n\n    // Bulk Modification Operations\n    /**\n     * Updates this map with key/value pairs from the specified map [from].\n     */\n    public fun putAll(from: Map<out K, V>): Unit\n\n    /**\n     * Removes all elements from this map.\n     */\n    public fun clear(): Unit\n\n    // Views\n    /**\n     * Returns a [MutableSet] of all keys in this map.\n     */\n    override val keys: MutableSet<K>\n\n    /**\n     * Returns a [MutableCollection] of all values in this map. Note that this collection may contain duplicate values.\n     */\n    override val values: MutableCollection<V>\n\n    /**\n     * Returns a [MutableSet] of all key/value pairs in this map.\n     */\n    override val entries: MutableSet<MutableMap.MutableEntry<K, V>>\n\n    /**\n     * Represents a key/value pair held by a [MutableMap].\n     */\n    public interface MutableEntry<K, V> : Map.Entry<K, V> {\n        /**\n         * Changes the value associated with the key of this entry.\n         *\n         * @return the previous value corresponding to the key.\n         */\n        public fun setValue(newValue: V): V\n    }\n}\n","/*\n * Copyright 2010-2019 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.ranges\n\n/**\n * Represents a range of values (for example, numbers or characters).\n * See the [Kotlin language documentation](https://kotlinlang.org/docs/reference/ranges.html) for more information.\n */\npublic interface ClosedRange<T: Comparable<T>> {\n    /**\n     * The minimum value in the range.\n     */\n    public val start: T\n\n    /**\n     * The maximum value in the range (inclusive).\n     */\n    public val endInclusive: T\n\n    /**\n     * Checks whether the specified [value] belongs to the range.\n     */\n    public operator fun contains(value: T): Boolean = value >= start && value <= endInclusive\n\n    /**\n     * Checks whether the range is empty.\n     *\n     * The range is empty if its start value is greater than the end value.\n     */\n    public fun isEmpty(): Boolean = start > endInclusive\n}\n","/*\n * Copyright 2010-2015 JetBrains s.r.o.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage kotlin\n\n/**\n * The type with only one value: the `Unit` object. This type corresponds to the `void` type in Java.\n */\npublic object Unit {\n    override fun toString() = \"kotlin.Unit\"\n}\n","/*\n * Copyright 2010-2015 JetBrains s.r.o.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage kotlin.annotation\n\nimport kotlin.annotation.AnnotationTarget.*\n\n/**\n * Contains the list of code elements which are the possible annotation targets\n */\npublic enum class AnnotationTarget {\n    /** Class, interface or object, annotation class is also included */\n    CLASS,\n    /** Annotation class only */\n    ANNOTATION_CLASS,\n    /** Generic type parameter (unsupported yet) */\n    TYPE_PARAMETER,\n    /** Property */\n    PROPERTY,\n    /** Field, including property's backing field */\n    FIELD,\n    /** Local variable */\n    LOCAL_VARIABLE,\n    /** Value parameter of a function or a constructor */\n    VALUE_PARAMETER,\n    /** Constructor only (primary or secondary) */\n    CONSTRUCTOR,\n    /** Function (constructors are not included) */\n    FUNCTION,\n    /** Property getter only */\n    PROPERTY_GETTER,\n    /** Property setter only */\n    PROPERTY_SETTER,\n    /** Type usage */\n    TYPE,\n    /** Any expression */\n    EXPRESSION,\n    /** File */\n    FILE,\n    /** Type alias */\n    @SinceKotlin(\"1.1\")\n    TYPEALIAS\n}\n\n/**\n * Contains the list of possible annotation's retentions.\n *\n * Determines how an annotation is stored in binary output.\n */\npublic enum class AnnotationRetention {\n    /** Annotation isn't stored in binary output */\n    SOURCE,\n    /** Annotation is stored in binary output, but invisible for reflection */\n    BINARY,\n    /** Annotation is stored in binary output and visible for reflection (default retention) */\n    RUNTIME\n}\n\n/**\n * This meta-annotation indicates the kinds of code elements which are possible targets of an annotation.\n *\n * If the target meta-annotation is not present on an annotation declaration, the annotation is applicable to the following elements:\n * [CLASS], [PROPERTY], [FIELD], [LOCAL_VARIABLE], [VALUE_PARAMETER], [CONSTRUCTOR], [FUNCTION], [PROPERTY_GETTER], [PROPERTY_SETTER].\n *\n * @property allowedTargets list of allowed annotation targets\n */\n@Target(AnnotationTarget.ANNOTATION_CLASS)\n@MustBeDocumented\npublic annotation class Target(vararg val allowedTargets: AnnotationTarget)\n\n/**\n * This meta-annotation determines whether an annotation is stored in binary output and visible for reflection. By default, both are true.\n *\n * @property value necessary annotation retention (RUNTIME, BINARY or SOURCE)\n */\n@Target(AnnotationTarget.ANNOTATION_CLASS)\npublic annotation class Retention(val value: AnnotationRetention = AnnotationRetention.RUNTIME)\n\n/**\n * This meta-annotation determines that an annotation is applicable twice or more on a single code element\n */\n@Target(AnnotationTarget.ANNOTATION_CLASS)\npublic annotation class Repeatable\n\n/**\n * This meta-annotation determines that an annotation is a part of public API and therefore should be included in the generated\n * documentation for the element to which the annotation is applied.\n */\n@Target(AnnotationTarget.ANNOTATION_CLASS)\npublic annotation class MustBeDocumented\n","/*\n * Copyright 2010-2016 JetBrains s.r.o.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage kotlin.internal\n\n/**\n * Specifies that the corresponding type parameter is not used for unsafe operations such as casts or 'is' checks\n * That means it's completely safe to use generic types as argument for such parameter.\n */\n@Target(AnnotationTarget.TYPE_PARAMETER)\n@Retention(AnnotationRetention.BINARY)\ninternal annotation class PureReifiable\n\n/**\n * Specifies that the corresponding built-in method exists depending on platform.\n * Current implementation for JVM looks whether method with same JVM descriptor exists in the module JDK.\n * For example MutableMap.remove(K, V) available only if corresponding\n * method 'java/util/Map.remove(Ljava/lang/Object;Ljava/lang/Object;)Z' is defined in JDK (i.e. for major versions >= 8)\n */\n@Target(AnnotationTarget.FUNCTION)\n@Retention(AnnotationRetention.BINARY)\ninternal annotation class PlatformDependent\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.internal\n\n// a mod b (in arithmetical sense)\nprivate fun mod(a: Int, b: Int): Int {\n    val mod = a % b\n    return if (mod >= 0) mod else mod + b\n}\n\nprivate fun mod(a: Long, b: Long): Long {\n    val mod = a % b\n    return if (mod >= 0) mod else mod + b\n}\n\n// (a - b) mod c\nprivate fun differenceModulo(a: Int, b: Int, c: Int): Int {\n    return mod(mod(a, c) - mod(b, c), c)\n}\n\nprivate fun differenceModulo(a: Long, b: Long, c: Long): Long {\n    return mod(mod(a, c) - mod(b, c), c)\n}\n\n/**\n * Calculates the final element of a bounded arithmetic progression, i.e. the last element of the progression which is in the range\n * from [start] to [end] in case of a positive [step], or from [end] to [start] in case of a negative\n * [step].\n *\n * No validation on passed parameters is performed. The given parameters should satisfy the condition:\n *\n * - either `step > 0` and `start <= end`,\n * - or `step < 0` and `start >= end`.\n *\n * @param start first element of the progression\n * @param end ending bound for the progression\n * @param step increment, or difference of successive elements in the progression\n * @return the final element of the progression\n * @suppress\n */\n@PublishedApi\ninternal fun getProgressionLastElement(start: Int, end: Int, step: Int): Int = when {\n    step > 0 -> if (start >= end) end else end - differenceModulo(end, start, step)\n    step < 0 -> if (start <= end) end else end + differenceModulo(start, end, -step)\n    else -> throw kotlin.IllegalArgumentException(\"Step is zero.\")\n}\n\n/**\n * Calculates the final element of a bounded arithmetic progression, i.e. the last element of the progression which is in the range\n * from [start] to [end] in case of a positive [step], or from [end] to [start] in case of a negative\n * [step].\n *\n * No validation on passed parameters is performed. The given parameters should satisfy the condition:\n *\n * - either `step > 0` and `start <= end`,\n * - or `step < 0` and `start >= end`.\n *\n * @param start first element of the progression\n * @param end ending bound for the progression\n * @param step increment, or difference of successive elements in the progression\n * @return the final element of the progression\n * @suppress\n */\n@PublishedApi\ninternal fun getProgressionLastElement(start: Long, end: Long, step: Long): Long = when {\n    step > 0 -> if (start >= end) end else end - differenceModulo(end, start, step)\n    step < 0 -> if (start <= end) end else end + differenceModulo(start, end, -step)\n    else -> throw kotlin.IllegalArgumentException(\"Step is zero.\")\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@JsName(\"arrayIterator\")\ninternal fun arrayIterator(array: dynamic, type: String?) = when (type) {\n    null -> {\n        val arr: Array<dynamic> = array\n        object : Iterator<dynamic> {\n            var index = 0\n            override fun hasNext() = index < arr.size\n            override fun next() = if (index < arr.size) arr[index++] else throw NoSuchElementException(\"$index\")\n        }\n    }\n    \"BooleanArray\" -> booleanArrayIterator(array)\n    \"ByteArray\" -> byteArrayIterator(array)\n    \"ShortArray\" -> shortArrayIterator(array)\n    \"CharArray\" -> charArrayIterator(array)\n    \"IntArray\" -> intArrayIterator(array)\n    \"LongArray\" -> longArrayIterator(array)\n    \"FloatArray\" -> floatArrayIterator(array)\n    \"DoubleArray\" -> doubleArrayIterator(array)\n    else -> throw IllegalStateException(\"Unsupported type argument for arrayIterator: $type\")\n}\n\n@JsName(\"booleanArrayIterator\")\ninternal fun booleanArrayIterator(array: BooleanArray) = object : BooleanIterator() {\n    var index = 0\n    override fun hasNext() = index < array.size\n    override fun nextBoolean() = if (index < array.size) array[index++] else throw NoSuchElementException(\"$index\")\n}\n\n@JsName(\"byteArrayIterator\")\ninternal fun byteArrayIterator(array: ByteArray) = object : ByteIterator() {\n    var index = 0\n    override fun hasNext() = index < array.size\n    override fun nextByte() = if (index < array.size) array[index++] else throw NoSuchElementException(\"$index\")\n}\n\n@JsName(\"shortArrayIterator\")\ninternal fun shortArrayIterator(array: ShortArray) = object : ShortIterator() {\n    var index = 0\n    override fun hasNext() = index < array.size\n    override fun nextShort() = if (index < array.size) array[index++] else throw NoSuchElementException(\"$index\")\n}\n\n@JsName(\"charArrayIterator\")\ninternal fun charArrayIterator(array: CharArray) = object : CharIterator() {\n    var index = 0\n    override fun hasNext() = index < array.size\n    override fun nextChar() = if (index < array.size) array[index++] else throw NoSuchElementException(\"$index\")\n}\n\n@JsName(\"intArrayIterator\")\ninternal fun intArrayIterator(array: IntArray) = object : IntIterator() {\n    var index = 0\n    override fun hasNext() = index < array.size\n    override fun nextInt() = if (index < array.size) array[index++] else throw NoSuchElementException(\"$index\")\n}\n\n@JsName(\"floatArrayIterator\")\ninternal fun floatArrayIterator(array: FloatArray) = object : FloatIterator() {\n    var index = 0\n    override fun hasNext() = index < array.size\n    override fun nextFloat() = if (index < array.size) array[index++] else throw NoSuchElementException(\"$index\")\n}\n\n@JsName(\"doubleArrayIterator\")\ninternal fun doubleArrayIterator(array: DoubleArray) = object : DoubleIterator() {\n    var index = 0\n    override fun hasNext() = index < array.size\n    override fun nextDouble() = if (index < array.size) array[index++] else throw NoSuchElementException(\"$index\")\n}\n\n@JsName(\"longArrayIterator\")\ninternal fun longArrayIterator(array: LongArray) = object : LongIterator() {\n    var index = 0\n    override fun hasNext() = index < array.size\n    override fun nextLong() = if (index < array.size) array[index++] else throw NoSuchElementException(\"$index\")\n}\n\n@JsName(\"PropertyMetadata\")\ninternal class PropertyMetadata(@JsName(\"callableName\") val name: String)\n\n@JsName(\"noWhenBranchMatched\")\ninternal fun noWhenBranchMatched(): Nothing = throw NoWhenBranchMatchedException()\n\n@JsName(\"subSequence\")\ninternal fun subSequence(c: CharSequence, startIndex: Int, endIndex: Int): CharSequence {\n    if (c is String) {\n        return c.substring(startIndex, endIndex)\n    } else {\n        return c.asDynamic().`subSequence_vux9f0$`(startIndex, endIndex)\n    }\n}\n\n@JsName(\"captureStack\")\ninternal fun captureStack(@Suppress(\"UNUSED_PARAMETER\") baseClass: JsClass<in Throwable>, instance: Throwable) {\n    if (js(\"Error\").captureStackTrace) {\n        // Using uncropped stack traces due to KT-37563.\n        // Precise stack traces are implemented in JS IR compiler and stdlib\n        js(\"Error\").captureStackTrace(instance);\n    } else {\n        instance.asDynamic().stack = js(\"new Error()\").stack;\n    }\n}\n\n@JsName(\"newThrowable\")\ninternal fun newThrowable(message: String?, cause: Throwable?): Throwable {\n    val throwable = js(\"new Error()\")\n    throwable.message = if (jsTypeOf(message) == \"undefined\") {\n        if (cause != null) cause.toString() else null\n    } else {\n        message\n    }\n    throwable.cause = cause\n    throwable.name = \"Throwable\"\n    return throwable\n}\n\n@JsName(\"BoxedChar\")\ninternal class BoxedChar(val c: Int) : Comparable<Int> {\n    override fun equals(other: Any?): Boolean {\n        return other is BoxedChar && c == other.c\n    }\n\n    override fun hashCode(): Int {\n        return c\n    }\n\n    override fun toString(): String {\n        return js(\"this.c\").unsafeCast<Char>().toString()\n    }\n\n    override fun compareTo(other: Int): Int {\n        return js(\"this.c - other\").unsafeCast<Int>()\n    }\n\n    @JsName(\"valueOf\")\n    public fun valueOf(): Int {\n        return c\n    }\n}\n\n@kotlin.internal.InlineOnly\ninternal inline fun <T> concat(args: Array<T>): T {\n    val typed = js(\"Array\")(args.size)\n    for (i in args.indices) {\n        val arr = args[i]\n        if (arr !is Array<*>) {\n            typed[i] = js(\"[]\").slice.call(arr)\n        } else {\n            typed[i] = arr\n        }\n    }\n    return js(\"[]\").concat.apply(js(\"[]\"), typed);\n}\n\n/** Concat regular Array's and TypedArray's into an Array.\n */\n@PublishedApi\n@JsName(\"arrayConcat\")\n@Suppress(\"UNUSED_PARAMETER\")\ninternal fun <T> arrayConcat(a: T, b: T): T {\n    return concat(js(\"arguments\"))\n}\n\n/** Concat primitive arrays. Main use: prepare vararg arguments.\n *  For compatibility with 1.1.0 the arguments may be a mixture of Array's and TypedArray's.\n *\n *  If the first argument is TypedArray (Byte-, Short-, Char-, Int-, Float-, and DoubleArray) returns a TypedArray, otherwise an Array.\n *  If the first argument has the $type$ property (Boolean-, Char-, and LongArray) copy its value to result.$type$.\n *  If the first argument is a regular Array without the $type$ property default to arrayConcat.\n */\n@PublishedApi\n@JsName(\"primitiveArrayConcat\")\n@Suppress(\"UNUSED_PARAMETER\")\ninternal fun <T> primitiveArrayConcat(a: T, b: T): T {\n    val args: Array<T> = js(\"arguments\")\n    if (a is Array<*> && a.asDynamic().`$type$` === undefined) {\n        return concat(args)\n    } else {\n        var size = 0\n        for (i in args.indices) {\n            size += args[i].asDynamic().length as Int\n        }\n        val result = js(\"new a.constructor(size)\")\n        kotlin.copyArrayType(a, result)\n        size = 0\n        for (i in args.indices) {\n            val arr = args[i].asDynamic()\n            for (j in 0 until arr.length) {\n                result[size++] = arr[j]\n            }\n        }\n        return result\n    }\n}\n\n@JsName(\"booleanArrayOf\")\ninternal fun booleanArrayOf() = withType(\"BooleanArray\", js(\"[].slice.call(arguments)\"))\n\n@JsName(\"charArrayOf\") // The arguments have to be slice'd here because of Rhino (see KT-16974)\ninternal fun charArrayOf() = withType(\"CharArray\", js(\"new Uint16Array([].slice.call(arguments))\"))\n\n@JsName(\"longArrayOf\")\ninternal fun longArrayOf() = withType(\"LongArray\", js(\"[].slice.call(arguments)\"))\n\n@JsName(\"withType\")\n@kotlin.internal.InlineOnly\ninternal inline fun withType(type: String, array: dynamic): dynamic {\n    array.`$type$` = type\n    return array\n}","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.coroutines\n\nimport kotlin.coroutines.intrinsics.COROUTINE_SUSPENDED\n\n@SinceKotlin(\"1.3\")\n@JsName(\"CoroutineImpl\")\ninternal abstract class CoroutineImpl(private val resultContinuation: Continuation<Any?>) : Continuation<Any?> {\n    protected var state = 0\n    protected var exceptionState = 0\n    protected var result: Any? = null\n    protected var exception: Throwable? = null\n    protected var finallyPath: Array<Int>? = null\n\n    public override val context: CoroutineContext = resultContinuation.context\n\n    private var intercepted_: Continuation<Any?>? = null\n\n    public fun intercepted(): Continuation<Any?> =\n        intercepted_\n            ?: (context[ContinuationInterceptor]?.interceptContinuation(this) ?: this)\n                .also { intercepted_ = it }\n\n    override fun resumeWith(result: Result<Any?>) {\n        var current = this\n        var currentResult: Any? = result.getOrNull()\n        var currentException: Throwable? = result.exceptionOrNull()\n\n        // This loop unrolls recursion in current.resumeWith(param) to make saner and shorter stack traces on resume\n        while (true) {\n            with(current) {\n                val completion = resultContinuation\n\n                // Set result and exception fields in the current continuation\n                if (currentException == null) {\n                    this.result = currentResult\n                } else {\n                    state = exceptionState\n                    exception = currentException\n                }\n\n                try {\n                    val outcome = doResume()\n                    if (outcome === COROUTINE_SUSPENDED) return\n                    currentResult = outcome\n                    currentException = null\n                } catch (exception: dynamic) { // Catch all exceptions\n                    currentResult = null\n                    currentException = exception.unsafeCast<Throwable>()\n                }\n\n                releaseIntercepted() // this state machine instance is terminating\n\n                if (completion is CoroutineImpl) {\n                    // unrolling recursion via loop\n                    current = completion\n                } else {\n                    // top-level completion reached -- invoke and return\n                    currentException?.let {\n                        completion.resumeWithException(it)\n                    } ?: completion.resume(currentResult)\n                    return\n                }\n            }\n        }\n    }\n\n    private fun releaseIntercepted() {\n        val intercepted = intercepted_\n        if (intercepted != null && intercepted !== this) {\n            context[ContinuationInterceptor]!!.releaseInterceptedContinuation(intercepted)\n        }\n        this.intercepted_ = CompletedContinuation // just in case\n    }\n\n    protected abstract fun doResume(): Any?\n}\n\ninternal object CompletedContinuation : Continuation<Any?> {\n    override val context: CoroutineContext\n        get() = error(\"This continuation is already complete\")\n\n    override fun resumeWith(result: Result<Any?>) {\n        error(\"This continuation is already complete\")\n    }\n\n    override fun toString(): String = \"This continuation is already complete\"\n}\n","/*\n * Copyright 2010-2021 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin\n\n/**\n * Creates a Char with the specified [code].\n *\n * @sample samples.text.Chars.charFromCode\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic actual inline fun Char(code: UShort): Char {\n    return code.toInt().toChar()\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:Suppress(\"UNCHECKED_CAST\", \"RedundantVisibilityModifier\")\n\npackage kotlin\n\nimport kotlin.contracts.*\nimport kotlin.internal.InlineOnly\nimport kotlin.jvm.JvmField\nimport kotlin.jvm.JvmInline\nimport kotlin.jvm.JvmName\n\n/**\n * A discriminated union that encapsulates a successful outcome with a value of type [T]\n * or a failure with an arbitrary [Throwable] exception.\n */\n@SinceKotlin(\"1.3\")\n@JvmInline\npublic value class Result<out T> @PublishedApi internal constructor(\n    @PublishedApi\n    internal val value: Any?\n) : Serializable {\n    // discovery\n\n    /**\n     * Returns `true` if this instance represents a successful outcome.\n     * In this case [isFailure] returns `false`.\n     */\n    public val isSuccess: Boolean get() = value !is Failure\n\n    /**\n     * Returns `true` if this instance represents a failed outcome.\n     * In this case [isSuccess] returns `false`.\n     */\n    public val isFailure: Boolean get() = value is Failure\n\n    // value & exception retrieval\n\n    /**\n     * Returns the encapsulated value if this instance represents [success][Result.isSuccess] or `null`\n     * if it is [failure][Result.isFailure].\n     *\n     * This function is a shorthand for `getOrElse { null }` (see [getOrElse]) or\n     * `fold(onSuccess = { it }, onFailure = { null })` (see [fold]).\n     */\n    @InlineOnly\n    public inline fun getOrNull(): T? =\n        when {\n            isFailure -> null\n            else -> value as T\n        }\n\n    /**\n     * Returns the encapsulated [Throwable] exception if this instance represents [failure][isFailure] or `null`\n     * if it is [success][isSuccess].\n     *\n     * This function is a shorthand for `fold(onSuccess = { null }, onFailure = { it })` (see [fold]).\n     */\n    public fun exceptionOrNull(): Throwable? =\n        when (value) {\n            is Failure -> value.exception\n            else -> null\n        }\n\n    /**\n     * Returns a string `Success(v)` if this instance represents [success][Result.isSuccess]\n     * where `v` is a string representation of the value or a string `Failure(x)` if\n     * it is [failure][isFailure] where `x` is a string representation of the exception.\n     */\n    public override fun toString(): String =\n        when (value) {\n            is Failure -> value.toString() // \"Failure($exception)\"\n            else -> \"Success($value)\"\n        }\n\n    // companion with constructors\n\n    /**\n     * Companion object for [Result] class that contains its constructor functions\n     * [success] and [failure].\n     */\n    public companion object {\n        /**\n         * Returns an instance that encapsulates the given [value] as successful value.\n         */\n        @Suppress(\"INAPPLICABLE_JVM_NAME\")\n        @InlineOnly\n        @JvmName(\"success\")\n        public inline fun <T> success(value: T): Result<T> =\n            Result(value)\n\n        /**\n         * Returns an instance that encapsulates the given [Throwable] [exception] as failure.\n         */\n        @Suppress(\"INAPPLICABLE_JVM_NAME\")\n        @InlineOnly\n        @JvmName(\"failure\")\n        public inline fun <T> failure(exception: Throwable): Result<T> =\n            Result(createFailure(exception))\n    }\n\n    internal class Failure(\n        @JvmField\n        val exception: Throwable\n    ) : Serializable {\n        override fun equals(other: Any?): Boolean = other is Failure && exception == other.exception\n        override fun hashCode(): Int = exception.hashCode()\n        override fun toString(): String = \"Failure($exception)\"\n    }\n}\n\n/**\n * Creates an instance of internal marker [Result.Failure] class to\n * make sure that this class is not exposed in ABI.\n */\n@PublishedApi\n@SinceKotlin(\"1.3\")\ninternal fun createFailure(exception: Throwable): Any =\n    Result.Failure(exception)\n\n/**\n * Throws exception if the result is failure. This internal function minimizes\n * inlined bytecode for [getOrThrow] and makes sure that in the future we can\n * add some exception-augmenting logic here (if needed).\n */\n@PublishedApi\n@SinceKotlin(\"1.3\")\ninternal fun Result<*>.throwOnFailure() {\n    if (value is Result.Failure) throw value.exception\n}\n\n/**\n * Calls the specified function [block] and returns its encapsulated result if invocation was successful,\n * catching any [Throwable] exception that was thrown from the [block] function execution and encapsulating it as a failure.\n */\n@InlineOnly\n@SinceKotlin(\"1.3\")\npublic inline fun <R> runCatching(block: () -> R): Result<R> {\n    return try {\n        Result.success(block())\n    } catch (e: Throwable) {\n        Result.failure(e)\n    }\n}\n\n/**\n * Calls the specified function [block] with `this` value as its receiver and returns its encapsulated result if invocation was successful,\n * catching any [Throwable] exception that was thrown from the [block] function execution and encapsulating it as a failure.\n */\n@InlineOnly\n@SinceKotlin(\"1.3\")\npublic inline fun <T, R> T.runCatching(block: T.() -> R): Result<R> {\n    return try {\n        Result.success(block())\n    } catch (e: Throwable) {\n        Result.failure(e)\n    }\n}\n\n// -- extensions ---\n\n/**\n * Returns the encapsulated value if this instance represents [success][Result.isSuccess] or throws the encapsulated [Throwable] exception\n * if it is [failure][Result.isFailure].\n *\n * This function is a shorthand for `getOrElse { throw it }` (see [getOrElse]).\n */\n@InlineOnly\n@SinceKotlin(\"1.3\")\npublic inline fun <T> Result<T>.getOrThrow(): T {\n    throwOnFailure()\n    return value as T\n}\n\n/**\n * Returns the encapsulated value if this instance represents [success][Result.isSuccess] or the\n * result of [onFailure] function for the encapsulated [Throwable] exception if it is [failure][Result.isFailure].\n *\n * Note, that this function rethrows any [Throwable] exception thrown by [onFailure] function.\n *\n * This function is a shorthand for `fold(onSuccess = { it }, onFailure = onFailure)` (see [fold]).\n */\n@InlineOnly\n@SinceKotlin(\"1.3\")\npublic inline fun <R, T : R> Result<T>.getOrElse(onFailure: (exception: Throwable) -> R): R {\n    contract {\n        callsInPlace(onFailure, InvocationKind.AT_MOST_ONCE)\n    }\n    return when (val exception = exceptionOrNull()) {\n        null -> value as T\n        else -> onFailure(exception)\n    }\n}\n\n/**\n * Returns the encapsulated value if this instance represents [success][Result.isSuccess] or the\n * [defaultValue] if it is [failure][Result.isFailure].\n *\n * This function is a shorthand for `getOrElse { defaultValue }` (see [getOrElse]).\n */\n@InlineOnly\n@SinceKotlin(\"1.3\")\npublic inline fun <R, T : R> Result<T>.getOrDefault(defaultValue: R): R {\n    if (isFailure) return defaultValue\n    return value as T\n}\n\n/**\n * Returns the result of [onSuccess] for the encapsulated value if this instance represents [success][Result.isSuccess]\n * or the result of [onFailure] function for the encapsulated [Throwable] exception if it is [failure][Result.isFailure].\n *\n * Note, that this function rethrows any [Throwable] exception thrown by [onSuccess] or by [onFailure] function.\n */\n@InlineOnly\n@SinceKotlin(\"1.3\")\npublic inline fun <R, T> Result<T>.fold(\n    onSuccess: (value: T) -> R,\n    onFailure: (exception: Throwable) -> R\n): R {\n    contract {\n        callsInPlace(onSuccess, InvocationKind.AT_MOST_ONCE)\n        callsInPlace(onFailure, InvocationKind.AT_MOST_ONCE)\n    }\n    return when (val exception = exceptionOrNull()) {\n        null -> onSuccess(value as T)\n        else -> onFailure(exception)\n    }\n}\n\n// transformation\n\n/**\n * Returns the encapsulated result of the given [transform] function applied to the encapsulated value\n * if this instance represents [success][Result.isSuccess] or the\n * original encapsulated [Throwable] exception if it is [failure][Result.isFailure].\n *\n * Note, that this function rethrows any [Throwable] exception thrown by [transform] function.\n * See [mapCatching] for an alternative that encapsulates exceptions.\n */\n@InlineOnly\n@SinceKotlin(\"1.3\")\npublic inline fun <R, T> Result<T>.map(transform: (value: T) -> R): Result<R> {\n    contract {\n        callsInPlace(transform, InvocationKind.AT_MOST_ONCE)\n    }\n    return when {\n        isSuccess -> Result.success(transform(value as T))\n        else -> Result(value)\n    }\n}\n\n/**\n * Returns the encapsulated result of the given [transform] function applied to the encapsulated value\n * if this instance represents [success][Result.isSuccess] or the\n * original encapsulated [Throwable] exception if it is [failure][Result.isFailure].\n *\n * This function catches any [Throwable] exception thrown by [transform] function and encapsulates it as a failure.\n * See [map] for an alternative that rethrows exceptions from `transform` function.\n */\n@InlineOnly\n@SinceKotlin(\"1.3\")\npublic inline fun <R, T> Result<T>.mapCatching(transform: (value: T) -> R): Result<R> {\n    return when {\n        isSuccess -> runCatching { transform(value as T) }\n        else -> Result(value)\n    }\n}\n\n/**\n * Returns the encapsulated result of the given [transform] function applied to the encapsulated [Throwable] exception\n * if this instance represents [failure][Result.isFailure] or the\n * original encapsulated value if it is [success][Result.isSuccess].\n *\n * Note, that this function rethrows any [Throwable] exception thrown by [transform] function.\n * See [recoverCatching] for an alternative that encapsulates exceptions.\n */\n@InlineOnly\n@SinceKotlin(\"1.3\")\npublic inline fun <R, T : R> Result<T>.recover(transform: (exception: Throwable) -> R): Result<R> {\n    contract {\n        callsInPlace(transform, InvocationKind.AT_MOST_ONCE)\n    }\n    return when (val exception = exceptionOrNull()) {\n        null -> this\n        else -> Result.success(transform(exception))\n    }\n}\n\n/**\n * Returns the encapsulated result of the given [transform] function applied to the encapsulated [Throwable] exception\n * if this instance represents [failure][Result.isFailure] or the\n * original encapsulated value if it is [success][Result.isSuccess].\n *\n * This function catches any [Throwable] exception thrown by [transform] function and encapsulates it as a failure.\n * See [recover] for an alternative that rethrows exceptions.\n */\n@InlineOnly\n@SinceKotlin(\"1.3\")\npublic inline fun <R, T : R> Result<T>.recoverCatching(transform: (exception: Throwable) -> R): Result<R> {\n    return when (val exception = exceptionOrNull()) {\n        null -> this\n        else -> runCatching { transform(exception) }\n    }\n}\n\n// \"peek\" onto value/exception and pipe\n\n/**\n * Performs the given [action] on the encapsulated [Throwable] exception if this instance represents [failure][Result.isFailure].\n * Returns the original `Result` unchanged.\n */\n@InlineOnly\n@SinceKotlin(\"1.3\")\npublic inline fun <T> Result<T>.onFailure(action: (exception: Throwable) -> Unit): Result<T> {\n    contract {\n        callsInPlace(action, InvocationKind.AT_MOST_ONCE)\n    }\n    exceptionOrNull()?.let { action(it) }\n    return this\n}\n\n/**\n * Performs the given [action] on the encapsulated value if this instance represents [success][Result.isSuccess].\n * Returns the original `Result` unchanged.\n */\n@InlineOnly\n@SinceKotlin(\"1.3\")\npublic inline fun <T> Result<T>.onSuccess(action: (value: T) -> Unit): Result<T> {\n    contract {\n        callsInPlace(action, InvocationKind.AT_MOST_ONCE)\n    }\n    if (isSuccess) action(value as T)\n    return this\n}\n\n// -------------------\n","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.coroutines\n\nimport kotlin.contracts.*\nimport kotlin.coroutines.intrinsics.*\nimport kotlin.internal.InlineOnly\n\n/**\n * Interface representing a continuation after a suspension point that returns a value of type `T`.\n */\n@SinceKotlin(\"1.3\")\npublic interface Continuation<in T> {\n    /**\n     * The context of the coroutine that corresponds to this continuation.\n     */\n    public val context: CoroutineContext\n\n    /**\n     * Resumes the execution of the corresponding coroutine passing a successful or failed [result] as the\n     * return value of the last suspension point.\n     */\n    public fun resumeWith(result: Result<T>)\n}\n\n/**\n * Classes and interfaces marked with this annotation are restricted when used as receivers for extension\n * `suspend` functions. These `suspend` extensions can only invoke other member or extension `suspend` functions on this particular\n * receiver and are restricted from calling arbitrary suspension functions.\n */\n@SinceKotlin(\"1.3\")\n@Target(AnnotationTarget.CLASS)\n@Retention(AnnotationRetention.BINARY)\npublic annotation class RestrictsSuspension\n\n/**\n * Resumes the execution of the corresponding coroutine passing [value] as the return value of the last suspension point.\n */\n@SinceKotlin(\"1.3\")\n@InlineOnly\npublic inline fun <T> Continuation<T>.resume(value: T): Unit =\n    resumeWith(Result.success(value))\n\n/**\n * Resumes the execution of the corresponding coroutine so that the [exception] is re-thrown right after the\n * last suspension point.\n */\n@SinceKotlin(\"1.3\")\n@InlineOnly\npublic inline fun <T> Continuation<T>.resumeWithException(exception: Throwable): Unit =\n    resumeWith(Result.failure(exception))\n\n\n/**\n * Creates a [Continuation] instance with the given [context] and implementation of [resumeWith] method.\n */\n@SinceKotlin(\"1.3\")\n@InlineOnly\npublic inline fun <T> Continuation(\n    context: CoroutineContext,\n    crossinline resumeWith: (Result<T>) -> Unit\n): Continuation<T> =\n    object : Continuation<T> {\n        override val context: CoroutineContext\n            get() = context\n\n        override fun resumeWith(result: Result<T>) =\n            resumeWith(result)\n    }\n\n/**\n * Creates a coroutine without a receiver and with result type [T].\n * This function creates a new, fresh instance of suspendable computation every time it is invoked.\n *\n * To start executing the created coroutine, invoke `resume(Unit)` on the returned [Continuation] instance.\n * The [completion] continuation is invoked when the coroutine completes with a result or an exception.\n * Subsequent invocation of any resume function on the resulting continuation will produce an [IllegalStateException].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"UNCHECKED_CAST\")\npublic fun <T> (suspend () -> T).createCoroutine(\n    completion: Continuation<T>\n): Continuation<Unit> =\n    SafeContinuation(createCoroutineUnintercepted(completion).intercepted(), COROUTINE_SUSPENDED)\n\n/**\n * Creates a coroutine with receiver type [R] and result type [T].\n * This function creates a new, fresh instance of suspendable computation every time it is invoked.\n *\n * To start executing the created coroutine, invoke `resume(Unit)` on the returned [Continuation] instance.\n * The [completion] continuation is invoked when the coroutine completes with a result or an exception.\n * Subsequent invocation of any resume function on the resulting continuation will produce an [IllegalStateException].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"UNCHECKED_CAST\")\npublic fun <R, T> (suspend R.() -> T).createCoroutine(\n    receiver: R,\n    completion: Continuation<T>\n): Continuation<Unit> =\n    SafeContinuation(createCoroutineUnintercepted(receiver, completion).intercepted(), COROUTINE_SUSPENDED)\n\n/**\n * Starts a coroutine without a receiver and with result type [T].\n * This function creates and starts a new, fresh instance of suspendable computation every time it is invoked.\n * The [completion] continuation is invoked when the coroutine completes with a result or an exception.\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"UNCHECKED_CAST\")\npublic fun <T> (suspend () -> T).startCoroutine(\n    completion: Continuation<T>\n) {\n    createCoroutineUnintercepted(completion).intercepted().resume(Unit)\n}\n\n/**\n * Starts a coroutine with receiver type [R] and result type [T].\n * This function creates and starts a new, fresh instance of suspendable computation every time it is invoked.\n * The [completion] continuation is invoked when the coroutine completes with a result or an exception.\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"UNCHECKED_CAST\")\npublic fun <R, T> (suspend R.() -> T).startCoroutine(\n    receiver: R,\n    completion: Continuation<T>\n) {\n    createCoroutineUnintercepted(receiver, completion).intercepted().resume(Unit)\n}\n\n/**\n * Obtains the current continuation instance inside suspend functions and suspends\n * the currently running coroutine.\n *\n * In this function both [Continuation.resume] and [Continuation.resumeWithException] can be used either synchronously in\n * the same stack-frame where the suspension function is run or asynchronously later in the same thread or\n * from a different thread of execution. Subsequent invocation of any resume function will produce an [IllegalStateException].\n */\n@SinceKotlin(\"1.3\")\n@InlineOnly\npublic suspend inline fun <T> suspendCoroutine(crossinline block: (Continuation<T>) -> Unit): T {\n    contract { callsInPlace(block, InvocationKind.EXACTLY_ONCE) }\n    return suspendCoroutineUninterceptedOrReturn { c: Continuation<T> ->\n        val safe = SafeContinuation(c.intercepted())\n        block(safe)\n        safe.getOrThrow()\n    }\n}\n\n/**\n * Returns the context of the current coroutine.\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"WRONG_MODIFIER_TARGET\")\n@InlineOnly\npublic suspend inline val coroutineContext: CoroutineContext\n    get() {\n        throw NotImplementedError(\"Implemented as intrinsic\")\n    }\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.coroutines.intrinsics\n\nimport kotlin.coroutines.*\nimport kotlin.internal.InlineOnly\n\n/**\n * Starts an unintercepted coroutine without a receiver and with result type [T] and executes it until its first suspension.\n * Returns the result of the coroutine or throws its exception if it does not suspend or [COROUTINE_SUSPENDED] if it suspends.\n * In the latter case, the [completion] continuation is invoked when the coroutine completes with a result or an exception.\n *\n * The coroutine is started directly in the invoker's thread without going through the [ContinuationInterceptor] that might\n * be present in the completion's [CoroutineContext]. It is the invoker's responsibility to ensure that a proper invocation\n * context is established.\n *\n * This function is designed to be used from inside of [suspendCoroutineUninterceptedOrReturn] to resume the execution of the suspended\n * coroutine using a reference to the suspending function.\n */\n@SinceKotlin(\"1.3\")\n@InlineOnly\npublic actual inline fun <T> (suspend () -> T).startCoroutineUninterceptedOrReturn(\n    completion: Continuation<T>\n): Any? = this.asDynamic()(completion, false)\n\n/**\n * Starts an unintercepted coroutine with receiver type [R] and result type [T] and executes it until its first suspension.\n * Returns the result of the coroutine or throws its exception if it does not suspend or [COROUTINE_SUSPENDED] if it suspends.\n * In the latter case, the [completion] continuation is invoked when the coroutine completes with a result or an exception.\n *\n * The coroutine is started directly in the invoker's thread without going through the [ContinuationInterceptor] that might\n * be present in the completion's [CoroutineContext]. It is the invoker's responsibility to ensure that a proper invocation\n * context is established.\n *\n * This function is designed to be used from inside of [suspendCoroutineUninterceptedOrReturn] to resume the execution of the suspended\n * coroutine using a reference to the suspending function.\n */\n@SinceKotlin(\"1.3\")\n@InlineOnly\npublic actual inline fun <R, T> (suspend R.() -> T).startCoroutineUninterceptedOrReturn(\n    receiver: R,\n    completion: Continuation<T>\n): Any? = this.asDynamic()(receiver, completion, false)\n\n@InlineOnly\ninternal actual inline fun <R, P, T> (suspend R.(P) -> T).startCoroutineUninterceptedOrReturn(\n    receiver: R,\n    param: P,\n    completion: Continuation<T>\n): Any? = this.asDynamic()(receiver, param, completion, false)\n\n/**\n * Creates unintercepted coroutine without receiver and with result type [T].\n * This function creates a new, fresh instance of suspendable computation every time it is invoked.\n *\n * To start executing the created coroutine, invoke `resume(Unit)` on the returned [Continuation] instance.\n * The [completion] continuation is invoked when coroutine completes with result or exception.\n *\n * This function returns unintercepted continuation.\n * Invocation of `resume(Unit)` starts coroutine immediately in the invoker's call stack without going through the\n * [ContinuationInterceptor] that might be present in the completion's [CoroutineContext].\n * It is the invoker's responsibility to ensure that a proper invocation context is established.\n * Note that [completion] of this function may get invoked in an arbitrary context.\n *\n * [Continuation.intercepted] can be used to acquire the intercepted continuation.\n * Invocation of `resume(Unit)` on intercepted continuation guarantees that execution of\n * both the coroutine and [completion] happens in the invocation context established by\n * [ContinuationInterceptor].\n *\n * Repeated invocation of any resume function on the resulting continuation corrupts the\n * state machine of the coroutine and may result in arbitrary behaviour or exception.\n */\n@SinceKotlin(\"1.3\")\npublic actual fun <T> (suspend () -> T).createCoroutineUnintercepted(\n    completion: Continuation<T>\n): Continuation<Unit> =\n    // Kotlin/JS suspend lambdas have an extra parameter `suspended`\n    if (this.asDynamic().length == 2) {\n        // When `suspended` is true the continuation is created, but not executed\n        this.asDynamic()(completion, true)\n    } else {\n        createCoroutineFromSuspendFunction(completion) {\n            this.asDynamic()(completion)\n        }\n    }\n\n/**\n * Creates unintercepted coroutine with receiver type [R] and result type [T].\n * This function creates a new, fresh instance of suspendable computation every time it is invoked.\n *\n * To start executing the created coroutine, invoke `resume(Unit)` on the returned [Continuation] instance.\n * The [completion] continuation is invoked when coroutine completes with result or exception.\n *\n * This function returns unintercepted continuation.\n * Invocation of `resume(Unit)` starts coroutine immediately in the invoker's call stack without going through the\n * [ContinuationInterceptor] that might be present in the completion's [CoroutineContext].\n * It is the invoker's responsibility to ensure that a proper invocation context is established.\n * Note that [completion] of this function may get invoked in an arbitrary context.\n *\n * [Continuation.intercepted] can be used to acquire the intercepted continuation.\n * Invocation of `resume(Unit)` on intercepted continuation guarantees that execution of\n * both the coroutine and [completion] happens in the invocation context established by\n * [ContinuationInterceptor].\n *\n * Repeated invocation of any resume function on the resulting continuation corrupts the\n * state machine of the coroutine and may result in arbitrary behaviour or exception.\n */\n@SinceKotlin(\"1.3\")\npublic actual fun <R, T> (suspend R.() -> T).createCoroutineUnintercepted(\n    receiver: R,\n    completion: Continuation<T>\n): Continuation<Unit> =\n    // Kotlin/JS suspend lambdas have an extra parameter `suspended`\n    if (this.asDynamic().length == 3) {\n        // When `suspended` is true the continuation is created, but not executed\n        this.asDynamic()(receiver, completion, true)\n    } else {\n        createCoroutineFromSuspendFunction(completion) {\n            this.asDynamic()(receiver, completion)\n        }\n    }\n\n/**\n * Intercepts this continuation with [ContinuationInterceptor].\n *\n * This function shall be used on the immediate result of [createCoroutineUnintercepted] or [suspendCoroutineUninterceptedOrReturn],\n * in which case it checks for [ContinuationInterceptor] in the continuation's [context][Continuation.context],\n * invokes [ContinuationInterceptor.interceptContinuation], caches and returns the result.\n *\n * If this function is invoked on other [Continuation] instances it returns `this` continuation unchanged.\n */\n@SinceKotlin(\"1.3\")\npublic actual fun <T> Continuation<T>.intercepted(): Continuation<T> =\n    (this as? CoroutineImpl)?.intercepted() ?: this\n\n\nprivate inline fun <T> createCoroutineFromSuspendFunction(\n    completion: Continuation<T>,\n    crossinline block: () -> Any?\n): Continuation<Unit> {\n    @Suppress(\"UNCHECKED_CAST\")\n    return object : CoroutineImpl(completion as Continuation<Any?>) {\n        override fun doResume(): Any? {\n            exception?.let { throw it }\n            return block()\n        }\n    }\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.js\n\n// Mirrors signature from JS IR BE\n// Used for js.translator/testData/box/number/mulInt32.kt\n@library\n@JsName(\"imulEmulated\")\n@Suppress(\"UNUSED_PARAMETER\")\ninternal fun imul(x: Int, y: Int): Int = definedExternally\n\n@Suppress(\"NOTHING_TO_INLINE\")\ninternal inline fun isArrayish(o: dynamic) = js(\"Kotlin\").isArrayish(o)\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin\n\n// NOTE: Do not author your exceptions as they are written in this file, instead use this template:\n/*\npublic open class MyException : Exception {\n    constructor() : super()\n    constructor(message: String?) : super(message)\n    constructor(message: String?, cause: Throwable?) : super(message, cause)\n    constructor(cause: Throwable?) : super(cause)\n}\n*/\n\n\n// TODO: remove primary constructors, make all secondary KT-22055\n\n@Suppress(\"USELESS_ELVIS_RIGHT_IS_NULL\")\npublic actual open class Error actual constructor(message: String?, cause: Throwable?) : Throwable(message, cause ?: null) {\n    actual constructor() : this(null, null)\n    actual constructor(message: String?) : this(message, null)\n    actual constructor(cause: Throwable?) : this(undefined, cause)\n}\n\n@Suppress(\"USELESS_ELVIS_RIGHT_IS_NULL\")\npublic actual open class Exception actual constructor(message: String?, cause: Throwable?) : Throwable(message, cause ?: null) {\n    actual constructor() : this(null, null)\n    actual constructor(message: String?) : this(message, null)\n    actual constructor(cause: Throwable?) : this(undefined, cause)\n}\n\npublic actual open class RuntimeException actual constructor(message: String?, cause: Throwable?) : Exception(message, cause) {\n    actual constructor() : this(null, null)\n    actual constructor(message: String?) : this(message, null)\n    actual constructor(cause: Throwable?) : this(undefined, cause)\n}\n\npublic actual open class IllegalArgumentException actual constructor(message: String?, cause: Throwable?) : RuntimeException(message, cause) {\n    actual constructor() : this(null, null)\n    actual constructor(message: String?) : this(message, null)\n    actual constructor(cause: Throwable?) : this(undefined, cause)\n}\n\npublic actual open class IllegalStateException actual constructor(message: String?, cause: Throwable?) : RuntimeException(message, cause) {\n    actual constructor() : this(null, null)\n    actual constructor(message: String?) : this(message, null)\n    actual constructor(cause: Throwable?) : this(undefined, cause)\n}\n\npublic actual open class IndexOutOfBoundsException actual constructor(message: String?) : RuntimeException(message) {\n    actual constructor() : this(null)\n}\n\npublic actual open class ConcurrentModificationException actual constructor(message: String?, cause: Throwable?) : RuntimeException(message, cause) {\n    actual constructor() : this(null, null)\n    actual constructor(message: String?) : this(message, null)\n    actual constructor(cause: Throwable?) : this(undefined, cause)\n}\n\npublic actual open class UnsupportedOperationException actual constructor(message: String?, cause: Throwable?) : RuntimeException(message, cause) {\n    actual constructor() : this(null, null)\n    actual constructor(message: String?) : this(message, null)\n    actual constructor(cause: Throwable?) : this(undefined, cause)\n}\n\n\npublic actual open class NumberFormatException actual constructor(message: String?) : IllegalArgumentException(message) {\n    actual constructor() : this(null)\n}\n\n\npublic actual open class NullPointerException actual constructor(message: String?) : RuntimeException(message) {\n    actual constructor() : this(null)\n}\n\npublic actual open class ClassCastException actual constructor(message: String?) : RuntimeException(message) {\n    actual constructor() : this(null)\n}\n\npublic actual open class AssertionError\n@SinceKotlin(\"1.4\")\nconstructor(message: String?, cause: Throwable?) : Error(message, cause) {\n    actual constructor() : this(null)\n    constructor(message: String?) : this(message, null)\n    actual constructor(message: Any?) : this(message.toString(), message as? Throwable)\n}\n\npublic actual open class NoSuchElementException actual constructor(message: String?) : RuntimeException(message) {\n    actual constructor() : this(null)\n}\n\n@SinceKotlin(\"1.3\")\npublic actual open class ArithmeticException actual constructor(message: String?) : RuntimeException(message) {\n    actual constructor() : this(null)\n}\n\npublic actual open class NoWhenBranchMatchedException actual constructor(message: String?, cause: Throwable?) : RuntimeException(message, cause) {\n    actual constructor() : this(null, null)\n    actual constructor(message: String?) : this(message, null)\n    actual constructor(cause: Throwable?) : this(undefined, cause)\n}\n\npublic actual open class UninitializedPropertyAccessException actual constructor(message: String?, cause: Throwable?) : RuntimeException(message, cause) {\n    actual constructor() : this(null, null)\n    actual constructor(message: String?) : this(message, null)\n    actual constructor(cause: Throwable?) : this(undefined, cause)\n}\n","/*\n * Copyright 2010-2019 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license\n * that can be found in the license/LICENSE.txt file.\n */\n\n\n@file:Suppress(\"UNUSED_PARAMETER\")\n\npackage kotlin.js\n\n@kotlin.internal.InlineOnly\ninternal inline fun jsDeleteProperty(obj: Any, property: Any) {\n    js(\"delete obj[property]\")\n}\n\n@kotlin.internal.InlineOnly\ninternal inline fun jsBitwiseOr(lhs: Any?, rhs: Any?): Int =\n    js(\"lhs | rhs\").unsafeCast<Int>()","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.js\n\n/**\n * Function corresponding to JavaScript's `typeof` operator\n */\n@kotlin.internal.InlineOnly\n@Suppress(\"UNUSED_PARAMETER\")\npublic inline fun jsTypeOf(a: Any?): String = js(\"typeof a\")\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:Suppress(\"UNUSED_PARAMETER\", \"NOTHING_TO_INLINE\")\n\npackage kotlin\n\n/**\n * Returns an empty array of the specified type [T].\n */\npublic inline fun <T> emptyArray(): Array<T> = js(\"[]\")\n\n@library\npublic fun <T> arrayOf(vararg elements: T): Array<T> = definedExternally\n\n@library\npublic fun doubleArrayOf(vararg elements: Double): DoubleArray = definedExternally\n\n@library\npublic fun floatArrayOf(vararg elements: Float): FloatArray = definedExternally\n\n@library\npublic fun longArrayOf(vararg elements: Long): LongArray = definedExternally\n\n@library\npublic fun intArrayOf(vararg elements: Int): IntArray = definedExternally\n\n@library\npublic fun charArrayOf(vararg elements: Char): CharArray = definedExternally\n\n@library\npublic fun shortArrayOf(vararg elements: Short): ShortArray = definedExternally\n\n@library\npublic fun byteArrayOf(vararg elements: Byte): ByteArray = definedExternally\n\n@library\npublic fun booleanArrayOf(vararg elements: Boolean): BooleanArray = definedExternally\n\n/**\n * Creates a new instance of the [Lazy] that uses the specified initialization function [initializer].\n */\npublic actual fun <T> lazy(initializer: () -> T): Lazy<T> = UnsafeLazyImpl(initializer)\n\n/**\n * Creates a new instance of the [Lazy] that uses the specified initialization function [initializer].\n *\n * The [mode] parameter is ignored. */\npublic actual fun <T> lazy(mode: LazyThreadSafetyMode, initializer: () -> T): Lazy<T> = UnsafeLazyImpl(initializer)\n\n/**\n * Creates a new instance of the [Lazy] that uses the specified initialization function [initializer].\n *\n * The [lock] parameter is ignored.\n */\npublic actual fun <T> lazy(lock: Any?, initializer: () -> T): Lazy<T> = UnsafeLazyImpl(initializer)\n\n\ninternal fun fillFrom(src: dynamic, dst: dynamic): dynamic {\n    val srcLen: Int = src.length\n    val dstLen: Int = dst.length\n    var index: Int = 0\n    while (index < srcLen && index < dstLen) dst[index] = src[index++]\n    return dst\n}\n\n\ninternal fun arrayCopyResize(source: dynamic, newSize: Int, defaultValue: Any?): dynamic {\n    val result = source.slice(0, newSize)\n    copyArrayType(source, result)\n    var index: Int = source.length\n    if (newSize > index) {\n        result.length = newSize\n        while (index < newSize) result[index++] = defaultValue\n    }\n    return result\n}\n\ninternal fun <T> arrayPlusCollection(array: dynamic, collection: Collection<T>): dynamic {\n    val result = array.slice()\n    result.length += collection.size\n    copyArrayType(array, result)\n    var index: Int = array.length\n    for (element in collection) result[index++] = element\n    return result\n}\n\ninternal fun <T> fillFromCollection(dst: dynamic, startIndex: Int, collection: Collection<T>): dynamic {\n    var index = startIndex\n    for (element in collection) dst[index++] = element\n    return dst\n}\n\ninternal inline fun copyArrayType(from: dynamic, to: dynamic) {\n    if (from.`$type$` !== undefined) {\n        to.`$type$` = from.`$type$`\n    }\n}\n\ninternal inline fun jsIsType(obj: dynamic, jsClass: dynamic) = js(\"Kotlin\").isType(obj, jsClass)","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin\n\n\n/**\n * Returns a bit representation of the specified floating-point value as [Long]\n * according to the IEEE 754 floating-point \"double format\" bit layout.\n */\n@SinceKotlin(\"1.2\")\n@library(\"doubleToBits\")\npublic actual fun Double.toBits(): Long = definedExternally\n\n/**\n * Returns a bit representation of the specified floating-point value as [Long]\n * according to the IEEE 754 floating-point \"double format\" bit layout,\n * preserving `NaN` values exact layout.\n */\n@SinceKotlin(\"1.2\")\n@library(\"doubleToRawBits\")\npublic actual fun Double.toRawBits(): Long = definedExternally\n\n/**\n * Returns the [Double] value corresponding to a given bit representation.\n */\n@SinceKotlin(\"1.2\")\n@kotlin.internal.InlineOnly\npublic actual inline fun Double.Companion.fromBits(bits: Long): Double = js(\"Kotlin\").doubleFromBits(bits).unsafeCast<Double>()\n\n/**\n * Returns a bit representation of the specified floating-point value as [Int]\n * according to the IEEE 754 floating-point \"single format\" bit layout.\n *\n * Note that in Kotlin/JS [Float] range is wider than \"single format\" bit layout can represent,\n * so some [Float] values may overflow, underflow or loose their accuracy after conversion to bits and back.\n */\n@SinceKotlin(\"1.2\")\n@library(\"floatToBits\")\npublic actual fun Float.toBits(): Int = definedExternally\n\n/**\n * Returns a bit representation of the specified floating-point value as [Int]\n * according to the IEEE 754 floating-point \"single format\" bit layout,\n * preserving `NaN` values exact layout.\n *\n * Note that in Kotlin/JS [Float] range is wider than \"single format\" bit layout can represent,\n * so some [Float] values may overflow, underflow or loose their accuracy after conversion to bits and back.\n */\n@SinceKotlin(\"1.2\")\n@library(\"floatToRawBits\")\npublic actual fun Float.toRawBits(): Int = definedExternally\n\n/**\n * Returns the [Float] value corresponding to a given bit representation.\n */\n@SinceKotlin(\"1.2\")\n@kotlin.internal.InlineOnly\npublic actual inline fun Float.Companion.fromBits(bits: Int): Float = js(\"Kotlin\").floatFromBits(bits).unsafeCast<Float>()\n\n\n@Suppress(\"NOTHING_TO_INLINE\")\ninternal inline fun Long(low: Int, high: Int) = js(\"Kotlin\").Long.fromBits(low, high).unsafeCast<Long>()\ninternal inline val Long.low: Int get() = this.asDynamic().getLowBits().unsafeCast<Int>()\ninternal inline val Long.high: Int get() = this.asDynamic().getHighBits().unsafeCast<Int>()\n","/*\n * Copyright 2010-2019 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.text\n\n/**\n * Returns a string representation of this [Long] value in the specified [radix].\n *\n * @throws IllegalArgumentException when [radix] is not a valid radix for number to string conversion.\n */\n@SinceKotlin(\"1.2\")\npublic actual fun Long.toString(radix: Int): String = asDynamic().toString(checkRadix(radix))","/*\n * Copyright 2010-2021 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.text\n\n//\n// NOTE: THIS FILE IS AUTO-GENERATED by the GenerateUnicodeData.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\n// 1343 ranges totally\nprivate object Category {\n    val decodedRangeStart: IntArray\n    val decodedRangeCategory: IntArray\n    \n    init {\n        val toBase64 = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\"\n        val fromBase64 = IntArray(128)\n        for (i in toBase64.indices) {\n            fromBase64[toBase64[i].code] = i\n        }\n        \n        // rangeStartDiff.length = 1482\n        val rangeStartDiff = \"gBCFEDCKCDCaDDaDBhBCEEDDDDDEDXBHYBH5BRwBGDCHDCIDFHDCHFDCDEIRTEE7BGHDDJlCBbSEMOFGERwDEDDDDECEFCRBJhBFDCYFFCCzBvBjBBFC3BOhDBmBDGpBDDCtBBJIbEECLGDFCLDCgBBKVKEDiDDHCFECECKCEODBebC5CLBOKhBJDDDDWEBHFCFCPBZDEL1BVBSLPBgBB2BDBDICFBHKCCKCPDBHEDWBHEDDDDEDEDIBDGDCKCCGDDDCGECCWBFMDDCDEDDCHDDHKDDBKDBHFCWBFGFDBDDFEDBPDDKCHBGDCHEDWBFGFDCEDEDBHDDGDCKCGJEGDBFDDFDDDDDMEFDBFDCGBOKDFDFDCGFCXBQDDDDDBEGEDFDDKHBHDDGFCXBKBFCEFCFCHCHECCKDNCCHFCoBEDECFDDDDHDCCKJBGDCSDYBJEHBFDDEBIGKDCMuBFHEBGBIBKCkBFBFBXEIFJDFDGCKCEgBBDPEDGKKGECIBkBEOBDFFLBkBBIBEFFEClBrBCEBEGDBKGGDDDDDCHDENDCFEKDDlBDDFrBCDpKBECGEECpBBEChBBECGEECPB5BBECjCCDJUDQKG2CCGDsTCRBaCDrCDDIHNBEDLSDCJSCMLFCCM0BDHGFLBFDDKGKGEFDDBKGjBB1BHFChBDFmCKfDDDDDDCGDCFDKeCFLsBEaGKBDiBXDDD1BDGDEIGJEKGKGHBGCMF/BEBvBCEDDFHEKHKJJDDeDDGDKsBFEDCIEkBIICCDFKDDKeGCJHrBCDIIDBNBHEBEFDBFsB/BNBiBlB6BBF1EIiDJIGCGCIIIIGCGCIIIIOCIIIIIIDFEDDBFEDDDDEBDIFDDFEDBLFGCEEICFBJCDEDCLDKBFBKCCGDDKDDNDgBQNEBDMPFFDEDEBFFHECEBEEDFBEDDQjBCEDEFFCCJHBeEEfsIIEUCHCxCBeZoBGlCZLV8BuCW3FBJB2BIvDB4HOesBFCfKQgIjEW/BEgBCiIwBVCGnBCgBBpDvBBuBEDBHEFGCCjDCGEDCFCFlBDDF4BHCOBXJHBHBHBHBHBHBHBHBgBCECGHGEDIFBKCEDMEtBaB5CM2GaMEDDCKCGFCJEDFDDDC2CDDDB6CDCFrBB+CDEKgBkBMQfBKeIBPgBKnBPgKguGgC9vUDVB3jBD3BJoBGCsIBDQKCUuBDDKCcCCmCKCGIXJCNC/BBHGKDECEVFBEMCEEBqBDDGDFDXDCEBDGEG0BEICyBQCICKGSGDEBKcICXLCLBdDDBvBDECCDNCKECFCJKFBpBFEDCJDBICCKCEQBGDDByBEDCEFBYDCLEDDCKGCGCGJHBHBrBBEJDEwCjBIDCKGk9KMXExBEggCgoGuLCqDmBHMFFCKBNBFBIsDQRrLCQgCC2BoBMCCQGEGQDCQDDDDFDGDECEEFBnEEBFEDCKCDCaDDaDBFCKBtBCfDGCGCFEDDDDCECKDC\"\n        val diff = decodeVarLenBase64(rangeStartDiff, fromBase64, 1342)\n        val start = IntArray(diff.size + 1)\n        for (i in diff.indices) {\n            start[i + 1] = start[i] + diff[i]\n        }\n        decodedRangeStart = start\n        \n        // rangeCategory.length = 2033\n        val rangeCategory = \"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\"\n        decodedRangeCategory = decodeVarLenBase64(rangeCategory, fromBase64, 1343)\n    }\n}\n\nprivate fun categoryValueFrom(code: Int, ch: Int): Int {\n    return when {\n        code < 0x20 -> code\n        code < 0x400 -> if ((ch and 1) == 1) code shr 5 else code and 0x1f\n        else ->\n            when (ch % 3) {\n                2 -> code shr 10\n                1 -> (code shr 5) and 0x1f\n                else -> code and 0x1f\n            }\n    }\n}\n\n/**\n * Returns the Unicode general category of this character as an Int.\n */\ninternal fun Char.getCategoryValue(): Int {\n    val ch = this.code\n\n    val index = binarySearchRange(Category.decodedRangeStart, ch)\n    val start = Category.decodedRangeStart[index]\n    val code = Category.decodedRangeCategory[index]\n    val value = categoryValueFrom(code, ch - start)\n\n    return if (value == 17) CharCategory.UNASSIGNED.value else value\n}\n\ninternal fun decodeVarLenBase64(base64: String, fromBase64: IntArray, resultLength: Int): IntArray {\n    val result = IntArray(resultLength)\n    var index = 0\n    var int = 0\n    var shift = 0\n    for (char in base64) {\n        val sixBit = fromBase64[char.code]\n        int = int or ((sixBit and 0x1f) shl shift)\n        if (sixBit < 0x20) {\n            result[index++] = int\n            int = 0\n            shift = 0\n        } else {\n            shift += 5\n        }\n    }\n    return result\n}\n","/*\n * Copyright 2010-2021 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.collections\n\n//\n// NOTE: THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.js.*\nimport kotlin.ranges.contains\nimport kotlin.ranges.reversed\n\n/**\n * Reverses elements in the list in-place.\n */\npublic actual fun <T> MutableList<T>.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n","/*\n * Copyright 2010-2021 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.text\n\n//\n// NOTE: THIS FILE IS AUTO-GENERATED by the GenerateUnicodeData.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\n// 37 ranges totally\nprivate object Digit {\n    internal val rangeStart = intArrayOf(\n        0x0030, 0x0660, 0x06f0, 0x07c0, 0x0966, 0x09e6, 0x0a66, 0x0ae6, 0x0b66, 0x0be6, 0x0c66, 0x0ce6, 0x0d66, 0x0de6, 0x0e50, 0x0ed0, 0x0f20, 0x1040, 0x1090, 0x17e0, \n        0x1810, 0x1946, 0x19d0, 0x1a80, 0x1a90, 0x1b50, 0x1bb0, 0x1c40, 0x1c50, 0xa620, 0xa8d0, 0xa900, 0xa9d0, 0xa9f0, 0xaa50, 0xabf0, 0xff10, \n    )\n}\n\ninternal fun binarySearchRange(array: IntArray, needle: Int): Int {\n    var bottom = 0\n    var top = array.size - 1\n    var middle = -1\n    var value = 0\n    while (bottom <= top) {\n        middle = (bottom + top) / 2\n        value = array[middle]\n        if (needle > value)\n            bottom = middle + 1\n        else if (needle == value)\n            return middle\n        else\n            top = middle - 1\n    }\n    return middle - (if (needle < value) 1 else 0)\n}\n\n/**\n * Returns `true` if this character is a digit.\n */\ninternal fun Char.isDigitImpl(): Boolean {\n    val ch = this.code\n    val index = binarySearchRange(Digit.rangeStart, ch)\n    val high = Digit.rangeStart[index] + 9\n    return ch <= high\n}\n","/*\n * Copyright 2010-2021 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.text\n\n//\n// NOTE: THIS FILE IS AUTO-GENERATED by the GenerateUnicodeData.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\n// 222 ranges totally\nprivate object Letter {\n    val decodedRangeStart: IntArray\n    val decodedRangeLength: IntArray\n    val decodedRangeCategory: IntArray\n    \n    init {\n        val toBase64 = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\"\n        val fromBase64 = IntArray(128)\n        for (i in toBase64.indices) {\n            fromBase64[toBase64[i].code] = i\n        }\n        \n        // rangeStartDiff.length = 356\n        val rangeStartDiff = \"hCgBpCQGYHZH5BRpBPPPPPPRMP5BPPlCPP6BkEPPPPcPXPzBvBrB3BOiDoBHwD+E3DauCnFmBmB2D6E1BlBTiBmBlBP5BhBiBrBvBjBqBnBPRtBiCmCtBlB0BmB5BiB7BmBgEmChBZgCoEoGVpBSfRhBPqKQ2BwBYoFgB4CJuTiEvBuCuDrF5DgEgFlJ1DgFmBQtBsBRGsB+BPiBlD1EIjDPRPPPQPPPPPGQSQS/DxENVNU+B9zCwBwBPPCkDPNnBPqDYY1R8B7FkFgTgwGgwUwmBgKwBuBScmEP/BPPPPPPrBP8B7F1B/ErBqC6B7BiBmBfQsBUwCw/KwqIwLwETPcPjQgJxFgBlBsD\"\n        val diff = decodeVarLenBase64(rangeStartDiff, fromBase64, 222)\n        val start = IntArray(diff.size)\n        for (i in diff.indices) {\n            if (i == 0) start[i] = diff[i]\n            else start[i] = start[i - 1] + diff[i]\n        }\n        decodedRangeStart = start\n        \n        // rangeLength.length = 328\n        val rangeLength = \"aaMBXHYH5BRpBPPPPPPRMP5BPPlCPPzBDOOPPcPXPzBvBjB3BOhDmBBpB7DoDYxB+EiBP1DoExBkBQhBekBPmBgBhBctBiBMWOOXhCsBpBkBUV3Ba4BkB0DlCgBXgBtD4FSdBfPhBPpKP0BvBXjEQ2CGsT8DhBtCqDpFvD1D3E0IrD2EkBJrBDOBsB+BPiBlB1EIjDPPPPPPPPPPPGPPMNLsBNPNPKCvBvBPPCkDPBmBPhDXXgD4B6FzEgDguG9vUtkB9JcuBSckEP/BPPPPPPBPf4FrBjEhBpC3B5BKaWPrBOwCk/KsCuLqDHPbPxPsFtEaaqDL\"\n        decodedRangeLength = decodeVarLenBase64(rangeLength, fromBase64, 222)\n        \n        // rangeCategory.length = 959\n        val rangeCategory = \"GFjgggUHGGFFZZZmzpz5qB6s6020B60ptltB6smt2sB60mz22B1+vv+8BZZ5s2850BW5q1ymtB506smzBF3q1q1qB1q1q1+Bgii4wDTm74g3KiggxqM60q1q1Bq1o1q1BF1qlrqrBZ2q5wprBGFZWWZGHFsjiooLowgmOowjkwCkgoiIk7ligGogiioBkwkiYkzj2oNoi+sbkwj04DghhkQ8wgiYkgoioDsgnkwC4gikQ//v+85BkwvoIsgoyI4yguI0whiwEowri4CoghsJowgqYowgm4DkwgsY/nwnzPowhmYkg6wI8yggZswikwHgxgmIoxgqYkwgk4DkxgmIkgoioBsgssoBgzgyI8g9gL8g9kI0wgwJoxgkoC0wgioFkw/wI0w53iF4gioYowjmgBHGq1qkgwBF1q1q8qBHwghuIwghyKk0goQkwgoQk3goQHGFHkyg0pBgxj6IoinkxDswno7Ikwhz9Bo0gioB8z48Rwli0xN0mpjoX8w78pDwltoqKHFGGwwgsIHFH3q1q16BFHWFZ1q10q1B2qlwq1B1q10q1B2q1yq1B6q1gq1Biq1qhxBir1qp1Bqt1q1qB1g1q1+B//3q16B///q1qBH/qlqq9Bholqq9B1i00a1q10qD1op1HkwmigEigiy6Cptogq1Bixo1kDq7/j00B2qgoBWGFm1lz50B6s5q1+BGWhggzhwBFFhgk4//Bo2jigE8wguI8wguI8wgugUog1qoB4qjmIwwi2KgkYHHH4lBgiFWkgIWoghssMmz5smrBZ3q1y50B5sm7gzBtz1smzB5smz50BqzqtmzB5sgzqzBF2/9//5BowgoIwmnkzPkwgk4C8ys65BkgoqI0wgy6FghquZo2giY0ghiIsgh24B4ghsQ8QF/v1q1OFs0O8iCHHF1qggz/B8wg6Iznv+//B08QgohsjK0QGFk7hsQ4gB\"\n        decodedRangeCategory = decodeVarLenBase64(rangeCategory, fromBase64, 222)\n    }\n}\n\n/**\n * Returns `true` if this character is a letter.\n */\ninternal fun Char.isLetterImpl(): Boolean {\n    return getLetterType() != 0\n}\n\n/**\n * Returns `true` if this character is a lower case letter.\n */\ninternal fun Char.isLowerCaseImpl(): Boolean {\n    return getLetterType() == 1\n}\n\n/**\n * Returns `true` if this character is an upper case letter.\n */\ninternal fun Char.isUpperCaseImpl(): Boolean {\n    return getLetterType() == 2\n}\n\n/**\n * Returns\n *   - `1` if the character is a lower case letter,\n *   - `2` if the character is an upper case letter,\n *   - `3` if the character is a letter but not a lower or upper case letter,\n *   - `0` otherwise.\n */\nprivate fun Char.getLetterType(): Int {\n    val ch = this.code\n    val index = binarySearchRange(Letter.decodedRangeStart, ch)\n\n    val rangeStart = Letter.decodedRangeStart[index]\n    val rangeEnd = rangeStart + Letter.decodedRangeLength[index] - 1\n    val code = Letter.decodedRangeCategory[index]\n\n    if (ch > rangeEnd) {\n        return 0\n    }\n\n    val lastTwoBits = code and 0x3\n\n    if (lastTwoBits == 0) { // gap pattern\n        var shift = 2\n        var threshold = rangeStart\n        for (i in 0..1) {\n            threshold += (code shr shift) and 0x7f\n            if (threshold > ch) {\n                return 3\n            }\n            shift += 7\n            threshold += (code shr shift) and 0x7f\n            if (threshold > ch) {\n                return 0\n            }\n            shift += 7\n        }\n        return 3\n    }\n\n    if (code <= 0x7) {\n        return lastTwoBits\n    }\n\n    val distance = (ch - rangeStart)\n    val shift = if (code <= 0x1F) distance % 2 else distance\n    return (code shr (2 * shift)) and 0x3\n}\n\n","/*\n * Copyright 2010-2021 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.text\n\n//\n// NOTE: THIS FILE IS AUTO-GENERATED by the GenerateUnicodeData.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\n// 4 ranges totally\n@OptIn(ExperimentalStdlibApi::class)\ninternal fun Char.titlecaseCharImpl(): Char {\n    val code = this.code\n    // Letters repeating <Lu, Lt, Ll> sequence and code of the Lt is a multiple of 3, e.g. <Ǆ, ǅ, ǆ>\n    if (code in 0x01c4..0x01cc || code in 0x01f1..0x01f3) {\n        return (3 * ((code + 1) / 3)).toChar()\n    }\n    // Lower case letters whose title case mapping equivalent is equal to the original letter\n    if (code in 0x10d0..0x10fa || code in 0x10fd..0x10ff) {\n        return this\n    }\n    return uppercaseChar()\n}","/*\n * Copyright 2010-2021 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.collections\n\n//\n// NOTE: THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.js.*\nimport kotlin.ranges.contains\nimport kotlin.ranges.reversed\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic actual fun UIntArray.elementAt(index: Int): UInt {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, size: $size}\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic actual fun ULongArray.elementAt(index: Int): ULong {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, size: $size}\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic actual fun UByteArray.elementAt(index: Int): UByte {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, size: $size}\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic actual fun UShortArray.elementAt(index: Int): UShort {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, size: $size}\") }\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic actual fun UIntArray.asList(): List<UInt> {\n    return object : AbstractList<UInt>(), RandomAccess {\n        override val size: Int get() = this@asList.size\n        override fun isEmpty(): Boolean = this@asList.isEmpty()\n        override fun contains(element: UInt): Boolean = this@asList.contains(element)\n        override fun get(index: Int): UInt {\n            AbstractList.checkElementIndex(index, size)\n            return this@asList[index]\n        }\n        override fun indexOf(element: UInt): Int {\n            @Suppress(\"USELESS_CAST\")\n            if ((element as Any?) !is UInt) return -1\n            return this@asList.indexOf(element)\n        }\n        override fun lastIndexOf(element: UInt): Int {\n            @Suppress(\"USELESS_CAST\")\n            if ((element as Any?) !is UInt) return -1\n            return this@asList.lastIndexOf(element)\n        }\n    }\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic actual fun ULongArray.asList(): List<ULong> {\n    return object : AbstractList<ULong>(), RandomAccess {\n        override val size: Int get() = this@asList.size\n        override fun isEmpty(): Boolean = this@asList.isEmpty()\n        override fun contains(element: ULong): Boolean = this@asList.contains(element)\n        override fun get(index: Int): ULong {\n            AbstractList.checkElementIndex(index, size)\n            return this@asList[index]\n        }\n        override fun indexOf(element: ULong): Int {\n            @Suppress(\"USELESS_CAST\")\n            if ((element as Any?) !is ULong) return -1\n            return this@asList.indexOf(element)\n        }\n        override fun lastIndexOf(element: ULong): Int {\n            @Suppress(\"USELESS_CAST\")\n            if ((element as Any?) !is ULong) return -1\n            return this@asList.lastIndexOf(element)\n        }\n    }\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic actual fun UByteArray.asList(): List<UByte> {\n    return object : AbstractList<UByte>(), RandomAccess {\n        override val size: Int get() = this@asList.size\n        override fun isEmpty(): Boolean = this@asList.isEmpty()\n        override fun contains(element: UByte): Boolean = this@asList.contains(element)\n        override fun get(index: Int): UByte {\n            AbstractList.checkElementIndex(index, size)\n            return this@asList[index]\n        }\n        override fun indexOf(element: UByte): Int {\n            @Suppress(\"USELESS_CAST\")\n            if ((element as Any?) !is UByte) return -1\n            return this@asList.indexOf(element)\n        }\n        override fun lastIndexOf(element: UByte): Int {\n            @Suppress(\"USELESS_CAST\")\n            if ((element as Any?) !is UByte) return -1\n            return this@asList.lastIndexOf(element)\n        }\n    }\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic actual fun UShortArray.asList(): List<UShort> {\n    return object : AbstractList<UShort>(), RandomAccess {\n        override val size: Int get() = this@asList.size\n        override fun isEmpty(): Boolean = this@asList.isEmpty()\n        override fun contains(element: UShort): Boolean = this@asList.contains(element)\n        override fun get(index: Int): UShort {\n            AbstractList.checkElementIndex(index, size)\n            return this@asList[index]\n        }\n        override fun indexOf(element: UShort): Int {\n            @Suppress(\"USELESS_CAST\")\n            if ((element as Any?) !is UShort) return -1\n            return this@asList.indexOf(element)\n        }\n        override fun lastIndexOf(element: UShort): Int {\n            @Suppress(\"USELESS_CAST\")\n            if ((element as Any?) !is UShort) return -1\n            return this@asList.lastIndexOf(element)\n        }\n    }\n}\n\n","/*\n * Copyright 2010-2021 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.text\n\n//\n// NOTE: THIS FILE IS AUTO-GENERATED by the GenerateUnicodeData.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\n// 9 ranges totally\n/**\n * Returns `true` if this character is a whitespace.\n */\ninternal fun Char.isWhitespaceImpl(): Boolean {\n    val ch = this.code\n    return ch in 0x0009..0x000d\n            || ch in 0x001c..0x0020\n            || ch == 0x00a0\n            || ch > 0x1000 && (\n                ch == 0x1680\n                || ch in 0x2000..0x200a\n                || ch == 0x2028\n                || ch == 0x2029\n                || ch == 0x202f\n                || ch == 0x205f\n                || ch == 0x3000\n            )\n}\n","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.js\n\nimport kotlin.annotation.AnnotationTarget.*\n\n@Target(FUNCTION)\n@Deprecated(\"Use inline extension function with body using dynamic\")\npublic annotation class nativeGetter\n\n@Target(FUNCTION)\n@Deprecated(\"Use inline extension function with body using dynamic\")\npublic annotation class nativeSetter\n\n@Target(FUNCTION)\n@Deprecated(\"Use inline extension function with body using dynamic\")\npublic annotation class nativeInvoke\n\n@Target(CLASS, FUNCTION, PROPERTY)\ninternal annotation class library(public val name: String = \"\")\n\n@Target(CLASS)\ninternal annotation class marker\n\n/**\n * Gives a declaration (a function, a property or a class) specific name in JavaScript.\n *\n * This may be useful in the following cases:\n *\n *   * There are two functions for which the compiler gives same name in JavaScript, you can\n *     mark one with `@JsName(...)` to prevent the compiler from reporting error.\n *   * You are writing a JavaScript library in Kotlin. The compiler produces mangled names\n *     for functions with parameters, which is unnatural for usual JavaScript developer.\n *     You can put `@JsName(...)` on functions you want to be available from JavaScript.\n *   * For some reason you want to rename declaration, e.g. there's common term in JavaScript\n *     for a concept provided by the declaration, which in uncommon in Kotlin.\n *\n * Example:\n *\n * ``` kotlin\n * class Person(val name: String) {\n *     fun hello() {\n *         println(\"Hello $name!\")\n *     }\n *\n *     @JsName(\"helloWithGreeting\")\n *     fun hello(greeting: String) {\n *         println(\"$greeting $name!\")\n *     }\n * }\n * ```\n *\n * @property name the name which compiler uses both for declaration itself and for all references to the declaration.\n *           It's required to denote a valid JavaScript identifier.\n *\n */\n@Retention(AnnotationRetention.BINARY)\n@Target(CLASS, FUNCTION, PROPERTY, CONSTRUCTOR, PROPERTY_GETTER, PROPERTY_SETTER)\npublic actual annotation class JsName(actual val name: String)\n\n/**\n * Denotes an `external` declaration that must be imported from native JavaScript library.\n *\n * The compiler produces the code relevant for the target module system, for example, in case of CommonJS,\n * it will import the declaration via the `require(...)` function.\n *\n * The annotation can be used on top-level external declarations (classes, properties, functions) and files.\n * In case of file (which can't be `external`) the following rule applies: all the declarations in\n * the file must be `external`. By applying `@JsModule(...)` on a file you tell the compiler to import a JavaScript object\n * that contain all the declarations from the file.\n *\n * Example:\n *\n * ``` kotlin\n * @JsModule(\"jquery\")\n * external abstract class JQuery() {\n *     // some declarations here\n * }\n *\n * @JsModule(\"jquery\")\n * external fun JQuery(element: Element): JQuery\n * ```\n *\n * @property import name of a module to import declaration from.\n *           It is not interpreted by the Kotlin compiler, it's passed as is directly to the target module system.\n *\n * @see JsNonModule\n */\n@Retention(AnnotationRetention.BINARY)\n@Target(CLASS, PROPERTY, FUNCTION, FILE)\npublic annotation class JsModule(val import: String)\n\n/**\n * Denotes an `external` declaration that can be used without module system.\n *\n * By default, an `external` declaration is available regardless your target module system.\n * However, by applying [JsModule] annotation you can make a declaration unavailable to *plain* module system.\n * Some JavaScript libraries are distributed both as a standalone downloadable piece of JavaScript and as a module available\n * as an npm package.\n * To tell the Kotlin compiler to accept both cases, you can augment [JsModule] with the `@JsNonModule` annotation.\n *\n * For example:\n *\n * ``` kotlin\n * @JsModule(\"jquery\")\n * @JsNonModule\n * @JsName(\"$\")\n * external abstract class JQuery() {\n *     // some declarations here\n * }\n *\n * @JsModule(\"jquery\")\n * @JsNonModule\n * @JsName(\"$\")\n * external fun JQuery(element: Element): JQuery\n * ```\n *\n * @see JsModule\n */\n@Retention(AnnotationRetention.BINARY)\n@Target(CLASS, PROPERTY, FUNCTION, FILE)\npublic annotation class JsNonModule\n\n/**\n * Adds prefix to `external` declarations in a source file.\n *\n * JavaScript does not have concept of packages (namespaces). They are usually emulated by nested objects.\n * The compiler turns references to `external` declarations either to plain unprefixed names (in case of *plain* modules)\n * or to plain imports.\n * However, if a JavaScript library provides its declarations in packages, you won't be satisfied with this.\n * You can tell the compiler to generate additional prefix before references to `external` declarations using the `@JsQualifier(...)`\n * annotation.\n *\n * Note that a file marked with the `@JsQualifier(...)` annotation can't contain non-`external` declarations.\n *\n * Example:\n *\n * ```\n * @file:JsQualifier(\"my.jsPackageName\")\n * package some.kotlinPackage\n *\n * external fun foo(x: Int)\n *\n * external fun bar(): String\n * ```\n *\n * @property value the qualifier to add to the declarations in the generated code.\n *           It must be a sequence of valid JavaScript identifiers separated by the `.` character.\n *           Examples of valid qualifiers are: `foo`, `bar.Baz`, `_.$0.f`.\n *\n * @see JsModule\n */\n@Retention(AnnotationRetention.BINARY)\n@Target(AnnotationTarget.FILE)\npublic annotation class JsQualifier(val value: String)\n\n/**\n * Exports top-level declaration on JS platform.\n *\n * Compiled module exposes declarations that are marked with this annotation without name mangling.\n *\n * This annotation can be applied to either files or top-level declarations.\n *\n * It is currently prohibited to export the following kinds of declarations:\n *\n *   * `expect` declarations\n *   * inline functions with reified type parameters\n *   * suspend functions\n *   * secondary constructors without `@JsName`\n *   * extension properties\n *   * enum classes\n *   * annotation classes\n *\n * Signatures of exported declarations must only contain \"exportable\" types:\n *\n *   * `dynamic`, `Any`, `String`, `Boolean`, `Byte`, `Short`, `Int`, `Float`, `Double`\n *   * `BooleanArray`, `ByteArray`, `ShortArray`, `IntArray`, `FloatArray`, `DoubleArray`\n *   * `Array<exportable-type>`\n *   * Function types with exportable parameters and return types\n *   * `external` or `@JsExport` classes and interfaces\n *   * Nullable counterparts of types above\n *   * Unit return type. Must not be nullable\n *\n * This annotation is experimental, meaning that restrictions mentioned above are subject to change.\n */\n@ExperimentalJsExport\n@Retention(AnnotationRetention.BINARY)\n@Target(CLASS, PROPERTY, FUNCTION, FILE)\n@SinceKotlin(\"1.3\")\npublic actual annotation class JsExport\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.jvm\n\n// these are used in common generated code in stdlib\n\n// TODO: find how to deprecate these ones\n\n@Target(AnnotationTarget.FIELD)\n@Retention(AnnotationRetention.SOURCE)\npublic actual annotation class Volatile\n\n@Target(AnnotationTarget.FUNCTION, AnnotationTarget.PROPERTY_GETTER, AnnotationTarget.PROPERTY_SETTER)\n@Retention(AnnotationRetention.SOURCE)\npublic actual annotation class Synchronized\n","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin\n\n\npublic actual fun interface Comparator<T> {\n    @JsName(\"compare\")\n    public actual fun compare(a: T, b: T): Int\n}\n","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.collections\n\n/**\n * Provides a skeletal implementation of the [MutableCollection] interface.\n *\n * @param E the type of elements contained in the collection. The collection is invariant in its element type.\n */\npublic actual abstract class AbstractMutableCollection<E> protected actual constructor() : AbstractCollection<E>(), MutableCollection<E> {\n\n    actual abstract override fun add(element: E): Boolean\n\n    actual override fun remove(element: E): Boolean {\n        checkIsMutable()\n        val iterator = iterator()\n        while (iterator.hasNext()) {\n            if (iterator.next() == element) {\n                iterator.remove()\n                return true\n            }\n        }\n        return false\n    }\n\n    actual override fun addAll(elements: Collection<E>): Boolean {\n        checkIsMutable()\n        var modified = false\n        for (element in elements) {\n            if (add(element)) modified = true\n        }\n        return modified\n    }\n\n    actual override fun removeAll(elements: Collection<E>): Boolean {\n        checkIsMutable()\n        return (this as MutableIterable<E>).removeAll { it in elements }\n    }\n\n    actual override fun retainAll(elements: Collection<E>): Boolean {\n        checkIsMutable()\n        return (this as MutableIterable<E>).removeAll { it !in elements }\n    }\n\n    actual override fun clear(): Unit {\n        checkIsMutable()\n        val iterator = this.iterator()\n        while (iterator.hasNext()) {\n            iterator.next()\n            iterator.remove()\n        }\n    }\n\n    @JsName(\"toJSON\")\n    open fun toJSON(): Any = this.toArray()\n\n\n    /**\n     * This method is called every time when a mutating method is called on this mutable collection.\n     * Mutable collections that are built (frozen) must throw `UnsupportedOperationException`.\n     */\n    internal open fun checkIsMutable(): Unit { }\n}\n\n","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n/*\n * Based on GWT AbstractList\n * Copyright 2007 Google Inc.\n*/\n\n\npackage kotlin.collections\n\n/**\n * Provides a skeletal implementation of the [MutableList] interface.\n *\n * @param E the type of elements contained in the list. The list is invariant in its element type.\n */\npublic actual abstract class AbstractMutableList<E> protected actual constructor() : AbstractMutableCollection<E>(), MutableList<E> {\n    protected var modCount: Int = 0\n\n    abstract override fun add(index: Int, element: E): Unit\n    abstract override fun removeAt(index: Int): E\n    abstract override fun set(index: Int, element: E): E\n\n    /**\n     * Adds the specified element to the end of this list.\n     *\n     * @return `true` because the list is always modified as the result of this operation.\n     */\n    actual override fun add(element: E): Boolean {\n        checkIsMutable()\n        add(size, element)\n        return true\n    }\n\n    actual override fun addAll(index: Int, elements: Collection<E>): Boolean {\n        checkIsMutable()\n        var _index = index\n        var changed = false\n        for (e in elements) {\n            add(_index++, e)\n            changed = true\n        }\n        return changed\n    }\n\n    actual override fun clear() {\n        checkIsMutable()\n        removeRange(0, size)\n    }\n\n    actual override fun removeAll(elements: Collection<E>): Boolean {\n        checkIsMutable()\n        return removeAll { it in elements }\n    }\n\n    actual override fun retainAll(elements: Collection<E>): Boolean {\n        checkIsMutable()\n        return removeAll { it !in elements }\n    }\n\n\n    actual override fun iterator(): MutableIterator<E> = IteratorImpl()\n\n    actual override fun contains(element: E): Boolean = indexOf(element) >= 0\n\n    actual override fun indexOf(element: E): Int {\n        for (index in 0..lastIndex) {\n            if (get(index) == element) {\n                return index\n            }\n        }\n        return -1\n    }\n\n    actual override fun lastIndexOf(element: E): Int {\n        for (index in lastIndex downTo 0) {\n            if (get(index) == element) {\n                return index\n            }\n        }\n        return -1\n    }\n\n    actual override fun listIterator(): MutableListIterator<E> = listIterator(0)\n    actual override fun listIterator(index: Int): MutableListIterator<E> = ListIteratorImpl(index)\n\n\n    actual override fun subList(fromIndex: Int, toIndex: Int): MutableList<E> = SubList(this, fromIndex, toIndex)\n\n    /**\n     * Removes the range of elements from this list starting from [fromIndex] and ending with but not including [toIndex].\n     */\n    protected open fun removeRange(fromIndex: Int, toIndex: Int) {\n        val iterator = listIterator(fromIndex)\n        repeat(toIndex - fromIndex) {\n            iterator.next()\n            iterator.remove()\n        }\n    }\n\n    /**\n     * Compares this list with another list instance with the ordered structural equality.\n     *\n     * @return true, if [other] instance is a [List] of the same size, which contains the same elements in the same order.\n     */\n    override fun equals(other: Any?): Boolean {\n        if (other === this) return true\n        if (other !is List<*>) return false\n\n        return AbstractList.orderedEquals(this, other)\n    }\n\n    /**\n     * Returns the hash code value for this list.\n     */\n    override fun hashCode(): Int = AbstractList.orderedHashCode(this)\n\n\n    private open inner class IteratorImpl : MutableIterator<E> {\n        /** the index of the item that will be returned on the next call to [next]`()` */\n        protected var index = 0\n        /** the index of the item that was returned on the previous call to [next]`()`\n         * or [ListIterator.previous]`()` (for `ListIterator`),\n         * -1 if no such item exists\n         */\n        protected var last = -1\n\n        override fun hasNext(): Boolean = index < size\n\n        override fun next(): E {\n            if (!hasNext()) throw NoSuchElementException()\n            last = index++\n            return get(last)\n        }\n\n        override fun remove() {\n            check(last != -1) { \"Call next() or previous() before removing element from the iterator.\" }\n\n            removeAt(last)\n            index = last\n            last = -1\n        }\n    }\n\n    /**\n     * Implementation of `MutableListIterator` for abstract lists.\n     */\n    private inner class ListIteratorImpl(index: Int) : IteratorImpl(), MutableListIterator<E> {\n\n        init {\n            AbstractList.checkPositionIndex(index, this@AbstractMutableList.size)\n            this.index = index\n        }\n\n        override fun hasPrevious(): Boolean = index > 0\n\n        override fun nextIndex(): Int = index\n\n        override fun previous(): E {\n            if (!hasPrevious()) throw NoSuchElementException()\n\n            last = --index\n            return get(last)\n        }\n\n        override fun previousIndex(): Int = index - 1\n\n        override fun add(element: E) {\n            add(index, element)\n            index++\n            last = -1\n        }\n\n        override fun set(element: E) {\n            check(last != -1) { \"Call next() or previous() before updating element value with the iterator.\" }\n            set(last, element)\n        }\n    }\n\n    private class SubList<E>(private val list: AbstractMutableList<E>, private val fromIndex: Int, toIndex: Int) : AbstractMutableList<E>(), RandomAccess {\n        private var _size: Int = 0\n\n        init {\n            AbstractList.checkRangeIndexes(fromIndex, toIndex, list.size)\n            this._size = toIndex - fromIndex\n        }\n\n        override fun add(index: Int, element: E) {\n            AbstractList.checkPositionIndex(index, _size)\n\n            list.add(fromIndex + index, element)\n            _size++\n        }\n\n        override fun get(index: Int): E {\n            AbstractList.checkElementIndex(index, _size)\n\n            return list[fromIndex + index]\n        }\n\n        override fun removeAt(index: Int): E {\n            AbstractList.checkElementIndex(index, _size)\n\n            val result = list.removeAt(fromIndex + index)\n            _size--\n            return result\n        }\n\n        override fun set(index: Int, element: E): E {\n            AbstractList.checkElementIndex(index, _size)\n\n            return list.set(fromIndex + index, element)\n        }\n\n        override val size: Int get() = _size\n\n        internal override fun checkIsMutable(): Unit = list.checkIsMutable()\n    }\n\n}\n","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n/*\n * Based on GWT AbstractMap\n * Copyright 2007 Google Inc.\n */\n\npackage kotlin.collections\n\n/**\n * Provides a skeletal implementation of the [MutableMap] interface.\n *\n * The implementor is required to implement [entries] property, which should return mutable set of map entries, and [put] function.\n *\n * @param K the type of map keys. The map is invariant in its key type.\n * @param V the type of map values. The map is invariant in its value type.\n */\npublic actual abstract class AbstractMutableMap<K, V> protected actual constructor() : AbstractMap<K, V>(), MutableMap<K, V> {\n\n    /**\n     * A mutable [Map.Entry] shared by several [Map] implementations.\n     */\n    internal open class SimpleEntry<K, V>(override val key: K, value: V) : MutableMap.MutableEntry<K, V> {\n        constructor(entry: Map.Entry<K, V>) : this(entry.key, entry.value)\n\n        private var _value = value\n\n        override val value: V get() = _value\n\n        override fun setValue(newValue: V): V {\n            // Should check if the map containing this entry is mutable.\n            // However, to not increase entry memory footprint it might be worthwhile not to check it here and\n            // force subclasses that implement `build()` (freezing) operation to implement their own `MutableEntry`.\n//            this@AbstractMutableMap.checkIsMutable()\n            val oldValue = this._value\n            this._value = newValue\n            return oldValue\n        }\n\n        override fun hashCode(): Int = entryHashCode(this)\n        override fun toString(): String = entryToString(this)\n        override fun equals(other: Any?): Boolean = entryEquals(this, other)\n\n    }\n\n    // intermediate abstract class to workaround KT-43321\n    internal abstract class AbstractEntrySet<E : Map.Entry<K, V>, K, V> : AbstractMutableSet<E>() {\n        final override fun contains(element: E): Boolean = containsEntry(element)\n        abstract fun containsEntry(element: Map.Entry<K, V>): Boolean\n    }\n\n    actual override fun clear() {\n        entries.clear()\n    }\n\n    private var _keys: MutableSet<K>? = null\n    actual override val keys: MutableSet<K>\n        get() {\n            if (_keys == null) {\n                _keys = object : AbstractMutableSet<K>() {\n                    override fun add(element: K): Boolean = throw UnsupportedOperationException(\"Add is not supported on keys\")\n                    override fun clear() {\n                        this@AbstractMutableMap.clear()\n                    }\n\n                    override operator fun contains(element: K): Boolean = containsKey(element)\n\n                    override operator fun iterator(): MutableIterator<K> {\n                        val entryIterator = entries.iterator()\n                        return object : MutableIterator<K> {\n                            override fun hasNext(): Boolean = entryIterator.hasNext()\n                            override fun next(): K = entryIterator.next().key\n                            override fun remove() = entryIterator.remove()\n                        }\n                    }\n\n                    override fun remove(element: K): Boolean {\n                        checkIsMutable()\n                        if (containsKey(element)) {\n                            this@AbstractMutableMap.remove(element)\n                            return true\n                        }\n                        return false\n                    }\n\n                    override val size: Int get() = this@AbstractMutableMap.size\n\n                    override fun checkIsMutable(): Unit = this@AbstractMutableMap.checkIsMutable()\n                }\n            }\n            return _keys!!\n        }\n\n    actual abstract override fun put(key: K, value: V): V?\n\n    actual override fun putAll(from: Map<out K, V>) {\n        checkIsMutable()\n        for ((key, value) in from) {\n            put(key, value)\n        }\n    }\n\n    private var _values: MutableCollection<V>? = null\n    actual override val values: MutableCollection<V>\n        get() {\n            if (_values == null) {\n                _values = object : AbstractMutableCollection<V>() {\n                    override fun add(element: V): Boolean = throw UnsupportedOperationException(\"Add is not supported on values\")\n                    override fun clear() = this@AbstractMutableMap.clear()\n\n                    override operator fun contains(element: V): Boolean = containsValue(element)\n\n                    override operator fun iterator(): MutableIterator<V> {\n                        val entryIterator = entries.iterator()\n                        return object : MutableIterator<V> {\n                            override fun hasNext(): Boolean = entryIterator.hasNext()\n                            override fun next(): V = entryIterator.next().value\n                            override fun remove() = entryIterator.remove()\n                        }\n                    }\n\n                    override val size: Int get() = this@AbstractMutableMap.size\n\n                    // TODO: should we implement them this way? Currently it's unspecified in JVM\n                    override fun equals(other: Any?): Boolean {\n                        if (this === other) return true\n                        if (other !is Collection<*>) return false\n                        return AbstractList.orderedEquals(this, other)\n                    }\n\n                    override fun hashCode(): Int = AbstractList.orderedHashCode(this)\n\n                    override fun checkIsMutable(): Unit = this@AbstractMutableMap.checkIsMutable()\n                }\n            }\n            return _values!!\n        }\n\n    actual override fun remove(key: K): V? {\n        checkIsMutable()\n        val iter = entries.iterator()\n        while (iter.hasNext()) {\n            val entry = iter.next()\n            val k = entry.key\n            if (key == k) {\n                val value = entry.value\n                iter.remove()\n                return value\n            }\n        }\n        return null\n    }\n\n\n    /**\n     * This method is called every time when a mutating method is called on this mutable map.\n     * Mutable maps that are built (frozen) must throw `UnsupportedOperationException`.\n     */\n    internal open fun checkIsMutable(): Unit {}\n}\n","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\npackage kotlin.collections\n\n/**\n * Provides a skeletal implementation of the [MutableSet] interface.\n *\n * @param E the type of elements contained in the set. The set is invariant in its element type.\n */\npublic actual abstract class AbstractMutableSet<E> protected actual constructor() : AbstractMutableCollection<E>(), MutableSet<E> {\n\n    /**\n     * Compares this set with another set instance with the unordered structural equality.\n     *\n     * @return `true`, if [other] instance is a [Set] of the same size, all elements of which are contained in this set.\n     */\n    override fun equals(other: Any?): Boolean {\n        if (other === this) return true\n        if (other !is Set<*>) return false\n        return AbstractSet.setEquals(this, other)\n    }\n\n    /**\n     * Returns the hash code value for this set.\n     */\n    override fun hashCode(): Int = AbstractSet.unorderedHashCode(this)\n\n}","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.collections\n\n/**\n * Provides a [MutableList] implementation, which uses a resizable array as its backing storage.\n *\n * This implementation doesn't provide a way to manage capacity, as backing JS array is resizeable itself.\n * There is no speed advantage to pre-allocating array sizes in JavaScript, so this implementation does not include any of the\n * capacity and \"growth increment\" concepts.\n */\npublic actual open class ArrayList<E> internal constructor(private var array: Array<Any?>) : AbstractMutableList<E>(), MutableList<E>, RandomAccess {\n    private var isReadOnly: Boolean = false\n\n    /**\n     * Creates an empty [ArrayList].\n     */\n    public actual constructor() : this(emptyArray()) {}\n\n    /**\n     * Creates an empty [ArrayList].\n     * @param initialCapacity initial capacity (ignored)\n     */\n    @Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\n    public actual constructor(initialCapacity: Int = 0) : this(emptyArray()) {}\n\n    /**\n     * Creates an [ArrayList] filled from the [elements] collection.\n     */\n    public actual constructor(elements: Collection<E>) : this(elements.toTypedArray<Any?>()) {}\n\n    @PublishedApi\n    internal fun build(): List<E> {\n        checkIsMutable()\n        isReadOnly = true\n        return this\n    }\n\n    /** Does nothing in this ArrayList implementation. */\n    public actual fun trimToSize() {}\n\n    /** Does nothing in this ArrayList implementation. */\n    public actual fun ensureCapacity(minCapacity: Int) {}\n\n    actual override val size: Int get() = array.size\n    @Suppress(\"UNCHECKED_CAST\")\n    actual override fun get(index: Int): E = array[rangeCheck(index)] as E\n    actual override fun set(index: Int, element: E): E {\n        checkIsMutable()\n        rangeCheck(index)\n        @Suppress(\"UNCHECKED_CAST\")\n        return array[index].apply { array[index] = element } as E\n    }\n\n    actual override fun add(element: E): Boolean {\n        checkIsMutable()\n        array.asDynamic().push(element)\n        modCount++\n        return true\n    }\n\n    actual override fun add(index: Int, element: E): Unit {\n        checkIsMutable()\n        array.asDynamic().splice(insertionRangeCheck(index), 0, element)\n        modCount++\n    }\n\n    actual override fun addAll(elements: Collection<E>): Boolean {\n        checkIsMutable()\n        if (elements.isEmpty()) return false\n\n        array += elements.toTypedArray<Any?>()\n        modCount++\n        return true\n    }\n\n    actual override fun addAll(index: Int, elements: Collection<E>): Boolean {\n        checkIsMutable()\n        insertionRangeCheck(index)\n\n        if (index == size) return addAll(elements)\n        if (elements.isEmpty()) return false\n        when (index) {\n            size -> return addAll(elements)\n            0 -> array = elements.toTypedArray<Any?>() + array\n            else -> array = array.copyOfRange(0, index).asDynamic().concat(elements.toTypedArray<Any?>(), array.copyOfRange(index, size))\n        }\n\n        modCount++\n        return true\n    }\n\n    actual override fun removeAt(index: Int): E {\n        checkIsMutable()\n        rangeCheck(index)\n        modCount++\n        return if (index == lastIndex)\n            array.asDynamic().pop()\n        else\n            array.asDynamic().splice(index, 1)[0]\n    }\n\n    actual override fun remove(element: E): Boolean {\n        checkIsMutable()\n        for (index in array.indices) {\n            if (array[index] == element) {\n                array.asDynamic().splice(index, 1)\n                modCount++\n                return true\n            }\n        }\n        return false\n    }\n\n    override fun removeRange(fromIndex: Int, toIndex: Int) {\n        checkIsMutable()\n        modCount++\n        array.asDynamic().splice(fromIndex, toIndex - fromIndex)\n    }\n\n    actual override fun clear() {\n        checkIsMutable()\n        array = emptyArray()\n        modCount++\n    }\n\n\n    actual override fun indexOf(element: E): Int = array.indexOf(element)\n\n    actual override fun lastIndexOf(element: E): Int = array.lastIndexOf(element)\n\n    override fun toString() = arrayToString(array)\n\n    @Suppress(\"UNCHECKED_CAST\")\n    override fun <T> toArray(array: Array<T>): Array<T> {\n        if (array.size < size) {\n            return toArray() as Array<T>\n        }\n\n        (this.array as Array<T>).copyInto(array)\n\n        if (array.size > size) {\n            array[size] = null as T // null-terminate\n        }\n\n        return array\n    }\n\n    override fun toArray(): Array<Any?> {\n        return js(\"[]\").slice.call(array)\n    }\n\n\n    internal override fun checkIsMutable() {\n        if (isReadOnly) throw UnsupportedOperationException()\n    }\n\n    private fun rangeCheck(index: Int) = index.apply {\n        AbstractList.checkElementIndex(index, size)\n    }\n\n    private fun insertionRangeCheck(index: Int) = index.apply {\n        AbstractList.checkPositionIndex(index, size)\n    }\n}","/*\n * Copyright 2010-2019 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.collections\n\ninternal fun <T> sortArrayWith(array: Array<out T>, comparison: (T, T) -> Int) {\n    if (getStableSortingIsSupported()) {\n        array.asDynamic().sort(comparison)\n    } else {\n        mergeSort(array.unsafeCast<Array<T>>(), 0, array.lastIndex, Comparator(comparison))\n    }\n}\n\ninternal fun <T> sortArrayWith(array: Array<out T>, comparator: Comparator<in T>) {\n    if (getStableSortingIsSupported()) {\n        val comparison = { a: T, b: T -> comparator.compare(a, b) }\n        array.asDynamic().sort(comparison)\n    } else {\n        mergeSort(array.unsafeCast<Array<T>>(), 0, array.lastIndex, comparator)\n    }\n}\n\ninternal fun <T> sortArrayWith(array: Array<out T>, fromIndex: Int, toIndex: Int, comparator: Comparator<in T>) {\n    if (fromIndex < toIndex - 1) {\n        mergeSort(array.unsafeCast<Array<T>>(), fromIndex, toIndex - 1, comparator)\n    }\n}\n\ninternal fun <T : Comparable<T>> sortArray(array: Array<out T>) {\n    if (getStableSortingIsSupported()) {\n        val comparison = { a: T, b: T -> a.compareTo(b) }\n        array.asDynamic().sort(comparison)\n    } else {\n        mergeSort(array.unsafeCast<Array<T>>(), 0, array.lastIndex, naturalOrder())\n    }\n}\n\nprivate var _stableSortingIsSupported: Boolean? = null\nprivate fun getStableSortingIsSupported(): Boolean {\n    _stableSortingIsSupported?.let { return it }\n    _stableSortingIsSupported = false\n\n    val array = js(\"[]\").unsafeCast<Array<Int>>()\n    // known implementations may use stable sort for arrays of up to 512 elements\n    // so we create slightly more elements to test stability\n    for (index in 0 until 600) array.asDynamic().push(index)\n    val comparison = { a: Int, b: Int -> (a and 3) - (b and 3) }\n    array.asDynamic().sort(comparison)\n    for (index in 1 until array.size) {\n        val a = array[index - 1]\n        val b = array[index]\n        if ((a and 3) == (b and 3) && a >= b) return false\n    }\n    _stableSortingIsSupported = true\n    return true\n}\n\n\nprivate fun <T> mergeSort(array: Array<T>, start: Int, endInclusive: Int, comparator: Comparator<in T>) {\n    val buffer = arrayOfNulls<Any?>(array.size).unsafeCast<Array<T>>()\n    val result = mergeSort(array, buffer, start, endInclusive, comparator)\n    if (result !== array) {\n        for (i in start..endInclusive) array[i] = result[i]\n    }\n}\n\n// Both start and end are inclusive indices.\nprivate fun <T> mergeSort(array: Array<T>, buffer: Array<T>, start: Int, end: Int, comparator: Comparator<in T>): Array<T> {\n    if (start == end) {\n        return array\n    }\n\n    val median = (start + end) / 2\n    val left = mergeSort(array, buffer, start, median, comparator)\n    val right = mergeSort(array, buffer, median + 1, end, comparator)\n\n    val target = if (left === buffer) array else buffer\n\n    // Merge.\n    var leftIndex = start\n    var rightIndex = median + 1\n    for (i in start..end) {\n        when {\n            leftIndex <= median && rightIndex <= end -> {\n                val leftValue = left[leftIndex]\n                val rightValue = right[rightIndex]\n\n                if (comparator.compare(leftValue, rightValue) <= 0) {\n                    target[i] = leftValue\n                    leftIndex++\n                } else {\n                    target[i] = rightValue\n                    rightIndex++\n                }\n            }\n            leftIndex <= median -> {\n                target[i] = left[leftIndex]\n                leftIndex++\n            }\n            else /* rightIndex <= end */ -> {\n                target[i] = right[rightIndex]\n                rightIndex++\n                Unit  // TODO: Fix KT-31506\n            }\n        }\n    }\n\n    return target\n}","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.collections\n\ninternal interface EqualityComparator {\n    /**\n     * Subclasses must override to return a value indicating\n     * whether or not two keys or values are equal.\n     */\n    abstract fun equals(value1: Any?, value2: Any?): Boolean\n\n    /**\n     * Subclasses must override to return the hash code of a given key.\n     */\n    abstract fun getHashCode(value: Any?): Int\n\n\n    object HashCode : EqualityComparator {\n        override fun equals(value1: Any?, value2: Any?): Boolean = value1 == value2\n\n        override fun getHashCode(value: Any?): Int = value?.hashCode() ?: 0\n    }\n}","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n/*\n * Based on GWT AbstractHashMap\n * Copyright 2008 Google Inc.\n */\n\npackage kotlin.collections\n\nimport kotlin.collections.MutableMap.MutableEntry\n\n/**\n * Hash table based implementation of the [MutableMap] interface.\n *\n * This implementation makes no guarantees regarding the order of enumeration of [keys], [values] and [entries] collections.\n */\n// Classes that extend HashMap and implement `build()` (freezing) operation\n// have to make sure mutating methods check `checkIsMutable`.\npublic actual open class HashMap<K, V> : AbstractMutableMap<K, V>, MutableMap<K, V> {\n\n    private inner class EntrySet : AbstractEntrySet<MutableEntry<K, V>, K, V>() {\n\n        override fun add(element: MutableEntry<K, V>): Boolean = throw UnsupportedOperationException(\"Add is not supported on entries\")\n        override fun clear() {\n            this@HashMap.clear()\n        }\n\n        override fun containsEntry(element: Map.Entry<K, V>): Boolean = this@HashMap.containsEntry(element)\n\n        override operator fun iterator(): MutableIterator<MutableEntry<K, V>> = internalMap.iterator()\n\n        override fun remove(element: MutableEntry<K, V>): Boolean {\n            if (contains(element)) {\n                this@HashMap.remove(element.key)\n                return true\n            }\n            return false\n        }\n\n        override val size: Int get() = this@HashMap.size\n    }\n\n\n    /**\n     * Internal implementation of the map: either string-based or hashcode-based.\n     */\n    private val internalMap: InternalMap<K, V>\n\n    private val equality: EqualityComparator\n\n    internal constructor(internalMap: InternalMap<K, V>) : super() {\n        this.internalMap = internalMap\n        this.equality = internalMap.equality\n    }\n\n    /**\n     * Constructs an empty [HashMap] instance.\n     */\n    actual constructor() : this(InternalHashCodeMap(EqualityComparator.HashCode))\n\n    /**\n     * Constructs an empty [HashMap] instance.\n     *\n     * @param  initialCapacity the initial capacity (ignored)\n     * @param  loadFactor      the load factor (ignored)\n     *\n     * @throws IllegalArgumentException if the initial capacity or load factor are negative\n     */\n    @Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\n    actual constructor(initialCapacity: Int, loadFactor: Float = 0.0f) : this() {\n        // This implementation of HashMap has no need of load factors or capacities.\n        require(initialCapacity >= 0) { \"Negative initial capacity: $initialCapacity\" }\n        require(loadFactor >= 0) { \"Non-positive load factor: $loadFactor\" }\n    }\n\n    actual constructor(initialCapacity: Int) : this(initialCapacity, 0.0f)\n\n\n    /**\n     * Constructs an instance of [HashMap] filled with the contents of the specified [original] map.\n     */\n    actual constructor(original: Map<out K, V>) : this() {\n        this.putAll(original)\n    }\n\n    actual override fun clear() {\n        internalMap.clear()\n//        structureChanged(this)\n    }\n\n    actual override fun containsKey(key: K): Boolean = internalMap.contains(key)\n\n    actual override fun containsValue(value: V): Boolean = internalMap.any { equality.equals(it.value, value) }\n\n    private var _entries: MutableSet<MutableMap.MutableEntry<K, V>>? = null\n    actual override val entries: MutableSet<MutableMap.MutableEntry<K, V>>\n        get() {\n            if (_entries == null) {\n                _entries = createEntrySet()\n            }\n            return _entries!!\n        }\n\n    protected open fun createEntrySet(): MutableSet<MutableMap.MutableEntry<K, V>> = EntrySet()\n\n    actual override operator fun get(key: K): V? = internalMap.get(key)\n\n    actual override fun put(key: K, value: V): V? = internalMap.put(key, value)\n\n    actual override fun remove(key: K): V? = internalMap.remove(key)\n\n    actual override val size: Int get() = internalMap.size\n\n}\n\n/**\n * Constructs the specialized implementation of [HashMap] with [String] keys, which stores the keys as properties of\n * JS object without hashing them.\n */\npublic fun <V> stringMapOf(vararg pairs: Pair<String, V>): HashMap<String, V> {\n    return HashMap<String, V>(InternalStringMap(EqualityComparator.HashCode)).apply { putAll(pairs) }\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n/*\n * Based on GWT HashSet\n * Copyright 2008 Google Inc.\n */\n\npackage kotlin.collections\n\n/**\n * The implementation of the [MutableSet] interface, backed by a [HashMap] instance.\n */\n// Classes that extend HashSet and implement `build()` (freezing) operation\n// have to make sure mutating methods check `checkIsMutable`.\npublic actual open class HashSet<E> : AbstractMutableSet<E>, MutableSet<E> {\n\n    internal val map: HashMap<E, Any>\n\n    /**\n     * Constructs a new empty [HashSet].\n     */\n    actual constructor() {\n        map = HashMap<E, Any>()\n    }\n\n    /**\n     * Constructs a new [HashSet] filled with the elements of the specified collection.\n     */\n    actual constructor(elements: Collection<E>) {\n        map = HashMap<E, Any>(elements.size)\n        addAll(elements)\n    }\n\n    /**\n     * Constructs a new empty [HashSet].\n     *\n     * @param  initialCapacity the initial capacity (ignored)\n     * @param  loadFactor      the load factor (ignored)\n     *\n     * @throws IllegalArgumentException if the initial capacity or load factor are negative\n     */\n    @Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\n    actual constructor(initialCapacity: Int, loadFactor: Float = 0.0f) {\n        map = HashMap<E, Any>(initialCapacity, loadFactor)\n    }\n\n    actual constructor(initialCapacity: Int) : this(initialCapacity, 0.0f)\n\n    /**\n     * Protected constructor to specify the underlying map. This is used by\n     * LinkedHashSet.\n\n     * @param map underlying map to use.\n     */\n    internal constructor(map: HashMap<E, Any>) {\n        this.map = map\n    }\n\n    actual override fun add(element: E): Boolean {\n        val old = map.put(element, this)\n        return old == null\n    }\n\n    actual override fun clear() {\n        map.clear()\n    }\n\n//    public override fun clone(): Any {\n//        return HashSet<E>(this)\n//    }\n\n    actual override operator fun contains(element: E): Boolean = map.containsKey(element)\n\n    actual override fun isEmpty(): Boolean = map.isEmpty()\n\n    actual override fun iterator(): MutableIterator<E> = map.keys.iterator()\n\n    actual override fun remove(element: E): Boolean = map.remove(element) != null\n\n    actual override val size: Int get() = map.size\n\n}\n\n/**\n * Creates a new instance of the specialized implementation of [HashSet] with the specified [String] elements,\n * which elements the keys as properties of JS object without hashing them.\n */\npublic fun stringSetOf(vararg elements: String): HashSet<String> {\n    return HashSet(stringMapOf<Any>()).apply { addAll(elements) }\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n/*\n * Based on GWT InternalHashCodeMap\n * Copyright 2008 Google Inc.\n */\n\npackage kotlin.collections\n\nimport kotlin.collections.MutableMap.MutableEntry\nimport kotlin.collections.AbstractMutableMap.SimpleEntry\n\n/**\n * A simple wrapper around JavaScriptObject to provide [java.util.Map]-like semantics for any\n * key type.\n *\n *\n * Implementation notes:\n *\n *\n * A key's hashCode is the index in backingMap which should contain that key. Since several keys may\n * have the same hash, each value in hashCodeMap is actually an array containing all entries whose\n * keys share the same hash.\n */\ninternal class InternalHashCodeMap<K, V>(override val equality: EqualityComparator) : InternalMap<K, V> {\n\n    private var backingMap: dynamic = createJsMap()\n    override var size: Int = 0\n        private set\n\n    override fun put(key: K, value: V): V? {\n        val hashCode = equality.getHashCode(key)\n        val chainOrEntry = getChainOrEntryOrNull(hashCode)\n        if (chainOrEntry == null) {\n            // This is a new chain, put it to the map.\n            backingMap[hashCode] = SimpleEntry(key, value)\n        } else {\n            if (chainOrEntry !is Array<*>) {\n                // It is an entry\n                val entry: SimpleEntry<K, V> = chainOrEntry\n                if (equality.equals(entry.key, key)) {\n                    return entry.setValue(value)\n                } else {\n                    backingMap[hashCode] = arrayOf(entry, SimpleEntry(key, value))\n                    size++\n                    return null\n                }\n            } else {\n                // Chain already exists, perhaps key also exists.\n                val chain: Array<MutableEntry<K, V>> = chainOrEntry\n                val entry = chain.findEntryInChain(key)\n                if (entry != null) {\n                    return entry.setValue(value)\n                }\n                chain.asDynamic().push(SimpleEntry(key, value))\n            }\n        }\n        size++\n//        structureChanged(host)\n        return null\n    }\n\n    override fun remove(key: K): V? {\n        val hashCode = equality.getHashCode(key)\n        val chainOrEntry = getChainOrEntryOrNull(hashCode) ?: return null\n        if (chainOrEntry !is Array<*>) {\n            val entry: MutableEntry<K, V> = chainOrEntry\n            if (equality.equals(entry.key, key)) {\n                jsDeleteProperty(backingMap, hashCode)\n                size--\n                return entry.value\n            } else {\n                return null\n            }\n        } else {\n            val chain: Array<MutableEntry<K, V>> = chainOrEntry\n            for (index in chain.indices) {\n                val entry = chain[index]\n                if (equality.equals(key, entry.key)) {\n                    if (chain.size == 1) {\n                        chain.asDynamic().length = 0\n                        // remove the whole array\n                        jsDeleteProperty(backingMap, hashCode)\n                    } else {\n                        // splice out the entry we're removing\n                        chain.asDynamic().splice(index, 1)\n                    }\n                    size--\n//                structureChanged(host)\n                    return entry.value\n                }\n            }\n        }\n        return null\n    }\n\n    override fun clear() {\n        backingMap = createJsMap()\n        size = 0\n    }\n\n    override fun contains(key: K): Boolean = getEntry(key) != null\n\n    override fun get(key: K): V? = getEntry(key)?.value\n\n    private fun getEntry(key: K): MutableEntry<K, V>? {\n        val chainOrEntry = getChainOrEntryOrNull(equality.getHashCode(key)) ?: return null\n        if (chainOrEntry !is Array<*>) {\n            val entry: MutableEntry<K, V> = chainOrEntry\n            if (equality.equals(entry.key, key)) {\n                return entry\n            } else {\n                return null\n            }\n        } else {\n            val chain: Array<MutableEntry<K, V>> = chainOrEntry\n            return chain.findEntryInChain(key)\n        }\n    }\n\n    private fun Array<MutableEntry<K, V>>.findEntryInChain(key: K): MutableEntry<K, V>? =\n        firstOrNull { entry -> equality.equals(entry.key, key) }\n\n    override fun iterator(): MutableIterator<MutableEntry<K, V>> {\n\n        return object : MutableIterator<MutableEntry<K, V>> {\n            var state = -1 // -1 not ready, 0 - ready, 1 - done\n\n            val keys: Array<String> = js(\"Object\").keys(backingMap)\n            var keyIndex = -1\n\n            var chainOrEntry: dynamic = null\n            var isChain = false\n            var itemIndex = -1\n            var lastEntry: MutableEntry<K, V>? = null\n\n            private fun computeNext(): Int {\n                if (chainOrEntry != null && isChain) {\n                    val chainSize: Int = chainOrEntry.unsafeCast<Array<MutableEntry<K, V>>>().size\n                    if (++itemIndex < chainSize)\n                        return 0\n                }\n\n                if (++keyIndex < keys.size) {\n                    chainOrEntry = backingMap[keys[keyIndex]]\n                    isChain = chainOrEntry is Array<*>\n                    itemIndex = 0\n                    return 0\n                } else {\n                    chainOrEntry = null\n                    return 1\n                }\n            }\n\n            override fun hasNext(): Boolean {\n                if (state == -1)\n                    state = computeNext()\n                return state == 0\n            }\n\n            override fun next(): MutableEntry<K, V> {\n                if (!hasNext()) throw NoSuchElementException()\n                val lastEntry = if (isChain) {\n                    chainOrEntry.unsafeCast<Array<MutableEntry<K, V>>>()[itemIndex]\n                } else {\n                    chainOrEntry.unsafeCast<MutableEntry<K, V>>()\n                }\n                this.lastEntry = lastEntry\n                state = -1\n                return lastEntry\n            }\n\n            override fun remove() {\n                checkNotNull(lastEntry)\n                this@InternalHashCodeMap.remove(lastEntry!!.key)\n                lastEntry = null\n                // the chain being iterated just got modified by InternalHashCodeMap.remove\n                itemIndex--\n            }\n        }\n    }\n\n    private fun getChainOrEntryOrNull(hashCode: Int): dynamic {\n        val chainOrEntry = backingMap[hashCode]\n        return if (chainOrEntry === undefined) null else chainOrEntry\n    }\n\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n/*\n * Based on GWT InternalStringMap\n * Copyright 2008 Google Inc.\n */\npackage kotlin.collections\n\nimport kotlin.collections.MutableMap.MutableEntry\n\n/**\n * A simple wrapper around JavaScript Map for key type is string.\n *\n * Though this map is instantiated only with K=String, the K type is not fixed to String statically,\n * because we want to have it erased to Any? in order not to generate type-safe override bridges for\n * [get], [contains], [remove] etc, if they ever are generated.\n */\ninternal class InternalStringMap<K, V>(override val equality: EqualityComparator) : InternalMap<K, V> {\n\n    private var backingMap: dynamic = createJsMap()\n    override var size: Int = 0\n        private set\n\n//    /**\n//     * A mod count to track 'value' replacements in map to ensure that the 'value' that we have in the\n//     * iterator entry is guaranteed to be still correct.\n//     * This is to optimize for the common scenario where the values are not modified during\n//     * iterations where the entries are never stale.\n//     */\n//    private var valueMod: Int = 0\n\n    override operator fun contains(key: K): Boolean {\n        if (key !is String) return false\n        return backingMap[key] !== undefined\n    }\n\n    override operator fun get(key: K): V? {\n        if (key !is String) return null\n        val value = backingMap[key]\n        return if (value !== undefined) value.unsafeCast<V>() else null\n    }\n\n\n    override fun put(key: K, value: V): V? {\n        require(key is String)\n        val oldValue = backingMap[key]\n        backingMap[key] = value\n\n        if (oldValue === undefined) {\n            size++\n//            structureChanged(host)\n            return null\n        } else {\n//            valueMod++\n            return oldValue.unsafeCast<V>()\n        }\n    }\n\n    override fun remove(key: K): V? {\n        if (key !is String) return null\n        val value = backingMap[key]\n        if (value !== undefined) {\n            jsDeleteProperty(backingMap, key)\n            size--\n//            structureChanged(host)\n            return value.unsafeCast<V>()\n        } else {\n//            valueMod++\n            return null\n        }\n    }\n\n\n    override fun clear() {\n        backingMap = createJsMap()\n        size = 0\n    }\n\n\n    override fun iterator(): MutableIterator<MutableEntry<K, V>> {\n        return object : MutableIterator<MutableEntry<K, V>> {\n            private val keys: Array<String> = js(\"Object\").keys(backingMap)\n            private val iterator = keys.iterator()\n            private var lastKey: String? = null\n\n            override fun hasNext(): Boolean = iterator.hasNext()\n\n            override fun next(): MutableEntry<K, V> {\n                val key = iterator.next()\n                lastKey = key\n                @Suppress(\"UNCHECKED_CAST\")\n                return newMapEntry(key as K)\n            }\n\n            override fun remove() {\n                @Suppress(\"UNCHECKED_CAST\")\n                this@InternalStringMap.remove(checkNotNull(lastKey) as K)\n            }\n        }\n    }\n\n    private fun newMapEntry(key: K): MutableEntry<K, V> = object : MutableEntry<K, V> {\n        override val key: K get() = key\n        override val value: V get() = this@InternalStringMap[key].unsafeCast<V>()\n\n        override fun setValue(newValue: V): V = this@InternalStringMap.put(key, newValue).unsafeCast<V>()\n\n        override fun hashCode(): Int = AbstractMap.entryHashCode(this)\n        override fun toString(): String = AbstractMap.entryToString(this)\n        override fun equals(other: Any?): Boolean = AbstractMap.entryEquals(this, other)\n    }\n}\n","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n/*\n * Based on GWT LinkedHashMap\n * Copyright 2008 Google Inc.\n */\npackage kotlin.collections\n\nimport kotlin.collections.MutableMap.MutableEntry\n\n/**\n * Hash table based implementation of the [MutableMap] interface, which additionally preserves the insertion order\n * of entries during the iteration.\n *\n * The insertion order is preserved by maintaining a doubly-linked list of all of its entries.\n */\npublic actual open class LinkedHashMap<K, V> : HashMap<K, V>, MutableMap<K, V> {\n\n    /**\n     * The entry we use includes next/prev pointers for a doubly-linked circular\n     * list with a head node. This reduces the special cases we have to deal with\n     * in the list operations.\n\n     * Note that we duplicate the key from the underlying hash map so we can find\n     * the eldest entry. The alternative would have been to modify HashMap so more\n     * of the code was directly usable here, but this would have added some\n     * overhead to HashMap, or to reimplement most of the HashMap code here with\n     * small modifications. Paying a small storage cost only if you use\n     * LinkedHashMap and minimizing code size seemed like a better tradeoff\n     */\n    private inner class ChainEntry<K, V>(key: K, value: V) : AbstractMutableMap.SimpleEntry<K, V>(key, value) {\n        internal var next: ChainEntry<K, V>? = null\n        internal var prev: ChainEntry<K, V>? = null\n\n        override fun setValue(newValue: V): V {\n            this@LinkedHashMap.checkIsMutable()\n            return super.setValue(newValue)\n        }\n    }\n\n    private inner class EntrySet : AbstractEntrySet<MutableEntry<K, V>, K, V>() {\n\n        private inner class EntryIterator : MutableIterator<MutableEntry<K, V>> {\n            // The last entry that was returned from this iterator.\n            private var last: ChainEntry<K, V>? = null\n\n            // The next entry to return from this iterator.\n            private var next: ChainEntry<K, V>? = null\n\n            init {\n                next = head\n//                recordLastKnownStructure(map, this)\n            }\n\n            override fun hasNext(): Boolean {\n                return next !== null\n            }\n\n            override fun next(): MutableEntry<K, V> {\n//                checkStructuralChange(map, this)\n                if (!hasNext()) throw NoSuchElementException()\n\n                val current = next!!\n                last = current\n                next = current.next.takeIf { it !== head }\n                return current\n            }\n\n            override fun remove() {\n                check(last != null)\n                this@EntrySet.checkIsMutable()\n//                checkStructuralChange(map, this)\n\n                last!!.remove()\n                map.remove(last!!.key)\n//                recordLastKnownStructure(map, this)\n                last = null\n            }\n        }\n\n        override fun add(element: MutableEntry<K, V>): Boolean = throw UnsupportedOperationException(\"Add is not supported on entries\")\n        override fun clear() {\n            this@LinkedHashMap.clear()\n        }\n\n        override fun containsEntry(element: Map.Entry<K, V>): Boolean = this@LinkedHashMap.containsEntry(element)\n\n        override operator fun iterator(): MutableIterator<MutableEntry<K, V>> = EntryIterator()\n\n        override fun remove(element: MutableEntry<K, V>): Boolean {\n            checkIsMutable()\n            if (contains(element)) {\n                this@LinkedHashMap.remove(element.key)\n                return true\n            }\n            return false\n        }\n\n        override val size: Int get() = this@LinkedHashMap.size\n\n        override fun checkIsMutable(): Unit = this@LinkedHashMap.checkIsMutable()\n    }\n\n\n    /*\n   * The head of the insert order chain, which is a doubly-linked circular\n   * list.\n   *\n   * The most recently inserted node is at the end of the chain, ie.\n   * chain.prev.\n   */\n    private var head: ChainEntry<K, V>? = null\n\n    /**\n     * Add this node to the end of the chain.\n     */\n    private fun ChainEntry<K, V>.addToEnd() {\n        // This entry is not in the list.\n        check(next == null && prev == null)\n\n        val _head = head\n        if (_head == null) {\n            head = this\n            next = this\n            prev = this\n        } else {\n            // Chain is valid.\n            val _tail = checkNotNull(_head.prev)\n            // Update me.\n            prev = _tail\n            next = _head\n            // Update my new siblings: current head and old tail\n            _head.prev = this\n            _tail.next = this\n        }\n    }\n\n    /**\n     * Remove this node from the chain it is a part of.\n     */\n    private fun ChainEntry<K, V>.remove() {\n        if (this.next === this) {\n            // if this is single element, remove head\n            head = null\n        } else {\n            if (head === this) {\n                // if this is first element, move head to next\n                head = next\n            }\n            next!!.prev = prev\n            prev!!.next = next\n        }\n        next = null\n        prev = null\n    }\n\n    /*\n   * The hashmap that keeps track of our entries and the chain. Note that we\n   * duplicate the key here to eliminate changes to HashMap and minimize the\n   * code here, at the expense of additional space.\n   */\n    private val map: HashMap<K, ChainEntry<K, V>>\n\n    private var isReadOnly: Boolean = false\n\n    /**\n     * Constructs an empty [LinkedHashMap] instance.\n     */\n    actual constructor() : super() {\n        map = HashMap<K, ChainEntry<K, V>>()\n    }\n\n    internal constructor(backingMap: HashMap<K, Any>) : super() {\n        @Suppress(\"UNCHECKED_CAST\") // expected to work due to erasure\n        map = backingMap as HashMap<K, ChainEntry<K, V>>\n    }\n\n    /**\n     * Constructs an empty [LinkedHashMap] instance.\n     *\n     * @param  initialCapacity the initial capacity (ignored)\n     * @param  loadFactor      the load factor (ignored)\n     *\n     * @throws IllegalArgumentException if the initial capacity or load factor are negative\n     */\n    @Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\n    actual constructor(initialCapacity: Int, loadFactor: Float = 0.0f) : super(initialCapacity, loadFactor) {\n        map = HashMap<K, ChainEntry<K, V>>()\n    }\n\n    actual constructor(initialCapacity: Int) : this(initialCapacity, 0.0f)\n\n    /**\n     * Constructs an instance of [LinkedHashMap] filled with the contents of the specified [original] map.\n     */\n    actual constructor(original: Map<out K, V>) {\n        map = HashMap<K, ChainEntry<K, V>>()\n        this.putAll(original)\n    }\n\n    @PublishedApi\n    internal fun build(): Map<K, V> {\n        checkIsMutable()\n        isReadOnly = true\n        return this\n    }\n\n    actual override fun clear() {\n        checkIsMutable()\n        map.clear()\n        head = null\n    }\n\n\n//    override fun clone(): Any {\n//        return LinkedHashMap(this)\n//    }\n\n\n    actual override fun containsKey(key: K): Boolean = map.containsKey(key)\n\n    actual override fun containsValue(value: V): Boolean {\n        var node: ChainEntry<K, V> = head ?: return false\n        do {\n            if (node.value == value) {\n                return true\n            }\n            node = node.next!!\n        } while (node !== head)\n        return false\n    }\n\n\n    override fun createEntrySet(): MutableSet<MutableMap.MutableEntry<K, V>> = EntrySet()\n\n    actual override operator fun get(key: K): V? = map.get(key)?.value\n\n    actual override fun put(key: K, value: V): V? {\n        checkIsMutable()\n\n        val old = map.get(key)\n        if (old == null) {\n            val newEntry = ChainEntry(key, value)\n            map.put(key, newEntry)\n            newEntry.addToEnd()\n            return null\n        } else {\n            return old.setValue(value)\n        }\n    }\n\n    actual override fun remove(key: K): V? {\n        checkIsMutable()\n\n        val entry = map.remove(key)\n        if (entry != null) {\n            entry.remove()\n            return entry.value\n        }\n        return null\n    }\n\n    actual override val size: Int get() = map.size\n\n    internal override fun checkIsMutable() {\n        if (isReadOnly) throw UnsupportedOperationException()\n    }\n}\n\n/**\n * Constructs the specialized implementation of [LinkedHashMap] with [String] keys, which stores the keys as properties of\n * JS object without hashing them.\n */\npublic fun <V> linkedStringMapOf(vararg pairs: Pair<String, V>): LinkedHashMap<String, V> {\n    return LinkedHashMap<String, V>(stringMapOf<Any>()).apply { putAll(pairs) }\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n/*\n * Based on GWT LinkedHashSet\n * Copyright 2008 Google Inc.\n */\n\npackage kotlin.collections\n\n/**\n * The implementation of the [MutableSet] interface, backed by a [LinkedHashMap] instance.\n *\n * This implementation preserves the insertion order of elements during the iteration.\n */\npublic actual open class LinkedHashSet<E> : HashSet<E>, MutableSet<E> {\n\n    internal constructor(map: LinkedHashMap<E, Any>) : super(map)\n\n    /**\n     * Constructs a new empty [LinkedHashSet].\n     */\n    actual constructor() : super(LinkedHashMap<E, Any>())\n\n    /**\n     * Constructs a new [LinkedHashSet] filled with the elements of the specified collection.\n     */\n    actual constructor(elements: Collection<E>) : super(LinkedHashMap<E, Any>()) {\n        addAll(elements)\n    }\n\n    /**\n     * Constructs a new empty [LinkedHashSet].\n     *\n     * @param  initialCapacity the initial capacity (ignored)\n     * @param  loadFactor      the load factor (ignored)\n     *\n     * @throws IllegalArgumentException if the initial capacity or load factor are negative\n     */\n    @Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\n    actual constructor(initialCapacity: Int, loadFactor: Float = 0.0f) : super(LinkedHashMap<E, Any>(initialCapacity, loadFactor))\n\n    actual constructor(initialCapacity: Int) : this(initialCapacity, 0.0f)\n\n    @PublishedApi\n    internal fun build(): Set<E> {\n        (map as LinkedHashMap<E, Any>).build()\n        return this\n    }\n\n    internal override fun checkIsMutable(): Unit = map.checkIsMutable()\n\n//    public override fun clone(): Any {\n//        return LinkedHashSet(this)\n//    }\n\n}\n\n/**\n * Creates a new instance of the specialized implementation of [LinkedHashSet] with the specified [String] elements,\n * which elements the keys as properties of JS object without hashing them.\n */\npublic fun linkedStringSetOf(vararg elements: String): LinkedHashSet<String> {\n    return LinkedHashSet(linkedStringMapOf<Any>()).apply { addAll(elements) }\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.io\n\ninternal abstract class BaseOutput {\n    open fun println() {\n        print(\"\\n\")\n    }\n\n    open fun println(message: Any?) {\n        print(message)\n        println()\n    }\n\n    abstract fun print(message: Any?)\n\n    open fun flush() {}\n}\n\n/** JsName used to make the declaration available outside of module to test it */\n@JsName(\"NodeJsOutput\")\ninternal class NodeJsOutput(val outputStream: dynamic) : BaseOutput() {\n    override fun print(message: Any?) {\n        // TODO: Using local variable because of bug in block decomposition lowering in IR backend\n        val messageString = String(message)\n        outputStream.write(messageString)\n    }\n}\n\n/** JsName used to make the declaration available outside of module to test it */\n@JsName(\"OutputToConsoleLog\")\ninternal class OutputToConsoleLog : BaseOutput() {\n    override fun print(message: Any?) {\n        console.log(message)\n    }\n\n    override fun println(message: Any?) {\n        console.log(message)\n    }\n\n    override fun println() {\n        console.log(\"\")\n    }\n}\n\n/** JsName used to make the declaration available outside of module to test it and use at try.kotl.in */\n@JsName(\"BufferedOutput\")\ninternal open class BufferedOutput : BaseOutput() {\n    var buffer = \"\"\n\n    override fun print(message: Any?) {\n        buffer += String(message)\n    }\n\n    override fun flush() {\n        buffer = \"\"\n    }\n}\n\n/** JsName used to make the declaration available outside of module to test it */\n@JsName(\"BufferedOutputToConsoleLog\")\ninternal class BufferedOutputToConsoleLog : BufferedOutput() {\n    override fun print(message: Any?) {\n        var s = String(message)\n        val i = s.nativeLastIndexOf(\"\\n\", 0)\n        if (i >= 0) {\n            buffer += s.substring(0, i)\n            flush()\n            s = s.substring(i + 1)\n        }\n        buffer += s\n    }\n\n    override fun flush() {\n        console.log(buffer)\n        buffer = \"\"\n    }\n}\n\n/** JsName used to make the declaration available outside of module to test it and use at try.kotl.in */\n@JsName(\"output\")\ninternal var output = run {\n    val isNode: Boolean = js(\"typeof process !== 'undefined' && process.versions && !!process.versions.node\")\n    if (isNode) NodeJsOutput(js(\"process.stdout\")) else BufferedOutputToConsoleLog()\n}\n\n@kotlin.internal.InlineOnly\nprivate inline fun String(value: Any?): String = js(\"String\")(value)\n\n/** Prints the line separator to the standard output stream. */\npublic actual fun println() {\n    output.println()\n}\n\n/** Prints the given [message] and the line separator to the standard output stream. */\npublic actual fun println(message: Any?) {\n    output.println(message)\n}\n\n/** Prints the given [message] to the standard output stream. */\npublic actual fun print(message: Any?) {\n    output.print(message)\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.coroutines\n\nimport kotlin.coroutines.intrinsics.CoroutineSingletons.*\nimport kotlin.coroutines.intrinsics.COROUTINE_SUSPENDED\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\ninternal actual class SafeContinuation<in T>\ninternal actual constructor(\n    private val delegate: Continuation<T>,\n    initialResult: Any?\n) : Continuation<T> {\n    @PublishedApi\n    internal actual constructor(delegate: Continuation<T>) : this(delegate, UNDECIDED)\n\n    public actual override val context: CoroutineContext\n        get() = delegate.context\n\n    private var result: Any? = initialResult\n\n    public actual override fun resumeWith(result: Result<T>) {\n        val cur = this.result\n        when {\n            cur === UNDECIDED -> {\n                this.result = result.value\n            }\n            cur === COROUTINE_SUSPENDED -> {\n                this.result = RESUMED\n                delegate.resumeWith(result)\n            }\n            else -> throw IllegalStateException(\"Already resumed\")\n        }\n    }\n\n    @PublishedApi\n    internal actual fun getOrThrow(): Any? {\n        if (result === UNDECIDED) {\n            result = COROUTINE_SUSPENDED\n            return COROUTINE_SUSPENDED\n        }\n        val result = this.result\n        return when {\n            result === RESUMED -> COROUTINE_SUSPENDED // already called continuation, indicate COROUTINE_SUSPENDED upstream\n            result is Result.Failure -> throw result.exception\n            else -> result // either COROUTINE_SUSPENDED or data\n        }\n    }\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.collections\n\n/**\n * The common interface of [InternalStringMap] and [InternalHashCodeMap].\n */\ninternal interface InternalMap<K, V> : MutableIterable<MutableMap.MutableEntry<K, V>> {\n    val equality: EqualityComparator\n    val size: Int\n    operator fun contains(key: K): Boolean\n    operator fun get(key: K): V?\n\n    fun put(key: K, value: V): V?\n    fun remove(key: K): V?\n    fun clear(): Unit\n\n    fun createJsMap(): dynamic {\n        val result = js(\"Object.create(null)\")\n        // force to switch object representation to dictionary mode\n        result[\"foo\"] = 1\n        jsDeleteProperty(result, \"foo\")\n        return result\n    }\n}\n","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin\n\nimport kotlin.contracts.*\n\n\n@kotlin.internal.InlineOnly\npublic actual inline fun <R> synchronized(lock: Any, block: () -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return block()\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.js\n\n/**\n * Exposes the [Date API](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) to Kotlin.\n */\n@Suppress(\"NOT_DOCUMENTED\")\npublic external class Date() {\n    public constructor(milliseconds: Number)\n\n    public constructor(dateString: String)\n\n    public constructor(year: Int, month: Int)\n\n    public constructor(year: Int, month: Int, day: Int)\n\n    public constructor(year: Int, month: Int, day: Int, hour: Int)\n\n    public constructor(year: Int, month: Int, day: Int, hour: Int, minute: Int)\n\n    public constructor(year: Int, month: Int, day: Int, hour: Int, minute: Int, second: Int)\n\n    public constructor(year: Int, month: Int, day: Int, hour: Int, minute: Int, second: Int, millisecond: Number)\n\n    public fun getDate(): Int\n\n    public fun getDay(): Int\n\n    public fun getFullYear(): Int\n\n    public fun getHours(): Int\n\n    public fun getMilliseconds(): Int\n\n    public fun getMinutes(): Int\n\n    public fun getMonth(): Int\n\n    public fun getSeconds(): Int\n\n    public fun getTime(): Double\n\n    public fun getTimezoneOffset(): Int\n\n    public fun getUTCDate(): Int\n\n    public fun getUTCDay(): Int\n\n    public fun getUTCFullYear(): Int\n\n    public fun getUTCHours(): Int\n\n    public fun getUTCMilliseconds(): Int\n\n    public fun getUTCMinutes(): Int\n\n    public fun getUTCMonth(): Int\n\n    public fun getUTCSeconds(): Int\n\n    public fun toDateString(): String\n\n    public fun toISOString(): String\n\n    public fun toJSON(): Json\n\n    public fun toLocaleDateString(locales: Array<String> = definedExternally, options: LocaleOptions = definedExternally): String\n\n    public fun toLocaleDateString(locales: String, options: LocaleOptions = definedExternally): String\n\n    public fun toLocaleString(locales: Array<String> = definedExternally, options: LocaleOptions = definedExternally): String\n\n    public fun toLocaleString(locales: String, options: LocaleOptions = definedExternally): String\n\n    public fun toLocaleTimeString(locales: Array<String> = definedExternally, options: LocaleOptions = definedExternally): String\n\n    public fun toLocaleTimeString(locales: String, options: LocaleOptions = definedExternally): String\n\n    public fun toTimeString(): String\n\n    public fun toUTCString(): String\n\n    public companion object {\n        public fun now(): Double\n\n        public fun parse(dateString: String): Double\n\n        public fun UTC(year: Int, month: Int): Double\n\n        public fun UTC(year: Int, month: Int, day: Int): Double\n\n        public fun UTC(year: Int, month: Int, day: Int, hour: Int): Double\n\n        public fun UTC(year: Int, month: Int, day: Int, hour: Int, minute: Int): Double\n\n        public fun UTC(year: Int, month: Int, day: Int, hour: Int, minute: Int, second: Int): Double\n\n        public fun UTC(year: Int, month: Int, day: Int, hour: Int, minute: Int, second: Int, millisecond: Number): Double\n    }\n\n    public interface LocaleOptions {\n        public var localeMatcher: String?\n\n        public var timeZone: String?\n\n        public var hour12: Boolean?\n\n        public var formatMatcher: String?\n\n        public var weekday: String?\n\n        public var era: String?\n\n        public var year: String?\n\n        public var month: String?\n\n        public var day: String?\n\n        public var hour: String?\n\n        public var minute: String?\n\n        public var second: String?\n\n        public var timeZoneName: String?\n    }\n}\n\npublic inline fun dateLocaleOptions(init: Date.LocaleOptions.() -> Unit): Date.LocaleOptions {\n    val result = js(\"new Object()\").unsafeCast<Date.LocaleOptions>()\n    init(result)\n    return result\n}","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.dom\n\nimport org.w3c.dom.Document\nimport org.w3c.dom.Element\nimport kotlin.internal.LowPriorityInOverloadResolution\nimport kotlinx.dom.appendElement as newAppendElement\nimport kotlinx.dom.createElement as newCreateElement\n\n/**\n * Creates a new element with the specified [name].\n *\n * The element is initialized with the specified [init] function.\n */\n@LowPriorityInOverloadResolution\n@Deprecated(\n    message = \"This API is moved to another package, use 'kotlinx.dom.createElement' instead.\",\n    replaceWith = ReplaceWith(\"this.createElement(name, init)\", \"kotlinx.dom.createElement\")\n)\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic inline fun Document.createElement(name: String, noinline init: Element.() -> Unit): Element = this.newCreateElement(name, init)\n\n/**\n * Appends a newly created element with the specified [name] to this element.\n *\n * The element is initialized with the specified [init] function.\n */\n@LowPriorityInOverloadResolution\n@Deprecated(\n    message = \"This API is moved to another package, use 'kotlinx.dom.appendElement' instead.\",\n    replaceWith = ReplaceWith(\"this.appendElement(name, init)\", \"kotlinx.dom.appendElement\")\n)\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic inline fun Element.appendElement(name: String, noinline init: Element.() -> Unit): Element = this.newAppendElement(name, init)\n\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.dom\n\nimport org.w3c.dom.Element\nimport kotlin.internal.LowPriorityInOverloadResolution\nimport kotlinx.dom.addClass as newAddClass\nimport kotlinx.dom.hasClass as newHasClass\nimport kotlinx.dom.removeClass as newRemoveClass\n\n/** Returns true if the element has the given CSS class style in its 'class' attribute */\n@LowPriorityInOverloadResolution\n@Deprecated(\n    message = \"This API is moved to another package, use 'kotlinx.dom.hasClass' instead.\",\n    replaceWith = ReplaceWith(\"this.hasClass(cssClass)\", \"kotlinx.dom.hasClass\")\n)\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\ninline fun Element.hasClass(cssClass: String): Boolean = this.newHasClass(cssClass)\n\n/**\n * Adds CSS class to element. Has no effect if all specified classes are already in class attribute of the element\n *\n * @return true if at least one class has been added\n */\n@LowPriorityInOverloadResolution\n@Deprecated(\n    message = \"This API is moved to another package, use 'kotlinx.dom.addClass' instead.\",\n    replaceWith = ReplaceWith(\"this.addClass(cssClasses)\", \"kotlinx.dom.addClass\")\n)\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\ninline fun Element.addClass(vararg cssClasses: String): Boolean = this.newAddClass(*cssClasses)\n\n/**\n * Removes all [cssClasses] from element. Has no effect if all specified classes are missing in class attribute of the element\n *\n * @return true if at least one class has been removed\n */\n@LowPriorityInOverloadResolution\n@Deprecated(\n    message = \"This API is moved to another package, use 'kotlinx.dom.removeClass' instead.\",\n    replaceWith = ReplaceWith(\"this.removeClass(cssClasses)\", \"kotlinx.dom.removeClass\")\n)\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\ninline fun Element.removeClass(vararg cssClasses: String): Boolean = this.newRemoveClass(*cssClasses)","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.dom\n\nimport org.w3c.dom.Element\nimport org.w3c.dom.Node\nimport kotlin.internal.LowPriorityInOverloadResolution\nimport kotlinx.dom.isElement as newIsElement\nimport kotlinx.dom.isText as newIsText\n\n/**\n * Gets a value indicating whether this node is a TEXT_NODE or a CDATA_SECTION_NODE.\n */\n@LowPriorityInOverloadResolution\n@Deprecated(\n    message = \"This API is moved to another package, use 'kotlinx.dom.isText' instead.\",\n    replaceWith = ReplaceWith(\"this.isText\", \"kotlinx.dom.isText\")\n)\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic val Node.isText: Boolean\n    inline get() = this.newIsText\n\n/**\n * Gets a value indicating whether this node is an [Element].\n */\n@LowPriorityInOverloadResolution\n@Deprecated(\n    message = \"This API is moved to another package, use 'kotlinx.dom.isElement' instead.\",\n    replaceWith = ReplaceWith(\"this.isElement\", \"kotlinx.dom.isElement\")\n)\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic val Node.isElement: Boolean\n    inline get() = this.newIsElement\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage org.w3c.dom.events\n\npublic fun EventListener(handler: (Event) -> Unit): EventListener = EventListenerHandler(handler)\n\nprivate class EventListenerHandler(private val handler: (Event) -> Unit) : EventListener {\n    public override fun handleEvent(event: Event) {\n        handler(event)\n    }\n\n    public override fun toString(): String = \"EventListenerHandler($handler)\"\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage org.w3c.dom\n\npublic external interface ItemArrayLike<out T> {\n    val length: Int\n    fun item(index: Int): T?\n}\n\n/**\n * Returns the view of this `ItemArrayLike<T>` collection as `List<T>`\n */\npublic fun <T> ItemArrayLike<T>.asList(): List<T> = object : AbstractList<T>() {\n    override val size: Int get() = this@asList.length\n\n    override fun get(index: Int): T = when (index) {\n        in 0..lastIndex -> this@asList.item(index).unsafeCast<T>()\n        else -> throw IndexOutOfBoundsException(\"index $index is not in range [0..$lastIndex]\")\n    }\n}","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.dom\n\nimport org.w3c.dom.Element\nimport org.w3c.dom.Node\nimport kotlin.internal.LowPriorityInOverloadResolution\nimport kotlinx.dom.appendText as newAppendText\nimport kotlinx.dom.clear as newClear\n\n/** Removes all the children from this node. */\n@LowPriorityInOverloadResolution\n@Deprecated(\n    message = \"This API is moved to another package, use 'kotlinx.dom.clear' instead.\",\n    replaceWith = ReplaceWith(\"this.clear()\", \"kotlinx.dom.clear\")\n)\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic inline fun Node.clear() = this.newClear()\n\n/**\n * Creates text node and append it to the element.\n *\n * @return this element\n */\n@LowPriorityInOverloadResolution\n@Deprecated(\n    message = \"This API is moved to another package, use 'kotlinx.dom.appendText' instead.\",\n    replaceWith = ReplaceWith(\"this.appendText(text)\", \"kotlinx.dom.appendText\")\n)\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\ninline fun Element.appendText(text: String): Element = this.newAppendText(text)\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n// a package is omitted to get declarations directly under the module\n\n@JsName(\"throwNPE\")\ninternal fun throwNPE(message: String) {\n    throw NullPointerException(message)\n}\n\n@JsName(\"throwCCE\")\ninternal fun throwCCE() {\n    throw ClassCastException(\"Illegal cast\")\n}\n\n@JsName(\"throwISE\")\ninternal fun throwISE(message: String) {\n    throw IllegalStateException(message)\n}\n\n@JsName(\"throwUPAE\")\ninternal fun throwUPAE(propertyName: String) {\n    throw UninitializedPropertyAccessException(\"lateinit property ${propertyName} has not been initialized\")\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.js\n\n/**\n * An interface for indexing access to a collection of key-value pairs, where type of key is [String] and type of value is [Any?][Any].\n */\npublic external interface Json {\n    /**\n     * Calls to the function will be translated to indexing operation (square brackets) on the receiver with [propertyName] as the argument.\n     *\n     * E.g. for next code:\n     * ```kotlin\n     * fun test(j: Json, p: String) = j[\"prop\"] + j.get(p)\n     * ```\n     *\n     * will be generated:\n     * ```js\n     * function test(j, p) {\n     *     return j[\"prop\"] + j[p];\n     * }\n     * ```\n     */\n    operator fun get(propertyName: String): Any?\n\n    /**\n     * Calls of the function will be translated to an assignment of [value] to the receiver indexed (with square brackets/index operation) with [propertyName].\n     *\n     * E.g. for the following code:\n     * ```kotlin\n     * fun test(j: Json, p: String, newValue: Any) {\n     *     j[\"prop\"] = 1\n     *     j.set(p, newValue)\n     * }\n     * ```\n     *\n     * will be generated:\n     * ```js\n     * function test(j, p, newValue) {\n     *     j[\"prop\"] = 1;\n     *     j[p] = newValue;\n     * }\n     * }\n     * ```\n     */\n    operator fun set(propertyName: String, value: Any?): Unit\n}\n\n/**\n * Returns a simple JavaScript object (as [Json]) using provided key-value pairs as names and values of its properties.\n */\npublic fun json(vararg pairs: Pair<String, Any?>): Json {\n    val res: dynamic = js(\"({})\")\n    for ((name, value) in pairs) {\n        res[name] = value\n    }\n    return res\n}\n\n/**\n * Adds key-value pairs from [other] to [this].\n * Returns the original receiver.\n */\npublic fun Json.add(other: Json): Json {\n    val keys: Array<String> = js(\"Object\").keys(other)\n    for (key in keys) {\n        if (other.asDynamic().hasOwnProperty(key)) {\n            this[key] = other[key];\n        }\n    }\n    return this\n}\n\n/**\n * Exposes the JavaScript [JSON object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON) to Kotlin.\n */\n@Suppress(\"NOT_DOCUMENTED\")\npublic external object JSON {\n    public fun stringify(o: Any?): String\n    public fun stringify(o: Any?, replacer: ((key: String, value: Any?) -> Any?)): String\n    public fun stringify(o: Any?, replacer: ((key: String, value: Any?) -> Any?)? = definedExternally, space: Int): String\n    public fun stringify(o: Any?, replacer: ((key: String, value: Any?) -> Any?)? = definedExternally, space: String): String\n    public fun stringify(o: Any?, replacer: Array<String>): String\n    public fun stringify(o: Any?, replacer: Array<String>, space: Int): String\n    public fun stringify(o: Any?, replacer: Array<String>, space: String): String\n\n    public fun <T> parse(text: String): T\n    public fun <T> parse(text: String, reviver: ((key: String, value: Any?) -> Any?)): T\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.js\n\n/**\n * Reinterprets this value as a value of the [dynamic type](/docs/reference/dynamic-type.html).\n */\n@kotlin.internal.InlineOnly\npublic inline fun Any?.asDynamic(): dynamic = this\n\n/**\n * Reinterprets this value as a value of the specified type [T] without any actual type checking.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Any?.unsafeCast(): @kotlin.internal.NoInfer T = this.asDynamic()\n\n/**\n * Reinterprets this `dynamic` value as a value of the specified type [T] without any actual type checking.\n */\n@kotlin.internal.DynamicExtension\n@JsName(\"unsafeCastDynamic\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> dynamic.unsafeCast(): @kotlin.internal.NoInfer T = this\n\n/**\n * Allows to iterate this `dynamic` object in the following cases:\n * - when it has an `iterator` function,\n * - when it is an array\n * - when it is an instance of [kotlin.collections.Iterable]\n */\n@kotlin.internal.DynamicExtension\npublic operator fun dynamic.iterator(): Iterator<dynamic> {\n    val r: Any? = this\n\n    return when {\n        this[\"iterator\"] != null ->\n            this[\"iterator\"]()\n        isArrayish(r) ->\n            r.unsafeCast<Array<*>>().iterator()\n\n        else ->\n            (r as Iterable<*>).iterator()\n    }\n}\n","/*\n * Copyright 2010-2021 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin\n\n/**\n * Returns `true` if the specified number is a\n * Not-a-Number (NaN) value, `false` otherwise.\n */\npublic actual fun Double.isNaN(): Boolean = this != this\n\n/**\n * Returns `true` if the specified number is a\n * Not-a-Number (NaN) value, `false` otherwise.\n */\npublic actual fun Float.isNaN(): Boolean = this != this\n\n/**\n * Returns `true` if this value is infinitely large in magnitude.\n */\npublic actual fun Double.isInfinite(): Boolean = this == Double.POSITIVE_INFINITY || this == Double.NEGATIVE_INFINITY\n\n/**\n * Returns `true` if this value is infinitely large in magnitude.\n */\npublic actual fun Float.isInfinite(): Boolean = this == Float.POSITIVE_INFINITY || this == Float.NEGATIVE_INFINITY\n\n/**\n * Returns `true` if the argument is a finite floating-point value; returns `false` otherwise (for `NaN` and infinity arguments).\n */\npublic actual fun Double.isFinite(): Boolean = !isInfinite() && !isNaN()\n\n/**\n * Returns `true` if the argument is a finite floating-point value; returns `false` otherwise (for `NaN` and infinity arguments).\n */\npublic actual fun Float.isFinite(): Boolean = !isInfinite() && !isNaN()\n\n\n/**\n * Counts the number of set bits in the binary representation of this [Int] number.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic actual fun Int.countOneBits(): Int {\n    // Hacker's Delight 5-1 algorithm\n    var v = this\n    v = (v and 0x55555555) + (v.ushr(1) and 0x55555555)\n    v = (v and 0x33333333) + (v.ushr(2) and 0x33333333)\n    v = (v and 0x0F0F0F0F) + (v.ushr(4) and 0x0F0F0F0F)\n    v = (v and 0x00FF00FF) + (v.ushr(8) and 0x00FF00FF)\n    v = (v and 0x0000FFFF) + (v.ushr(16))\n    return v\n}\n\n/**\n * Counts the number of consecutive most significant bits that are zero in the binary representation of this [Int] number.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic actual inline fun Int.countLeadingZeroBits(): Int = JsMath.clz32(this)\n\n/**\n * Counts the number of consecutive least significant bits that are zero in the binary representation of this [Int] number.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic actual fun Int.countTrailingZeroBits(): Int =\n    // Hacker's Delight 5-4 algorithm for expressing countTrailingZeroBits with countLeadingZeroBits\n    Int.SIZE_BITS - (this or -this).inv().countLeadingZeroBits()\n\n/**\n * Returns a number having a single bit set in the position of the most significant set bit of this [Int] number,\n * or zero, if this number is zero.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic actual fun Int.takeHighestOneBit(): Int =\n    if (this == 0) 0 else 1.shl(Int.SIZE_BITS - 1 - countLeadingZeroBits())\n\n/**\n * Returns a number having a single bit set in the position of the least significant set bit of this [Int] number,\n * or zero, if this number is zero.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic actual fun Int.takeLowestOneBit(): Int =\n    // Hacker's Delight 2-1 algorithm for isolating rightmost 1-bit\n    this and -this\n\n/**\n * Rotates the binary representation of this [Int] number left by the specified [bitCount] number of bits.\n * The most significant bits pushed out from the left side reenter the number as the least significant bits on the right side.\n *\n * Rotating the number left by a negative bit count is the same as rotating it right by the negated bit count:\n * `number.rotateLeft(-n) == number.rotateRight(n)`\n *\n * Rotating by a multiple of [Int.SIZE_BITS] (32) returns the same number, or more generally\n * `number.rotateLeft(n) == number.rotateLeft(n % 32)`\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic actual fun Int.rotateLeft(bitCount: Int): Int =\n    shl(bitCount) or ushr(Int.SIZE_BITS - bitCount)\n\n\n/**\n * Rotates the binary representation of this [Int] number right by the specified [bitCount] number of bits.\n * The least significant bits pushed out from the right side reenter the number as the most significant bits on the left side.\n *\n * Rotating the number right by a negative bit count is the same as rotating it left by the negated bit count:\n * `number.rotateRight(-n) == number.rotateLeft(n)`\n *\n * Rotating by a multiple of [Int.SIZE_BITS] (32) returns the same number, or more generally\n * `number.rotateRight(n) == number.rotateRight(n % 32)`\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic actual fun Int.rotateRight(bitCount: Int): Int =\n    shl(Int.SIZE_BITS - bitCount) or ushr(bitCount)\n\n\n/**\n * Counts the number of set bits in the binary representation of this [Long] number.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic actual fun Long.countOneBits(): Int =\n    high.countOneBits() + low.countOneBits()\n\n/**\n * Counts the number of consecutive most significant bits that are zero in the binary representation of this [Long] number.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic actual fun Long.countLeadingZeroBits(): Int =\n    when (val high = this.high) {\n        0 -> Int.SIZE_BITS + low.countLeadingZeroBits()\n        else -> high.countLeadingZeroBits()\n    }\n\n/**\n * Counts the number of consecutive least significant bits that are zero in the binary representation of this [Long] number.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic actual fun Long.countTrailingZeroBits(): Int =\n    when (val low = this.low) {\n        0 -> Int.SIZE_BITS + high.countTrailingZeroBits()\n        else -> low.countTrailingZeroBits()\n    }\n\n/**\n * Returns a number having a single bit set in the position of the most significant set bit of this [Long] number,\n * or zero, if this number is zero.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic actual fun Long.takeHighestOneBit(): Long =\n    when (val high = this.high) {\n        0 -> Long(low.takeHighestOneBit(), 0)\n        else -> Long(0, high.takeHighestOneBit())\n    }\n\n/**\n * Returns a number having a single bit set in the position of the least significant set bit of this [Long] number,\n * or zero, if this number is zero.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic actual fun Long.takeLowestOneBit(): Long =\n    when (val low = this.low) {\n        0 -> Long(0, high.takeLowestOneBit())\n        else -> Long(low.takeLowestOneBit(), 0)\n    }\n\n/**\n * Rotates the binary representation of this [Long] number left by the specified [bitCount] number of bits.\n * The most significant bits pushed out from the left side reenter the number as the least significant bits on the right side.\n *\n * Rotating the number left by a negative bit count is the same as rotating it right by the negated bit count:\n * `number.rotateLeft(-n) == number.rotateRight(n)`\n *\n * Rotating by a multiple of [Long.SIZE_BITS] (64) returns the same number, or more generally\n * `number.rotateLeft(n) == number.rotateLeft(n % 64)`\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic actual fun Long.rotateLeft(bitCount: Int): Long {\n    if ((bitCount and 31) != 0) {\n        val low = this.low\n        val high = this.high\n        val newLow = low.shl(bitCount) or high.ushr(-bitCount)\n        val newHigh = high.shl(bitCount) or low.ushr(-bitCount)\n        return if ((bitCount and 32) == 0) Long(newLow, newHigh) else Long(newHigh, newLow)\n    } else {\n        return if ((bitCount and 32) == 0) this else Long(high, low)\n    }\n}\n\n\n/**\n * Rotates the binary representation of this [Long] number right by the specified [bitCount] number of bits.\n * The least significant bits pushed out from the right side reenter the number as the most significant bits on the left side.\n *\n * Rotating the number right by a negative bit count is the same as rotating it left by the negated bit count:\n * `number.rotateRight(-n) == number.rotateLeft(n)`\n *\n * Rotating by a multiple of [Long.SIZE_BITS] (64) returns the same number, or more generally\n * `number.rotateRight(n) == number.rotateRight(n % 64)`\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic actual inline fun Long.rotateRight(bitCount: Int): Long = rotateLeft(-bitCount)\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.js\n\nimport kotlin.internal.LowPriorityInOverloadResolution\n\n/**\n * Exposes the JavaScript [Promise object](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Promise) to Kotlin.\n */\n@Suppress(\"NOT_DOCUMENTED\")\npublic open external class Promise<out T>(executor: (resolve: (T) -> Unit, reject: (Throwable) -> Unit) -> Unit) {\n    @LowPriorityInOverloadResolution\n    public open fun <S> then(onFulfilled: ((T) -> S)?): Promise<S>\n\n    @LowPriorityInOverloadResolution\n    public open fun <S> then(onFulfilled: ((T) -> S)?, onRejected: ((Throwable) -> S)?): Promise<S>\n\n    public open fun <S> catch(onRejected: (Throwable) -> S): Promise<S>\n\n    companion object {\n        public fun <S> all(promise: Array<out Promise<S>>): Promise<Array<out S>>\n\n        public fun <S> race(promise: Array<out Promise<S>>): Promise<S>\n\n        public fun reject(e: Throwable): Promise<Nothing>\n\n        public fun <S> resolve(e: S): Promise<S>\n        public fun <S> resolve(e: Promise<S>): Promise<S>\n    }\n}\n\n// It's workaround for KT-19672 since we can fix it properly until KT-11265 isn't fixed.\ninline fun <T, S> Promise<Promise<T>>.then(\n    noinline onFulfilled: ((T) -> S)?\n): Promise<S> {\n    return this.unsafeCast<Promise<T>>().then(onFulfilled)\n}\n\ninline fun <T, S> Promise<Promise<T>>.then(\n    noinline onFulfilled: ((T) -> S)?,\n    noinline onRejected: ((Throwable) -> S)?\n): Promise<S> {\n    return this.unsafeCast<Promise<T>>().then(onFulfilled, onRejected)\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.random\n\nimport kotlin.math.pow\n\ninternal actual fun defaultPlatformRandom(): Random =\n    Random(js(\"(Math.random() * Math.pow(2, 32)) | 0\").unsafeCast<Int>())\n\n\nprivate val INV_2_26: Double = 2.0.pow(-26)\nprivate val INV_2_53: Double = 2.0.pow(-53)\ninternal actual fun doubleFromParts(hi26: Int, low27: Int): Double =\n    hi26 * INV_2_26 + low27 * INV_2_53","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.reflect\n\nimport findAssociatedObject\n\n/**\n * The experimental marker for associated objects API.\n *\n * Any usage of a declaration annotated with `@ExperimentalAssociatedObjects` must be accepted either by\n * annotating that usage with the [OptIn] annotation, e.g. `@OptIn(ExperimentalAssociatedObjects::class)`,\n * or by using the compiler argument `-Xopt-in=kotlin.reflect.ExperimentalAssociatedObjects`.\n */\n@RequiresOptIn(level = RequiresOptIn.Level.ERROR)\n@Retention(value = AnnotationRetention.BINARY)\npublic annotation class ExperimentalAssociatedObjects\n\n/**\n * Makes the annotated annotation class an associated object key.\n *\n * An associated object key annotation should have single [KClass] parameter.\n * When applied to a class with reference to an object declaration as an argument, it binds\n * the object to the class, making this binding discoverable at runtime using [findAssociatedObject].\n */\n@ExperimentalAssociatedObjects\n@Retention(AnnotationRetention.BINARY)\n@Target(AnnotationTarget.ANNOTATION_CLASS)\npublic annotation class AssociatedObjectKey\n\n/**\n * If [T] is an @[AssociatedObjectKey]-annotated annotation class and [this] class is annotated with @[T] (`S::class`),\n * returns object `S`.\n *\n * Otherwise returns `null`.\n */\n@ExperimentalAssociatedObjects\npublic inline fun <reified T : Annotation> KClass<*>.findAssociatedObject(): Any? =\n    this.findAssociatedObject(T::class)","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.reflect.js.internal\n\nimport kotlin.reflect.*\n\ninternal abstract class KClassImpl<T : Any>(\n    internal open val jClass: JsClass<T>\n) : KClass<T> {\n\n    override val qualifiedName: String?\n        get() = TODO()\n\n    override fun equals(other: Any?): Boolean {\n        return other is KClassImpl<*> && jClass == other.jClass\n    }\n\n    // TODO: use FQN\n    override fun hashCode(): Int = simpleName?.hashCode() ?: 0\n\n    override fun toString(): String {\n        // TODO: use FQN\n        return \"class $simpleName\"\n    }\n}\n\ninternal class SimpleKClassImpl<T : Any>(jClass: JsClass<T>) : KClassImpl<T>(jClass) {\n    override val simpleName: String? = jClass.asDynamic().`$metadata$`?.simpleName.unsafeCast<String?>()\n\n    override fun isInstance(value: Any?): Boolean {\n        return jsIsType(value, jClass)\n    }\n}\n\ninternal class PrimitiveKClassImpl<T : Any>(\n    jClass: JsClass<T>,\n    private val givenSimpleName: String,\n    private val isInstanceFunction: (Any?) -> Boolean\n) : KClassImpl<T>(jClass) {\n    override fun equals(other: Any?): Boolean {\n        if (other !is PrimitiveKClassImpl<*>) return false\n        return super.equals(other) && givenSimpleName == other.givenSimpleName\n    }\n\n    override val simpleName: String? get() = givenSimpleName\n\n    override fun isInstance(value: Any?): Boolean {\n        return isInstanceFunction(value)\n    }\n}\n\ninternal object NothingKClassImpl : KClassImpl<Nothing>(js(\"Object\")) {\n    override val simpleName: String = \"Nothing\"\n\n    override fun isInstance(value: Any?): Boolean = false\n\n    override val jClass: JsClass<Nothing>\n        get() = throw UnsupportedOperationException(\"There's no native JS class for Nothing type\")\n\n    override fun equals(other: Any?): Boolean = other === this\n\n    override fun hashCode(): Int = 0\n}\n\ninternal class ErrorKClass : KClass<Nothing> {\n    override val simpleName: String? get() = error(\"Unknown simpleName for ErrorKClass\")\n    override val qualifiedName: String? get() = error(\"Unknown qualifiedName for ErrorKClass\")\n\n    override fun isInstance(value: Any?): Boolean = error(\"Can's check isInstance on ErrorKClass\")\n\n    override fun equals(other: Any?): Boolean = other === this\n\n    override fun hashCode(): Int = 0\n}","/*\n * Copyright 2010-2019 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.reflect\n\ninternal actual inline val KClass<*>.qualifiedOrSimpleName: String?\n    get() = simpleName","/*\n * Copyright 2010-2019 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.reflect.js.internal\n\nimport kotlin.reflect.*\n\ninternal class KTypeImpl(\n    override val classifier: KClassifier,\n    override val arguments: List<KTypeProjection>,\n    override val isMarkedNullable: Boolean\n) : KType {\n    override fun equals(other: Any?): Boolean =\n        other is KTypeImpl &&\n                classifier == other.classifier && arguments == other.arguments && isMarkedNullable == other.isMarkedNullable\n\n    override fun hashCode(): Int =\n        (classifier.hashCode() * 31 + arguments.hashCode()) * 31 + isMarkedNullable.hashCode()\n\n    override fun toString(): String {\n        val kClass = (classifier as? KClass<*>)\n        val classifierName = when {\n            kClass == null -> classifier.toString()\n            kClass.simpleName != null -> kClass.simpleName\n            else -> \"(non-denotable type)\"\n        }\n\n        val args =\n            if (arguments.isEmpty()) \"\"\n            else arguments.joinToString(\", \", \"<\", \">\") { it.asString() }\n        val nullable = if (isMarkedNullable) \"?\" else \"\"\n\n        return classifierName + args + nullable\n    }\n\n    // TODO: this should be the implementation of KTypeProjection.toString, see KT-30071\n    private fun KTypeProjection.asString(): String {\n        if (variance == null) return \"*\"\n        return variance.prefixString() + type.toString()\n    }\n}\n\ninternal object DynamicKType : KType {\n    override val classifier: KClassifier? = null\n    override val arguments: List<KTypeProjection> = emptyList()\n    override val isMarkedNullable: Boolean = false\n    override fun toString(): String = \"dynamic\"\n}\n\ninternal fun KVariance.prefixString() =\n    when (this) {\n        KVariance.INVARIANT -> \"\"\n        KVariance.IN -> \"in \"\n        KVariance.OUT -> \"out \"\n    }\n","/*\n * Copyright 2010-2019 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.reflect.js.internal\n\nimport kotlin.reflect.*\n\ninternal data class KTypeParameterImpl(\n    override val name: String,\n    override val upperBounds: List<KType>,\n    override val variance: KVariance,\n    override val isReified: Boolean\n) : KTypeParameter {\n    override fun toString(): String = name\n}","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.reflect.js.internal\n\nimport kotlin.js.JsClass\n\n@JsName(\"PrimitiveClasses\")\ninternal object PrimitiveClasses {\n    @JsName(\"anyClass\")\n    val anyClass = PrimitiveKClassImpl(js(\"Object\").unsafeCast<JsClass<Any>>(), \"Any\", { it is Any })\n\n    @JsName(\"numberClass\")\n    val numberClass = PrimitiveKClassImpl(js(\"Number\").unsafeCast<JsClass<Number>>(), \"Number\", { it is Number })\n\n    @JsName(\"nothingClass\")\n    val nothingClass = NothingKClassImpl\n\n    @JsName(\"booleanClass\")\n    val booleanClass = PrimitiveKClassImpl(js(\"Boolean\").unsafeCast<JsClass<Boolean>>(), \"Boolean\", { it is Boolean })\n\n    @JsName(\"byteClass\")\n    val byteClass = PrimitiveKClassImpl(js(\"Number\").unsafeCast<JsClass<Byte>>(), \"Byte\", { it is Byte })\n\n    @JsName(\"shortClass\")\n    val shortClass = PrimitiveKClassImpl(js(\"Number\").unsafeCast<JsClass<Short>>(), \"Short\", { it is Short })\n\n    @JsName(\"intClass\")\n    val intClass = PrimitiveKClassImpl(js(\"Number\").unsafeCast<JsClass<Int>>(), \"Int\", { it is Int })\n\n    @JsName(\"floatClass\")\n    val floatClass = PrimitiveKClassImpl(js(\"Number\").unsafeCast<JsClass<Float>>(), \"Float\", { it is Float })\n\n    @JsName(\"doubleClass\")\n    val doubleClass = PrimitiveKClassImpl(js(\"Number\").unsafeCast<JsClass<Double>>(), \"Double\", { it is Double })\n\n    @JsName(\"arrayClass\")\n    val arrayClass = PrimitiveKClassImpl(js(\"Array\").unsafeCast<JsClass<Array<*>>>(), \"Array\", { it is Array<*> })\n\n    @JsName(\"stringClass\")\n    val stringClass = PrimitiveKClassImpl(js(\"String\").unsafeCast<JsClass<String>>(), \"String\", { it is String })\n\n    @JsName(\"throwableClass\")\n    val throwableClass = PrimitiveKClassImpl(js(\"Error\").unsafeCast<JsClass<Throwable>>(), \"Throwable\", { it is Throwable })\n\n    @JsName(\"booleanArrayClass\")\n    val booleanArrayClass = PrimitiveKClassImpl(js(\"Array\").unsafeCast<JsClass<BooleanArray>>(), \"BooleanArray\", { it is BooleanArray })\n\n    @JsName(\"charArrayClass\")\n    val charArrayClass = PrimitiveKClassImpl(js(\"Uint16Array\").unsafeCast<JsClass<CharArray>>(), \"CharArray\", { it is CharArray })\n\n    @JsName(\"byteArrayClass\")\n    val byteArrayClass = PrimitiveKClassImpl(js(\"Int8Array\").unsafeCast<JsClass<ByteArray>>(), \"ByteArray\", { it is ByteArray })\n\n    @JsName(\"shortArrayClass\")\n    val shortArrayClass = PrimitiveKClassImpl(js(\"Int16Array\").unsafeCast<JsClass<ShortArray>>(), \"ShortArray\", { it is ShortArray })\n\n    @JsName(\"intArrayClass\")\n    val intArrayClass = PrimitiveKClassImpl(js(\"Int32Array\").unsafeCast<JsClass<IntArray>>(), \"IntArray\", { it is IntArray })\n\n    @JsName(\"longArrayClass\")\n    val longArrayClass = PrimitiveKClassImpl(js(\"Array\").unsafeCast<JsClass<LongArray>>(), \"LongArray\", { it is LongArray })\n\n    @JsName(\"floatArrayClass\")\n    val floatArrayClass = PrimitiveKClassImpl(js(\"Float32Array\").unsafeCast<JsClass<FloatArray>>(), \"FloatArray\", { it is FloatArray })\n\n    @JsName(\"doubleArrayClass\")\n    val doubleArrayClass = PrimitiveKClassImpl(js(\"Float64Array\").unsafeCast<JsClass<DoubleArray>>(), \"DoubleArray\", { it is DoubleArray })\n\n    @JsName(\"functionClass\")\n    fun functionClass(arity: Int): KClassImpl<Any> {\n        return functionClasses.get(arity) ?: run {\n            val result = PrimitiveKClassImpl(js(\"Function\").unsafeCast<JsClass<Any>>(), \"Function$arity\",\n                                             { jsTypeOf(it) === \"function\" && it.asDynamic().length === arity })\n            functionClasses.asDynamic()[arity] = result\n            result\n        }\n    }\n}\n\nprivate val functionClasses = arrayOfNulls<KClassImpl<Any>>(0)","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n// a package is omitted to get declarations directly under the module\n\nimport kotlin.reflect.*\nimport kotlin.reflect.js.internal.*\n\n@JsName(\"getKClass\")\ninternal fun <T : Any> getKClass(jClass: Any /* JsClass<T> | Array<JsClass<T>> */): KClass<T> {\n    return if (js(\"Array\").isArray(jClass)) {\n        getKClassM(jClass.unsafeCast<Array<JsClass<T>>>())\n    } else {\n        getKClass1(jClass.unsafeCast<JsClass<T>>())\n    }\n}\n\n@JsName(\"getKClassM\")\ninternal fun <T : Any> getKClassM(jClasses: Array<JsClass<T>>): KClass<T> = when (jClasses.size) {\n    1 -> getKClass1(jClasses[0])\n    0 -> NothingKClassImpl.unsafeCast<KClass<T>>()\n    else -> ErrorKClass().unsafeCast<KClass<T>>()\n}\n\n@JsName(\"getKClassFromExpression\")\ninternal fun <T : Any> getKClassFromExpression(e: T): KClass<T> =\n    when (jsTypeOf(e)) {\n        \"string\" -> PrimitiveClasses.stringClass\n        \"number\" -> if (jsBitwiseOr(e, 0).asDynamic() === e) PrimitiveClasses.intClass else PrimitiveClasses.doubleClass\n        \"boolean\" -> PrimitiveClasses.booleanClass\n        \"function\" -> PrimitiveClasses.functionClass(e.asDynamic().length)\n        else -> {\n            when {\n                e is BooleanArray -> PrimitiveClasses.booleanArrayClass\n                e is CharArray -> PrimitiveClasses.charArrayClass\n                e is ByteArray -> PrimitiveClasses.byteArrayClass\n                e is ShortArray -> PrimitiveClasses.shortArrayClass\n                e is IntArray -> PrimitiveClasses.intArrayClass\n                e is LongArray -> PrimitiveClasses.longArrayClass\n                e is FloatArray -> PrimitiveClasses.floatArrayClass\n                e is DoubleArray -> PrimitiveClasses.doubleArrayClass\n                e is KClass<*> -> KClass::class\n                e is Array<*> -> PrimitiveClasses.arrayClass\n                else -> {\n                    val constructor = js(\"Object\").getPrototypeOf(e).constructor\n                    when {\n                        constructor === js(\"Object\") -> PrimitiveClasses.anyClass\n                        constructor === js(\"Error\") -> PrimitiveClasses.throwableClass\n                        else -> {\n                            val jsClass: JsClass<T> = constructor\n                            getKClass1(jsClass)\n                        }\n                    }\n                }\n            }\n        }\n    }.unsafeCast<KClass<T>>()\n\n@JsName(\"getKClass1\")\ninternal fun <T : Any> getKClass1(jClass: JsClass<T>): KClass<T> {\n    if (jClass === js(\"String\")) return PrimitiveClasses.stringClass.unsafeCast<KClass<T>>()\n\n    val metadata = jClass.asDynamic().`$metadata$`\n\n    return if (metadata != null) {\n        if (metadata.`$kClass$` == null) {\n            val kClass = SimpleKClassImpl(jClass)\n            metadata.`$kClass$` = kClass\n            kClass\n        } else {\n            metadata.`$kClass$`\n        }\n    } else {\n        SimpleKClassImpl(jClass)\n    }\n}","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.js\n\n/**\n * Exposes the JavaScript [RegExp object](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/RegExp) to Kotlin.\n */\n@Suppress(\"NOT_DOCUMENTED\")\npublic external class RegExp(pattern: String, flags: String? = definedExternally) {\n\n    public fun test(str: String): Boolean\n\n    public fun exec(str: String): RegExpMatch?\n\n    public override fun toString(): String\n\n    /**\n     * The lastIndex is a read/write integer property of regular expressions that specifies the index at which to start the next match.\n     */\n    public var lastIndex: Int\n\n    public val global: Boolean\n    public val ignoreCase: Boolean\n    public val multiline: Boolean\n}\n\n/**\n * Resets the regular expression so that subsequent [RegExp.test] and [RegExp.exec] calls will match starting with the beginning of the input string.\n */\npublic fun RegExp.reset() {\n    lastIndex = 0\n}\n\n// TODO: Inherit from array or introduce asArray() extension\n/**\n * Represents the return value of [RegExp.exec].\n */\n@Suppress(\"NOT_DOCUMENTED\")\npublic external interface RegExpMatch {\n    public val index: Int\n    public val input: String\n    public val length: Int\n}\n\n/**\n * Returns the entire text matched by [RegExp.exec] if the [index] parameter is 0, or the text matched by the capturing parenthesis\n * at the given index.\n */\npublic inline operator fun RegExpMatch.get(index: Int): String? = asDynamic()[index]\n\n/**\n * Converts the result of [RegExp.exec] to an array where the first element contains the entire matched text and each subsequent\n * element is the text matched by each capturing parenthesis.\n */\npublic inline fun RegExpMatch.asArray(): Array<out String?> = unsafeCast<Array<out String?>>()\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.sequences\n\ninternal actual class ConstrainedOnceSequence<T> actual constructor(sequence: Sequence<T>) : Sequence<T> {\n    private var sequenceRef: Sequence<T>? = sequence\n\n    actual override fun iterator(): Iterator<T> {\n        val sequence = sequenceRef ?: throw IllegalStateException(\"This sequence can be consumed only once.\")\n        sequenceRef = null\n        return sequence.iterator()\n    }\n}\n","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.text\n\n@SinceKotlin(\"1.5\")\npublic actual enum class CharCategory(internal val value: Int, public actual val code: String) {\n    /**\n     * General category \"Cn\" in the Unicode specification.\n     */\n    UNASSIGNED(0, \"Cn\"),\n\n    /**\n     * General category \"Lu\" in the Unicode specification.\n     */\n    UPPERCASE_LETTER(1, \"Lu\"),\n\n    /**\n     * General category \"Ll\" in the Unicode specification.\n     */\n    LOWERCASE_LETTER(2, \"Ll\"),\n\n    /**\n     * General category \"Lt\" in the Unicode specification.\n     */\n    TITLECASE_LETTER(3, \"Lt\"),\n\n    /**\n     * General category \"Lm\" in the Unicode specification.\n     */\n    MODIFIER_LETTER(4, \"Lm\"),\n\n    /**\n     * General category \"Lo\" in the Unicode specification.\n     */\n    OTHER_LETTER(5, \"Lo\"),\n\n    /**\n     * General category \"Mn\" in the Unicode specification.\n     */\n    NON_SPACING_MARK(6, \"Mn\"),\n\n    /**\n     * General category \"Me\" in the Unicode specification.\n     */\n    ENCLOSING_MARK(7, \"Me\"),\n\n    /**\n     * General category \"Mc\" in the Unicode specification.\n     */\n    COMBINING_SPACING_MARK(8, \"Mc\"),\n\n    /**\n     * General category \"Nd\" in the Unicode specification.\n     */\n    DECIMAL_DIGIT_NUMBER(9, \"Nd\"),\n\n    /**\n     * General category \"Nl\" in the Unicode specification.\n     */\n    LETTER_NUMBER(10, \"Nl\"),\n\n    /**\n     * General category \"No\" in the Unicode specification.\n     */\n    OTHER_NUMBER(11, \"No\"),\n\n    /**\n     * General category \"Zs\" in the Unicode specification.\n     */\n    SPACE_SEPARATOR(12, \"Zs\"),\n\n    /**\n     * General category \"Zl\" in the Unicode specification.\n     */\n    LINE_SEPARATOR(13, \"Zl\"),\n\n    /**\n     * General category \"Zp\" in the Unicode specification.\n     */\n    PARAGRAPH_SEPARATOR(14, \"Zp\"),\n\n    /**\n     * General category \"Cc\" in the Unicode specification.\n     */\n    CONTROL(15, \"Cc\"),\n\n    /**\n     * General category \"Cf\" in the Unicode specification.\n     */\n    FORMAT(16, \"Cf\"),\n\n    /**\n     * General category \"Co\" in the Unicode specification.\n     */\n    PRIVATE_USE(18, \"Co\"),\n\n    /**\n     * General category \"Cs\" in the Unicode specification.\n     */\n    SURROGATE(19, \"Cs\"),\n\n    /**\n     * General category \"Pd\" in the Unicode specification.\n     */\n    DASH_PUNCTUATION(20, \"Pd\"),\n\n    /**\n     * General category \"Ps\" in the Unicode specification.\n     */\n    START_PUNCTUATION(21, \"Ps\"),\n\n    /**\n     * General category \"Pe\" in the Unicode specification.\n     */\n    END_PUNCTUATION(22, \"Pe\"),\n\n    /**\n     * General category \"Pc\" in the Unicode specification.\n     */\n    CONNECTOR_PUNCTUATION(23, \"Pc\"),\n\n    /**\n     * General category \"Po\" in the Unicode specification.\n     */\n    OTHER_PUNCTUATION(24, \"Po\"),\n\n    /**\n     * General category \"Sm\" in the Unicode specification.\n     */\n    MATH_SYMBOL(25, \"Sm\"),\n\n    /**\n     * General category \"Sc\" in the Unicode specification.\n     */\n    CURRENCY_SYMBOL(26, \"Sc\"),\n\n    /**\n     * General category \"Sk\" in the Unicode specification.\n     */\n    MODIFIER_SYMBOL(27, \"Sk\"),\n\n    /**\n     * General category \"So\" in the Unicode specification.\n     */\n    OTHER_SYMBOL(28, \"So\"),\n\n    /**\n     * General category \"Pi\" in the Unicode specification.\n     */\n    INITIAL_QUOTE_PUNCTUATION(29, \"Pi\"),\n\n    /**\n     * General category \"Pf\" in the Unicode specification.\n     */\n    FINAL_QUOTE_PUNCTUATION(30, \"Pf\");\n\n    /**\n     * Returns `true` if [char] character belongs to this category.\n     */\n    public actual operator fun contains(char: Char): Boolean = char.getCategoryValue() == this.value\n\n    companion object {\n        internal fun valueOf(category: Int): CharCategory =\n            when (category) {\n                in 0..16 -> values()[category]\n                in 18..30 -> values()[category - 1]\n                else -> throw IllegalArgumentException(\"Category #$category is not defined.\")\n            }\n    }\n}\n","/*\n * Copyright 2010-2019 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.text\n\n/**\n *  The exception thrown when a character encoding or decoding error occurs.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic actual open class CharacterCodingException(message: String?) : Exception(message) {\n    actual constructor() : this(null)\n}\n","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.text\n\n/**\n * A mutable sequence of characters.\n *\n * String builder can be used to efficiently perform multiple string manipulation operations.\n */\npublic actual class StringBuilder actual constructor(content: String) : Appendable, CharSequence {\n    /**\n     * Constructs an empty string builder with the specified initial [capacity].\n     *\n     * In Kotlin/JS implementation of StringBuilder the initial capacity has no effect on the further performance of operations.\n     */\n    actual constructor(capacity: Int) : this() {\n    }\n\n    /** Constructs a string builder that contains the same characters as the specified [content] char sequence. */\n    actual constructor(content: CharSequence) : this(content.toString()) {}\n\n    /** Constructs an empty string builder. */\n    actual constructor() : this(\"\")\n\n    private var string: String = if (content !== undefined) content else \"\"\n\n    actual override val length: Int\n        get() = string.asDynamic().length\n\n    actual override fun get(index: Int): Char =\n        string.getOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, length: $length}\") }\n\n    actual override fun subSequence(startIndex: Int, endIndex: Int): CharSequence = string.substring(startIndex, endIndex)\n\n    actual override fun append(value: Char): StringBuilder {\n        string += value\n        return this\n    }\n\n    actual override fun append(value: CharSequence?): StringBuilder {\n        string += value.toString()\n        return this\n    }\n\n    actual override fun append(value: CharSequence?, startIndex: Int, endIndex: Int): StringBuilder =\n        this.appendRange(value ?: \"null\", startIndex, endIndex)\n\n    /**\n     * Reverses the contents of this string builder and returns this instance.\n     *\n     * Surrogate pairs included in this string builder are treated as single characters.\n     * Therefore, the order of the high-low surrogates is never reversed.\n     *\n     * Note that the reverse operation may produce new surrogate pairs that were unpaired low-surrogates and high-surrogates before the operation.\n     * For example, reversing `\"\\uDC00\\uD800\"` produces `\"\\uD800\\uDC00\"` which is a valid surrogate pair.\n     */\n    actual fun reverse(): StringBuilder {\n        var reversed = \"\"\n        var index = string.length - 1\n        while (index >= 0) {\n            val low = string[index--]\n            if (low.isLowSurrogate() && index >= 0) {\n                val high = string[index--]\n                if (high.isHighSurrogate()) {\n                    reversed = reversed + high + low\n                } else {\n                    reversed = reversed + low + high\n                }\n            } else {\n                reversed += low\n            }\n        }\n        string = reversed\n        return this\n    }\n\n    /**\n     * Appends the string representation of the specified object [value] to this string builder and returns this instance.\n     *\n     * The overall effect is exactly as if the [value] were converted to a string by the `value.toString()` method,\n     * and then that string was appended to this string builder.\n     */\n    actual fun append(value: Any?): StringBuilder {\n        string += value.toString()\n        return this\n    }\n\n    /**\n     * Appends the string representation of the specified boolean [value] to this string builder and returns this instance.\n     *\n     * The overall effect is exactly as if the [value] were converted to a string by the `value.toString()` method,\n     * and then that string was appended to this string builder.\n     */\n    @SinceKotlin(\"1.3\")\n    actual fun append(value: Boolean): StringBuilder {\n        string += value\n        return this\n    }\n\n    /**\n     * Appends characters in the specified character array [value] to this string builder and returns this instance.\n     *\n     * Characters are appended in order, starting at the index 0.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    actual fun append(value: CharArray): StringBuilder {\n        @OptIn(ExperimentalStdlibApi::class)\n        string += value.concatToString()\n        return this\n    }\n\n    @Deprecated(\"Provided for binary compatibility.\", level = DeprecationLevel.HIDDEN)\n    fun append(value: String): StringBuilder = append(value)\n\n    /**\n     * Appends the specified string [value] to this string builder and returns this instance.\n     *\n     * If [value] is `null`, then the four characters `\"null\"` are appended.\n     */\n    @SinceKotlin(\"1.3\")\n    actual fun append(value: String?): StringBuilder {\n        this.string += value ?: \"null\"\n        return this\n    }\n\n    /**\n     * Returns the current capacity of this string builder.\n     *\n     * The capacity is the maximum length this string builder can have before an allocation occurs.\n     *\n     * In Kotlin/JS implementation of StringBuilder the value returned from this method may not indicate the actual size of the backing storage.\n     */\n    @SinceKotlin(\"1.3\")\n//    @ExperimentalStdlibApi\n    @Deprecated(\"Obtaining StringBuilder capacity is not supported in JS and common code.\", level = DeprecationLevel.ERROR)\n    actual fun capacity(): Int = length\n\n    /**\n     * Ensures that the capacity of this string builder is at least equal to the specified [minimumCapacity].\n     *\n     * If the current capacity is less than the [minimumCapacity], a new backing storage is allocated with greater capacity.\n     * Otherwise, this method takes no action and simply returns.\n     *\n     * In Kotlin/JS implementation of StringBuilder the size of the backing storage is not extended to comply the given [minimumCapacity],\n     * thus calling this method has no effect on the further performance of operations.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    actual fun ensureCapacity(minimumCapacity: Int) {\n    }\n\n    /**\n     * Returns the index within this string builder of the first occurrence of the specified [string].\n     *\n     * Returns `-1` if the specified [string] does not occur in this string builder.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    actual fun indexOf(string: String): Int = this.string.asDynamic().indexOf(string)\n\n    /**\n     * Returns the index within this string builder of the first occurrence of the specified [string],\n     * starting at the specified [startIndex].\n     *\n     * Returns `-1` if the specified [string] does not occur in this string builder starting at the specified [startIndex].\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    actual fun indexOf(string: String, startIndex: Int): Int = this.string.asDynamic().indexOf(string, startIndex)\n\n    /**\n     * Returns the index within this string builder of the last occurrence of the specified [string].\n     * The last occurrence of empty string `\"\"` is considered to be at the index equal to `this.length`.\n     *\n     * Returns `-1` if the specified [string] does not occur in this string builder.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    actual fun lastIndexOf(string: String): Int = this.string.asDynamic().lastIndexOf(string)\n\n    /**\n     * Returns the index within this string builder of the last occurrence of the specified [string],\n     * starting from the specified [startIndex] toward the beginning.\n     *\n     * Returns `-1` if the specified [string] does not occur in this string builder starting at the specified [startIndex].\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    actual fun lastIndexOf(string: String, startIndex: Int): Int {\n        if (string.isEmpty() && startIndex < 0) return -1\n        return this.string.asDynamic().lastIndexOf(string, startIndex)\n    }\n\n    /**\n     * Inserts the string representation of the specified boolean [value] into this string builder at the specified [index] and returns this instance.\n     *\n     * The overall effect is exactly as if the [value] were converted to a string by the `value.toString()` method,\n     * and then that string was inserted into this string builder at the specified [index].\n     *\n     * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    actual fun insert(index: Int, value: Boolean): StringBuilder {\n        AbstractList.checkPositionIndex(index, length)\n\n        string = string.substring(0, index) + value + string.substring(index)\n        return this\n    }\n\n    /**\n     * Inserts the specified character [value] into this string builder at the specified [index] and returns this instance.\n     *\n     * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    actual fun insert(index: Int, value: Char): StringBuilder {\n        AbstractList.checkPositionIndex(index, length)\n\n        string = string.substring(0, index) + value + string.substring(index)\n        return this\n    }\n\n    /**\n     * Inserts characters in the specified character array [value] into this string builder at the specified [index] and returns this instance.\n     *\n     * The inserted characters go in same order as in the [value] character array, starting at [index].\n     *\n     * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    actual fun insert(index: Int, value: CharArray): StringBuilder {\n        AbstractList.checkPositionIndex(index, length)\n\n        @OptIn(ExperimentalStdlibApi::class)\n        string = string.substring(0, index) + value.concatToString() + string.substring(index)\n        return this\n    }\n\n    /**\n     * Inserts characters in the specified character sequence [value] into this string builder at the specified [index] and returns this instance.\n     *\n     * The inserted characters go in the same order as in the [value] character sequence, starting at [index].\n     *\n     * @param index the position in this string builder to insert at.\n     * @param value the character sequence from which characters are inserted. If [value] is `null`, then the four characters `\"null\"` are inserted.\n     *\n     * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    actual fun insert(index: Int, value: CharSequence?): StringBuilder {\n        AbstractList.checkPositionIndex(index, length)\n\n        string = string.substring(0, index) + value.toString() + string.substring(index)\n        return this\n    }\n\n    /**\n     * Inserts the string representation of the specified object [value] into this string builder at the specified [index] and returns this instance.\n     *\n     * The overall effect is exactly as if the [value] were converted to a string by the `value.toString()` method,\n     * and then that string was inserted into this string builder at the specified [index].\n     *\n     * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    actual fun insert(index: Int, value: Any?): StringBuilder {\n        AbstractList.checkPositionIndex(index, length)\n\n        string = string.substring(0, index) + value.toString() + string.substring(index)\n        return this\n    }\n\n    @Deprecated(\"Provided for binary compatibility.\", level = DeprecationLevel.HIDDEN)\n    fun insert(index: Int, value: String): StringBuilder = insert(index, value)\n\n    /**\n     * Inserts the string [value] into this string builder at the specified [index] and returns this instance.\n     *\n     * If [value] is `null`, then the four characters `\"null\"` are inserted.\n     *\n     * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    actual fun insert(index: Int, value: String?): StringBuilder {\n        AbstractList.checkPositionIndex(index, length)\n\n        val toInsert = value ?: \"null\"\n        this.string = this.string.substring(0, index) + toInsert + this.string.substring(index)\n        return this\n    }\n\n    /**\n     *  Sets the length of this string builder to the specified [newLength].\n     *\n     *  If the [newLength] is less than the current length, it is changed to the specified [newLength].\n     *  Otherwise, null characters '\\u0000' are appended to this string builder until its length is less than the [newLength].\n     *\n     *  Note that in Kotlin/JS [set] operator function has non-constant execution time complexity.\n     *  Therefore, increasing length of this string builder and then updating each character by index may slow down your program.\n     *\n     *  @throws IndexOutOfBoundsException or [IllegalArgumentException] if [newLength] is less than zero.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    actual fun setLength(newLength: Int) {\n        if (newLength < 0) {\n            throw IllegalArgumentException(\"Negative new length: $newLength.\")\n        }\n\n        if (newLength <= length) {\n            string = string.substring(0, newLength)\n        } else {\n            for (i in length until newLength) {\n                string += '\\u0000'\n            }\n        }\n    }\n\n    /**\n     * Returns a new [String] that contains characters in this string builder at [startIndex] (inclusive) and up to the [length] (exclusive).\n     *\n     * @throws IndexOutOfBoundsException if [startIndex] is less than zero or greater than the length of this string builder.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    actual fun substring(startIndex: Int): String {\n        AbstractList.checkPositionIndex(startIndex, length)\n\n        return string.substring(startIndex)\n    }\n\n    /**\n     * Returns a new [String] that contains characters in this string builder at [startIndex] (inclusive) and up to the [endIndex] (exclusive).\n     *\n     * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this string builder indices or when `startIndex > endIndex`.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    actual fun substring(startIndex: Int, endIndex: Int): String {\n        AbstractList.checkBoundsIndexes(startIndex, endIndex, length)\n\n        return string.substring(startIndex, endIndex)\n    }\n\n    /**\n     * Attempts to reduce storage used for this string builder.\n     *\n     * If the backing storage of this string builder is larger than necessary to hold its current contents,\n     * then it may be resized to become more space efficient.\n     * Calling this method may, but is not required to, affect the value of the [capacity] property.\n     *\n     * In Kotlin/JS implementation of StringBuilder the size of the backing storage is always equal to the length of the string builder.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    actual fun trimToSize() {\n    }\n\n    override fun toString(): String = string\n\n    /**\n     * Clears the content of this string builder making it empty and returns this instance.\n     *\n     * @sample samples.text.Strings.clearStringBuilder\n     */\n    @SinceKotlin(\"1.3\")\n    public fun clear(): StringBuilder {\n        string = \"\"\n        return this\n    }\n\n    /**\n     * Sets the character at the specified [index] to the specified [value].\n     *\n     * @throws IndexOutOfBoundsException if [index] is out of bounds of this string builder.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    public operator fun set(index: Int, value: Char) {\n        AbstractList.checkElementIndex(index, length)\n\n        string = string.substring(0, index) + value + string.substring(index + 1)\n    }\n\n    /**\n     * Replaces characters in the specified range of this string builder with characters in the specified string [value] and returns this instance.\n     *\n     * @param startIndex the beginning (inclusive) of the range to replace.\n     * @param endIndex the end (exclusive) of the range to replace.\n     * @param value the string to replace with.\n     *\n     * @throws IndexOutOfBoundsException or [IllegalArgumentException] if [startIndex] is less than zero, greater than the length of this string builder, or `startIndex > endIndex`.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    public fun setRange(startIndex: Int, endIndex: Int, value: String): StringBuilder {\n        checkReplaceRange(startIndex, endIndex, length)\n\n        this.string = this.string.substring(0, startIndex) + value + this.string.substring(endIndex)\n        return this\n    }\n\n    private fun checkReplaceRange(startIndex: Int, endIndex: Int, length: Int) {\n        if (startIndex < 0 || startIndex > length) {\n            throw IndexOutOfBoundsException(\"startIndex: $startIndex, length: $length\")\n        }\n        if (startIndex > endIndex) {\n            throw IllegalArgumentException(\"startIndex($startIndex) > endIndex($endIndex)\")\n        }\n    }\n\n    /**\n     * Removes the character at the specified [index] from this string builder and returns this instance.\n     *\n     * If the `Char` at the specified [index] is part of a supplementary code point, this method does not remove the entire supplementary character.\n     *\n     * @param index the index of `Char` to remove.\n     *\n     * @throws IndexOutOfBoundsException if [index] is out of bounds of this string builder.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    public fun deleteAt(index: Int): StringBuilder {\n        AbstractList.checkElementIndex(index, length)\n\n        string = string.substring(0, index) + string.substring(index + 1)\n        return this\n    }\n\n    /**\n     * Removes characters in the specified range from this string builder and returns this instance.\n     *\n     * @param startIndex the beginning (inclusive) of the range to remove.\n     * @param endIndex the end (exclusive) of the range to remove.\n     *\n     * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] is out of range of this string builder indices or when `startIndex > endIndex`.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    public fun deleteRange(startIndex: Int, endIndex: Int): StringBuilder {\n        checkReplaceRange(startIndex, endIndex, length)\n\n        string = string.substring(0, startIndex) + string.substring(endIndex)\n        return this\n    }\n\n    /**\n     * Copies characters from this string builder into the [destination] character array.\n     *\n     * @param destination the array to copy to.\n     * @param destinationOffset the position in the array to copy to, 0 by default.\n     * @param startIndex the beginning (inclusive) of the range to copy, 0 by default.\n     * @param endIndex the end (exclusive) of the range to copy, length of this string builder by default.\n     *\n     * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this string builder indices or when `startIndex > endIndex`.\n     * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n     *  or when that index is out of the [destination] array indices range.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    public fun toCharArray(destination: CharArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = this.length) {\n        AbstractList.checkBoundsIndexes(startIndex, endIndex, length)\n        AbstractList.checkBoundsIndexes(destinationOffset, destinationOffset + endIndex - startIndex, destination.size)\n\n        var dstIndex = destinationOffset\n        for (index in startIndex until endIndex) {\n            destination[dstIndex++] = string[index]\n        }\n    }\n\n    /**\n     * Appends characters in a subarray of the specified character array [value] to this string builder and returns this instance.\n     *\n     * Characters are appended in order, starting at specified [startIndex].\n     *\n     * @param value the array from which characters are appended.\n     * @param startIndex the beginning (inclusive) of the subarray to append.\n     * @param endIndex the end (exclusive) of the subarray to append.\n     *\n     * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of the [value] array indices or when `startIndex > endIndex`.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    public fun appendRange(value: CharArray, startIndex: Int, endIndex: Int): StringBuilder {\n        @OptIn(ExperimentalStdlibApi::class)\n        string += value.concatToString(startIndex, endIndex)\n        return this\n    }\n\n    /**\n     * Appends a subsequence of the specified character sequence [value] to this string builder and returns this instance.\n     *\n     * @param value the character sequence from which a subsequence is appended.\n     * @param startIndex the beginning (inclusive) of the subsequence to append.\n     * @param endIndex the end (exclusive) of the subsequence to append.\n     *\n     * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of the [value] character sequence indices or when `startIndex > endIndex`.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    public fun appendRange(value: CharSequence, startIndex: Int, endIndex: Int): StringBuilder {\n        val stringCsq = value.toString()\n        AbstractList.checkBoundsIndexes(startIndex, endIndex, stringCsq.length)\n\n        string += stringCsq.substring(startIndex, endIndex)\n        return this\n    }\n\n    /**\n     * Inserts characters in a subarray of the specified character array [value] into this string builder at the specified [index] and returns this instance.\n     *\n     * The inserted characters go in same order as in the [value] array, starting at [index].\n     *\n     * @param index the position in this string builder to insert at.\n     * @param value the array from which characters are inserted.\n     * @param startIndex the beginning (inclusive) of the subarray to insert.\n     * @param endIndex the end (exclusive) of the subarray to insert.\n     *\n     * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of the [value] array indices or when `startIndex > endIndex`.\n     * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    public fun insertRange(index: Int, value: CharArray, startIndex: Int, endIndex: Int): StringBuilder {\n        AbstractList.checkPositionIndex(index, this.length)\n\n        @OptIn(ExperimentalStdlibApi::class)\n        string = string.substring(0, index) + value.concatToString(startIndex, endIndex) + string.substring(index)\n        return this\n    }\n\n    /**\n     * Inserts characters in a subsequence of the specified character sequence [value] into this string builder at the specified [index] and returns this instance.\n     *\n     * The inserted characters go in the same order as in the [value] character sequence, starting at [index].\n     *\n     * @param index the position in this string builder to insert at.\n     * @param value the character sequence from which a subsequence is inserted.\n     * @param startIndex the beginning (inclusive) of the subsequence to insert.\n     * @param endIndex the end (exclusive) of the subsequence to insert.\n     *\n     * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of the [value] character sequence indices or when `startIndex > endIndex`.\n     * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    public fun insertRange(index: Int, value: CharSequence, startIndex: Int, endIndex: Int): StringBuilder {\n        AbstractList.checkPositionIndex(index, length)\n\n        val stringCsq = value.toString()\n        AbstractList.checkBoundsIndexes(startIndex, endIndex, stringCsq.length)\n\n        string = string.substring(0, index) + stringCsq.substring(startIndex, endIndex) + string.substring(index)\n        return this\n    }\n}\n\n\n/**\n * Clears the content of this string builder making it empty and returns this instance.\n *\n * @sample samples.text.Strings.clearStringBuilder\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\", \"NOTHING_TO_INLINE\")\npublic actual inline fun StringBuilder.clear(): StringBuilder = this.clear()\n\n/**\n * Sets the character at the specified [index] to the specified [value].\n *\n * @throws IndexOutOfBoundsException if [index] is out of bounds of this string builder.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\", \"NOTHING_TO_INLINE\")\npublic actual inline operator fun StringBuilder.set(index: Int, value: Char) = this.set(index, value)\n\n/**\n * Replaces characters in the specified range of this string builder with characters in the specified string [value] and returns this instance.\n *\n * @param startIndex the beginning (inclusive) of the range to replace.\n * @param endIndex the end (exclusive) of the range to replace.\n * @param value the string to replace with.\n *\n * @throws IndexOutOfBoundsException or [IllegalArgumentException] if [startIndex] is less than zero, greater than the length of this string builder, or `startIndex > endIndex`.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\", \"NOTHING_TO_INLINE\")\npublic actual inline fun StringBuilder.setRange(startIndex: Int, endIndex: Int, value: String): StringBuilder =\n    this.setRange(startIndex, endIndex, value)\n\n/**\n * Removes the character at the specified [index] from this string builder and returns this instance.\n *\n * If the `Char` at the specified [index] is part of a supplementary code point, this method does not remove the entire supplementary character.\n *\n * @param index the index of `Char` to remove.\n *\n * @throws IndexOutOfBoundsException if [index] is out of bounds of this string builder.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\", \"NOTHING_TO_INLINE\")\npublic actual inline fun StringBuilder.deleteAt(index: Int): StringBuilder = this.deleteAt(index)\n\n/**\n * Removes characters in the specified range from this string builder and returns this instance.\n *\n * @param startIndex the beginning (inclusive) of the range to remove.\n * @param endIndex the end (exclusive) of the range to remove.\n *\n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] is out of range of this string builder indices or when `startIndex > endIndex`.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\", \"NOTHING_TO_INLINE\")\npublic actual inline fun StringBuilder.deleteRange(startIndex: Int, endIndex: Int): StringBuilder = this.deleteRange(startIndex, endIndex)\n\n/**\n * Copies characters from this string builder into the [destination] character array.\n *\n * @param destination the array to copy to.\n * @param destinationOffset the position in the array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the range to copy, 0 by default.\n * @param endIndex the end (exclusive) of the range to copy, length of this string builder by default.\n *\n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this string builder indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n *  or when that index is out of the [destination] array indices range.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\", \"NOTHING_TO_INLINE\", \"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun StringBuilder.toCharArray(destination: CharArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = this.length) =\n    this.toCharArray(destination, destinationOffset, startIndex, endIndex)\n\n/**\n * Appends characters in a subarray of the specified character array [value] to this string builder and returns this instance.\n *\n * Characters are appended in order, starting at specified [startIndex].\n *\n * @param value the array from which characters are appended.\n * @param startIndex the beginning (inclusive) of the subarray to append.\n * @param endIndex the end (exclusive) of the subarray to append.\n *\n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of the [value] array indices or when `startIndex > endIndex`.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\", \"NOTHING_TO_INLINE\")\npublic actual inline fun StringBuilder.appendRange(value: CharArray, startIndex: Int, endIndex: Int): StringBuilder =\n    this.appendRange(value, startIndex, endIndex)\n\n/**\n * Appends a subsequence of the specified character sequence [value] to this string builder and returns this instance.\n *\n * @param value the character sequence from which a subsequence is appended.\n * @param startIndex the beginning (inclusive) of the subsequence to append.\n * @param endIndex the end (exclusive) of the subsequence to append.\n *\n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of the [value] character sequence indices or when `startIndex > endIndex`.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\", \"NOTHING_TO_INLINE\")\npublic actual inline fun StringBuilder.appendRange(value: CharSequence, startIndex: Int, endIndex: Int): StringBuilder =\n    this.appendRange(value, startIndex, endIndex)\n\n/**\n * Inserts characters in a subarray of the specified character array [value] into this string builder at the specified [index] and returns this instance.\n *\n * The inserted characters go in same order as in the [value] array, starting at [index].\n *\n * @param index the position in this string builder to insert at.\n * @param value the array from which characters are inserted.\n * @param startIndex the beginning (inclusive) of the subarray to insert.\n * @param endIndex the end (exclusive) of the subarray to insert.\n *\n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of the [value] array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\", \"NOTHING_TO_INLINE\")\npublic actual inline fun StringBuilder.insertRange(index: Int, value: CharArray, startIndex: Int, endIndex: Int): StringBuilder =\n    this.insertRange(index, value, startIndex, endIndex)\n\n/**\n * Inserts characters in a subsequence of the specified character sequence [value] into this string builder at the specified [index] and returns this instance.\n *\n * The inserted characters go in the same order as in the [value] character sequence, starting at [index].\n *\n * @param index the position in this string builder to insert at.\n * @param value the character sequence from which a subsequence is inserted.\n * @param startIndex the beginning (inclusive) of the subsequence to insert.\n * @param endIndex the end (exclusive) of the subsequence to insert.\n *\n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of the [value] character sequence indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\", \"NOTHING_TO_INLINE\")\npublic actual inline fun StringBuilder.insertRange(index: Int, value: CharSequence, startIndex: Int, endIndex: Int): StringBuilder =\n    this.insertRange(index, value, startIndex, endIndex)\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.text\n\n\n/**\n * Returns `true` if the content of this string is equal to the word \"true\", ignoring case, and `false` otherwise.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\n@kotlin.internal.InlineOnly\npublic actual inline fun String.toBoolean(): Boolean = this.toBoolean()\n\n/**\n * Returns `true` if this string is not `null` and its content is equal to the word \"true\", ignoring case, and `false` otherwise.\n *\n * There are also strict versions of the function available on non-nullable String, [toBooleanStrict] and [toBooleanStrictOrNull].\n */\n@OptIn(ExperimentalStdlibApi::class)\n@SinceKotlin(\"1.4\")\npublic actual fun String?.toBoolean(): Boolean = this != null && this.lowercase() == \"true\"\n\n/**\n * Parses the string as a signed [Byte] number and returns the result.\n * @throws NumberFormatException if the string is not a valid representation of a number.\n */\npublic actual fun String.toByte(): Byte = toByteOrNull() ?: numberFormatError(this)\n\n/**\n * Parses the string as a signed [Byte] number and returns the result.\n * @throws NumberFormatException if the string is not a valid representation of a number.\n * @throws IllegalArgumentException when [radix] is not a valid radix for string to number conversion.\n */\npublic actual fun String.toByte(radix: Int): Byte = toByteOrNull(radix) ?: numberFormatError(this)\n\n\n/**\n * Parses the string as a [Short] number and returns the result.\n * @throws NumberFormatException if the string is not a valid representation of a number.\n */\npublic actual fun String.toShort(): Short = toShortOrNull() ?: numberFormatError(this)\n\n/**\n * Parses the string as a [Short] number and returns the result.\n * @throws NumberFormatException if the string is not a valid representation of a number.\n * @throws IllegalArgumentException when [radix] is not a valid radix for string to number conversion.\n */\npublic actual fun String.toShort(radix: Int): Short = toShortOrNull(radix) ?: numberFormatError(this)\n\n/**\n * Parses the string as an [Int] number and returns the result.\n * @throws NumberFormatException if the string is not a valid representation of a number.\n */\npublic actual fun String.toInt(): Int = toIntOrNull() ?: numberFormatError(this)\n\n/**\n * Parses the string as an [Int] number and returns the result.\n * @throws NumberFormatException if the string is not a valid representation of a number.\n * @throws IllegalArgumentException when [radix] is not a valid radix for string to number conversion.\n */\npublic actual fun String.toInt(radix: Int): Int = toIntOrNull(radix) ?: numberFormatError(this)\n\n/**\n * Parses the string as a [Long] number and returns the result.\n * @throws NumberFormatException if the string is not a valid representation of a number.\n */\npublic actual fun String.toLong(): Long = toLongOrNull() ?: numberFormatError(this)\n\n/**\n * Parses the string as a [Long] number and returns the result.\n * @throws NumberFormatException if the string is not a valid representation of a number.\n * @throws IllegalArgumentException when [radix] is not a valid radix for string to number conversion.\n */\npublic actual fun String.toLong(radix: Int): Long = toLongOrNull(radix) ?: numberFormatError(this)\n\n/**\n * Parses the string as a [Double] number and returns the result.\n * @throws NumberFormatException if the string is not a valid representation of a number.\n */\npublic actual fun String.toDouble(): Double = (+(this.asDynamic())).unsafeCast<Double>().also {\n    if (it.isNaN() && !this.isNaN() || it == 0.0 && this.isBlank())\n        numberFormatError(this)\n}\n\n/**\n * Parses the string as a [Float] number and returns the result.\n * @throws NumberFormatException if the string is not a valid representation of a number.\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun String.toFloat(): Float = toDouble().unsafeCast<Float>()\n\n/**\n * Parses the string as a [Double] number and returns the result\n * or `null` if the string is not a valid representation of a number.\n */\npublic actual fun String.toDoubleOrNull(): Double? = (+(this.asDynamic())).unsafeCast<Double>().takeIf {\n    !(it.isNaN() && !this.isNaN() || it == 0.0 && this.isBlank())\n}\n\n/**\n * Parses the string as a [Float] number and returns the result\n * or `null` if the string is not a valid representation of a number.\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun String.toFloatOrNull(): Float? = toDoubleOrNull().unsafeCast<Float?>()\n\n/**\n * Returns a string representation of this [Byte] value in the specified [radix].\n *\n * @throws IllegalArgumentException when [radix] is not a valid radix for number to string conversion.\n */\n@SinceKotlin(\"1.2\")\n@kotlin.internal.InlineOnly\npublic actual inline fun Byte.toString(radix: Int): String = this.toInt().toString(radix)\n\n/**\n * Returns a string representation of this [Short] value in the specified [radix].\n *\n * @throws IllegalArgumentException when [radix] is not a valid radix for number to string conversion.\n */\n@SinceKotlin(\"1.2\")\n@kotlin.internal.InlineOnly\npublic actual inline fun Short.toString(radix: Int): String = this.toInt().toString(radix)\n\n/**\n * Returns a string representation of this [Int] value in the specified [radix].\n *\n * @throws IllegalArgumentException when [radix] is not a valid radix for number to string conversion.\n */\n@SinceKotlin(\"1.2\")\npublic actual fun Int.toString(radix: Int): String = asDynamic().toString(checkRadix(radix))\n\n@OptIn(ExperimentalStdlibApi::class)\nprivate fun String.isNaN(): Boolean = when (this.lowercase()) {\n    \"nan\", \"+nan\", \"-nan\" -> true\n    else -> false\n}\n\n/**\n * Checks whether the given [radix] is valid radix for string to number and number to string conversion.\n */\n@PublishedApi\ninternal actual fun checkRadix(radix: Int): Int {\n    if (radix !in 2..36) {\n        throw IllegalArgumentException(\"radix $radix was not in valid range 2..36\")\n    }\n    return radix\n}\n\ninternal actual fun digitOf(char: Char, radix: Int): Int = when {\n    char >= '0' && char <= '9' -> char - '0'\n    char >= 'A' && char <= 'Z' -> char - 'A' + 10\n    char >= 'a' && char <= 'z' -> char - 'a' + 10\n    else -> -1\n}.let { if (it >= radix) -1 else it }\n","/*\n * Copyright 2010-2021 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.text\n\nimport kotlin.js.RegExp\n\n/**\n * Provides enumeration values to use to set regular expression options.\n */\npublic actual enum class RegexOption(val value: String) {\n    /** Enables case-insensitive matching. */\n    IGNORE_CASE(\"i\"),\n    /** Enables multiline mode.\n     *\n     * In multiline mode the expressions `^` and `$` match just after or just before,\n     * respectively, a line terminator or the end of the input sequence. */\n    MULTILINE(\"m\")\n}\n\n\n/**\n * Represents the results from a single capturing group within a [MatchResult] of [Regex].\n *\n * @param value The value of captured group.\n */\npublic actual data class MatchGroup(actual val value: String)\n\n\n/**\n * Represents a compiled regular expression.\n * Provides functions to match strings in text with a pattern, replace the found occurrences and split text around matches.\n *\n * For pattern syntax reference see [MDN RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp#Special_characters_meaning_in_regular_expressions)\n * and [http://www.w3schools.com/jsref/jsref_obj_regexp.asp](https://www.w3schools.com/jsref/jsref_obj_regexp.asp).\n *\n * @constructor Creates a regular expression from the specified [pattern] string and the specified set of [options].\n */\npublic actual class Regex actual constructor(pattern: String, options: Set<RegexOption>) {\n\n    /** Creates a regular expression from the specified [pattern] string and the specified single [option].  */\n    public actual constructor(pattern: String, option: RegexOption) : this(pattern, setOf(option))\n\n    /** Creates a regular expression from the specified [pattern] string and the default options.  */\n    public actual constructor(pattern: String) : this(pattern, emptySet())\n\n\n    /** The pattern string of this regular expression. */\n    public actual val pattern: String = pattern\n    /** The set of options that were used to create this regular expression. */\n    public actual val options: Set<RegexOption> = options.toSet()\n    private val nativePattern: RegExp = RegExp(pattern, options.joinToString(separator = \"\", prefix = \"gu\") { it.value })\n\n    /** Indicates whether the regular expression matches the entire [input]. */\n    public actual infix fun matches(input: CharSequence): Boolean {\n        nativePattern.reset()\n        val match = nativePattern.exec(input.toString())\n        return match != null && match.index == 0 && nativePattern.lastIndex == input.length\n    }\n\n    /** Indicates whether the regular expression can find at least one match in the specified [input]. */\n    public actual fun containsMatchIn(input: CharSequence): Boolean {\n        nativePattern.reset()\n        return nativePattern.test(input.toString())\n    }\n\n    /** Returns the first match of a regular expression in the [input], beginning at the specified [startIndex].\n     *\n     * @param startIndex An index to start search with, by default 0. Must be not less than zero and not greater than `input.length()`\n     * @return An instance of [MatchResult] if match was found or `null` otherwise.\n     * @throws IndexOutOfBoundsException if [startIndex] is less than zero or greater than the length of the [input] char sequence.\n     */\n    @Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\n    public actual fun find(input: CharSequence, startIndex: Int = 0): MatchResult? {\n        if (startIndex < 0 || startIndex > input.length) {\n            throw IndexOutOfBoundsException(\"Start index out of bounds: $startIndex, input length: ${input.length}\")\n        }\n        return nativePattern.findNext(input.toString(), startIndex)\n    }\n\n    /**\n     * Returns a sequence of all occurrences of a regular expression within the [input] string, beginning at the specified [startIndex].\n     *\n     * @throws IndexOutOfBoundsException if [startIndex] is less than zero or greater than the length of the [input] char sequence.\n     *\n     * @sample samples.text.Regexps.findAll\n     */\n    @Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\n    public actual fun findAll(input: CharSequence, startIndex: Int = 0): Sequence<MatchResult> {\n        if (startIndex < 0 || startIndex > input.length) {\n            throw IndexOutOfBoundsException(\"Start index out of bounds: $startIndex, input length: ${input.length}\")\n        }\n        return generateSequence({ find(input, startIndex) }, { match -> match.next() })\n    }\n\n    /**\n     * Attempts to match the entire [input] CharSequence against the pattern.\n     *\n     * @return An instance of [MatchResult] if the entire input matches or `null` otherwise.\n     */\n    public actual fun matchEntire(input: CharSequence): MatchResult? {\n        if (pattern.startsWith('^') && pattern.endsWith('$'))\n            return find(input)\n        else\n            return Regex(\"^${pattern.trimStart('^').trimEnd('$')}$\", options).find(input)\n    }\n\n    /**\n     * Replaces all occurrences of this regular expression in the specified [input] string with specified [replacement] expression.\n     *\n     * @param replacement A replacement expression that can include substitutions. See [String.prototype.replace](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace) function docs for details.\n     */\n    public actual fun replace(input: CharSequence, replacement: String): String = input.toString().nativeReplace(nativePattern, replacement)\n\n    /**\n     * Replaces all occurrences of this regular expression in the specified [input] string with the result of\n     * the given function [transform] that takes [MatchResult] and returns a string to be used as a\n     * replacement for that match.\n     */\n    public actual inline fun replace(input: CharSequence, transform: (MatchResult) -> CharSequence): String {\n        var match = find(input)\n        if (match == null) return input.toString()\n\n        var lastStart = 0\n        val length = input.length\n        val sb = StringBuilder(length)\n        do {\n            val foundMatch = match!!\n            sb.append(input, lastStart, foundMatch.range.start)\n            sb.append(transform(foundMatch))\n            lastStart = foundMatch.range.endInclusive + 1\n            match = foundMatch.next()\n        } while (lastStart < length && match != null)\n\n        if (lastStart < length) {\n            sb.append(input, lastStart, length)\n        }\n\n        return sb.toString()\n    }\n\n    /**\n     * Replaces the first occurrence of this regular expression in the specified [input] string with specified [replacement] expression.\n     *\n     * @param replacement A replacement expression that can include substitutions. See [String.prototype.replace](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace) function docs for details.\n     */\n    public actual fun replaceFirst(input: CharSequence, replacement: String): String {\n        val nonGlobalOptions = options.map { it.value }.joinToString(separator = \"\")\n        return input.toString().nativeReplace(RegExp(pattern, nonGlobalOptions), replacement)\n    }\n\n    /**\n     * Splits the [input] CharSequence around matches of this regular expression.\n     *\n     * @param limit Non-negative value specifying the maximum number of substrings the string can be split to.\n     * Zero by default means no limit is set.\n     */\n    @Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\n    public actual fun split(input: CharSequence, limit: Int = 0): List<String> {\n        require(limit >= 0) { \"Limit must be non-negative, but was $limit\" }\n        val matches = findAll(input).let { if (limit == 0) it else it.take(limit - 1) }\n        val result = mutableListOf<String>()\n        var lastStart = 0\n\n        for (match in matches) {\n            result.add(input.subSequence(lastStart, match.range.start).toString())\n            lastStart = match.range.endInclusive + 1\n        }\n        result.add(input.subSequence(lastStart, input.length).toString())\n        return result\n    }\n\n\n    /**\n     * Returns the string representation of this regular expression, namely the [pattern] of this regular expression.\n     *\n     * Note that another regular expression constructed from the same pattern string may have different [options]\n     * and may match strings differently.\n     */\n    public override fun toString(): String = nativePattern.toString()\n\n    actual companion object {\n        /**\n         * Returns a regular expression that matches the specified [literal] string literally.\n         * No characters of that string will have special meaning when searching for an occurrence of the regular expression.\n         */\n        public actual fun fromLiteral(literal: String): Regex = Regex(escape(literal))\n\n        /**\n         * Returns a regular expression pattern string that matches the specified [literal] string literally.\n         * No characters of that string will have special meaning when searching for an occurrence of the regular expression.\n         */\n        public actual fun escape(literal: String): String = literal.nativeReplace(patternEscape, \"\\\\$&\")\n\n        /**\n         * Returns a literal replacement expression for the specified [literal] string.\n         * No characters of that string will have special meaning when it is used as a replacement string in [Regex.replace] function.\n         */\n        public actual fun escapeReplacement(literal: String): String = literal.nativeReplace(replacementEscape, \"$$$$\")\n\n        private val patternEscape = RegExp(\"\"\"[\\\\^$*+?.()|[\\]{}]\"\"\", \"g\")\n        private val replacementEscape = RegExp(\"\"\"\\$\"\"\", \"g\")\n    }\n}\n\n/** Creates a regular expression from the specified [pattern] string and the specified single [option].  */\n@Deprecated(\"Provided for binary compatibility\", level = DeprecationLevel.HIDDEN)\n@JsName(\"Regex_sb3q2\\$\")\npublic fun Regex_0(pattern: String, option: RegexOption): Regex = Regex(pattern, setOf(option))\n\n/** Creates a regular expression from the specified [pattern] string and the default options.  */\n@Deprecated(\"Provided for binary compatibility\", level = DeprecationLevel.HIDDEN)\n@JsName(\"Regex_61zpoe\\$\")\npublic fun Regex_1(pattern: String): Regex = Regex(pattern, emptySet())\n\n\n\n\nprivate fun RegExp.findNext(input: String, from: Int): MatchResult? {\n    this.lastIndex = from\n    val match = exec(input)\n    if (match == null) return null\n    val range = match.index..lastIndex - 1\n\n    return object : MatchResult {\n        override val range: IntRange = range\n        override val value: String\n            get() = match[0]!!\n\n        override val groups: MatchGroupCollection = object : MatchGroupCollection, AbstractCollection<MatchGroup?>() {\n            override val size: Int get() = match.length\n            override fun iterator(): Iterator<MatchGroup?> = indices.asSequence().map { this[it] }.iterator()\n            override fun get(index: Int): MatchGroup? = match[index]?.let { MatchGroup(it) }\n        }\n\n\n        private var groupValues_: List<String>? = null\n\n        override val groupValues: List<String>\n            get() {\n                if (groupValues_ == null) {\n                    groupValues_ = object : AbstractList<String>() {\n                        override val size: Int get() = match.length\n                        override fun get(index: Int): String = match[index] ?: \"\"\n                    }\n                }\n                return groupValues_!!\n            }\n\n        override fun next(): MatchResult? = this@findNext.findNext(input, if (range.isEmpty()) range.start + 1 else range.endInclusive + 1)\n    }\n}\n","/*\n * Copyright 2010-2021 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.text\n\nimport kotlin.js.RegExp\n\n@kotlin.internal.InlineOnly\ninternal actual inline fun String.nativeIndexOf(ch: Char, fromIndex: Int): Int = nativeIndexOf(ch.toString(), fromIndex)\n\n@kotlin.internal.InlineOnly\ninternal actual inline fun String.nativeLastIndexOf(ch: Char, fromIndex: Int): Int = nativeLastIndexOf(ch.toString(), fromIndex)\n\n/**\n * Returns `true` if this string starts with the specified prefix.\n */\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun String.startsWith(prefix: String, ignoreCase: Boolean = false): Boolean {\n    if (!ignoreCase)\n        return nativeStartsWith(prefix, 0)\n    else\n        return regionMatches(0, prefix, 0, prefix.length, ignoreCase)\n}\n\n/**\n * Returns `true` if a substring of this string starting at the specified offset [startIndex] starts with the specified prefix.\n */\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun String.startsWith(prefix: String, startIndex: Int, ignoreCase: Boolean = false): Boolean {\n    if (!ignoreCase)\n        return nativeStartsWith(prefix, startIndex)\n    else\n        return regionMatches(startIndex, prefix, 0, prefix.length, ignoreCase)\n}\n\n/**\n * Returns `true` if this string ends with the specified suffix.\n */\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun String.endsWith(suffix: String, ignoreCase: Boolean = false): Boolean {\n    if (!ignoreCase)\n        return nativeEndsWith(suffix)\n    else\n        return regionMatches(length - suffix.length, suffix, 0, suffix.length, ignoreCase)\n}\n\n\npublic fun String.matches(regex: String): Boolean {\n    val result = this.match(regex)\n    return result != null && result.size != 0\n}\n\npublic actual fun CharSequence.isBlank(): Boolean = length == 0 || (if (this is String) this else this.toString()).matches(\"^[\\\\s\\\\xA0]+$\")\n\n@OptIn(ExperimentalStdlibApi::class)\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun String?.equals(other: String?, ignoreCase: Boolean = false): Boolean =\n    when {\n        this == null -> other == null\n        !ignoreCase -> this == other\n        other == null -> false\n        else -> {\n            val thisLower = this.lowercase()\n            val otherLower = other.lowercase()\n            thisLower == otherLower || (thisLower.uppercase() == otherLower.uppercase())\n        }\n    }\n\n\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun CharSequence.regionMatches(thisOffset: Int, other: CharSequence, otherOffset: Int, length: Int, ignoreCase: Boolean = false): Boolean =\n    regionMatchesImpl(thisOffset, other, otherOffset, length, ignoreCase)\n\n\n/**\n * Returns a copy of this string having its first letter titlecased using the rules of the default locale,\n * or the original string if it's empty or already starts with a title case letter.\n *\n * The title case of a character is usually the same as its upper case with several exceptions.\n * The particular list of characters with the special title case form depends on the underlying platform.\n *\n * @sample samples.text.Strings.capitalize\n */\n@Deprecated(\"Use replaceFirstChar instead.\", ReplaceWith(\"replaceFirstChar { if (it.isLowerCase()) it.titlecase() else it.toString() }\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\npublic actual fun String.capitalize(): String {\n    return if (isNotEmpty()) substring(0, 1).toUpperCase() + substring(1) else this\n}\n\n/**\n * Returns a copy of this string having its first letter lowercased using the rules of the default locale,\n * or the original string if it's empty or already starts with a lower case letter.\n *\n * @sample samples.text.Strings.decapitalize\n */\n@Deprecated(\"Use replaceFirstChar instead.\", ReplaceWith(\"replaceFirstChar { it.lowercase() }\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\npublic actual fun String.decapitalize(): String {\n    return if (isNotEmpty()) substring(0, 1).toLowerCase() + substring(1) else this\n}\n\n/**\n * Returns a string containing this char sequence repeated [n] times.\n * @throws [IllegalArgumentException] when n < 0.\n * @sample samples.text.Strings.repeat\n */\npublic actual fun CharSequence.repeat(n: Int): String {\n    require(n >= 0) { \"Count 'n' must be non-negative, but was $n.\" }\n    return when (n) {\n        0 -> \"\"\n        1 -> this.toString()\n        else -> {\n            var result = \"\"\n            if (!isEmpty()) {\n                var s = this.toString()\n                var count = n\n                while (true) {\n                    if ((count and 1) == 1) {\n                        result += s\n                    }\n                    count = count ushr 1\n                    if (count == 0) {\n                        break\n                    }\n                    s += s\n                }\n            }\n            return result\n        }\n    }\n}\n\n/**\n * Returns a new string obtained by replacing all occurrences of the [oldValue] substring in this string\n * with the specified [newValue] string.\n *\n * @sample samples.text.Strings.replace\n */\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun String.replace(oldValue: String, newValue: String, ignoreCase: Boolean = false): String =\n    nativeReplace(RegExp(Regex.escape(oldValue), if (ignoreCase) \"gui\" else \"gu\"), Regex.escapeReplacement(newValue))\n\n/**\n * Returns a new string with all occurrences of [oldChar] replaced with [newChar].\n *\n * @sample samples.text.Strings.replace\n */\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun String.replace(oldChar: Char, newChar: Char, ignoreCase: Boolean = false): String =\n    nativeReplace(RegExp(Regex.escape(oldChar.toString()), if (ignoreCase) \"gui\" else \"gu\"), newChar.toString())\n\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun String.replaceFirst(oldValue: String, newValue: String, ignoreCase: Boolean = false): String =\n    nativeReplace(RegExp(Regex.escape(oldValue), if (ignoreCase) \"ui\" else \"u\"), Regex.escapeReplacement(newValue))\n\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun String.replaceFirst(oldChar: Char, newChar: Char, ignoreCase: Boolean = false): String =\n    nativeReplace(RegExp(Regex.escape(oldChar.toString()), if (ignoreCase) \"ui\" else \"u\"), newChar.toString())\n","/*\n * Copyright 2010-2019 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.text\n\n/** Returns the negative [size] if [throwOnMalformed] is false, throws [CharacterCodingException] otherwise. */\n@OptIn(ExperimentalStdlibApi::class)\nprivate fun malformed(size: Int, index: Int, throwOnMalformed: Boolean): Int {\n    if (throwOnMalformed) throw CharacterCodingException(\"Malformed sequence starting at ${index - 1}\")\n    return -size\n}\n\n/**\n * Returns code point corresponding to UTF-16 surrogate pair,\n * where the first of the pair is the [high] and the second is in the [string] at the [index].\n * Returns zero if the pair is malformed and [throwOnMalformed] is false.\n *\n * @throws CharacterCodingException if the pair is malformed and [throwOnMalformed] is true.\n */\nprivate fun codePointFromSurrogate(string: String, high: Int, index: Int, endIndex: Int, throwOnMalformed: Boolean): Int {\n    if (high !in 0xD800..0xDBFF || index >= endIndex) {\n        return malformed(0, index, throwOnMalformed)\n    }\n    val low = string[index].code\n    if (low !in 0xDC00..0xDFFF) {\n        return malformed(0, index, throwOnMalformed)\n    }\n    return 0x10000 + ((high and 0x3FF) shl 10) or (low and 0x3FF)\n}\n\n/**\n * Returns code point corresponding to UTF-8 sequence of two bytes,\n * where the first byte of the sequence is the [byte1] and the second byte is in the [bytes] array at the [index].\n * Returns zero if the sequence is malformed and [throwOnMalformed] is false.\n *\n * @throws CharacterCodingException if the sequence of two bytes is malformed and [throwOnMalformed] is true.\n */\nprivate fun codePointFrom2(bytes: ByteArray, byte1: Int, index: Int, endIndex: Int, throwOnMalformed: Boolean): Int {\n    if (byte1 and 0x1E == 0 || index >= endIndex) {\n        return malformed(0, index, throwOnMalformed)\n    }\n    val byte2 = bytes[index].toInt()\n    if (byte2 and 0xC0 != 0x80) {\n        return malformed(0, index, throwOnMalformed)\n    }\n    return (byte1 shl 6) xor byte2 xor 0xF80\n}\n\n/**\n * Returns code point corresponding to UTF-8 sequence of three bytes,\n * where the first byte of the sequence is the [byte1] and the others are in the [bytes] array starting from the [index].\n * Returns a non-positive value indicating number of bytes from [bytes] included in malformed sequence\n * if the sequence is malformed and [throwOnMalformed] is false.\n *\n * @throws CharacterCodingException if the sequence of three bytes is malformed and [throwOnMalformed] is true.\n */\nprivate fun codePointFrom3(bytes: ByteArray, byte1: Int, index: Int, endIndex: Int, throwOnMalformed: Boolean): Int {\n    if (index >= endIndex) {\n        return malformed(0, index, throwOnMalformed)\n    }\n\n    val byte2 = bytes[index].toInt()\n    if (byte1 and 0xF == 0) {\n        if (byte2 and 0xE0 != 0xA0) {\n            // Non-shortest form\n            return malformed(0, index, throwOnMalformed)\n        }\n    } else if (byte1 and 0xF == 0xD) {\n        if (byte2 and 0xE0 != 0x80) {\n            // Surrogate code point\n            return malformed(0, index, throwOnMalformed)\n        }\n    } else if (byte2 and 0xC0 != 0x80) {\n        return malformed(0, index, throwOnMalformed)\n    }\n\n    if (index + 1 == endIndex) {\n        return malformed(1, index, throwOnMalformed)\n    }\n    val byte3 = bytes[index + 1].toInt()\n    if (byte3 and 0xC0 != 0x80) {\n        return malformed(1, index, throwOnMalformed)\n    }\n\n    return (byte1 shl 12) xor (byte2 shl 6) xor byte3 xor -0x1E080\n}\n\n/**\n * Returns code point corresponding to UTF-8 sequence of four bytes,\n * where the first byte of the sequence is the [byte1] and the others are in the [bytes] array starting from the [index].\n * Returns a non-positive value indicating number of bytes from [bytes] included in malformed sequence\n * if the sequence is malformed and [throwOnMalformed] is false.\n *\n * @throws CharacterCodingException if the sequence of four bytes is malformed and [throwOnMalformed] is true.\n */\nprivate fun codePointFrom4(bytes: ByteArray, byte1: Int, index: Int, endIndex: Int, throwOnMalformed: Boolean): Int {\n    if (index >= endIndex) {\n        malformed(0, index, throwOnMalformed)\n    }\n\n    val byte2 = bytes[index].toInt()\n    if (byte1 and 0xF == 0x0) {\n        if (byte2 and 0xF0 <= 0x80) {\n            // Non-shortest form\n            return malformed(0, index, throwOnMalformed)\n        }\n    } else if (byte1 and 0xF == 0x4) {\n        if (byte2 and 0xF0 != 0x80) {\n            // Out of Unicode code points domain (larger than U+10FFFF)\n            return malformed(0, index, throwOnMalformed)\n        }\n    } else if (byte1 and 0xF > 0x4) {\n        return malformed(0, index, throwOnMalformed)\n    } else if (byte2 and 0xC0 != 0x80) {\n        return malformed(0, index, throwOnMalformed)\n    }\n\n    if (index + 1 == endIndex) {\n        return malformed(1, index, throwOnMalformed)\n    }\n    val byte3 = bytes[index + 1].toInt()\n    if (byte3 and 0xC0 != 0x80) {\n        return malformed(1, index, throwOnMalformed)\n    }\n\n    if (index + 2 == endIndex) {\n        return malformed(2, index, throwOnMalformed)\n    }\n    val byte4 = bytes[index + 2].toInt()\n    if (byte4 and 0xC0 != 0x80) {\n        return malformed(2, index, throwOnMalformed)\n    }\n    return (byte1 shl 18) xor (byte2 shl 12) xor (byte3 shl 6) xor byte4 xor 0x381F80\n}\n\n/**\n * Maximum number of bytes needed to encode a single char.\n *\n * Code points in `0..0x7F` are encoded in a single byte.\n * Code points in `0x80..0x7FF` are encoded in two bytes.\n * Code points in `0x800..0xD7FF` or in `0xE000..0xFFFF` are encoded in three bytes.\n * Surrogate code points in `0xD800..0xDFFF` are not Unicode scalar values, therefore aren't encoded.\n * Code points in `0x10000..0x10FFFF` are represented by a pair of surrogate `Char`s and are encoded in four bytes.\n */\nprivate const val MAX_BYTES_PER_CHAR = 3\n\n/**\n * The byte sequence a malformed UTF-16 char sequence is replaced by.\n */\nprivate val REPLACEMENT_BYTE_SEQUENCE: ByteArray = byteArrayOf(0xEF.toByte(), 0xBF.toByte(), 0xBD.toByte())\n\n/**\n * Encodes the [string] using UTF-8 and returns the resulting [ByteArray].\n *\n * @param string the string to encode.\n * @param startIndex the start offset (inclusive) of the substring to encode.\n * @param endIndex the end offset (exclusive) of the substring to encode.\n * @param throwOnMalformed whether to throw on malformed char sequence or replace by the [REPLACEMENT_BYTE_SEQUENCE].\n *\n * @throws CharacterCodingException if the char sequence is malformed and [throwOnMalformed] is true.\n */\ninternal fun encodeUtf8(string: String, startIndex: Int, endIndex: Int, throwOnMalformed: Boolean): ByteArray {\n    require(startIndex >= 0 && endIndex <= string.length && startIndex <= endIndex)\n\n    val bytes = ByteArray((endIndex - startIndex) * MAX_BYTES_PER_CHAR)\n    var byteIndex = 0\n    var charIndex = startIndex\n\n    while (charIndex < endIndex) {\n        val code = string[charIndex++].code\n        when {\n            code < 0x80 ->\n                bytes[byteIndex++] = code.toByte()\n            code < 0x800 -> {\n                bytes[byteIndex++] = ((code shr 6) or 0xC0).toByte()\n                bytes[byteIndex++] = ((code and 0x3F) or 0x80).toByte()\n            }\n            code < 0xD800 || code >= 0xE000 -> {\n                bytes[byteIndex++] = ((code shr 12) or 0xE0).toByte()\n                bytes[byteIndex++] = (((code shr 6) and 0x3F) or 0x80).toByte()\n                bytes[byteIndex++] = ((code and 0x3F) or 0x80).toByte()\n            }\n            else -> { // Surrogate char value\n                val codePoint = codePointFromSurrogate(string, code, charIndex, endIndex, throwOnMalformed)\n                if (codePoint <= 0) {\n                    bytes[byteIndex++] = REPLACEMENT_BYTE_SEQUENCE[0]\n                    bytes[byteIndex++] = REPLACEMENT_BYTE_SEQUENCE[1]\n                    bytes[byteIndex++] = REPLACEMENT_BYTE_SEQUENCE[2]\n                } else {\n                    bytes[byteIndex++] = ((codePoint shr 18) or 0xF0).toByte()\n                    bytes[byteIndex++] = (((codePoint shr 12) and 0x3F) or 0x80).toByte()\n                    bytes[byteIndex++] = (((codePoint shr 6) and 0x3F) or 0x80).toByte()\n                    bytes[byteIndex++] = ((codePoint and 0x3F) or 0x80).toByte()\n                    charIndex++\n                }\n            }\n        }\n    }\n\n    return if (bytes.size == byteIndex) bytes else bytes.copyOf(byteIndex)\n}\n\n/**\n * The character a malformed UTF-8 byte sequence is replaced by.\n */\nprivate const val REPLACEMENT_CHAR = '\\uFFFD'\n\n/**\n * Decodes the UTF-8 [bytes] array and returns the resulting [String].\n *\n * @param bytes the byte array to decode.\n * @param startIndex the start offset (inclusive) of the array to be decoded.\n * @param endIndex the end offset (exclusive) of the array to be encoded.\n * @param throwOnMalformed whether to throw on malformed byte sequence or replace by the [REPLACEMENT_CHAR].\n *\n * @throws CharacterCodingException if the array is malformed UTF-8 byte sequence and [throwOnMalformed] is true.\n */\ninternal fun decodeUtf8(bytes: ByteArray, startIndex: Int, endIndex: Int, throwOnMalformed: Boolean): String {\n    require(startIndex >= 0 && endIndex <= bytes.size && startIndex <= endIndex)\n\n    var byteIndex = startIndex\n    val stringBuilder = StringBuilder()\n\n    while (byteIndex < endIndex) {\n        val byte = bytes[byteIndex++].toInt()\n        when {\n            byte >= 0 ->\n                stringBuilder.append(byte.toChar())\n            byte shr 5 == -2 -> {\n                val code = codePointFrom2(bytes, byte, byteIndex, endIndex, throwOnMalformed)\n                if (code <= 0) {\n                    stringBuilder.append(REPLACEMENT_CHAR)\n                    byteIndex += -code\n                } else {\n                    stringBuilder.append(code.toChar())\n                    byteIndex += 1\n                }\n            }\n            byte shr 4 == -2 -> {\n                val code = codePointFrom3(bytes, byte, byteIndex, endIndex, throwOnMalformed)\n                if (code <= 0) {\n                    stringBuilder.append(REPLACEMENT_CHAR)\n                    byteIndex += -code\n                } else {\n                    stringBuilder.append(code.toChar())\n                    byteIndex += 2\n                }\n            }\n            byte shr 3 == -2 -> {\n                val code = codePointFrom4(bytes, byte, byteIndex, endIndex, throwOnMalformed)\n                if (code <= 0) {\n                    stringBuilder.append(REPLACEMENT_CHAR)\n                    byteIndex += -code\n                } else {\n                    val high = (code - 0x10000) shr 10 or 0xD800\n                    val low = (code and 0x3FF) or 0xDC00\n                    stringBuilder.append(high.toChar())\n                    stringBuilder.append(low.toChar())\n                    byteIndex += 3\n                }\n            }\n            else -> {\n                malformed(0, byteIndex, throwOnMalformed)\n                stringBuilder.append(REPLACEMENT_CHAR)\n            }\n        }\n    }\n\n    return stringBuilder.toString()\n}","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin\n\n/**\n * Returns the detailed description of this throwable with its stack trace.\n *\n * The detailed description includes:\n * - the short description (see [Throwable.toString]) of this throwable;\n * - the complete stack trace;\n * - detailed descriptions of the exceptions that were [suppressed][suppressedExceptions] in order to deliver this exception;\n * - the detailed description of each throwable in the [Throwable.cause] chain.\n */\n@SinceKotlin(\"1.4\")\npublic actual fun Throwable.stackTraceToString(): String = ExceptionTraceBuilder().buildFor(this)\n\n/**\n * Prints the [detailed description][Throwable.stackTraceToString] of this throwable to console error output.\n */\n@SinceKotlin(\"1.4\")\npublic actual fun Throwable.printStackTrace() {\n    console.error(this.stackTraceToString())\n}\n\n/**\n * Adds the specified exception to the list of exceptions that were\n * suppressed in order to deliver this exception.\n */\n@SinceKotlin(\"1.4\")\npublic actual fun Throwable.addSuppressed(exception: Throwable) {\n    if (this !== exception) {\n        val suppressed = this.asDynamic()._suppressed.unsafeCast<MutableList<Throwable>?>()\n        if (suppressed == null) {\n            this.asDynamic()._suppressed = mutableListOf(exception)\n        } else {\n            suppressed.add(exception)\n        }\n    }\n}\n\n/**\n * Returns a list of all exceptions that were suppressed in order to deliver this exception.\n */\n@SinceKotlin(\"1.4\")\npublic actual val Throwable.suppressedExceptions: List<Throwable>\n    get() {\n        return this.asDynamic()._suppressed?.unsafeCast<List<Throwable>>() ?: emptyList()\n    }\n\n\nprivate class ExceptionTraceBuilder {\n    private val target = StringBuilder()\n    private val visited = arrayOf<Throwable>()\n    private var topStack: String = \"\"\n    private var topStackStart: Int = 0\n\n    fun buildFor(exception: Throwable): String {\n        exception.dumpFullTrace(\"\", \"\")\n        return target.toString()\n    }\n\n    private fun hasSeen(exception: Throwable): Boolean = visited.any { it === exception }\n\n    private fun Throwable.dumpFullTrace(indent: String, qualifier: String) {\n        this.dumpSelfTrace(indent, qualifier) || return\n\n        var cause = this.cause\n        while (cause != null) {\n            cause.dumpSelfTrace(indent, \"Caused by: \") || return\n            cause = cause.cause\n        }\n    }\n\n    private fun Throwable.dumpSelfTrace(indent: String, qualifier: String): Boolean {\n        target.append(indent).append(qualifier)\n        val shortInfo = this.toString()\n        if (hasSeen(this)) {\n            target.append(\"[CIRCULAR REFERENCE, SEE ABOVE: \").append(shortInfo).append(\"]\\n\")\n            return false\n        }\n        visited.asDynamic().push(this)\n\n        var stack = this.asDynamic().stack as String?\n        if (stack != null) {\n            val stackStart = stack.indexOf(shortInfo).let { if (it < 0) 0 else it + shortInfo.length }\n            if (stackStart == 0) target.append(shortInfo).append(\"\\n\")\n            if (topStack.isEmpty()) {\n                topStack = stack\n                topStackStart = stackStart\n            } else {\n                stack = dropCommonFrames(stack, stackStart)\n            }\n            if (indent.isNotEmpty()) {\n                // indent stack, but avoid indenting exception message lines\n                val messageLines = if (stackStart == 0) 0 else 1 + shortInfo.count { c -> c == '\\n' }\n                stack.lineSequence().forEachIndexed { index: Int, line: String ->\n                    if (index >= messageLines) target.append(indent)\n                    target.append(line).append(\"\\n\")\n                }\n            } else {\n                target.append(stack).append(\"\\n\")\n            }\n        } else {\n            target.append(shortInfo).append(\"\\n\")\n        }\n\n        val suppressed = suppressedExceptions\n        if (suppressed.isNotEmpty()) {\n            val suppressedIndent = indent + \"    \"\n            for (s in suppressed) {\n                s.dumpFullTrace(suppressedIndent, \"Suppressed: \")\n            }\n        }\n        return true\n    }\n\n    private fun dropCommonFrames(stack: String, stackStart: Int): String {\n        var commonFrames: Int = 0\n        var lastBreak: Int = 0\n        var preLastBreak: Int = 0\n        for (pos in 0 until minOf(topStack.length - topStackStart, stack.length - stackStart)) {\n            val c = stack[stack.lastIndex - pos]\n            if (c != topStack[topStack.lastIndex - pos]) break\n            if (c == '\\n') {\n                commonFrames += 1\n                preLastBreak = lastBreak\n                lastBreak = pos\n            }\n        }\n        if (commonFrames <= 1) return stack\n        while (preLastBreak > 0 && stack[stack.lastIndex - (preLastBreak - 1)] == ' ')\n            preLastBreak -= 1\n\n        // leave 1 common frame to ease matching with the top exception stack\n        return stack.dropLast(preLastBreak) + \"... and ${commonFrames - 1} more common stack frames skipped\"\n    }\n}","/*\n * Copyright 2010-2021 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.time\n\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\npublic actual enum class DurationUnit(internal val scale: Double) {\n    /**\n     * Time unit representing one nanosecond, which is 1/1000 of a microsecond.\n     */\n    NANOSECONDS(1e0),\n    /**\n     * Time unit representing one microsecond, which is 1/1000 of a millisecond.\n     */\n    MICROSECONDS(1e3),\n    /**\n     * Time unit representing one millisecond, which is 1/1000 of a second.\n     */\n    MILLISECONDS(1e6),\n    /**\n     * Time unit representing one second.\n     */\n    SECONDS(1e9),\n    /**\n     * Time unit representing one minute.\n     */\n    MINUTES(60e9),\n    /**\n     * Time unit representing one hour.\n     */\n    HOURS(3600e9),\n    /**\n     * Time unit representing one day, which is always equal to 24 hours.\n     */\n    DAYS(86400e9);\n}\n\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\ninternal actual fun convertDurationUnit(value: Double, sourceUnit: DurationUnit, targetUnit: DurationUnit): Double {\n    val sourceCompareTarget = sourceUnit.scale.compareTo(targetUnit.scale)\n    return when {\n        sourceCompareTarget > 0 -> value * (sourceUnit.scale / targetUnit.scale)\n        sourceCompareTarget < 0 -> value / (targetUnit.scale / sourceUnit.scale)\n        else -> value\n    }\n}\n\n@SinceKotlin(\"1.5\")\n@ExperimentalTime\ninternal actual fun convertDurationUnitOverflow(value: Long, sourceUnit: DurationUnit, targetUnit: DurationUnit): Long {\n    val sourceCompareTarget = sourceUnit.scale.compareTo(targetUnit.scale)\n    return when {\n        sourceCompareTarget > 0 -> value * (sourceUnit.scale / targetUnit.scale).toLong()\n        sourceCompareTarget < 0 -> value / (targetUnit.scale / sourceUnit.scale).toLong()\n        else -> value\n    }\n}\n\n@SinceKotlin(\"1.5\")\n@ExperimentalTime\ninternal actual fun convertDurationUnit(value: Long, sourceUnit: DurationUnit, targetUnit: DurationUnit): Long {\n    val sourceCompareTarget = sourceUnit.scale.compareTo(targetUnit.scale)\n    return when {\n        sourceCompareTarget > 0 -> {\n            val scale = (sourceUnit.scale / targetUnit.scale).toLong()\n            val result = value * scale\n            when {\n                result / scale == value -> result\n                value > 0 -> Long.MAX_VALUE\n                else -> Long.MIN_VALUE\n            }\n        }\n        sourceCompareTarget < 0 -> value / (targetUnit.scale / sourceUnit.scale).toLong()\n        else -> value\n    }\n}\n\n\n","/*\n * Copyright 2010-2021 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.time\n\nimport org.w3c.performance.GlobalPerformance\nimport org.w3c.performance.Performance\n\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\ninternal actual object MonotonicTimeSource : TimeSource {\n\n    private val actualSource: TimeSource = run {\n        val isNode: Boolean = js(\"typeof process !== 'undefined' && process.versions && !!process.versions.node\")\n\n        if (isNode)\n            HrTimeSource(js(\"process\").unsafeCast<Process>())\n        else\n            js(\"self\").unsafeCast<GlobalPerformance?>()?.performance?.let(::PerformanceTimeSource)\n                ?: DateNowTimeSource\n\n    }\n\n    override fun markNow(): TimeMark = actualSource.markNow()\n}\n\ninternal external interface Process {\n    fun hrtime(time: Array<Double> = definedExternally): Array<Double>\n}\n\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\ninternal class HrTimeSource(val process: Process) : TimeSource {\n\n    override fun markNow(): TimeMark = object : TimeMark() {\n        val startedAt = process.hrtime()\n        override fun elapsedNow(): Duration =\n            process.hrtime(startedAt).let { (seconds, nanos) -> Duration.seconds(seconds) + Duration.nanoseconds(nanos) }\n    }\n\n    override fun toString(): String = \"TimeSource(process.hrtime())\"\n}\n\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\ninternal class PerformanceTimeSource(val performance: Performance) : AbstractDoubleTimeSource(unit = DurationUnit.MILLISECONDS) {\n    override fun read(): Double = performance.now()\n    override fun toString(): String = \"TimeSource(self.performance.now())\"\n}\n\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\ninternal object DateNowTimeSource : AbstractDoubleTimeSource(unit = DurationUnit.MILLISECONDS) {\n    override fun read(): Double = kotlin.js.Date.now()\n    override fun toString(): String = \"TimeSource(Date.now())\"\n}","/*\n * Copyright 2010-2021 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.time\n\nimport kotlin.js.json\nimport kotlin.math.*\n\ninternal actual fun formatToExactDecimals(value: Double, decimals: Int): String {\n    val rounded = if (decimals == 0) {\n        value\n    } else {\n        val pow = 10.0.pow(decimals)\n        JsMath.round(abs(value) * pow) / pow * sign(value)\n    }\n    return rounded.asDynamic().toFixed(decimals).unsafeCast<String>()\n}\n\ninternal actual fun formatUpToDecimals(value: Double, decimals: Int): String {\n    return value.asDynamic().toLocaleString(\"en-us\", json(\"maximumFractionDigits\" to decimals)).unsafeCast<String>()\n}\n\ninternal actual fun formatScientific(value: Double): String {\n    return value.asDynamic().toExponential(2).unsafeCast<String>()\n}","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlinx.dom\n\nimport org.w3c.dom.*\nimport kotlin.contracts.*\n\n/**\n * Creates a new element with the specified [name].\n *\n * The element is initialized with the specified [init] function.\n */\n@SinceKotlin(\"1.4\")\npublic fun Document.createElement(name: String, init: Element.() -> Unit): Element {\n    contract { callsInPlace(init, InvocationKind.EXACTLY_ONCE) }\n    return createElement(name).apply(init)\n}\n\n/**\n * Appends a newly created element with the specified [name] to this element.\n *\n * The element is initialized with the specified [init] function.\n */\n@SinceKotlin(\"1.4\")\npublic fun Element.appendElement(name: String, init: Element.() -> Unit): Element {\n    contract { callsInPlace(init, InvocationKind.EXACTLY_ONCE) }\n    return ownerDocument!!.createElement(name, init).also { appendChild(it) }\n}\n\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlinx.dom\n\nimport org.w3c.dom.*\n\n/** Returns true if the element has the given CSS class style in its 'class' attribute */\n@SinceKotlin(\"1.4\")\nfun Element.hasClass(cssClass: String): Boolean = className.matches(\"\"\"(^|.*\\s+)$cssClass($|\\s+.*)\"\"\".toRegex())\n\n/**\n * Adds CSS class to element. Has no effect if all specified classes are already in class attribute of the element\n *\n * @return true if at least one class has been added\n */\n@SinceKotlin(\"1.4\")\nfun Element.addClass(vararg cssClasses: String): Boolean {\n    val missingClasses = cssClasses.filterNot { hasClass(it) }\n    if (missingClasses.isNotEmpty()) {\n        val presentClasses = className.trim()\n        className = buildString {\n            append(presentClasses)\n            if (!presentClasses.isEmpty()) {\n                append(\" \")\n            }\n            missingClasses.joinTo(this, \" \")\n        }\n        return true\n    }\n\n    return false\n}\n\n/**\n * Removes all [cssClasses] from element. Has no effect if all specified classes are missing in class attribute of the element\n *\n * @return true if at least one class has been removed\n */\n@SinceKotlin(\"1.4\")\nfun Element.removeClass(vararg cssClasses: String): Boolean {\n    if (cssClasses.any { hasClass(it) }) {\n        val toBeRemoved = cssClasses.toSet()\n        className = className.trim().split(\"\\\\s+\".toRegex()).filter { it !in toBeRemoved }.joinToString(\" \")\n        return true\n    }\n\n    return false\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"StringsKt\")\n\npackage kotlin.text\n\n/**\n * Converts the string into a regular expression [Regex] with the default options.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.toRegex(): Regex = Regex(this)\n\n/**\n * Converts the string into a regular expression [Regex] with the specified single [option].\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.toRegex(option: RegexOption): Regex = Regex(this, option)\n\n/**\n * Converts the string into a regular expression [Regex] with the specified set of [options].\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.toRegex(options: Set<RegexOption>): Regex = Regex(this, options)\n","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n// NOTE: THIS FILE IS AUTO-GENERATED, DO NOT EDIT!\n// See github.com/kotlin/dukat for details\n\npackage org.khronos.webgl\n\nimport kotlin.js.*\nimport org.w3c.css.masking.*\nimport org.w3c.dom.*\nimport org.w3c.dom.clipboard.*\nimport org.w3c.dom.css.*\nimport org.w3c.dom.encryptedmedia.*\nimport org.w3c.dom.events.*\nimport org.w3c.dom.mediacapture.*\nimport org.w3c.dom.mediasource.*\nimport org.w3c.dom.parsing.*\nimport org.w3c.dom.pointerevents.*\nimport org.w3c.dom.svg.*\nimport org.w3c.dom.url.*\nimport org.w3c.fetch.*\nimport org.w3c.files.*\nimport org.w3c.notifications.*\nimport org.w3c.performance.*\nimport org.w3c.workers.*\nimport org.w3c.xhr.*\n\npublic external interface WebGLContextAttributes {\n    var alpha: Boolean? /* = true */\n        get() = definedExternally\n        set(value) = definedExternally\n    var depth: Boolean? /* = true */\n        get() = definedExternally\n        set(value) = definedExternally\n    var stencil: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n    var antialias: Boolean? /* = true */\n        get() = definedExternally\n        set(value) = definedExternally\n    var premultipliedAlpha: Boolean? /* = true */\n        get() = definedExternally\n        set(value) = definedExternally\n    var preserveDrawingBuffer: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n    var preferLowPowerToHighPerformance: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n    var failIfMajorPerformanceCaveat: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun WebGLContextAttributes(alpha: Boolean? = true, depth: Boolean? = true, stencil: Boolean? = false, antialias: Boolean? = true, premultipliedAlpha: Boolean? = true, preserveDrawingBuffer: Boolean? = false, preferLowPowerToHighPerformance: Boolean? = false, failIfMajorPerformanceCaveat: Boolean? = false): WebGLContextAttributes {\n    val o = js(\"({})\")\n    o[\"alpha\"] = alpha\n    o[\"depth\"] = depth\n    o[\"stencil\"] = stencil\n    o[\"antialias\"] = antialias\n    o[\"premultipliedAlpha\"] = premultipliedAlpha\n    o[\"preserveDrawingBuffer\"] = preserveDrawingBuffer\n    o[\"preferLowPowerToHighPerformance\"] = preferLowPowerToHighPerformance\n    o[\"failIfMajorPerformanceCaveat\"] = failIfMajorPerformanceCaveat\n    return o\n}\n\npublic external abstract class WebGLObject\n\n/**\n * Exposes the JavaScript [WebGLBuffer](https://developer.mozilla.org/en/docs/Web/API/WebGLBuffer) to Kotlin\n */\npublic external abstract class WebGLBuffer : WebGLObject\n\n/**\n * Exposes the JavaScript [WebGLFramebuffer](https://developer.mozilla.org/en/docs/Web/API/WebGLFramebuffer) to Kotlin\n */\npublic external abstract class WebGLFramebuffer : WebGLObject\n\n/**\n * Exposes the JavaScript [WebGLProgram](https://developer.mozilla.org/en/docs/Web/API/WebGLProgram) to Kotlin\n */\npublic external abstract class WebGLProgram : WebGLObject\n\n/**\n * Exposes the JavaScript [WebGLRenderbuffer](https://developer.mozilla.org/en/docs/Web/API/WebGLRenderbuffer) to Kotlin\n */\npublic external abstract class WebGLRenderbuffer : WebGLObject\n\n/**\n * Exposes the JavaScript [WebGLShader](https://developer.mozilla.org/en/docs/Web/API/WebGLShader) to Kotlin\n */\npublic external abstract class WebGLShader : WebGLObject\n\n/**\n * Exposes the JavaScript [WebGLTexture](https://developer.mozilla.org/en/docs/Web/API/WebGLTexture) to Kotlin\n */\npublic external abstract class WebGLTexture : WebGLObject\n\n/**\n * Exposes the JavaScript [WebGLUniformLocation](https://developer.mozilla.org/en/docs/Web/API/WebGLUniformLocation) to Kotlin\n */\npublic external abstract class WebGLUniformLocation\n\n/**\n * Exposes the JavaScript [WebGLActiveInfo](https://developer.mozilla.org/en/docs/Web/API/WebGLActiveInfo) to Kotlin\n */\npublic external abstract class WebGLActiveInfo {\n    open val size: Int\n    open val type: Int\n    open val name: String\n}\n\n/**\n * Exposes the JavaScript [WebGLShaderPrecisionFormat](https://developer.mozilla.org/en/docs/Web/API/WebGLShaderPrecisionFormat) to Kotlin\n */\npublic external abstract class WebGLShaderPrecisionFormat {\n    open val rangeMin: Int\n    open val rangeMax: Int\n    open val precision: Int\n}\n\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface WebGLRenderingContextBase {\n    val canvas: HTMLCanvasElement\n    val drawingBufferWidth: Int\n    val drawingBufferHeight: Int\n    fun getContextAttributes(): WebGLContextAttributes?\n    fun isContextLost(): Boolean\n    fun getSupportedExtensions(): Array<String>?\n    fun getExtension(name: String): dynamic\n    fun activeTexture(texture: Int)\n    fun attachShader(program: WebGLProgram?, shader: WebGLShader?)\n    fun bindAttribLocation(program: WebGLProgram?, index: Int, name: String)\n    fun bindBuffer(target: Int, buffer: WebGLBuffer?)\n    fun bindFramebuffer(target: Int, framebuffer: WebGLFramebuffer?)\n    fun bindRenderbuffer(target: Int, renderbuffer: WebGLRenderbuffer?)\n    fun bindTexture(target: Int, texture: WebGLTexture?)\n    fun blendColor(red: Float, green: Float, blue: Float, alpha: Float)\n    fun blendEquation(mode: Int)\n    fun blendEquationSeparate(modeRGB: Int, modeAlpha: Int)\n    fun blendFunc(sfactor: Int, dfactor: Int)\n    fun blendFuncSeparate(srcRGB: Int, dstRGB: Int, srcAlpha: Int, dstAlpha: Int)\n    fun bufferData(target: Int, size: Int, usage: Int)\n    fun bufferData(target: Int, data: BufferDataSource?, usage: Int)\n    fun bufferSubData(target: Int, offset: Int, data: BufferDataSource?)\n    fun checkFramebufferStatus(target: Int): Int\n    fun clear(mask: Int)\n    fun clearColor(red: Float, green: Float, blue: Float, alpha: Float)\n    fun clearDepth(depth: Float)\n    fun clearStencil(s: Int)\n    fun colorMask(red: Boolean, green: Boolean, blue: Boolean, alpha: Boolean)\n    fun compileShader(shader: WebGLShader?)\n    fun compressedTexImage2D(target: Int, level: Int, internalformat: Int, width: Int, height: Int, border: Int, data: ArrayBufferView)\n    fun compressedTexSubImage2D(target: Int, level: Int, xoffset: Int, yoffset: Int, width: Int, height: Int, format: Int, data: ArrayBufferView)\n    fun copyTexImage2D(target: Int, level: Int, internalformat: Int, x: Int, y: Int, width: Int, height: Int, border: Int)\n    fun copyTexSubImage2D(target: Int, level: Int, xoffset: Int, yoffset: Int, x: Int, y: Int, width: Int, height: Int)\n    fun createBuffer(): WebGLBuffer?\n    fun createFramebuffer(): WebGLFramebuffer?\n    fun createProgram(): WebGLProgram?\n    fun createRenderbuffer(): WebGLRenderbuffer?\n    fun createShader(type: Int): WebGLShader?\n    fun createTexture(): WebGLTexture?\n    fun cullFace(mode: Int)\n    fun deleteBuffer(buffer: WebGLBuffer?)\n    fun deleteFramebuffer(framebuffer: WebGLFramebuffer?)\n    fun deleteProgram(program: WebGLProgram?)\n    fun deleteRenderbuffer(renderbuffer: WebGLRenderbuffer?)\n    fun deleteShader(shader: WebGLShader?)\n    fun deleteTexture(texture: WebGLTexture?)\n    fun depthFunc(func: Int)\n    fun depthMask(flag: Boolean)\n    fun depthRange(zNear: Float, zFar: Float)\n    fun detachShader(program: WebGLProgram?, shader: WebGLShader?)\n    fun disable(cap: Int)\n    fun disableVertexAttribArray(index: Int)\n    fun drawArrays(mode: Int, first: Int, count: Int)\n    fun drawElements(mode: Int, count: Int, type: Int, offset: Int)\n    fun enable(cap: Int)\n    fun enableVertexAttribArray(index: Int)\n    fun finish()\n    fun flush()\n    fun framebufferRenderbuffer(target: Int, attachment: Int, renderbuffertarget: Int, renderbuffer: WebGLRenderbuffer?)\n    fun framebufferTexture2D(target: Int, attachment: Int, textarget: Int, texture: WebGLTexture?, level: Int)\n    fun frontFace(mode: Int)\n    fun generateMipmap(target: Int)\n    fun getActiveAttrib(program: WebGLProgram?, index: Int): WebGLActiveInfo?\n    fun getActiveUniform(program: WebGLProgram?, index: Int): WebGLActiveInfo?\n    fun getAttachedShaders(program: WebGLProgram?): Array<WebGLShader>?\n    fun getAttribLocation(program: WebGLProgram?, name: String): Int\n    fun getBufferParameter(target: Int, pname: Int): Any?\n    fun getParameter(pname: Int): Any?\n    fun getError(): Int\n    fun getFramebufferAttachmentParameter(target: Int, attachment: Int, pname: Int): Any?\n    fun getProgramParameter(program: WebGLProgram?, pname: Int): Any?\n    fun getProgramInfoLog(program: WebGLProgram?): String?\n    fun getRenderbufferParameter(target: Int, pname: Int): Any?\n    fun getShaderParameter(shader: WebGLShader?, pname: Int): Any?\n    fun getShaderPrecisionFormat(shadertype: Int, precisiontype: Int): WebGLShaderPrecisionFormat?\n    fun getShaderInfoLog(shader: WebGLShader?): String?\n    fun getShaderSource(shader: WebGLShader?): String?\n    fun getTexParameter(target: Int, pname: Int): Any?\n    fun getUniform(program: WebGLProgram?, location: WebGLUniformLocation?): Any?\n    fun getUniformLocation(program: WebGLProgram?, name: String): WebGLUniformLocation?\n    fun getVertexAttrib(index: Int, pname: Int): Any?\n    fun getVertexAttribOffset(index: Int, pname: Int): Int\n    fun hint(target: Int, mode: Int)\n    fun isBuffer(buffer: WebGLBuffer?): Boolean\n    fun isEnabled(cap: Int): Boolean\n    fun isFramebuffer(framebuffer: WebGLFramebuffer?): Boolean\n    fun isProgram(program: WebGLProgram?): Boolean\n    fun isRenderbuffer(renderbuffer: WebGLRenderbuffer?): Boolean\n    fun isShader(shader: WebGLShader?): Boolean\n    fun isTexture(texture: WebGLTexture?): Boolean\n    fun lineWidth(width: Float)\n    fun linkProgram(program: WebGLProgram?)\n    fun pixelStorei(pname: Int, param: Int)\n    fun polygonOffset(factor: Float, units: Float)\n    fun readPixels(x: Int, y: Int, width: Int, height: Int, format: Int, type: Int, pixels: ArrayBufferView?)\n    fun renderbufferStorage(target: Int, internalformat: Int, width: Int, height: Int)\n    fun sampleCoverage(value: Float, invert: Boolean)\n    fun scissor(x: Int, y: Int, width: Int, height: Int)\n    fun shaderSource(shader: WebGLShader?, source: String)\n    fun stencilFunc(func: Int, ref: Int, mask: Int)\n    fun stencilFuncSeparate(face: Int, func: Int, ref: Int, mask: Int)\n    fun stencilMask(mask: Int)\n    fun stencilMaskSeparate(face: Int, mask: Int)\n    fun stencilOp(fail: Int, zfail: Int, zpass: Int)\n    fun stencilOpSeparate(face: Int, fail: Int, zfail: Int, zpass: Int)\n    fun texImage2D(target: Int, level: Int, internalformat: Int, width: Int, height: Int, border: Int, format: Int, type: Int, pixels: ArrayBufferView?)\n    fun texImage2D(target: Int, level: Int, internalformat: Int, format: Int, type: Int, source: TexImageSource?)\n    fun texParameterf(target: Int, pname: Int, param: Float)\n    fun texParameteri(target: Int, pname: Int, param: Int)\n    fun texSubImage2D(target: Int, level: Int, xoffset: Int, yoffset: Int, width: Int, height: Int, format: Int, type: Int, pixels: ArrayBufferView?)\n    fun texSubImage2D(target: Int, level: Int, xoffset: Int, yoffset: Int, format: Int, type: Int, source: TexImageSource?)\n    fun uniform1f(location: WebGLUniformLocation?, x: Float)\n    fun uniform1fv(location: WebGLUniformLocation?, v: Float32Array)\n    fun uniform1fv(location: WebGLUniformLocation?, v: Array<Float>)\n    fun uniform1i(location: WebGLUniformLocation?, x: Int)\n    fun uniform1iv(location: WebGLUniformLocation?, v: Int32Array)\n    fun uniform1iv(location: WebGLUniformLocation?, v: Array<Int>)\n    fun uniform2f(location: WebGLUniformLocation?, x: Float, y: Float)\n    fun uniform2fv(location: WebGLUniformLocation?, v: Float32Array)\n    fun uniform2fv(location: WebGLUniformLocation?, v: Array<Float>)\n    fun uniform2i(location: WebGLUniformLocation?, x: Int, y: Int)\n    fun uniform2iv(location: WebGLUniformLocation?, v: Int32Array)\n    fun uniform2iv(location: WebGLUniformLocation?, v: Array<Int>)\n    fun uniform3f(location: WebGLUniformLocation?, x: Float, y: Float, z: Float)\n    fun uniform3fv(location: WebGLUniformLocation?, v: Float32Array)\n    fun uniform3fv(location: WebGLUniformLocation?, v: Array<Float>)\n    fun uniform3i(location: WebGLUniformLocation?, x: Int, y: Int, z: Int)\n    fun uniform3iv(location: WebGLUniformLocation?, v: Int32Array)\n    fun uniform3iv(location: WebGLUniformLocation?, v: Array<Int>)\n    fun uniform4f(location: WebGLUniformLocation?, x: Float, y: Float, z: Float, w: Float)\n    fun uniform4fv(location: WebGLUniformLocation?, v: Float32Array)\n    fun uniform4fv(location: WebGLUniformLocation?, v: Array<Float>)\n    fun uniform4i(location: WebGLUniformLocation?, x: Int, y: Int, z: Int, w: Int)\n    fun uniform4iv(location: WebGLUniformLocation?, v: Int32Array)\n    fun uniform4iv(location: WebGLUniformLocation?, v: Array<Int>)\n    fun uniformMatrix2fv(location: WebGLUniformLocation?, transpose: Boolean, value: Float32Array)\n    fun uniformMatrix2fv(location: WebGLUniformLocation?, transpose: Boolean, value: Array<Float>)\n    fun uniformMatrix3fv(location: WebGLUniformLocation?, transpose: Boolean, value: Float32Array)\n    fun uniformMatrix3fv(location: WebGLUniformLocation?, transpose: Boolean, value: Array<Float>)\n    fun uniformMatrix4fv(location: WebGLUniformLocation?, transpose: Boolean, value: Float32Array)\n    fun uniformMatrix4fv(location: WebGLUniformLocation?, transpose: Boolean, value: Array<Float>)\n    fun useProgram(program: WebGLProgram?)\n    fun validateProgram(program: WebGLProgram?)\n    fun vertexAttrib1f(index: Int, x: Float)\n    fun vertexAttrib1fv(index: Int, values: dynamic)\n    fun vertexAttrib2f(index: Int, x: Float, y: Float)\n    fun vertexAttrib2fv(index: Int, values: dynamic)\n    fun vertexAttrib3f(index: Int, x: Float, y: Float, z: Float)\n    fun vertexAttrib3fv(index: Int, values: dynamic)\n    fun vertexAttrib4f(index: Int, x: Float, y: Float, z: Float, w: Float)\n    fun vertexAttrib4fv(index: Int, values: dynamic)\n    fun vertexAttribPointer(index: Int, size: Int, type: Int, normalized: Boolean, stride: Int, offset: Int)\n    fun viewport(x: Int, y: Int, width: Int, height: Int)\n\n    companion object {\n        val DEPTH_BUFFER_BIT: Int\n        val STENCIL_BUFFER_BIT: Int\n        val COLOR_BUFFER_BIT: Int\n        val POINTS: Int\n        val LINES: Int\n        val LINE_LOOP: Int\n        val LINE_STRIP: Int\n        val TRIANGLES: Int\n        val TRIANGLE_STRIP: Int\n        val TRIANGLE_FAN: Int\n        val ZERO: Int\n        val ONE: Int\n        val SRC_COLOR: Int\n        val ONE_MINUS_SRC_COLOR: Int\n        val SRC_ALPHA: Int\n        val ONE_MINUS_SRC_ALPHA: Int\n        val DST_ALPHA: Int\n        val ONE_MINUS_DST_ALPHA: Int\n        val DST_COLOR: Int\n        val ONE_MINUS_DST_COLOR: Int\n        val SRC_ALPHA_SATURATE: Int\n        val FUNC_ADD: Int\n        val BLEND_EQUATION: Int\n        val BLEND_EQUATION_RGB: Int\n        val BLEND_EQUATION_ALPHA: Int\n        val FUNC_SUBTRACT: Int\n        val FUNC_REVERSE_SUBTRACT: Int\n        val BLEND_DST_RGB: Int\n        val BLEND_SRC_RGB: Int\n        val BLEND_DST_ALPHA: Int\n        val BLEND_SRC_ALPHA: Int\n        val CONSTANT_COLOR: Int\n        val ONE_MINUS_CONSTANT_COLOR: Int\n        val CONSTANT_ALPHA: Int\n        val ONE_MINUS_CONSTANT_ALPHA: Int\n        val BLEND_COLOR: Int\n        val ARRAY_BUFFER: Int\n        val ELEMENT_ARRAY_BUFFER: Int\n        val ARRAY_BUFFER_BINDING: Int\n        val ELEMENT_ARRAY_BUFFER_BINDING: Int\n        val STREAM_DRAW: Int\n        val STATIC_DRAW: Int\n        val DYNAMIC_DRAW: Int\n        val BUFFER_SIZE: Int\n        val BUFFER_USAGE: Int\n        val CURRENT_VERTEX_ATTRIB: Int\n        val FRONT: Int\n        val BACK: Int\n        val FRONT_AND_BACK: Int\n        val CULL_FACE: Int\n        val BLEND: Int\n        val DITHER: Int\n        val STENCIL_TEST: Int\n        val DEPTH_TEST: Int\n        val SCISSOR_TEST: Int\n        val POLYGON_OFFSET_FILL: Int\n        val SAMPLE_ALPHA_TO_COVERAGE: Int\n        val SAMPLE_COVERAGE: Int\n        val NO_ERROR: Int\n        val INVALID_ENUM: Int\n        val INVALID_VALUE: Int\n        val INVALID_OPERATION: Int\n        val OUT_OF_MEMORY: Int\n        val CW: Int\n        val CCW: Int\n        val LINE_WIDTH: Int\n        val ALIASED_POINT_SIZE_RANGE: Int\n        val ALIASED_LINE_WIDTH_RANGE: Int\n        val CULL_FACE_MODE: Int\n        val FRONT_FACE: Int\n        val DEPTH_RANGE: Int\n        val DEPTH_WRITEMASK: Int\n        val DEPTH_CLEAR_VALUE: Int\n        val DEPTH_FUNC: Int\n        val STENCIL_CLEAR_VALUE: Int\n        val STENCIL_FUNC: Int\n        val STENCIL_FAIL: Int\n        val STENCIL_PASS_DEPTH_FAIL: Int\n        val STENCIL_PASS_DEPTH_PASS: Int\n        val STENCIL_REF: Int\n        val STENCIL_VALUE_MASK: Int\n        val STENCIL_WRITEMASK: Int\n        val STENCIL_BACK_FUNC: Int\n        val STENCIL_BACK_FAIL: Int\n        val STENCIL_BACK_PASS_DEPTH_FAIL: Int\n        val STENCIL_BACK_PASS_DEPTH_PASS: Int\n        val STENCIL_BACK_REF: Int\n        val STENCIL_BACK_VALUE_MASK: Int\n        val STENCIL_BACK_WRITEMASK: Int\n        val VIEWPORT: Int\n        val SCISSOR_BOX: Int\n        val COLOR_CLEAR_VALUE: Int\n        val COLOR_WRITEMASK: Int\n        val UNPACK_ALIGNMENT: Int\n        val PACK_ALIGNMENT: Int\n        val MAX_TEXTURE_SIZE: Int\n        val MAX_VIEWPORT_DIMS: Int\n        val SUBPIXEL_BITS: Int\n        val RED_BITS: Int\n        val GREEN_BITS: Int\n        val BLUE_BITS: Int\n        val ALPHA_BITS: Int\n        val DEPTH_BITS: Int\n        val STENCIL_BITS: Int\n        val POLYGON_OFFSET_UNITS: Int\n        val POLYGON_OFFSET_FACTOR: Int\n        val TEXTURE_BINDING_2D: Int\n        val SAMPLE_BUFFERS: Int\n        val SAMPLES: Int\n        val SAMPLE_COVERAGE_VALUE: Int\n        val SAMPLE_COVERAGE_INVERT: Int\n        val COMPRESSED_TEXTURE_FORMATS: Int\n        val DONT_CARE: Int\n        val FASTEST: Int\n        val NICEST: Int\n        val GENERATE_MIPMAP_HINT: Int\n        val BYTE: Int\n        val UNSIGNED_BYTE: Int\n        val SHORT: Int\n        val UNSIGNED_SHORT: Int\n        val INT: Int\n        val UNSIGNED_INT: Int\n        val FLOAT: Int\n        val DEPTH_COMPONENT: Int\n        val ALPHA: Int\n        val RGB: Int\n        val RGBA: Int\n        val LUMINANCE: Int\n        val LUMINANCE_ALPHA: Int\n        val UNSIGNED_SHORT_4_4_4_4: Int\n        val UNSIGNED_SHORT_5_5_5_1: Int\n        val UNSIGNED_SHORT_5_6_5: Int\n        val FRAGMENT_SHADER: Int\n        val VERTEX_SHADER: Int\n        val MAX_VERTEX_ATTRIBS: Int\n        val MAX_VERTEX_UNIFORM_VECTORS: Int\n        val MAX_VARYING_VECTORS: Int\n        val MAX_COMBINED_TEXTURE_IMAGE_UNITS: Int\n        val MAX_VERTEX_TEXTURE_IMAGE_UNITS: Int\n        val MAX_TEXTURE_IMAGE_UNITS: Int\n        val MAX_FRAGMENT_UNIFORM_VECTORS: Int\n        val SHADER_TYPE: Int\n        val DELETE_STATUS: Int\n        val LINK_STATUS: Int\n        val VALIDATE_STATUS: Int\n        val ATTACHED_SHADERS: Int\n        val ACTIVE_UNIFORMS: Int\n        val ACTIVE_ATTRIBUTES: Int\n        val SHADING_LANGUAGE_VERSION: Int\n        val CURRENT_PROGRAM: Int\n        val NEVER: Int\n        val LESS: Int\n        val EQUAL: Int\n        val LEQUAL: Int\n        val GREATER: Int\n        val NOTEQUAL: Int\n        val GEQUAL: Int\n        val ALWAYS: Int\n        val KEEP: Int\n        val REPLACE: Int\n        val INCR: Int\n        val DECR: Int\n        val INVERT: Int\n        val INCR_WRAP: Int\n        val DECR_WRAP: Int\n        val VENDOR: Int\n        val RENDERER: Int\n        val VERSION: Int\n        val NEAREST: Int\n        val LINEAR: Int\n        val NEAREST_MIPMAP_NEAREST: Int\n        val LINEAR_MIPMAP_NEAREST: Int\n        val NEAREST_MIPMAP_LINEAR: Int\n        val LINEAR_MIPMAP_LINEAR: Int\n        val TEXTURE_MAG_FILTER: Int\n        val TEXTURE_MIN_FILTER: Int\n        val TEXTURE_WRAP_S: Int\n        val TEXTURE_WRAP_T: Int\n        val TEXTURE_2D: Int\n        val TEXTURE: Int\n        val TEXTURE_CUBE_MAP: Int\n        val TEXTURE_BINDING_CUBE_MAP: Int\n        val TEXTURE_CUBE_MAP_POSITIVE_X: Int\n        val TEXTURE_CUBE_MAP_NEGATIVE_X: Int\n        val TEXTURE_CUBE_MAP_POSITIVE_Y: Int\n        val TEXTURE_CUBE_MAP_NEGATIVE_Y: Int\n        val TEXTURE_CUBE_MAP_POSITIVE_Z: Int\n        val TEXTURE_CUBE_MAP_NEGATIVE_Z: Int\n        val MAX_CUBE_MAP_TEXTURE_SIZE: Int\n        val TEXTURE0: Int\n        val TEXTURE1: Int\n        val TEXTURE2: Int\n        val TEXTURE3: Int\n        val TEXTURE4: Int\n        val TEXTURE5: Int\n        val TEXTURE6: Int\n        val TEXTURE7: Int\n        val TEXTURE8: Int\n        val TEXTURE9: Int\n        val TEXTURE10: Int\n        val TEXTURE11: Int\n        val TEXTURE12: Int\n        val TEXTURE13: Int\n        val TEXTURE14: Int\n        val TEXTURE15: Int\n        val TEXTURE16: Int\n        val TEXTURE17: Int\n        val TEXTURE18: Int\n        val TEXTURE19: Int\n        val TEXTURE20: Int\n        val TEXTURE21: Int\n        val TEXTURE22: Int\n        val TEXTURE23: Int\n        val TEXTURE24: Int\n        val TEXTURE25: Int\n        val TEXTURE26: Int\n        val TEXTURE27: Int\n        val TEXTURE28: Int\n        val TEXTURE29: Int\n        val TEXTURE30: Int\n        val TEXTURE31: Int\n        val ACTIVE_TEXTURE: Int\n        val REPEAT: Int\n        val CLAMP_TO_EDGE: Int\n        val MIRRORED_REPEAT: Int\n        val FLOAT_VEC2: Int\n        val FLOAT_VEC3: Int\n        val FLOAT_VEC4: Int\n        val INT_VEC2: Int\n        val INT_VEC3: Int\n        val INT_VEC4: Int\n        val BOOL: Int\n        val BOOL_VEC2: Int\n        val BOOL_VEC3: Int\n        val BOOL_VEC4: Int\n        val FLOAT_MAT2: Int\n        val FLOAT_MAT3: Int\n        val FLOAT_MAT4: Int\n        val SAMPLER_2D: Int\n        val SAMPLER_CUBE: Int\n        val VERTEX_ATTRIB_ARRAY_ENABLED: Int\n        val VERTEX_ATTRIB_ARRAY_SIZE: Int\n        val VERTEX_ATTRIB_ARRAY_STRIDE: Int\n        val VERTEX_ATTRIB_ARRAY_TYPE: Int\n        val VERTEX_ATTRIB_ARRAY_NORMALIZED: Int\n        val VERTEX_ATTRIB_ARRAY_POINTER: Int\n        val VERTEX_ATTRIB_ARRAY_BUFFER_BINDING: Int\n        val IMPLEMENTATION_COLOR_READ_TYPE: Int\n        val IMPLEMENTATION_COLOR_READ_FORMAT: Int\n        val COMPILE_STATUS: Int\n        val LOW_FLOAT: Int\n        val MEDIUM_FLOAT: Int\n        val HIGH_FLOAT: Int\n        val LOW_INT: Int\n        val MEDIUM_INT: Int\n        val HIGH_INT: Int\n        val FRAMEBUFFER: Int\n        val RENDERBUFFER: Int\n        val RGBA4: Int\n        val RGB5_A1: Int\n        val RGB565: Int\n        val DEPTH_COMPONENT16: Int\n        val STENCIL_INDEX: Int\n        val STENCIL_INDEX8: Int\n        val DEPTH_STENCIL: Int\n        val RENDERBUFFER_WIDTH: Int\n        val RENDERBUFFER_HEIGHT: Int\n        val RENDERBUFFER_INTERNAL_FORMAT: Int\n        val RENDERBUFFER_RED_SIZE: Int\n        val RENDERBUFFER_GREEN_SIZE: Int\n        val RENDERBUFFER_BLUE_SIZE: Int\n        val RENDERBUFFER_ALPHA_SIZE: Int\n        val RENDERBUFFER_DEPTH_SIZE: Int\n        val RENDERBUFFER_STENCIL_SIZE: Int\n        val FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE: Int\n        val FRAMEBUFFER_ATTACHMENT_OBJECT_NAME: Int\n        val FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL: Int\n        val FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE: Int\n        val COLOR_ATTACHMENT0: Int\n        val DEPTH_ATTACHMENT: Int\n        val STENCIL_ATTACHMENT: Int\n        val DEPTH_STENCIL_ATTACHMENT: Int\n        val NONE: Int\n        val FRAMEBUFFER_COMPLETE: Int\n        val FRAMEBUFFER_INCOMPLETE_ATTACHMENT: Int\n        val FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT: Int\n        val FRAMEBUFFER_INCOMPLETE_DIMENSIONS: Int\n        val FRAMEBUFFER_UNSUPPORTED: Int\n        val FRAMEBUFFER_BINDING: Int\n        val RENDERBUFFER_BINDING: Int\n        val MAX_RENDERBUFFER_SIZE: Int\n        val INVALID_FRAMEBUFFER_OPERATION: Int\n        val UNPACK_FLIP_Y_WEBGL: Int\n        val UNPACK_PREMULTIPLY_ALPHA_WEBGL: Int\n        val CONTEXT_LOST_WEBGL: Int\n        val UNPACK_COLORSPACE_CONVERSION_WEBGL: Int\n        val BROWSER_DEFAULT_WEBGL: Int\n    }\n}\n\n/**\n * Exposes the JavaScript [WebGLRenderingContext](https://developer.mozilla.org/en/docs/Web/API/WebGLRenderingContext) to Kotlin\n */\npublic external abstract class WebGLRenderingContext : WebGLRenderingContextBase, RenderingContext {\n    companion object {\n        val DEPTH_BUFFER_BIT: Int\n        val STENCIL_BUFFER_BIT: Int\n        val COLOR_BUFFER_BIT: Int\n        val POINTS: Int\n        val LINES: Int\n        val LINE_LOOP: Int\n        val LINE_STRIP: Int\n        val TRIANGLES: Int\n        val TRIANGLE_STRIP: Int\n        val TRIANGLE_FAN: Int\n        val ZERO: Int\n        val ONE: Int\n        val SRC_COLOR: Int\n        val ONE_MINUS_SRC_COLOR: Int\n        val SRC_ALPHA: Int\n        val ONE_MINUS_SRC_ALPHA: Int\n        val DST_ALPHA: Int\n        val ONE_MINUS_DST_ALPHA: Int\n        val DST_COLOR: Int\n        val ONE_MINUS_DST_COLOR: Int\n        val SRC_ALPHA_SATURATE: Int\n        val FUNC_ADD: Int\n        val BLEND_EQUATION: Int\n        val BLEND_EQUATION_RGB: Int\n        val BLEND_EQUATION_ALPHA: Int\n        val FUNC_SUBTRACT: Int\n        val FUNC_REVERSE_SUBTRACT: Int\n        val BLEND_DST_RGB: Int\n        val BLEND_SRC_RGB: Int\n        val BLEND_DST_ALPHA: Int\n        val BLEND_SRC_ALPHA: Int\n        val CONSTANT_COLOR: Int\n        val ONE_MINUS_CONSTANT_COLOR: Int\n        val CONSTANT_ALPHA: Int\n        val ONE_MINUS_CONSTANT_ALPHA: Int\n        val BLEND_COLOR: Int\n        val ARRAY_BUFFER: Int\n        val ELEMENT_ARRAY_BUFFER: Int\n        val ARRAY_BUFFER_BINDING: Int\n        val ELEMENT_ARRAY_BUFFER_BINDING: Int\n        val STREAM_DRAW: Int\n        val STATIC_DRAW: Int\n        val DYNAMIC_DRAW: Int\n        val BUFFER_SIZE: Int\n        val BUFFER_USAGE: Int\n        val CURRENT_VERTEX_ATTRIB: Int\n        val FRONT: Int\n        val BACK: Int\n        val FRONT_AND_BACK: Int\n        val CULL_FACE: Int\n        val BLEND: Int\n        val DITHER: Int\n        val STENCIL_TEST: Int\n        val DEPTH_TEST: Int\n        val SCISSOR_TEST: Int\n        val POLYGON_OFFSET_FILL: Int\n        val SAMPLE_ALPHA_TO_COVERAGE: Int\n        val SAMPLE_COVERAGE: Int\n        val NO_ERROR: Int\n        val INVALID_ENUM: Int\n        val INVALID_VALUE: Int\n        val INVALID_OPERATION: Int\n        val OUT_OF_MEMORY: Int\n        val CW: Int\n        val CCW: Int\n        val LINE_WIDTH: Int\n        val ALIASED_POINT_SIZE_RANGE: Int\n        val ALIASED_LINE_WIDTH_RANGE: Int\n        val CULL_FACE_MODE: Int\n        val FRONT_FACE: Int\n        val DEPTH_RANGE: Int\n        val DEPTH_WRITEMASK: Int\n        val DEPTH_CLEAR_VALUE: Int\n        val DEPTH_FUNC: Int\n        val STENCIL_CLEAR_VALUE: Int\n        val STENCIL_FUNC: Int\n        val STENCIL_FAIL: Int\n        val STENCIL_PASS_DEPTH_FAIL: Int\n        val STENCIL_PASS_DEPTH_PASS: Int\n        val STENCIL_REF: Int\n        val STENCIL_VALUE_MASK: Int\n        val STENCIL_WRITEMASK: Int\n        val STENCIL_BACK_FUNC: Int\n        val STENCIL_BACK_FAIL: Int\n        val STENCIL_BACK_PASS_DEPTH_FAIL: Int\n        val STENCIL_BACK_PASS_DEPTH_PASS: Int\n        val STENCIL_BACK_REF: Int\n        val STENCIL_BACK_VALUE_MASK: Int\n        val STENCIL_BACK_WRITEMASK: Int\n        val VIEWPORT: Int\n        val SCISSOR_BOX: Int\n        val COLOR_CLEAR_VALUE: Int\n        val COLOR_WRITEMASK: Int\n        val UNPACK_ALIGNMENT: Int\n        val PACK_ALIGNMENT: Int\n        val MAX_TEXTURE_SIZE: Int\n        val MAX_VIEWPORT_DIMS: Int\n        val SUBPIXEL_BITS: Int\n        val RED_BITS: Int\n        val GREEN_BITS: Int\n        val BLUE_BITS: Int\n        val ALPHA_BITS: Int\n        val DEPTH_BITS: Int\n        val STENCIL_BITS: Int\n        val POLYGON_OFFSET_UNITS: Int\n        val POLYGON_OFFSET_FACTOR: Int\n        val TEXTURE_BINDING_2D: Int\n        val SAMPLE_BUFFERS: Int\n        val SAMPLES: Int\n        val SAMPLE_COVERAGE_VALUE: Int\n        val SAMPLE_COVERAGE_INVERT: Int\n        val COMPRESSED_TEXTURE_FORMATS: Int\n        val DONT_CARE: Int\n        val FASTEST: Int\n        val NICEST: Int\n        val GENERATE_MIPMAP_HINT: Int\n        val BYTE: Int\n        val UNSIGNED_BYTE: Int\n        val SHORT: Int\n        val UNSIGNED_SHORT: Int\n        val INT: Int\n        val UNSIGNED_INT: Int\n        val FLOAT: Int\n        val DEPTH_COMPONENT: Int\n        val ALPHA: Int\n        val RGB: Int\n        val RGBA: Int\n        val LUMINANCE: Int\n        val LUMINANCE_ALPHA: Int\n        val UNSIGNED_SHORT_4_4_4_4: Int\n        val UNSIGNED_SHORT_5_5_5_1: Int\n        val UNSIGNED_SHORT_5_6_5: Int\n        val FRAGMENT_SHADER: Int\n        val VERTEX_SHADER: Int\n        val MAX_VERTEX_ATTRIBS: Int\n        val MAX_VERTEX_UNIFORM_VECTORS: Int\n        val MAX_VARYING_VECTORS: Int\n        val MAX_COMBINED_TEXTURE_IMAGE_UNITS: Int\n        val MAX_VERTEX_TEXTURE_IMAGE_UNITS: Int\n        val MAX_TEXTURE_IMAGE_UNITS: Int\n        val MAX_FRAGMENT_UNIFORM_VECTORS: Int\n        val SHADER_TYPE: Int\n        val DELETE_STATUS: Int\n        val LINK_STATUS: Int\n        val VALIDATE_STATUS: Int\n        val ATTACHED_SHADERS: Int\n        val ACTIVE_UNIFORMS: Int\n        val ACTIVE_ATTRIBUTES: Int\n        val SHADING_LANGUAGE_VERSION: Int\n        val CURRENT_PROGRAM: Int\n        val NEVER: Int\n        val LESS: Int\n        val EQUAL: Int\n        val LEQUAL: Int\n        val GREATER: Int\n        val NOTEQUAL: Int\n        val GEQUAL: Int\n        val ALWAYS: Int\n        val KEEP: Int\n        val REPLACE: Int\n        val INCR: Int\n        val DECR: Int\n        val INVERT: Int\n        val INCR_WRAP: Int\n        val DECR_WRAP: Int\n        val VENDOR: Int\n        val RENDERER: Int\n        val VERSION: Int\n        val NEAREST: Int\n        val LINEAR: Int\n        val NEAREST_MIPMAP_NEAREST: Int\n        val LINEAR_MIPMAP_NEAREST: Int\n        val NEAREST_MIPMAP_LINEAR: Int\n        val LINEAR_MIPMAP_LINEAR: Int\n        val TEXTURE_MAG_FILTER: Int\n        val TEXTURE_MIN_FILTER: Int\n        val TEXTURE_WRAP_S: Int\n        val TEXTURE_WRAP_T: Int\n        val TEXTURE_2D: Int\n        val TEXTURE: Int\n        val TEXTURE_CUBE_MAP: Int\n        val TEXTURE_BINDING_CUBE_MAP: Int\n        val TEXTURE_CUBE_MAP_POSITIVE_X: Int\n        val TEXTURE_CUBE_MAP_NEGATIVE_X: Int\n        val TEXTURE_CUBE_MAP_POSITIVE_Y: Int\n        val TEXTURE_CUBE_MAP_NEGATIVE_Y: Int\n        val TEXTURE_CUBE_MAP_POSITIVE_Z: Int\n        val TEXTURE_CUBE_MAP_NEGATIVE_Z: Int\n        val MAX_CUBE_MAP_TEXTURE_SIZE: Int\n        val TEXTURE0: Int\n        val TEXTURE1: Int\n        val TEXTURE2: Int\n        val TEXTURE3: Int\n        val TEXTURE4: Int\n        val TEXTURE5: Int\n        val TEXTURE6: Int\n        val TEXTURE7: Int\n        val TEXTURE8: Int\n        val TEXTURE9: Int\n        val TEXTURE10: Int\n        val TEXTURE11: Int\n        val TEXTURE12: Int\n        val TEXTURE13: Int\n        val TEXTURE14: Int\n        val TEXTURE15: Int\n        val TEXTURE16: Int\n        val TEXTURE17: Int\n        val TEXTURE18: Int\n        val TEXTURE19: Int\n        val TEXTURE20: Int\n        val TEXTURE21: Int\n        val TEXTURE22: Int\n        val TEXTURE23: Int\n        val TEXTURE24: Int\n        val TEXTURE25: Int\n        val TEXTURE26: Int\n        val TEXTURE27: Int\n        val TEXTURE28: Int\n        val TEXTURE29: Int\n        val TEXTURE30: Int\n        val TEXTURE31: Int\n        val ACTIVE_TEXTURE: Int\n        val REPEAT: Int\n        val CLAMP_TO_EDGE: Int\n        val MIRRORED_REPEAT: Int\n        val FLOAT_VEC2: Int\n        val FLOAT_VEC3: Int\n        val FLOAT_VEC4: Int\n        val INT_VEC2: Int\n        val INT_VEC3: Int\n        val INT_VEC4: Int\n        val BOOL: Int\n        val BOOL_VEC2: Int\n        val BOOL_VEC3: Int\n        val BOOL_VEC4: Int\n        val FLOAT_MAT2: Int\n        val FLOAT_MAT3: Int\n        val FLOAT_MAT4: Int\n        val SAMPLER_2D: Int\n        val SAMPLER_CUBE: Int\n        val VERTEX_ATTRIB_ARRAY_ENABLED: Int\n        val VERTEX_ATTRIB_ARRAY_SIZE: Int\n        val VERTEX_ATTRIB_ARRAY_STRIDE: Int\n        val VERTEX_ATTRIB_ARRAY_TYPE: Int\n        val VERTEX_ATTRIB_ARRAY_NORMALIZED: Int\n        val VERTEX_ATTRIB_ARRAY_POINTER: Int\n        val VERTEX_ATTRIB_ARRAY_BUFFER_BINDING: Int\n        val IMPLEMENTATION_COLOR_READ_TYPE: Int\n        val IMPLEMENTATION_COLOR_READ_FORMAT: Int\n        val COMPILE_STATUS: Int\n        val LOW_FLOAT: Int\n        val MEDIUM_FLOAT: Int\n        val HIGH_FLOAT: Int\n        val LOW_INT: Int\n        val MEDIUM_INT: Int\n        val HIGH_INT: Int\n        val FRAMEBUFFER: Int\n        val RENDERBUFFER: Int\n        val RGBA4: Int\n        val RGB5_A1: Int\n        val RGB565: Int\n        val DEPTH_COMPONENT16: Int\n        val STENCIL_INDEX: Int\n        val STENCIL_INDEX8: Int\n        val DEPTH_STENCIL: Int\n        val RENDERBUFFER_WIDTH: Int\n        val RENDERBUFFER_HEIGHT: Int\n        val RENDERBUFFER_INTERNAL_FORMAT: Int\n        val RENDERBUFFER_RED_SIZE: Int\n        val RENDERBUFFER_GREEN_SIZE: Int\n        val RENDERBUFFER_BLUE_SIZE: Int\n        val RENDERBUFFER_ALPHA_SIZE: Int\n        val RENDERBUFFER_DEPTH_SIZE: Int\n        val RENDERBUFFER_STENCIL_SIZE: Int\n        val FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE: Int\n        val FRAMEBUFFER_ATTACHMENT_OBJECT_NAME: Int\n        val FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL: Int\n        val FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE: Int\n        val COLOR_ATTACHMENT0: Int\n        val DEPTH_ATTACHMENT: Int\n        val STENCIL_ATTACHMENT: Int\n        val DEPTH_STENCIL_ATTACHMENT: Int\n        val NONE: Int\n        val FRAMEBUFFER_COMPLETE: Int\n        val FRAMEBUFFER_INCOMPLETE_ATTACHMENT: Int\n        val FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT: Int\n        val FRAMEBUFFER_INCOMPLETE_DIMENSIONS: Int\n        val FRAMEBUFFER_UNSUPPORTED: Int\n        val FRAMEBUFFER_BINDING: Int\n        val RENDERBUFFER_BINDING: Int\n        val MAX_RENDERBUFFER_SIZE: Int\n        val INVALID_FRAMEBUFFER_OPERATION: Int\n        val UNPACK_FLIP_Y_WEBGL: Int\n        val UNPACK_PREMULTIPLY_ALPHA_WEBGL: Int\n        val CONTEXT_LOST_WEBGL: Int\n        val UNPACK_COLORSPACE_CONVERSION_WEBGL: Int\n        val BROWSER_DEFAULT_WEBGL: Int\n    }\n}\n\n/**\n * Exposes the JavaScript [WebGLContextEvent](https://developer.mozilla.org/en/docs/Web/API/WebGLContextEvent) to Kotlin\n */\npublic external open class WebGLContextEvent(type: String, eventInit: WebGLContextEventInit = definedExternally) : Event {\n    open val statusMessage: String\n\n    companion object {\n        val NONE: Short\n        val CAPTURING_PHASE: Short\n        val AT_TARGET: Short\n        val BUBBLING_PHASE: Short\n    }\n}\n\npublic external interface WebGLContextEventInit : EventInit {\n    var statusMessage: String? /* = \"\" */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun WebGLContextEventInit(statusMessage: String? = \"\", bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): WebGLContextEventInit {\n    val o = js(\"({})\")\n    o[\"statusMessage\"] = statusMessage\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n    return o\n}\n\n/**\n * Exposes the JavaScript [ArrayBuffer](https://developer.mozilla.org/en/docs/Web/API/ArrayBuffer) to Kotlin\n */\npublic external open class ArrayBuffer(length: Int) : BufferDataSource {\n    open val byteLength: Int\n    fun slice(begin: Int, end: Int = definedExternally): ArrayBuffer\n\n    companion object {\n        fun isView(value: Any?): Boolean\n    }\n}\n\n/**\n * Exposes the JavaScript [ArrayBufferView](https://developer.mozilla.org/en/docs/Web/API/ArrayBufferView) to Kotlin\n */\npublic external interface ArrayBufferView : BufferDataSource {\n    val buffer: ArrayBuffer\n    val byteOffset: Int\n    val byteLength: Int\n}\n\n/**\n * Exposes the JavaScript [Int8Array](https://developer.mozilla.org/en/docs/Web/API/Int8Array) to Kotlin\n */\npublic external open class Int8Array : ArrayBufferView {\n    constructor(length: Int)\n    constructor(array: Int8Array)\n    constructor(array: Array<Byte>)\n    constructor(buffer: ArrayBuffer, byteOffset: Int = definedExternally, length: Int = definedExternally)\n    open val length: Int\n    override val buffer: ArrayBuffer\n    override val byteOffset: Int\n    override val byteLength: Int\n    fun set(array: Int8Array, offset: Int = definedExternally)\n    fun set(array: Array<Byte>, offset: Int = definedExternally)\n    fun subarray(start: Int, end: Int): Int8Array\n\n    companion object {\n        val BYTES_PER_ELEMENT: Int\n    }\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun Int8Array.get(index: Int): Byte = asDynamic()[index]\n\n@kotlin.internal.InlineOnly\npublic inline operator fun Int8Array.set(index: Int, value: Byte) { asDynamic()[index] = value }\n\n/**\n * Exposes the JavaScript [Uint8Array](https://developer.mozilla.org/en/docs/Web/API/Uint8Array) to Kotlin\n */\npublic external open class Uint8Array : ArrayBufferView {\n    constructor(length: Int)\n    constructor(array: Uint8Array)\n    constructor(array: Array<Byte>)\n    constructor(buffer: ArrayBuffer, byteOffset: Int = definedExternally, length: Int = definedExternally)\n    open val length: Int\n    override val buffer: ArrayBuffer\n    override val byteOffset: Int\n    override val byteLength: Int\n    fun set(array: Uint8Array, offset: Int = definedExternally)\n    fun set(array: Array<Byte>, offset: Int = definedExternally)\n    fun subarray(start: Int, end: Int): Uint8Array\n\n    companion object {\n        val BYTES_PER_ELEMENT: Int\n    }\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun Uint8Array.get(index: Int): Byte = asDynamic()[index]\n\n@kotlin.internal.InlineOnly\npublic inline operator fun Uint8Array.set(index: Int, value: Byte) { asDynamic()[index] = value }\n\n/**\n * Exposes the JavaScript [Uint8ClampedArray](https://developer.mozilla.org/en/docs/Web/API/Uint8ClampedArray) to Kotlin\n */\npublic external open class Uint8ClampedArray : ArrayBufferView {\n    constructor(length: Int)\n    constructor(array: Uint8ClampedArray)\n    constructor(array: Array<Byte>)\n    constructor(buffer: ArrayBuffer, byteOffset: Int = definedExternally, length: Int = definedExternally)\n    open val length: Int\n    override val buffer: ArrayBuffer\n    override val byteOffset: Int\n    override val byteLength: Int\n    fun set(array: Uint8ClampedArray, offset: Int = definedExternally)\n    fun set(array: Array<Byte>, offset: Int = definedExternally)\n    fun subarray(start: Int, end: Int): Uint8ClampedArray\n\n    companion object {\n        val BYTES_PER_ELEMENT: Int\n    }\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun Uint8ClampedArray.get(index: Int): Byte = asDynamic()[index]\n\n@kotlin.internal.InlineOnly\npublic inline operator fun Uint8ClampedArray.set(index: Int, value: Byte) { asDynamic()[index] = value }\n\n/**\n * Exposes the JavaScript [Int16Array](https://developer.mozilla.org/en/docs/Web/API/Int16Array) to Kotlin\n */\npublic external open class Int16Array : ArrayBufferView {\n    constructor(length: Int)\n    constructor(array: Int16Array)\n    constructor(array: Array<Short>)\n    constructor(buffer: ArrayBuffer, byteOffset: Int = definedExternally, length: Int = definedExternally)\n    open val length: Int\n    override val buffer: ArrayBuffer\n    override val byteOffset: Int\n    override val byteLength: Int\n    fun set(array: Int16Array, offset: Int = definedExternally)\n    fun set(array: Array<Short>, offset: Int = definedExternally)\n    fun subarray(start: Int, end: Int): Int16Array\n\n    companion object {\n        val BYTES_PER_ELEMENT: Int\n    }\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun Int16Array.get(index: Int): Short = asDynamic()[index]\n\n@kotlin.internal.InlineOnly\npublic inline operator fun Int16Array.set(index: Int, value: Short) { asDynamic()[index] = value }\n\n/**\n * Exposes the JavaScript [Uint16Array](https://developer.mozilla.org/en/docs/Web/API/Uint16Array) to Kotlin\n */\npublic external open class Uint16Array : ArrayBufferView {\n    constructor(length: Int)\n    constructor(array: Uint16Array)\n    constructor(array: Array<Short>)\n    constructor(buffer: ArrayBuffer, byteOffset: Int = definedExternally, length: Int = definedExternally)\n    open val length: Int\n    override val buffer: ArrayBuffer\n    override val byteOffset: Int\n    override val byteLength: Int\n    fun set(array: Uint16Array, offset: Int = definedExternally)\n    fun set(array: Array<Short>, offset: Int = definedExternally)\n    fun subarray(start: Int, end: Int): Uint16Array\n\n    companion object {\n        val BYTES_PER_ELEMENT: Int\n    }\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun Uint16Array.get(index: Int): Short = asDynamic()[index]\n\n@kotlin.internal.InlineOnly\npublic inline operator fun Uint16Array.set(index: Int, value: Short) { asDynamic()[index] = value }\n\n/**\n * Exposes the JavaScript [Int32Array](https://developer.mozilla.org/en/docs/Web/API/Int32Array) to Kotlin\n */\npublic external open class Int32Array : ArrayBufferView {\n    constructor(length: Int)\n    constructor(array: Int32Array)\n    constructor(array: Array<Int>)\n    constructor(buffer: ArrayBuffer, byteOffset: Int = definedExternally, length: Int = definedExternally)\n    open val length: Int\n    override val buffer: ArrayBuffer\n    override val byteOffset: Int\n    override val byteLength: Int\n    fun set(array: Int32Array, offset: Int = definedExternally)\n    fun set(array: Array<Int>, offset: Int = definedExternally)\n    fun subarray(start: Int, end: Int): Int32Array\n\n    companion object {\n        val BYTES_PER_ELEMENT: Int\n    }\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun Int32Array.get(index: Int): Int = asDynamic()[index]\n\n@kotlin.internal.InlineOnly\npublic inline operator fun Int32Array.set(index: Int, value: Int) { asDynamic()[index] = value }\n\n/**\n * Exposes the JavaScript [Uint32Array](https://developer.mozilla.org/en/docs/Web/API/Uint32Array) to Kotlin\n */\npublic external open class Uint32Array : ArrayBufferView {\n    constructor(length: Int)\n    constructor(array: Uint32Array)\n    constructor(array: Array<Int>)\n    constructor(buffer: ArrayBuffer, byteOffset: Int = definedExternally, length: Int = definedExternally)\n    open val length: Int\n    override val buffer: ArrayBuffer\n    override val byteOffset: Int\n    override val byteLength: Int\n    fun set(array: Uint32Array, offset: Int = definedExternally)\n    fun set(array: Array<Int>, offset: Int = definedExternally)\n    fun subarray(start: Int, end: Int): Uint32Array\n\n    companion object {\n        val BYTES_PER_ELEMENT: Int\n    }\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun Uint32Array.get(index: Int): Int = asDynamic()[index]\n\n@kotlin.internal.InlineOnly\npublic inline operator fun Uint32Array.set(index: Int, value: Int) { asDynamic()[index] = value }\n\n/**\n * Exposes the JavaScript [Float32Array](https://developer.mozilla.org/en/docs/Web/API/Float32Array) to Kotlin\n */\npublic external open class Float32Array : ArrayBufferView {\n    constructor(length: Int)\n    constructor(array: Float32Array)\n    constructor(array: Array<Float>)\n    constructor(buffer: ArrayBuffer, byteOffset: Int = definedExternally, length: Int = definedExternally)\n    open val length: Int\n    override val buffer: ArrayBuffer\n    override val byteOffset: Int\n    override val byteLength: Int\n    fun set(array: Float32Array, offset: Int = definedExternally)\n    fun set(array: Array<Float>, offset: Int = definedExternally)\n    fun subarray(start: Int, end: Int): Float32Array\n\n    companion object {\n        val BYTES_PER_ELEMENT: Int\n    }\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun Float32Array.get(index: Int): Float = asDynamic()[index]\n\n@kotlin.internal.InlineOnly\npublic inline operator fun Float32Array.set(index: Int, value: Float) { asDynamic()[index] = value }\n\n/**\n * Exposes the JavaScript [Float64Array](https://developer.mozilla.org/en/docs/Web/API/Float64Array) to Kotlin\n */\npublic external open class Float64Array : ArrayBufferView {\n    constructor(length: Int)\n    constructor(array: Float64Array)\n    constructor(array: Array<Double>)\n    constructor(buffer: ArrayBuffer, byteOffset: Int = definedExternally, length: Int = definedExternally)\n    open val length: Int\n    override val buffer: ArrayBuffer\n    override val byteOffset: Int\n    override val byteLength: Int\n    fun set(array: Float64Array, offset: Int = definedExternally)\n    fun set(array: Array<Double>, offset: Int = definedExternally)\n    fun subarray(start: Int, end: Int): Float64Array\n\n    companion object {\n        val BYTES_PER_ELEMENT: Int\n    }\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun Float64Array.get(index: Int): Double = asDynamic()[index]\n\n@kotlin.internal.InlineOnly\npublic inline operator fun Float64Array.set(index: Int, value: Double) { asDynamic()[index] = value }\n\n/**\n * Exposes the JavaScript [DataView](https://developer.mozilla.org/en/docs/Web/API/DataView) to Kotlin\n */\npublic external open class DataView(buffer: ArrayBuffer, byteOffset: Int = definedExternally, byteLength: Int = definedExternally) : ArrayBufferView {\n    override val buffer: ArrayBuffer\n    override val byteOffset: Int\n    override val byteLength: Int\n    fun getInt8(byteOffset: Int): Byte\n    fun getUint8(byteOffset: Int): Byte\n    fun getInt16(byteOffset: Int, littleEndian: Boolean = definedExternally): Short\n    fun getUint16(byteOffset: Int, littleEndian: Boolean = definedExternally): Short\n    fun getInt32(byteOffset: Int, littleEndian: Boolean = definedExternally): Int\n    fun getUint32(byteOffset: Int, littleEndian: Boolean = definedExternally): Int\n    fun getFloat32(byteOffset: Int, littleEndian: Boolean = definedExternally): Float\n    fun getFloat64(byteOffset: Int, littleEndian: Boolean = definedExternally): Double\n    fun setInt8(byteOffset: Int, value: Byte)\n    fun setUint8(byteOffset: Int, value: Byte)\n    fun setInt16(byteOffset: Int, value: Short, littleEndian: Boolean = definedExternally)\n    fun setUint16(byteOffset: Int, value: Short, littleEndian: Boolean = definedExternally)\n    fun setInt32(byteOffset: Int, value: Int, littleEndian: Boolean = definedExternally)\n    fun setUint32(byteOffset: Int, value: Int, littleEndian: Boolean = definedExternally)\n    fun setFloat32(byteOffset: Int, value: Float, littleEndian: Boolean = definedExternally)\n    fun setFloat64(byteOffset: Int, value: Double, littleEndian: Boolean = definedExternally)\n}\n\npublic external interface BufferDataSource\n\npublic external interface TexImageSource","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n// NOTE: THIS FILE IS AUTO-GENERATED, DO NOT EDIT!\n// See github.com/kotlin/dukat for details\n\npackage org.w3c.dom.clipboard\n\nimport kotlin.js.*\nimport org.khronos.webgl.*\nimport org.w3c.css.masking.*\nimport org.w3c.dom.*\nimport org.w3c.dom.css.*\nimport org.w3c.dom.encryptedmedia.*\nimport org.w3c.dom.events.*\nimport org.w3c.dom.mediacapture.*\nimport org.w3c.dom.mediasource.*\nimport org.w3c.dom.parsing.*\nimport org.w3c.dom.pointerevents.*\nimport org.w3c.dom.svg.*\nimport org.w3c.dom.url.*\nimport org.w3c.fetch.*\nimport org.w3c.files.*\nimport org.w3c.notifications.*\nimport org.w3c.performance.*\nimport org.w3c.workers.*\nimport org.w3c.xhr.*\n\npublic external interface ClipboardEventInit : EventInit {\n    var clipboardData: DataTransfer? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun ClipboardEventInit(clipboardData: DataTransfer? = null, bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): ClipboardEventInit {\n    val o = js(\"({})\")\n    o[\"clipboardData\"] = clipboardData\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n    return o\n}\n\n/**\n * Exposes the JavaScript [ClipboardEvent](https://developer.mozilla.org/en/docs/Web/API/ClipboardEvent) to Kotlin\n */\npublic external open class ClipboardEvent(type: String, eventInitDict: ClipboardEventInit = definedExternally) : Event {\n    open val clipboardData: DataTransfer?\n\n    companion object {\n        val NONE: Short\n        val CAPTURING_PHASE: Short\n        val AT_TARGET: Short\n        val BUBBLING_PHASE: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [Clipboard](https://developer.mozilla.org/en/docs/Web/API/Clipboard) to Kotlin\n */\npublic external abstract class Clipboard : EventTarget {\n    fun read(): Promise<DataTransfer>\n    fun readText(): Promise<String>\n    fun write(data: DataTransfer): Promise<Unit>\n    fun writeText(data: String): Promise<Unit>\n}\n\npublic external interface ClipboardPermissionDescriptor {\n    var allowWithoutGesture: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun ClipboardPermissionDescriptor(allowWithoutGesture: Boolean? = false): ClipboardPermissionDescriptor {\n    val o = js(\"({})\")\n    o[\"allowWithoutGesture\"] = allowWithoutGesture\n    return o\n}","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n// NOTE: THIS FILE IS AUTO-GENERATED, DO NOT EDIT!\n// See github.com/kotlin/dukat for details\n\npackage org.w3c.dom.css\n\nimport kotlin.js.*\nimport org.khronos.webgl.*\nimport org.w3c.css.masking.*\nimport org.w3c.dom.*\nimport org.w3c.dom.clipboard.*\nimport org.w3c.dom.encryptedmedia.*\nimport org.w3c.dom.events.*\nimport org.w3c.dom.mediacapture.*\nimport org.w3c.dom.mediasource.*\nimport org.w3c.dom.parsing.*\nimport org.w3c.dom.pointerevents.*\nimport org.w3c.dom.svg.*\nimport org.w3c.dom.url.*\nimport org.w3c.fetch.*\nimport org.w3c.files.*\nimport org.w3c.notifications.*\nimport org.w3c.performance.*\nimport org.w3c.workers.*\nimport org.w3c.xhr.*\n\npublic external abstract class MediaList : ItemArrayLike<String> {\n    open var mediaText: String\n    fun appendMedium(medium: String)\n    fun deleteMedium(medium: String)\n    override fun item(index: Int): String?\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun MediaList.get(index: Int): String? = asDynamic()[index]\n\n/**\n * Exposes the JavaScript [StyleSheet](https://developer.mozilla.org/en/docs/Web/API/StyleSheet) to Kotlin\n */\npublic external abstract class StyleSheet {\n    open val type: String\n    open val href: String?\n    open val ownerNode: UnionElementOrProcessingInstruction?\n    open val parentStyleSheet: StyleSheet?\n    open val title: String?\n    open val media: MediaList\n    open var disabled: Boolean\n}\n\n/**\n * Exposes the JavaScript [CSSStyleSheet](https://developer.mozilla.org/en/docs/Web/API/CSSStyleSheet) to Kotlin\n */\npublic external abstract class CSSStyleSheet : StyleSheet {\n    open val ownerRule: CSSRule?\n    open val cssRules: CSSRuleList\n    fun insertRule(rule: String, index: Int): Int\n    fun deleteRule(index: Int)\n}\n\n/**\n * Exposes the JavaScript [StyleSheetList](https://developer.mozilla.org/en/docs/Web/API/StyleSheetList) to Kotlin\n */\npublic external abstract class StyleSheetList : ItemArrayLike<StyleSheet> {\n    override fun item(index: Int): StyleSheet?\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun StyleSheetList.get(index: Int): StyleSheet? = asDynamic()[index]\n\n/**\n * Exposes the JavaScript [LinkStyle](https://developer.mozilla.org/en/docs/Web/API/LinkStyle) to Kotlin\n */\npublic external interface LinkStyle {\n    val sheet: StyleSheet?\n        get() = definedExternally\n}\n\n/**\n * Exposes the JavaScript [CSSRuleList](https://developer.mozilla.org/en/docs/Web/API/CSSRuleList) to Kotlin\n */\npublic external abstract class CSSRuleList : ItemArrayLike<CSSRule> {\n    override fun item(index: Int): CSSRule?\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun CSSRuleList.get(index: Int): CSSRule? = asDynamic()[index]\n\n/**\n * Exposes the JavaScript [CSSRule](https://developer.mozilla.org/en/docs/Web/API/CSSRule) to Kotlin\n */\npublic external abstract class CSSRule {\n    open val type: Short\n    open var cssText: String\n    open val parentRule: CSSRule?\n    open val parentStyleSheet: CSSStyleSheet?\n\n    companion object {\n        val STYLE_RULE: Short\n        val CHARSET_RULE: Short\n        val IMPORT_RULE: Short\n        val MEDIA_RULE: Short\n        val FONT_FACE_RULE: Short\n        val PAGE_RULE: Short\n        val MARGIN_RULE: Short\n        val NAMESPACE_RULE: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [CSSStyleRule](https://developer.mozilla.org/en/docs/Web/API/CSSStyleRule) to Kotlin\n */\npublic external abstract class CSSStyleRule : CSSRule {\n    open var selectorText: String\n    open val style: CSSStyleDeclaration\n\n    companion object {\n        val STYLE_RULE: Short\n        val CHARSET_RULE: Short\n        val IMPORT_RULE: Short\n        val MEDIA_RULE: Short\n        val FONT_FACE_RULE: Short\n        val PAGE_RULE: Short\n        val MARGIN_RULE: Short\n        val NAMESPACE_RULE: Short\n    }\n}\n\npublic external abstract class CSSImportRule : CSSRule {\n    open val href: String\n    open val media: MediaList\n    open val styleSheet: CSSStyleSheet\n\n    companion object {\n        val STYLE_RULE: Short\n        val CHARSET_RULE: Short\n        val IMPORT_RULE: Short\n        val MEDIA_RULE: Short\n        val FONT_FACE_RULE: Short\n        val PAGE_RULE: Short\n        val MARGIN_RULE: Short\n        val NAMESPACE_RULE: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [CSSGroupingRule](https://developer.mozilla.org/en/docs/Web/API/CSSGroupingRule) to Kotlin\n */\npublic external abstract class CSSGroupingRule : CSSRule {\n    open val cssRules: CSSRuleList\n    fun insertRule(rule: String, index: Int): Int\n    fun deleteRule(index: Int)\n\n    companion object {\n        val STYLE_RULE: Short\n        val CHARSET_RULE: Short\n        val IMPORT_RULE: Short\n        val MEDIA_RULE: Short\n        val FONT_FACE_RULE: Short\n        val PAGE_RULE: Short\n        val MARGIN_RULE: Short\n        val NAMESPACE_RULE: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [CSSMediaRule](https://developer.mozilla.org/en/docs/Web/API/CSSMediaRule) to Kotlin\n */\npublic external abstract class CSSMediaRule : CSSGroupingRule {\n    open val media: MediaList\n\n    companion object {\n        val STYLE_RULE: Short\n        val CHARSET_RULE: Short\n        val IMPORT_RULE: Short\n        val MEDIA_RULE: Short\n        val FONT_FACE_RULE: Short\n        val PAGE_RULE: Short\n        val MARGIN_RULE: Short\n        val NAMESPACE_RULE: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [CSSPageRule](https://developer.mozilla.org/en/docs/Web/API/CSSPageRule) to Kotlin\n */\npublic external abstract class CSSPageRule : CSSGroupingRule {\n    open var selectorText: String\n    open val style: CSSStyleDeclaration\n\n    companion object {\n        val STYLE_RULE: Short\n        val CHARSET_RULE: Short\n        val IMPORT_RULE: Short\n        val MEDIA_RULE: Short\n        val FONT_FACE_RULE: Short\n        val PAGE_RULE: Short\n        val MARGIN_RULE: Short\n        val NAMESPACE_RULE: Short\n    }\n}\n\npublic external abstract class CSSMarginRule : CSSRule {\n    open val name: String\n    open val style: CSSStyleDeclaration\n\n    companion object {\n        val STYLE_RULE: Short\n        val CHARSET_RULE: Short\n        val IMPORT_RULE: Short\n        val MEDIA_RULE: Short\n        val FONT_FACE_RULE: Short\n        val PAGE_RULE: Short\n        val MARGIN_RULE: Short\n        val NAMESPACE_RULE: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [CSSNamespaceRule](https://developer.mozilla.org/en/docs/Web/API/CSSNamespaceRule) to Kotlin\n */\npublic external abstract class CSSNamespaceRule : CSSRule {\n    open val namespaceURI: String\n    open val prefix: String\n\n    companion object {\n        val STYLE_RULE: Short\n        val CHARSET_RULE: Short\n        val IMPORT_RULE: Short\n        val MEDIA_RULE: Short\n        val FONT_FACE_RULE: Short\n        val PAGE_RULE: Short\n        val MARGIN_RULE: Short\n        val NAMESPACE_RULE: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [CSSStyleDeclaration](https://developer.mozilla.org/en/docs/Web/API/CSSStyleDeclaration) to Kotlin\n */\npublic external abstract class CSSStyleDeclaration : ItemArrayLike<String> {\n    open var cssText: String\n    open val parentRule: CSSRule?\n    open var cssFloat: String\n    open var alignContent: String\n    open var alignItems: String\n    open var alignSelf: String\n    open var animation: String\n    open var animationDelay: String\n    open var animationDirection: String\n    open var animationDuration: String\n    open var animationFillMode: String\n    open var animationIterationCount: String\n    open var animationName: String\n    open var animationPlayState: String\n    open var animationTimingFunction: String\n    open var backfaceVisibility: String\n    open var background: String\n    open var backgroundAttachment: String\n    open var backgroundClip: String\n    open var backgroundColor: String\n    open var backgroundImage: String\n    open var backgroundOrigin: String\n    open var backgroundPosition: String\n    open var backgroundRepeat: String\n    open var backgroundSize: String\n    open var border: String\n    open var borderBottom: String\n    open var borderBottomColor: String\n    open var borderBottomLeftRadius: String\n    open var borderBottomRightRadius: String\n    open var borderBottomStyle: String\n    open var borderBottomWidth: String\n    open var borderCollapse: String\n    open var borderColor: String\n    open var borderImage: String\n    open var borderImageOutset: String\n    open var borderImageRepeat: String\n    open var borderImageSlice: String\n    open var borderImageSource: String\n    open var borderImageWidth: String\n    open var borderLeft: String\n    open var borderLeftColor: String\n    open var borderLeftStyle: String\n    open var borderLeftWidth: String\n    open var borderRadius: String\n    open var borderRight: String\n    open var borderRightColor: String\n    open var borderRightStyle: String\n    open var borderRightWidth: String\n    open var borderSpacing: String\n    open var borderStyle: String\n    open var borderTop: String\n    open var borderTopColor: String\n    open var borderTopLeftRadius: String\n    open var borderTopRightRadius: String\n    open var borderTopStyle: String\n    open var borderTopWidth: String\n    open var borderWidth: String\n    open var bottom: String\n    open var boxDecorationBreak: String\n    open var boxShadow: String\n    open var boxSizing: String\n    open var breakAfter: String\n    open var breakBefore: String\n    open var breakInside: String\n    open var captionSide: String\n    open var clear: String\n    open var clip: String\n    open var color: String\n    open var columnCount: String\n    open var columnFill: String\n    open var columnGap: String\n    open var columnRule: String\n    open var columnRuleColor: String\n    open var columnRuleStyle: String\n    open var columnRuleWidth: String\n    open var columnSpan: String\n    open var columnWidth: String\n    open var columns: String\n    open var content: String\n    open var counterIncrement: String\n    open var counterReset: String\n    open var cursor: String\n    open var direction: String\n    open var display: String\n    open var emptyCells: String\n    open var filter: String\n    open var flex: String\n    open var flexBasis: String\n    open var flexDirection: String\n    open var flexFlow: String\n    open var flexGrow: String\n    open var flexShrink: String\n    open var flexWrap: String\n    open var font: String\n    open var fontFamily: String\n    open var fontFeatureSettings: String\n    open var fontKerning: String\n    open var fontLanguageOverride: String\n    open var fontSize: String\n    open var fontSizeAdjust: String\n    open var fontStretch: String\n    open var fontStyle: String\n    open var fontSynthesis: String\n    open var fontVariant: String\n    open var fontVariantAlternates: String\n    open var fontVariantCaps: String\n    open var fontVariantEastAsian: String\n    open var fontVariantLigatures: String\n    open var fontVariantNumeric: String\n    open var fontVariantPosition: String\n    open var fontWeight: String\n    open var hangingPunctuation: String\n    open var height: String\n    open var hyphens: String\n    open var imageOrientation: String\n    open var imageRendering: String\n    open var imageResolution: String\n    open var imeMode: String\n    open var justifyContent: String\n    open var left: String\n    open var letterSpacing: String\n    open var lineBreak: String\n    open var lineHeight: String\n    open var listStyle: String\n    open var listStyleImage: String\n    open var listStylePosition: String\n    open var listStyleType: String\n    open var margin: String\n    open var marginBottom: String\n    open var marginLeft: String\n    open var marginRight: String\n    open var marginTop: String\n    open var mark: String\n    open var markAfter: String\n    open var markBefore: String\n    open var marks: String\n    open var marqueeDirection: String\n    open var marqueePlayCount: String\n    open var marqueeSpeed: String\n    open var marqueeStyle: String\n    open var mask: String\n    open var maskType: String\n    open var maxHeight: String\n    open var maxWidth: String\n    open var minHeight: String\n    open var minWidth: String\n    open var navDown: String\n    open var navIndex: String\n    open var navLeft: String\n    open var navRight: String\n    open var navUp: String\n    open var objectFit: String\n    open var objectPosition: String\n    open var opacity: String\n    open var order: String\n    open var orphans: String\n    open var outline: String\n    open var outlineColor: String\n    open var outlineOffset: String\n    open var outlineStyle: String\n    open var outlineWidth: String\n    open var overflowWrap: String\n    open var overflowX: String\n    open var overflowY: String\n    open var padding: String\n    open var paddingBottom: String\n    open var paddingLeft: String\n    open var paddingRight: String\n    open var paddingTop: String\n    open var pageBreakAfter: String\n    open var pageBreakBefore: String\n    open var pageBreakInside: String\n    open var perspective: String\n    open var perspectiveOrigin: String\n    open var phonemes: String\n    open var position: String\n    open var quotes: String\n    open var resize: String\n    open var rest: String\n    open var restAfter: String\n    open var restBefore: String\n    open var right: String\n    open var tabSize: String\n    open var tableLayout: String\n    open var textAlign: String\n    open var textAlignLast: String\n    open var textCombineUpright: String\n    open var textDecoration: String\n    open var textDecorationColor: String\n    open var textDecorationLine: String\n    open var textDecorationStyle: String\n    open var textIndent: String\n    open var textJustify: String\n    open var textOrientation: String\n    open var textOverflow: String\n    open var textShadow: String\n    open var textTransform: String\n    open var textUnderlinePosition: String\n    open var top: String\n    open var transform: String\n    open var transformOrigin: String\n    open var transformStyle: String\n    open var transition: String\n    open var transitionDelay: String\n    open var transitionDuration: String\n    open var transitionProperty: String\n    open var transitionTimingFunction: String\n    open var unicodeBidi: String\n    open var verticalAlign: String\n    open var visibility: String\n    open var voiceBalance: String\n    open var voiceDuration: String\n    open var voicePitch: String\n    open var voicePitchRange: String\n    open var voiceRate: String\n    open var voiceStress: String\n    open var voiceVolume: String\n    open var whiteSpace: String\n    open var widows: String\n    open var width: String\n    open var wordBreak: String\n    open var wordSpacing: String\n    open var wordWrap: String\n    open var writingMode: String\n    open var zIndex: String\n    open var _dashed_attribute: String\n    open var _camel_cased_attribute: String\n    open var _webkit_cased_attribute: String\n    fun getPropertyValue(property: String): String\n    fun getPropertyPriority(property: String): String\n    fun setProperty(property: String, value: String, priority: String = definedExternally)\n    fun setPropertyValue(property: String, value: String)\n    fun setPropertyPriority(property: String, priority: String)\n    fun removeProperty(property: String): String\n    override fun item(index: Int): String\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun CSSStyleDeclaration.get(index: Int): String? = asDynamic()[index]\n\npublic external interface ElementCSSInlineStyle {\n    val style: CSSStyleDeclaration\n}\n\n/**\n * Exposes the JavaScript [CSS](https://developer.mozilla.org/en/docs/Web/API/CSS) to Kotlin\n */\npublic external abstract class CSS {\n    companion object {\n        fun escape(ident: String): String\n    }\n}\n\npublic external interface UnionElementOrProcessingInstruction","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n// NOTE: THIS FILE IS AUTO-GENERATED, DO NOT EDIT!\n// See github.com/kotlin/dukat for details\n\npackage org.w3c.dom.encryptedmedia\n\nimport kotlin.js.*\nimport org.khronos.webgl.*\nimport org.w3c.css.masking.*\nimport org.w3c.dom.*\nimport org.w3c.dom.clipboard.*\nimport org.w3c.dom.css.*\nimport org.w3c.dom.events.*\nimport org.w3c.dom.mediacapture.*\nimport org.w3c.dom.mediasource.*\nimport org.w3c.dom.parsing.*\nimport org.w3c.dom.pointerevents.*\nimport org.w3c.dom.svg.*\nimport org.w3c.dom.url.*\nimport org.w3c.fetch.*\nimport org.w3c.files.*\nimport org.w3c.notifications.*\nimport org.w3c.performance.*\nimport org.w3c.workers.*\nimport org.w3c.xhr.*\n\npublic external interface MediaKeySystemConfiguration {\n    var label: String? /* = \"\" */\n        get() = definedExternally\n        set(value) = definedExternally\n    var initDataTypes: Array<String>? /* = arrayOf() */\n        get() = definedExternally\n        set(value) = definedExternally\n    var audioCapabilities: Array<MediaKeySystemMediaCapability>? /* = arrayOf() */\n        get() = definedExternally\n        set(value) = definedExternally\n    var videoCapabilities: Array<MediaKeySystemMediaCapability>? /* = arrayOf() */\n        get() = definedExternally\n        set(value) = definedExternally\n    var distinctiveIdentifier: MediaKeysRequirement? /* = MediaKeysRequirement.OPTIONAL */\n        get() = definedExternally\n        set(value) = definedExternally\n    var persistentState: MediaKeysRequirement? /* = MediaKeysRequirement.OPTIONAL */\n        get() = definedExternally\n        set(value) = definedExternally\n    var sessionTypes: Array<String>?\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun MediaKeySystemConfiguration(label: String? = \"\", initDataTypes: Array<String>? = arrayOf(), audioCapabilities: Array<MediaKeySystemMediaCapability>? = arrayOf(), videoCapabilities: Array<MediaKeySystemMediaCapability>? = arrayOf(), distinctiveIdentifier: MediaKeysRequirement? = MediaKeysRequirement.OPTIONAL, persistentState: MediaKeysRequirement? = MediaKeysRequirement.OPTIONAL, sessionTypes: Array<String>? = undefined): MediaKeySystemConfiguration {\n    val o = js(\"({})\")\n    o[\"label\"] = label\n    o[\"initDataTypes\"] = initDataTypes\n    o[\"audioCapabilities\"] = audioCapabilities\n    o[\"videoCapabilities\"] = videoCapabilities\n    o[\"distinctiveIdentifier\"] = distinctiveIdentifier\n    o[\"persistentState\"] = persistentState\n    o[\"sessionTypes\"] = sessionTypes\n    return o\n}\n\npublic external interface MediaKeySystemMediaCapability {\n    var contentType: String? /* = \"\" */\n        get() = definedExternally\n        set(value) = definedExternally\n    var robustness: String? /* = \"\" */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun MediaKeySystemMediaCapability(contentType: String? = \"\", robustness: String? = \"\"): MediaKeySystemMediaCapability {\n    val o = js(\"({})\")\n    o[\"contentType\"] = contentType\n    o[\"robustness\"] = robustness\n    return o\n}\n\npublic external abstract class MediaKeySystemAccess {\n    open val keySystem: String\n    fun getConfiguration(): MediaKeySystemConfiguration\n    fun createMediaKeys(): Promise<MediaKeys>\n}\n\npublic external abstract class MediaKeys {\n    fun createSession(sessionType: MediaKeySessionType = definedExternally): MediaKeySession\n    fun setServerCertificate(serverCertificate: dynamic): Promise<Boolean>\n}\n\npublic external abstract class MediaKeySession : EventTarget {\n    open val sessionId: String\n    open val expiration: Double\n    open val closed: Promise<Unit>\n    open val keyStatuses: MediaKeyStatusMap\n    open var onkeystatuseschange: ((Event) -> dynamic)?\n    open var onmessage: ((MessageEvent) -> dynamic)?\n    fun generateRequest(initDataType: String, initData: dynamic): Promise<Unit>\n    fun load(sessionId: String): Promise<Boolean>\n    fun update(response: dynamic): Promise<Unit>\n    fun close(): Promise<Unit>\n    fun remove(): Promise<Unit>\n}\n\npublic external abstract class MediaKeyStatusMap {\n    open val size: Int\n    fun has(keyId: dynamic): Boolean\n    fun get(keyId: dynamic): Any?\n}\n\npublic external open class MediaKeyMessageEvent(type: String, eventInitDict: MediaKeyMessageEventInit) : Event {\n    open val messageType: MediaKeyMessageType\n    open val message: ArrayBuffer\n\n    companion object {\n        val NONE: Short\n        val CAPTURING_PHASE: Short\n        val AT_TARGET: Short\n        val BUBBLING_PHASE: Short\n    }\n}\n\npublic external interface MediaKeyMessageEventInit : EventInit {\n    var messageType: MediaKeyMessageType?\n        get() = definedExternally\n        set(value) = definedExternally\n    var message: ArrayBuffer?\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun MediaKeyMessageEventInit(messageType: MediaKeyMessageType?, message: ArrayBuffer?, bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): MediaKeyMessageEventInit {\n    val o = js(\"({})\")\n    o[\"messageType\"] = messageType\n    o[\"message\"] = message\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n    return o\n}\n\npublic external open class MediaEncryptedEvent(type: String, eventInitDict: MediaEncryptedEventInit = definedExternally) : Event {\n    open val initDataType: String\n    open val initData: ArrayBuffer?\n\n    companion object {\n        val NONE: Short\n        val CAPTURING_PHASE: Short\n        val AT_TARGET: Short\n        val BUBBLING_PHASE: Short\n    }\n}\n\npublic external interface MediaEncryptedEventInit : EventInit {\n    var initDataType: String? /* = \"\" */\n        get() = definedExternally\n        set(value) = definedExternally\n    var initData: ArrayBuffer? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun MediaEncryptedEventInit(initDataType: String? = \"\", initData: ArrayBuffer? = null, bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): MediaEncryptedEventInit {\n    val o = js(\"({})\")\n    o[\"initDataType\"] = initDataType\n    o[\"initData\"] = initData\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n    return o\n}\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface MediaKeysRequirement {\n    companion object\n}\n\npublic inline val MediaKeysRequirement.Companion.REQUIRED: MediaKeysRequirement get() = \"required\".asDynamic().unsafeCast<MediaKeysRequirement>()\n\npublic inline val MediaKeysRequirement.Companion.OPTIONAL: MediaKeysRequirement get() = \"optional\".asDynamic().unsafeCast<MediaKeysRequirement>()\n\npublic inline val MediaKeysRequirement.Companion.NOT_ALLOWED: MediaKeysRequirement get() = \"not-allowed\".asDynamic().unsafeCast<MediaKeysRequirement>()\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface MediaKeySessionType {\n    companion object\n}\n\npublic inline val MediaKeySessionType.Companion.TEMPORARY: MediaKeySessionType get() = \"temporary\".asDynamic().unsafeCast<MediaKeySessionType>()\n\npublic inline val MediaKeySessionType.Companion.PERSISTENT_LICENSE: MediaKeySessionType get() = \"persistent-license\".asDynamic().unsafeCast<MediaKeySessionType>()\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface MediaKeyStatus {\n    companion object\n}\n\npublic inline val MediaKeyStatus.Companion.USABLE: MediaKeyStatus get() = \"usable\".asDynamic().unsafeCast<MediaKeyStatus>()\n\npublic inline val MediaKeyStatus.Companion.EXPIRED: MediaKeyStatus get() = \"expired\".asDynamic().unsafeCast<MediaKeyStatus>()\n\npublic inline val MediaKeyStatus.Companion.RELEASED: MediaKeyStatus get() = \"released\".asDynamic().unsafeCast<MediaKeyStatus>()\n\npublic inline val MediaKeyStatus.Companion.OUTPUT_RESTRICTED: MediaKeyStatus get() = \"output-restricted\".asDynamic().unsafeCast<MediaKeyStatus>()\n\npublic inline val MediaKeyStatus.Companion.OUTPUT_DOWNSCALED: MediaKeyStatus get() = \"output-downscaled\".asDynamic().unsafeCast<MediaKeyStatus>()\n\npublic inline val MediaKeyStatus.Companion.STATUS_PENDING: MediaKeyStatus get() = \"status-pending\".asDynamic().unsafeCast<MediaKeyStatus>()\n\npublic inline val MediaKeyStatus.Companion.INTERNAL_ERROR: MediaKeyStatus get() = \"internal-error\".asDynamic().unsafeCast<MediaKeyStatus>()\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface MediaKeyMessageType {\n    companion object\n}\n\npublic inline val MediaKeyMessageType.Companion.LICENSE_REQUEST: MediaKeyMessageType get() = \"license-request\".asDynamic().unsafeCast<MediaKeyMessageType>()\n\npublic inline val MediaKeyMessageType.Companion.LICENSE_RENEWAL: MediaKeyMessageType get() = \"license-renewal\".asDynamic().unsafeCast<MediaKeyMessageType>()\n\npublic inline val MediaKeyMessageType.Companion.LICENSE_RELEASE: MediaKeyMessageType get() = \"license-release\".asDynamic().unsafeCast<MediaKeyMessageType>()\n\npublic inline val MediaKeyMessageType.Companion.INDIVIDUALIZATION_REQUEST: MediaKeyMessageType get() = \"individualization-request\".asDynamic().unsafeCast<MediaKeyMessageType>()","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n// NOTE: THIS FILE IS AUTO-GENERATED, DO NOT EDIT!\n// See github.com/kotlin/dukat for details\n\npackage org.w3c.dom.events\n\nimport kotlin.js.*\nimport org.khronos.webgl.*\nimport org.w3c.css.masking.*\nimport org.w3c.dom.*\nimport org.w3c.dom.clipboard.*\nimport org.w3c.dom.css.*\nimport org.w3c.dom.encryptedmedia.*\nimport org.w3c.dom.mediacapture.*\nimport org.w3c.dom.mediasource.*\nimport org.w3c.dom.parsing.*\nimport org.w3c.dom.pointerevents.*\nimport org.w3c.dom.svg.*\nimport org.w3c.dom.url.*\nimport org.w3c.fetch.*\nimport org.w3c.files.*\nimport org.w3c.notifications.*\nimport org.w3c.performance.*\nimport org.w3c.workers.*\nimport org.w3c.xhr.*\n\n/**\n * Exposes the JavaScript [UIEvent](https://developer.mozilla.org/en/docs/Web/API/UIEvent) to Kotlin\n */\npublic external open class UIEvent(type: String, eventInitDict: UIEventInit = definedExternally) : Event {\n    open val view: Window?\n    open val detail: Int\n\n    companion object {\n        val NONE: Short\n        val CAPTURING_PHASE: Short\n        val AT_TARGET: Short\n        val BUBBLING_PHASE: Short\n    }\n}\n\npublic external interface UIEventInit : EventInit {\n    var view: Window? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n    var detail: Int? /* = 0 */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun UIEventInit(view: Window? = null, detail: Int? = 0, bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): UIEventInit {\n    val o = js(\"({})\")\n    o[\"view\"] = view\n    o[\"detail\"] = detail\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n    return o\n}\n\n/**\n * Exposes the JavaScript [FocusEvent](https://developer.mozilla.org/en/docs/Web/API/FocusEvent) to Kotlin\n */\npublic external open class FocusEvent(type: String, eventInitDict: FocusEventInit = definedExternally) : UIEvent {\n    open val relatedTarget: EventTarget?\n\n    companion object {\n        val NONE: Short\n        val CAPTURING_PHASE: Short\n        val AT_TARGET: Short\n        val BUBBLING_PHASE: Short\n    }\n}\n\npublic external interface FocusEventInit : UIEventInit {\n    var relatedTarget: EventTarget? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun FocusEventInit(relatedTarget: EventTarget? = null, view: Window? = null, detail: Int? = 0, bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): FocusEventInit {\n    val o = js(\"({})\")\n    o[\"relatedTarget\"] = relatedTarget\n    o[\"view\"] = view\n    o[\"detail\"] = detail\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n    return o\n}\n\n/**\n * Exposes the JavaScript [MouseEvent](https://developer.mozilla.org/en/docs/Web/API/MouseEvent) to Kotlin\n */\npublic external open class MouseEvent(type: String, eventInitDict: MouseEventInit = definedExternally) : UIEvent, UnionElementOrMouseEvent {\n    open val screenX: Int\n    open val screenY: Int\n    open val clientX: Int\n    open val clientY: Int\n    open val ctrlKey: Boolean\n    open val shiftKey: Boolean\n    open val altKey: Boolean\n    open val metaKey: Boolean\n    open val button: Short\n    open val buttons: Short\n    open val relatedTarget: EventTarget?\n    open val region: String?\n    open val pageX: Double\n    open val pageY: Double\n    open val x: Double\n    open val y: Double\n    open val offsetX: Double\n    open val offsetY: Double\n    fun getModifierState(keyArg: String): Boolean\n\n    companion object {\n        val NONE: Short\n        val CAPTURING_PHASE: Short\n        val AT_TARGET: Short\n        val BUBBLING_PHASE: Short\n    }\n}\n\npublic external interface MouseEventInit : EventModifierInit {\n    var screenX: Int? /* = 0 */\n        get() = definedExternally\n        set(value) = definedExternally\n    var screenY: Int? /* = 0 */\n        get() = definedExternally\n        set(value) = definedExternally\n    var clientX: Int? /* = 0 */\n        get() = definedExternally\n        set(value) = definedExternally\n    var clientY: Int? /* = 0 */\n        get() = definedExternally\n        set(value) = definedExternally\n    var button: Short? /* = 0 */\n        get() = definedExternally\n        set(value) = definedExternally\n    var buttons: Short? /* = 0 */\n        get() = definedExternally\n        set(value) = definedExternally\n    var relatedTarget: EventTarget? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n    var region: String? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun MouseEventInit(screenX: Int? = 0, screenY: Int? = 0, clientX: Int? = 0, clientY: Int? = 0, button: Short? = 0, buttons: Short? = 0, relatedTarget: EventTarget? = null, region: String? = null, ctrlKey: Boolean? = false, shiftKey: Boolean? = false, altKey: Boolean? = false, metaKey: Boolean? = false, modifierAltGraph: Boolean? = false, modifierCapsLock: Boolean? = false, modifierFn: Boolean? = false, modifierFnLock: Boolean? = false, modifierHyper: Boolean? = false, modifierNumLock: Boolean? = false, modifierScrollLock: Boolean? = false, modifierSuper: Boolean? = false, modifierSymbol: Boolean? = false, modifierSymbolLock: Boolean? = false, view: Window? = null, detail: Int? = 0, bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): MouseEventInit {\n    val o = js(\"({})\")\n    o[\"screenX\"] = screenX\n    o[\"screenY\"] = screenY\n    o[\"clientX\"] = clientX\n    o[\"clientY\"] = clientY\n    o[\"button\"] = button\n    o[\"buttons\"] = buttons\n    o[\"relatedTarget\"] = relatedTarget\n    o[\"region\"] = region\n    o[\"ctrlKey\"] = ctrlKey\n    o[\"shiftKey\"] = shiftKey\n    o[\"altKey\"] = altKey\n    o[\"metaKey\"] = metaKey\n    o[\"modifierAltGraph\"] = modifierAltGraph\n    o[\"modifierCapsLock\"] = modifierCapsLock\n    o[\"modifierFn\"] = modifierFn\n    o[\"modifierFnLock\"] = modifierFnLock\n    o[\"modifierHyper\"] = modifierHyper\n    o[\"modifierNumLock\"] = modifierNumLock\n    o[\"modifierScrollLock\"] = modifierScrollLock\n    o[\"modifierSuper\"] = modifierSuper\n    o[\"modifierSymbol\"] = modifierSymbol\n    o[\"modifierSymbolLock\"] = modifierSymbolLock\n    o[\"view\"] = view\n    o[\"detail\"] = detail\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n    return o\n}\n\npublic external interface EventModifierInit : UIEventInit {\n    var ctrlKey: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n    var shiftKey: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n    var altKey: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n    var metaKey: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n    var modifierAltGraph: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n    var modifierCapsLock: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n    var modifierFn: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n    var modifierFnLock: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n    var modifierHyper: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n    var modifierNumLock: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n    var modifierScrollLock: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n    var modifierSuper: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n    var modifierSymbol: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n    var modifierSymbolLock: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun EventModifierInit(ctrlKey: Boolean? = false, shiftKey: Boolean? = false, altKey: Boolean? = false, metaKey: Boolean? = false, modifierAltGraph: Boolean? = false, modifierCapsLock: Boolean? = false, modifierFn: Boolean? = false, modifierFnLock: Boolean? = false, modifierHyper: Boolean? = false, modifierNumLock: Boolean? = false, modifierScrollLock: Boolean? = false, modifierSuper: Boolean? = false, modifierSymbol: Boolean? = false, modifierSymbolLock: Boolean? = false, view: Window? = null, detail: Int? = 0, bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): EventModifierInit {\n    val o = js(\"({})\")\n    o[\"ctrlKey\"] = ctrlKey\n    o[\"shiftKey\"] = shiftKey\n    o[\"altKey\"] = altKey\n    o[\"metaKey\"] = metaKey\n    o[\"modifierAltGraph\"] = modifierAltGraph\n    o[\"modifierCapsLock\"] = modifierCapsLock\n    o[\"modifierFn\"] = modifierFn\n    o[\"modifierFnLock\"] = modifierFnLock\n    o[\"modifierHyper\"] = modifierHyper\n    o[\"modifierNumLock\"] = modifierNumLock\n    o[\"modifierScrollLock\"] = modifierScrollLock\n    o[\"modifierSuper\"] = modifierSuper\n    o[\"modifierSymbol\"] = modifierSymbol\n    o[\"modifierSymbolLock\"] = modifierSymbolLock\n    o[\"view\"] = view\n    o[\"detail\"] = detail\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n    return o\n}\n\n/**\n * Exposes the JavaScript [WheelEvent](https://developer.mozilla.org/en/docs/Web/API/WheelEvent) to Kotlin\n */\npublic external open class WheelEvent(type: String, eventInitDict: WheelEventInit = definedExternally) : MouseEvent {\n    open val deltaX: Double\n    open val deltaY: Double\n    open val deltaZ: Double\n    open val deltaMode: Int\n\n    companion object {\n        val DOM_DELTA_PIXEL: Int\n        val DOM_DELTA_LINE: Int\n        val DOM_DELTA_PAGE: Int\n        val NONE: Short\n        val CAPTURING_PHASE: Short\n        val AT_TARGET: Short\n        val BUBBLING_PHASE: Short\n    }\n}\n\npublic external interface WheelEventInit : MouseEventInit {\n    var deltaX: Double? /* = 0.0 */\n        get() = definedExternally\n        set(value) = definedExternally\n    var deltaY: Double? /* = 0.0 */\n        get() = definedExternally\n        set(value) = definedExternally\n    var deltaZ: Double? /* = 0.0 */\n        get() = definedExternally\n        set(value) = definedExternally\n    var deltaMode: Int? /* = 0 */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun WheelEventInit(deltaX: Double? = 0.0, deltaY: Double? = 0.0, deltaZ: Double? = 0.0, deltaMode: Int? = 0, screenX: Int? = 0, screenY: Int? = 0, clientX: Int? = 0, clientY: Int? = 0, button: Short? = 0, buttons: Short? = 0, relatedTarget: EventTarget? = null, region: String? = null, ctrlKey: Boolean? = false, shiftKey: Boolean? = false, altKey: Boolean? = false, metaKey: Boolean? = false, modifierAltGraph: Boolean? = false, modifierCapsLock: Boolean? = false, modifierFn: Boolean? = false, modifierFnLock: Boolean? = false, modifierHyper: Boolean? = false, modifierNumLock: Boolean? = false, modifierScrollLock: Boolean? = false, modifierSuper: Boolean? = false, modifierSymbol: Boolean? = false, modifierSymbolLock: Boolean? = false, view: Window? = null, detail: Int? = 0, bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): WheelEventInit {\n    val o = js(\"({})\")\n    o[\"deltaX\"] = deltaX\n    o[\"deltaY\"] = deltaY\n    o[\"deltaZ\"] = deltaZ\n    o[\"deltaMode\"] = deltaMode\n    o[\"screenX\"] = screenX\n    o[\"screenY\"] = screenY\n    o[\"clientX\"] = clientX\n    o[\"clientY\"] = clientY\n    o[\"button\"] = button\n    o[\"buttons\"] = buttons\n    o[\"relatedTarget\"] = relatedTarget\n    o[\"region\"] = region\n    o[\"ctrlKey\"] = ctrlKey\n    o[\"shiftKey\"] = shiftKey\n    o[\"altKey\"] = altKey\n    o[\"metaKey\"] = metaKey\n    o[\"modifierAltGraph\"] = modifierAltGraph\n    o[\"modifierCapsLock\"] = modifierCapsLock\n    o[\"modifierFn\"] = modifierFn\n    o[\"modifierFnLock\"] = modifierFnLock\n    o[\"modifierHyper\"] = modifierHyper\n    o[\"modifierNumLock\"] = modifierNumLock\n    o[\"modifierScrollLock\"] = modifierScrollLock\n    o[\"modifierSuper\"] = modifierSuper\n    o[\"modifierSymbol\"] = modifierSymbol\n    o[\"modifierSymbolLock\"] = modifierSymbolLock\n    o[\"view\"] = view\n    o[\"detail\"] = detail\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n    return o\n}\n\n/**\n * Exposes the JavaScript [InputEvent](https://developer.mozilla.org/en/docs/Web/API/InputEvent) to Kotlin\n */\npublic external open class InputEvent(type: String, eventInitDict: InputEventInit = definedExternally) : UIEvent {\n    open val data: String\n    open val isComposing: Boolean\n\n    companion object {\n        val NONE: Short\n        val CAPTURING_PHASE: Short\n        val AT_TARGET: Short\n        val BUBBLING_PHASE: Short\n    }\n}\n\npublic external interface InputEventInit : UIEventInit {\n    var data: String? /* = \"\" */\n        get() = definedExternally\n        set(value) = definedExternally\n    var isComposing: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun InputEventInit(data: String? = \"\", isComposing: Boolean? = false, view: Window? = null, detail: Int? = 0, bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): InputEventInit {\n    val o = js(\"({})\")\n    o[\"data\"] = data\n    o[\"isComposing\"] = isComposing\n    o[\"view\"] = view\n    o[\"detail\"] = detail\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n    return o\n}\n\n/**\n * Exposes the JavaScript [KeyboardEvent](https://developer.mozilla.org/en/docs/Web/API/KeyboardEvent) to Kotlin\n */\npublic external open class KeyboardEvent(type: String, eventInitDict: KeyboardEventInit = definedExternally) : UIEvent {\n    open val key: String\n    open val code: String\n    open val location: Int\n    open val ctrlKey: Boolean\n    open val shiftKey: Boolean\n    open val altKey: Boolean\n    open val metaKey: Boolean\n    open val repeat: Boolean\n    open val isComposing: Boolean\n    open val charCode: Int\n    open val keyCode: Int\n    open val which: Int\n    fun getModifierState(keyArg: String): Boolean\n\n    companion object {\n        val DOM_KEY_LOCATION_STANDARD: Int\n        val DOM_KEY_LOCATION_LEFT: Int\n        val DOM_KEY_LOCATION_RIGHT: Int\n        val DOM_KEY_LOCATION_NUMPAD: Int\n        val NONE: Short\n        val CAPTURING_PHASE: Short\n        val AT_TARGET: Short\n        val BUBBLING_PHASE: Short\n    }\n}\n\npublic external interface KeyboardEventInit : EventModifierInit {\n    var key: String? /* = \"\" */\n        get() = definedExternally\n        set(value) = definedExternally\n    var code: String? /* = \"\" */\n        get() = definedExternally\n        set(value) = definedExternally\n    var location: Int? /* = 0 */\n        get() = definedExternally\n        set(value) = definedExternally\n    var repeat: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n    var isComposing: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun KeyboardEventInit(key: String? = \"\", code: String? = \"\", location: Int? = 0, repeat: Boolean? = false, isComposing: Boolean? = false, ctrlKey: Boolean? = false, shiftKey: Boolean? = false, altKey: Boolean? = false, metaKey: Boolean? = false, modifierAltGraph: Boolean? = false, modifierCapsLock: Boolean? = false, modifierFn: Boolean? = false, modifierFnLock: Boolean? = false, modifierHyper: Boolean? = false, modifierNumLock: Boolean? = false, modifierScrollLock: Boolean? = false, modifierSuper: Boolean? = false, modifierSymbol: Boolean? = false, modifierSymbolLock: Boolean? = false, view: Window? = null, detail: Int? = 0, bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): KeyboardEventInit {\n    val o = js(\"({})\")\n    o[\"key\"] = key\n    o[\"code\"] = code\n    o[\"location\"] = location\n    o[\"repeat\"] = repeat\n    o[\"isComposing\"] = isComposing\n    o[\"ctrlKey\"] = ctrlKey\n    o[\"shiftKey\"] = shiftKey\n    o[\"altKey\"] = altKey\n    o[\"metaKey\"] = metaKey\n    o[\"modifierAltGraph\"] = modifierAltGraph\n    o[\"modifierCapsLock\"] = modifierCapsLock\n    o[\"modifierFn\"] = modifierFn\n    o[\"modifierFnLock\"] = modifierFnLock\n    o[\"modifierHyper\"] = modifierHyper\n    o[\"modifierNumLock\"] = modifierNumLock\n    o[\"modifierScrollLock\"] = modifierScrollLock\n    o[\"modifierSuper\"] = modifierSuper\n    o[\"modifierSymbol\"] = modifierSymbol\n    o[\"modifierSymbolLock\"] = modifierSymbolLock\n    o[\"view\"] = view\n    o[\"detail\"] = detail\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n    return o\n}\n\n/**\n * Exposes the JavaScript [CompositionEvent](https://developer.mozilla.org/en/docs/Web/API/CompositionEvent) to Kotlin\n */\npublic external open class CompositionEvent(type: String, eventInitDict: CompositionEventInit = definedExternally) : UIEvent {\n    open val data: String\n\n    companion object {\n        val NONE: Short\n        val CAPTURING_PHASE: Short\n        val AT_TARGET: Short\n        val BUBBLING_PHASE: Short\n    }\n}\n\npublic external interface CompositionEventInit : UIEventInit {\n    var data: String? /* = \"\" */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun CompositionEventInit(data: String? = \"\", view: Window? = null, detail: Int? = 0, bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): CompositionEventInit {\n    val o = js(\"({})\")\n    o[\"data\"] = data\n    o[\"view\"] = view\n    o[\"detail\"] = detail\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n    return o\n}\n\n/**\n * Exposes the JavaScript [Event](https://developer.mozilla.org/en/docs/Web/API/Event) to Kotlin\n */\npublic external open class Event(type: String, eventInitDict: EventInit = definedExternally) {\n    open val type: String\n    open val target: EventTarget?\n    open val currentTarget: EventTarget?\n    open val eventPhase: Short\n    open val bubbles: Boolean\n    open val cancelable: Boolean\n    open val defaultPrevented: Boolean\n    open val composed: Boolean\n    open val isTrusted: Boolean\n    open val timeStamp: Number\n    fun composedPath(): Array<EventTarget>\n    fun stopPropagation()\n    fun stopImmediatePropagation()\n    fun preventDefault()\n    fun initEvent(type: String, bubbles: Boolean, cancelable: Boolean)\n\n    companion object {\n        val NONE: Short\n        val CAPTURING_PHASE: Short\n        val AT_TARGET: Short\n        val BUBBLING_PHASE: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [EventTarget](https://developer.mozilla.org/en/docs/Web/API/EventTarget) to Kotlin\n */\npublic external abstract class EventTarget {\n    fun addEventListener(type: String, callback: EventListener?, options: dynamic = definedExternally)\n    fun addEventListener(type: String, callback: ((Event) -> Unit)?, options: dynamic = definedExternally)\n    fun removeEventListener(type: String, callback: EventListener?, options: dynamic = definedExternally)\n    fun removeEventListener(type: String, callback: ((Event) -> Unit)?, options: dynamic = definedExternally)\n    fun dispatchEvent(event: Event): Boolean\n}\n\n/**\n * Exposes the JavaScript [EventListener](https://developer.mozilla.org/en/docs/Web/API/EventListener) to Kotlin\n */\npublic external interface EventListener {\n    fun handleEvent(event: Event)\n}","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n// NOTE: THIS FILE IS AUTO-GENERATED, DO NOT EDIT!\n// See github.com/kotlin/dukat for details\n\npackage org.w3c.dom\n\nimport kotlin.js.*\nimport org.khronos.webgl.*\nimport org.w3c.css.masking.*\nimport org.w3c.dom.clipboard.*\nimport org.w3c.dom.css.*\nimport org.w3c.dom.encryptedmedia.*\nimport org.w3c.dom.events.*\nimport org.w3c.dom.mediacapture.*\nimport org.w3c.dom.mediasource.*\nimport org.w3c.dom.parsing.*\nimport org.w3c.dom.pointerevents.*\nimport org.w3c.dom.svg.*\nimport org.w3c.dom.url.*\nimport org.w3c.fetch.*\nimport org.w3c.files.*\nimport org.w3c.notifications.*\nimport org.w3c.performance.*\nimport org.w3c.workers.*\nimport org.w3c.xhr.*\n\npublic external abstract class HTMLAllCollection {\n    open val length: Int\n    fun item(nameOrIndex: String = definedExternally): UnionElementOrHTMLCollection?\n    fun namedItem(name: String): UnionElementOrHTMLCollection?\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun HTMLAllCollection.get(index: Int): Element? = asDynamic()[index]\n\n@kotlin.internal.InlineOnly\npublic inline operator fun HTMLAllCollection.get(name: String): UnionElementOrHTMLCollection? = asDynamic()[name]\n\n/**\n * Exposes the JavaScript [HTMLFormControlsCollection](https://developer.mozilla.org/en/docs/Web/API/HTMLFormControlsCollection) to Kotlin\n */\npublic external abstract class HTMLFormControlsCollection : HTMLCollection\n\n/**\n * Exposes the JavaScript [RadioNodeList](https://developer.mozilla.org/en/docs/Web/API/RadioNodeList) to Kotlin\n */\npublic external abstract class RadioNodeList : NodeList, UnionElementOrRadioNodeList {\n    open var value: String\n}\n\n/**\n * Exposes the JavaScript [HTMLOptionsCollection](https://developer.mozilla.org/en/docs/Web/API/HTMLOptionsCollection) to Kotlin\n */\npublic external abstract class HTMLOptionsCollection : HTMLCollection {\n    override var length: Int\n    open var selectedIndex: Int\n    fun add(element: UnionHTMLOptGroupElementOrHTMLOptionElement, before: dynamic = definedExternally)\n    fun remove(index: Int)\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun HTMLOptionsCollection.set(index: Int, option: HTMLOptionElement?) { asDynamic()[index] = option }\n\n/**\n * Exposes the JavaScript [HTMLElement](https://developer.mozilla.org/en/docs/Web/API/HTMLElement) to Kotlin\n */\npublic external abstract class HTMLElement : Element, GlobalEventHandlers, DocumentAndElementEventHandlers, ElementContentEditable, ElementCSSInlineStyle {\n    open var title: String\n    open var lang: String\n    open var translate: Boolean\n    open var dir: String\n    open val dataset: DOMStringMap\n    open var hidden: Boolean\n    open var tabIndex: Int\n    open var accessKey: String\n    open val accessKeyLabel: String\n    open var draggable: Boolean\n    open val dropzone: DOMTokenList\n    open var contextMenu: HTMLMenuElement?\n    open var spellcheck: Boolean\n    open var innerText: String\n    open val offsetParent: Element?\n    open val offsetTop: Int\n    open val offsetLeft: Int\n    open val offsetWidth: Int\n    open val offsetHeight: Int\n    fun click()\n    fun focus()\n    fun blur()\n    fun forceSpellCheck()\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLUnknownElement](https://developer.mozilla.org/en/docs/Web/API/HTMLUnknownElement) to Kotlin\n */\npublic external abstract class HTMLUnknownElement : HTMLElement {\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [DOMStringMap](https://developer.mozilla.org/en/docs/Web/API/DOMStringMap) to Kotlin\n */\npublic external abstract class DOMStringMap\n\n@kotlin.internal.InlineOnly\npublic inline operator fun DOMStringMap.get(name: String): String? = asDynamic()[name]\n\n@kotlin.internal.InlineOnly\npublic inline operator fun DOMStringMap.set(name: String, value: String) { asDynamic()[name] = value }\n\n/**\n * Exposes the JavaScript [HTMLHtmlElement](https://developer.mozilla.org/en/docs/Web/API/HTMLHtmlElement) to Kotlin\n */\npublic external abstract class HTMLHtmlElement : HTMLElement {\n    open var version: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLHeadElement](https://developer.mozilla.org/en/docs/Web/API/HTMLHeadElement) to Kotlin\n */\npublic external abstract class HTMLHeadElement : HTMLElement {\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLTitleElement](https://developer.mozilla.org/en/docs/Web/API/HTMLTitleElement) to Kotlin\n */\npublic external abstract class HTMLTitleElement : HTMLElement {\n    open var text: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLBaseElement](https://developer.mozilla.org/en/docs/Web/API/HTMLBaseElement) to Kotlin\n */\npublic external abstract class HTMLBaseElement : HTMLElement {\n    open var href: String\n    open var target: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLLinkElement](https://developer.mozilla.org/en/docs/Web/API/HTMLLinkElement) to Kotlin\n */\npublic external abstract class HTMLLinkElement : HTMLElement, LinkStyle {\n    open var href: String\n    open var crossOrigin: String?\n    open var rel: String\n    open var `as`: RequestDestination\n    open val relList: DOMTokenList\n    open var media: String\n    open var nonce: String\n    open var hreflang: String\n    open var type: String\n    open val sizes: DOMTokenList\n    open var referrerPolicy: String\n    open var charset: String\n    open var rev: String\n    open var target: String\n    open var scope: String\n    open var workerType: WorkerType\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLMetaElement](https://developer.mozilla.org/en/docs/Web/API/HTMLMetaElement) to Kotlin\n */\npublic external abstract class HTMLMetaElement : HTMLElement {\n    open var name: String\n    open var httpEquiv: String\n    open var content: String\n    open var scheme: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLStyleElement](https://developer.mozilla.org/en/docs/Web/API/HTMLStyleElement) to Kotlin\n */\npublic external abstract class HTMLStyleElement : HTMLElement, LinkStyle {\n    open var media: String\n    open var nonce: String\n    open var type: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLBodyElement](https://developer.mozilla.org/en/docs/Web/API/HTMLBodyElement) to Kotlin\n */\npublic external abstract class HTMLBodyElement : HTMLElement, WindowEventHandlers {\n    open var text: String\n    open var link: String\n    open var vLink: String\n    open var aLink: String\n    open var bgColor: String\n    open var background: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLHeadingElement](https://developer.mozilla.org/en/docs/Web/API/HTMLHeadingElement) to Kotlin\n */\npublic external abstract class HTMLHeadingElement : HTMLElement {\n    open var align: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLParagraphElement](https://developer.mozilla.org/en/docs/Web/API/HTMLParagraphElement) to Kotlin\n */\npublic external abstract class HTMLParagraphElement : HTMLElement {\n    open var align: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLHRElement](https://developer.mozilla.org/en/docs/Web/API/HTMLHRElement) to Kotlin\n */\npublic external abstract class HTMLHRElement : HTMLElement {\n    open var align: String\n    open var color: String\n    open var noShade: Boolean\n    open var size: String\n    open var width: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLPreElement](https://developer.mozilla.org/en/docs/Web/API/HTMLPreElement) to Kotlin\n */\npublic external abstract class HTMLPreElement : HTMLElement {\n    open var width: Int\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLQuoteElement](https://developer.mozilla.org/en/docs/Web/API/HTMLQuoteElement) to Kotlin\n */\npublic external abstract class HTMLQuoteElement : HTMLElement {\n    open var cite: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLOListElement](https://developer.mozilla.org/en/docs/Web/API/HTMLOListElement) to Kotlin\n */\npublic external abstract class HTMLOListElement : HTMLElement {\n    open var reversed: Boolean\n    open var start: Int\n    open var type: String\n    open var compact: Boolean\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLUListElement](https://developer.mozilla.org/en/docs/Web/API/HTMLUListElement) to Kotlin\n */\npublic external abstract class HTMLUListElement : HTMLElement {\n    open var compact: Boolean\n    open var type: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLLIElement](https://developer.mozilla.org/en/docs/Web/API/HTMLLIElement) to Kotlin\n */\npublic external abstract class HTMLLIElement : HTMLElement {\n    open var value: Int\n    open var type: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLDListElement](https://developer.mozilla.org/en/docs/Web/API/HTMLDListElement) to Kotlin\n */\npublic external abstract class HTMLDListElement : HTMLElement {\n    open var compact: Boolean\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLDivElement](https://developer.mozilla.org/en/docs/Web/API/HTMLDivElement) to Kotlin\n */\npublic external abstract class HTMLDivElement : HTMLElement {\n    open var align: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLAnchorElement](https://developer.mozilla.org/en/docs/Web/API/HTMLAnchorElement) to Kotlin\n */\npublic external abstract class HTMLAnchorElement : HTMLElement, HTMLHyperlinkElementUtils {\n    open var target: String\n    open var download: String\n    open var ping: String\n    open var rel: String\n    open val relList: DOMTokenList\n    open var hreflang: String\n    open var type: String\n    open var text: String\n    open var referrerPolicy: String\n    open var coords: String\n    open var charset: String\n    open var name: String\n    open var rev: String\n    open var shape: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLDataElement](https://developer.mozilla.org/en/docs/Web/API/HTMLDataElement) to Kotlin\n */\npublic external abstract class HTMLDataElement : HTMLElement {\n    open var value: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLTimeElement](https://developer.mozilla.org/en/docs/Web/API/HTMLTimeElement) to Kotlin\n */\npublic external abstract class HTMLTimeElement : HTMLElement {\n    open var dateTime: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLSpanElement](https://developer.mozilla.org/en/docs/Web/API/HTMLSpanElement) to Kotlin\n */\npublic external abstract class HTMLSpanElement : HTMLElement {\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLBRElement](https://developer.mozilla.org/en/docs/Web/API/HTMLBRElement) to Kotlin\n */\npublic external abstract class HTMLBRElement : HTMLElement {\n    open var clear: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLHyperlinkElementUtils](https://developer.mozilla.org/en/docs/Web/API/HTMLHyperlinkElementUtils) to Kotlin\n */\npublic external interface HTMLHyperlinkElementUtils {\n    var href: String\n    val origin: String\n    var protocol: String\n    var username: String\n    var password: String\n    var host: String\n    var hostname: String\n    var port: String\n    var pathname: String\n    var search: String\n    var hash: String\n}\n\n/**\n * Exposes the JavaScript [HTMLModElement](https://developer.mozilla.org/en/docs/Web/API/HTMLModElement) to Kotlin\n */\npublic external abstract class HTMLModElement : HTMLElement {\n    open var cite: String\n    open var dateTime: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLPictureElement](https://developer.mozilla.org/en/docs/Web/API/HTMLPictureElement) to Kotlin\n */\npublic external abstract class HTMLPictureElement : HTMLElement {\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLSourceElement](https://developer.mozilla.org/en/docs/Web/API/HTMLSourceElement) to Kotlin\n */\npublic external abstract class HTMLSourceElement : HTMLElement {\n    open var src: String\n    open var type: String\n    open var srcset: String\n    open var sizes: String\n    open var media: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLImageElement](https://developer.mozilla.org/en/docs/Web/API/HTMLImageElement) to Kotlin\n */\npublic external abstract class HTMLImageElement : HTMLElement, HTMLOrSVGImageElement, TexImageSource {\n    open var alt: String\n    open var src: String\n    open var srcset: String\n    open var sizes: String\n    open var crossOrigin: String?\n    open var useMap: String\n    open var isMap: Boolean\n    open var width: Int\n    open var height: Int\n    open val naturalWidth: Int\n    open val naturalHeight: Int\n    open val complete: Boolean\n    open val currentSrc: String\n    open var referrerPolicy: String\n    open var name: String\n    open var lowsrc: String\n    open var align: String\n    open var hspace: Int\n    open var vspace: Int\n    open var longDesc: String\n    open var border: String\n    open val x: Int\n    open val y: Int\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLIFrameElement](https://developer.mozilla.org/en/docs/Web/API/HTMLIFrameElement) to Kotlin\n */\npublic external abstract class HTMLIFrameElement : HTMLElement {\n    open var src: String\n    open var srcdoc: String\n    open var name: String\n    open val sandbox: DOMTokenList\n    open var allowFullscreen: Boolean\n    open var allowUserMedia: Boolean\n    open var width: String\n    open var height: String\n    open var referrerPolicy: String\n    open val contentDocument: Document?\n    open val contentWindow: Window?\n    open var align: String\n    open var scrolling: String\n    open var frameBorder: String\n    open var longDesc: String\n    open var marginHeight: String\n    open var marginWidth: String\n    fun getSVGDocument(): Document?\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLEmbedElement](https://developer.mozilla.org/en/docs/Web/API/HTMLEmbedElement) to Kotlin\n */\npublic external abstract class HTMLEmbedElement : HTMLElement {\n    open var src: String\n    open var type: String\n    open var width: String\n    open var height: String\n    open var align: String\n    open var name: String\n    fun getSVGDocument(): Document?\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLObjectElement](https://developer.mozilla.org/en/docs/Web/API/HTMLObjectElement) to Kotlin\n */\npublic external abstract class HTMLObjectElement : HTMLElement {\n    open var data: String\n    open var type: String\n    open var typeMustMatch: Boolean\n    open var name: String\n    open var useMap: String\n    open val form: HTMLFormElement?\n    open var width: String\n    open var height: String\n    open val contentDocument: Document?\n    open val contentWindow: Window?\n    open val willValidate: Boolean\n    open val validity: ValidityState\n    open val validationMessage: String\n    open var align: String\n    open var archive: String\n    open var code: String\n    open var declare: Boolean\n    open var hspace: Int\n    open var standby: String\n    open var vspace: Int\n    open var codeBase: String\n    open var codeType: String\n    open var border: String\n    fun getSVGDocument(): Document?\n    fun checkValidity(): Boolean\n    fun reportValidity(): Boolean\n    fun setCustomValidity(error: String)\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLParamElement](https://developer.mozilla.org/en/docs/Web/API/HTMLParamElement) to Kotlin\n */\npublic external abstract class HTMLParamElement : HTMLElement {\n    open var name: String\n    open var value: String\n    open var type: String\n    open var valueType: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLVideoElement](https://developer.mozilla.org/en/docs/Web/API/HTMLVideoElement) to Kotlin\n */\npublic external abstract class HTMLVideoElement : HTMLMediaElement, CanvasImageSource, TexImageSource {\n    open var width: Int\n    open var height: Int\n    open val videoWidth: Int\n    open val videoHeight: Int\n    open var poster: String\n    open var playsInline: Boolean\n\n    companion object {\n        val NETWORK_EMPTY: Short\n        val NETWORK_IDLE: Short\n        val NETWORK_LOADING: Short\n        val NETWORK_NO_SOURCE: Short\n        val HAVE_NOTHING: Short\n        val HAVE_METADATA: Short\n        val HAVE_CURRENT_DATA: Short\n        val HAVE_FUTURE_DATA: Short\n        val HAVE_ENOUGH_DATA: Short\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLAudioElement](https://developer.mozilla.org/en/docs/Web/API/HTMLAudioElement) to Kotlin\n */\npublic external abstract class HTMLAudioElement : HTMLMediaElement {\n    companion object {\n        val NETWORK_EMPTY: Short\n        val NETWORK_IDLE: Short\n        val NETWORK_LOADING: Short\n        val NETWORK_NO_SOURCE: Short\n        val HAVE_NOTHING: Short\n        val HAVE_METADATA: Short\n        val HAVE_CURRENT_DATA: Short\n        val HAVE_FUTURE_DATA: Short\n        val HAVE_ENOUGH_DATA: Short\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLTrackElement](https://developer.mozilla.org/en/docs/Web/API/HTMLTrackElement) to Kotlin\n */\npublic external abstract class HTMLTrackElement : HTMLElement {\n    open var kind: String\n    open var src: String\n    open var srclang: String\n    open var label: String\n    open var default: Boolean\n    open val readyState: Short\n    open val track: TextTrack\n\n    companion object {\n        val NONE: Short\n        val LOADING: Short\n        val LOADED: Short\n        val ERROR: Short\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLMediaElement](https://developer.mozilla.org/en/docs/Web/API/HTMLMediaElement) to Kotlin\n */\npublic external abstract class HTMLMediaElement : HTMLElement {\n    open val error: MediaError?\n    open var src: String\n    open var srcObject: MediaProvider?\n    open val currentSrc: String\n    open var crossOrigin: String?\n    open val networkState: Short\n    open var preload: String\n    open val buffered: TimeRanges\n    open val readyState: Short\n    open val seeking: Boolean\n    open var currentTime: Double\n    open val duration: Double\n    open val paused: Boolean\n    open var defaultPlaybackRate: Double\n    open var playbackRate: Double\n    open val played: TimeRanges\n    open val seekable: TimeRanges\n    open val ended: Boolean\n    open var autoplay: Boolean\n    open var loop: Boolean\n    open var controls: Boolean\n    open var volume: Double\n    open var muted: Boolean\n    open var defaultMuted: Boolean\n    open val audioTracks: AudioTrackList\n    open val videoTracks: VideoTrackList\n    open val textTracks: TextTrackList\n    open val mediaKeys: MediaKeys?\n    open var onencrypted: ((Event) -> dynamic)?\n    open var onwaitingforkey: ((Event) -> dynamic)?\n    fun load()\n    fun canPlayType(type: String): CanPlayTypeResult\n    fun fastSeek(time: Double)\n    fun getStartDate(): dynamic\n    fun play(): Promise<Unit>\n    fun pause()\n    fun addTextTrack(kind: TextTrackKind, label: String = definedExternally, language: String = definedExternally): TextTrack\n    fun setMediaKeys(mediaKeys: MediaKeys?): Promise<Unit>\n\n    companion object {\n        val NETWORK_EMPTY: Short\n        val NETWORK_IDLE: Short\n        val NETWORK_LOADING: Short\n        val NETWORK_NO_SOURCE: Short\n        val HAVE_NOTHING: Short\n        val HAVE_METADATA: Short\n        val HAVE_CURRENT_DATA: Short\n        val HAVE_FUTURE_DATA: Short\n        val HAVE_ENOUGH_DATA: Short\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [MediaError](https://developer.mozilla.org/en/docs/Web/API/MediaError) to Kotlin\n */\npublic external abstract class MediaError {\n    open val code: Short\n\n    companion object {\n        val MEDIA_ERR_ABORTED: Short\n        val MEDIA_ERR_NETWORK: Short\n        val MEDIA_ERR_DECODE: Short\n        val MEDIA_ERR_SRC_NOT_SUPPORTED: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [AudioTrackList](https://developer.mozilla.org/en/docs/Web/API/AudioTrackList) to Kotlin\n */\npublic external abstract class AudioTrackList : EventTarget {\n    open val length: Int\n    open var onchange: ((Event) -> dynamic)?\n    open var onaddtrack: ((TrackEvent) -> dynamic)?\n    open var onremovetrack: ((TrackEvent) -> dynamic)?\n    fun getTrackById(id: String): AudioTrack?\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun AudioTrackList.get(index: Int): AudioTrack? = asDynamic()[index]\n\n/**\n * Exposes the JavaScript [AudioTrack](https://developer.mozilla.org/en/docs/Web/API/AudioTrack) to Kotlin\n */\npublic external abstract class AudioTrack : UnionAudioTrackOrTextTrackOrVideoTrack {\n    open val id: String\n    open val kind: String\n    open val label: String\n    open val language: String\n    open var enabled: Boolean\n    open val sourceBuffer: SourceBuffer?\n}\n\n/**\n * Exposes the JavaScript [VideoTrackList](https://developer.mozilla.org/en/docs/Web/API/VideoTrackList) to Kotlin\n */\npublic external abstract class VideoTrackList : EventTarget {\n    open val length: Int\n    open val selectedIndex: Int\n    open var onchange: ((Event) -> dynamic)?\n    open var onaddtrack: ((TrackEvent) -> dynamic)?\n    open var onremovetrack: ((TrackEvent) -> dynamic)?\n    fun getTrackById(id: String): VideoTrack?\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun VideoTrackList.get(index: Int): VideoTrack? = asDynamic()[index]\n\n/**\n * Exposes the JavaScript [VideoTrack](https://developer.mozilla.org/en/docs/Web/API/VideoTrack) to Kotlin\n */\npublic external abstract class VideoTrack : UnionAudioTrackOrTextTrackOrVideoTrack {\n    open val id: String\n    open val kind: String\n    open val label: String\n    open val language: String\n    open var selected: Boolean\n    open val sourceBuffer: SourceBuffer?\n}\n\npublic external abstract class TextTrackList : EventTarget {\n    open val length: Int\n    open var onchange: ((Event) -> dynamic)?\n    open var onaddtrack: ((TrackEvent) -> dynamic)?\n    open var onremovetrack: ((TrackEvent) -> dynamic)?\n    fun getTrackById(id: String): TextTrack?\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun TextTrackList.get(index: Int): TextTrack? = asDynamic()[index]\n\n/**\n * Exposes the JavaScript [TextTrack](https://developer.mozilla.org/en/docs/Web/API/TextTrack) to Kotlin\n */\npublic external abstract class TextTrack : EventTarget, UnionAudioTrackOrTextTrackOrVideoTrack {\n    open val kind: TextTrackKind\n    open val label: String\n    open val language: String\n    open val id: String\n    open val inBandMetadataTrackDispatchType: String\n    open var mode: TextTrackMode\n    open val cues: TextTrackCueList?\n    open val activeCues: TextTrackCueList?\n    open var oncuechange: ((Event) -> dynamic)?\n    open val sourceBuffer: SourceBuffer?\n    fun addCue(cue: TextTrackCue)\n    fun removeCue(cue: TextTrackCue)\n}\n\npublic external abstract class TextTrackCueList {\n    open val length: Int\n    fun getCueById(id: String): TextTrackCue?\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun TextTrackCueList.get(index: Int): TextTrackCue? = asDynamic()[index]\n\n/**\n * Exposes the JavaScript [TextTrackCue](https://developer.mozilla.org/en/docs/Web/API/TextTrackCue) to Kotlin\n */\npublic external abstract class TextTrackCue : EventTarget {\n    open val track: TextTrack?\n    open var id: String\n    open var startTime: Double\n    open var endTime: Double\n    open var pauseOnExit: Boolean\n    open var onenter: ((Event) -> dynamic)?\n    open var onexit: ((Event) -> dynamic)?\n}\n\n/**\n * Exposes the JavaScript [TimeRanges](https://developer.mozilla.org/en/docs/Web/API/TimeRanges) to Kotlin\n */\npublic external abstract class TimeRanges {\n    open val length: Int\n    fun start(index: Int): Double\n    fun end(index: Int): Double\n}\n\n/**\n * Exposes the JavaScript [TrackEvent](https://developer.mozilla.org/en/docs/Web/API/TrackEvent) to Kotlin\n */\npublic external open class TrackEvent(type: String, eventInitDict: TrackEventInit = definedExternally) : Event {\n    open val track: UnionAudioTrackOrTextTrackOrVideoTrack?\n\n    companion object {\n        val NONE: Short\n        val CAPTURING_PHASE: Short\n        val AT_TARGET: Short\n        val BUBBLING_PHASE: Short\n    }\n}\n\npublic external interface TrackEventInit : EventInit {\n    var track: UnionAudioTrackOrTextTrackOrVideoTrack? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun TrackEventInit(track: UnionAudioTrackOrTextTrackOrVideoTrack? = null, bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): TrackEventInit {\n    val o = js(\"({})\")\n    o[\"track\"] = track\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n    return o\n}\n\n/**\n * Exposes the JavaScript [HTMLMapElement](https://developer.mozilla.org/en/docs/Web/API/HTMLMapElement) to Kotlin\n */\npublic external abstract class HTMLMapElement : HTMLElement {\n    open var name: String\n    open val areas: HTMLCollection\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLAreaElement](https://developer.mozilla.org/en/docs/Web/API/HTMLAreaElement) to Kotlin\n */\npublic external abstract class HTMLAreaElement : HTMLElement, HTMLHyperlinkElementUtils {\n    open var alt: String\n    open var coords: String\n    open var shape: String\n    open var target: String\n    open var download: String\n    open var ping: String\n    open var rel: String\n    open val relList: DOMTokenList\n    open var referrerPolicy: String\n    open var noHref: Boolean\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLTableElement](https://developer.mozilla.org/en/docs/Web/API/HTMLTableElement) to Kotlin\n */\npublic external abstract class HTMLTableElement : HTMLElement {\n    open var caption: HTMLTableCaptionElement?\n    open var tHead: HTMLTableSectionElement?\n    open var tFoot: HTMLTableSectionElement?\n    open val tBodies: HTMLCollection\n    open val rows: HTMLCollection\n    open var align: String\n    open var border: String\n    open var frame: String\n    open var rules: String\n    open var summary: String\n    open var width: String\n    open var bgColor: String\n    open var cellPadding: String\n    open var cellSpacing: String\n    fun createCaption(): HTMLTableCaptionElement\n    fun deleteCaption()\n    fun createTHead(): HTMLTableSectionElement\n    fun deleteTHead()\n    fun createTFoot(): HTMLTableSectionElement\n    fun deleteTFoot()\n    fun createTBody(): HTMLTableSectionElement\n    fun insertRow(index: Int = definedExternally): HTMLTableRowElement\n    fun deleteRow(index: Int)\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLTableCaptionElement](https://developer.mozilla.org/en/docs/Web/API/HTMLTableCaptionElement) to Kotlin\n */\npublic external abstract class HTMLTableCaptionElement : HTMLElement {\n    open var align: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLTableColElement](https://developer.mozilla.org/en/docs/Web/API/HTMLTableColElement) to Kotlin\n */\npublic external abstract class HTMLTableColElement : HTMLElement {\n    open var span: Int\n    open var align: String\n    open var ch: String\n    open var chOff: String\n    open var vAlign: String\n    open var width: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLTableSectionElement](https://developer.mozilla.org/en/docs/Web/API/HTMLTableSectionElement) to Kotlin\n */\npublic external abstract class HTMLTableSectionElement : HTMLElement {\n    open val rows: HTMLCollection\n    open var align: String\n    open var ch: String\n    open var chOff: String\n    open var vAlign: String\n    fun insertRow(index: Int = definedExternally): HTMLElement\n    fun deleteRow(index: Int)\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLTableRowElement](https://developer.mozilla.org/en/docs/Web/API/HTMLTableRowElement) to Kotlin\n */\npublic external abstract class HTMLTableRowElement : HTMLElement {\n    open val rowIndex: Int\n    open val sectionRowIndex: Int\n    open val cells: HTMLCollection\n    open var align: String\n    open var ch: String\n    open var chOff: String\n    open var vAlign: String\n    open var bgColor: String\n    fun insertCell(index: Int = definedExternally): HTMLElement\n    fun deleteCell(index: Int)\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLTableCellElement](https://developer.mozilla.org/en/docs/Web/API/HTMLTableCellElement) to Kotlin\n */\npublic external abstract class HTMLTableCellElement : HTMLElement {\n    open var colSpan: Int\n    open var rowSpan: Int\n    open var headers: String\n    open val cellIndex: Int\n    open var scope: String\n    open var abbr: String\n    open var align: String\n    open var axis: String\n    open var height: String\n    open var width: String\n    open var ch: String\n    open var chOff: String\n    open var noWrap: Boolean\n    open var vAlign: String\n    open var bgColor: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLFormElement](https://developer.mozilla.org/en/docs/Web/API/HTMLFormElement) to Kotlin\n */\npublic external abstract class HTMLFormElement : HTMLElement {\n    open var acceptCharset: String\n    open var action: String\n    open var autocomplete: String\n    open var enctype: String\n    open var encoding: String\n    open var method: String\n    open var name: String\n    open var noValidate: Boolean\n    open var target: String\n    open val elements: HTMLFormControlsCollection\n    open val length: Int\n    fun submit()\n    fun reset()\n    fun checkValidity(): Boolean\n    fun reportValidity(): Boolean\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun HTMLFormElement.get(index: Int): Element? = asDynamic()[index]\n\n@kotlin.internal.InlineOnly\npublic inline operator fun HTMLFormElement.get(name: String): UnionElementOrRadioNodeList? = asDynamic()[name]\n\n/**\n * Exposes the JavaScript [HTMLLabelElement](https://developer.mozilla.org/en/docs/Web/API/HTMLLabelElement) to Kotlin\n */\npublic external abstract class HTMLLabelElement : HTMLElement {\n    open val form: HTMLFormElement?\n    open var htmlFor: String\n    open val control: HTMLElement?\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLInputElement](https://developer.mozilla.org/en/docs/Web/API/HTMLInputElement) to Kotlin\n */\npublic external abstract class HTMLInputElement : HTMLElement {\n    open var accept: String\n    open var alt: String\n    open var autocomplete: String\n    open var autofocus: Boolean\n    open var defaultChecked: Boolean\n    open var checked: Boolean\n    open var dirName: String\n    open var disabled: Boolean\n    open val form: HTMLFormElement?\n    open val files: FileList?\n    open var formAction: String\n    open var formEnctype: String\n    open var formMethod: String\n    open var formNoValidate: Boolean\n    open var formTarget: String\n    open var height: Int\n    open var indeterminate: Boolean\n    open var inputMode: String\n    open val list: HTMLElement?\n    open var max: String\n    open var maxLength: Int\n    open var min: String\n    open var minLength: Int\n    open var multiple: Boolean\n    open var name: String\n    open var pattern: String\n    open var placeholder: String\n    open var readOnly: Boolean\n    open var required: Boolean\n    open var size: Int\n    open var src: String\n    open var step: String\n    open var type: String\n    open var defaultValue: String\n    open var value: String\n    open var valueAsDate: dynamic\n    open var valueAsNumber: Double\n    open var width: Int\n    open val willValidate: Boolean\n    open val validity: ValidityState\n    open val validationMessage: String\n    open val labels: NodeList\n    open var selectionStart: Int?\n    open var selectionEnd: Int?\n    open var selectionDirection: String?\n    open var align: String\n    open var useMap: String\n    fun stepUp(n: Int = definedExternally)\n    fun stepDown(n: Int = definedExternally)\n    fun checkValidity(): Boolean\n    fun reportValidity(): Boolean\n    fun setCustomValidity(error: String)\n    fun select()\n    fun setRangeText(replacement: String)\n    fun setRangeText(replacement: String, start: Int, end: Int, selectionMode: SelectionMode = definedExternally)\n    fun setSelectionRange(start: Int, end: Int, direction: String = definedExternally)\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLButtonElement](https://developer.mozilla.org/en/docs/Web/API/HTMLButtonElement) to Kotlin\n */\npublic external abstract class HTMLButtonElement : HTMLElement {\n    open var autofocus: Boolean\n    open var disabled: Boolean\n    open val form: HTMLFormElement?\n    open var formAction: String\n    open var formEnctype: String\n    open var formMethod: String\n    open var formNoValidate: Boolean\n    open var formTarget: String\n    open var name: String\n    open var type: String\n    open var value: String\n    open var menu: HTMLMenuElement?\n    open val willValidate: Boolean\n    open val validity: ValidityState\n    open val validationMessage: String\n    open val labels: NodeList\n    fun checkValidity(): Boolean\n    fun reportValidity(): Boolean\n    fun setCustomValidity(error: String)\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLSelectElement](https://developer.mozilla.org/en/docs/Web/API/HTMLSelectElement) to Kotlin\n */\npublic external abstract class HTMLSelectElement : HTMLElement, ItemArrayLike<Element> {\n    open var autocomplete: String\n    open var autofocus: Boolean\n    open var disabled: Boolean\n    open val form: HTMLFormElement?\n    open var multiple: Boolean\n    open var name: String\n    open var required: Boolean\n    open var size: Int\n    open val type: String\n    open val options: HTMLOptionsCollection\n    override var length: Int\n    open val selectedOptions: HTMLCollection\n    open var selectedIndex: Int\n    open var value: String\n    open val willValidate: Boolean\n    open val validity: ValidityState\n    open val validationMessage: String\n    open val labels: NodeList\n    fun namedItem(name: String): HTMLOptionElement?\n    fun add(element: UnionHTMLOptGroupElementOrHTMLOptionElement, before: dynamic = definedExternally)\n    fun remove(index: Int)\n    fun checkValidity(): Boolean\n    fun reportValidity(): Boolean\n    fun setCustomValidity(error: String)\n    override fun item(index: Int): Element?\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun HTMLSelectElement.get(index: Int): Element? = asDynamic()[index]\n\n@kotlin.internal.InlineOnly\npublic inline operator fun HTMLSelectElement.set(index: Int, option: HTMLOptionElement?) { asDynamic()[index] = option }\n\n/**\n * Exposes the JavaScript [HTMLDataListElement](https://developer.mozilla.org/en/docs/Web/API/HTMLDataListElement) to Kotlin\n */\npublic external abstract class HTMLDataListElement : HTMLElement {\n    open val options: HTMLCollection\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLOptGroupElement](https://developer.mozilla.org/en/docs/Web/API/HTMLOptGroupElement) to Kotlin\n */\npublic external abstract class HTMLOptGroupElement : HTMLElement, UnionHTMLOptGroupElementOrHTMLOptionElement {\n    open var disabled: Boolean\n    open var label: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLOptionElement](https://developer.mozilla.org/en/docs/Web/API/HTMLOptionElement) to Kotlin\n */\npublic external abstract class HTMLOptionElement : HTMLElement, UnionHTMLOptGroupElementOrHTMLOptionElement {\n    open var disabled: Boolean\n    open val form: HTMLFormElement?\n    open var label: String\n    open var defaultSelected: Boolean\n    open var selected: Boolean\n    open var value: String\n    open var text: String\n    open val index: Int\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLTextAreaElement](https://developer.mozilla.org/en/docs/Web/API/HTMLTextAreaElement) to Kotlin\n */\npublic external abstract class HTMLTextAreaElement : HTMLElement {\n    open var autocomplete: String\n    open var autofocus: Boolean\n    open var cols: Int\n    open var dirName: String\n    open var disabled: Boolean\n    open val form: HTMLFormElement?\n    open var inputMode: String\n    open var maxLength: Int\n    open var minLength: Int\n    open var name: String\n    open var placeholder: String\n    open var readOnly: Boolean\n    open var required: Boolean\n    open var rows: Int\n    open var wrap: String\n    open val type: String\n    open var defaultValue: String\n    open var value: String\n    open val textLength: Int\n    open val willValidate: Boolean\n    open val validity: ValidityState\n    open val validationMessage: String\n    open val labels: NodeList\n    open var selectionStart: Int?\n    open var selectionEnd: Int?\n    open var selectionDirection: String?\n    fun checkValidity(): Boolean\n    fun reportValidity(): Boolean\n    fun setCustomValidity(error: String)\n    fun select()\n    fun setRangeText(replacement: String)\n    fun setRangeText(replacement: String, start: Int, end: Int, selectionMode: SelectionMode = definedExternally)\n    fun setSelectionRange(start: Int, end: Int, direction: String = definedExternally)\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLKeygenElement](https://developer.mozilla.org/en/docs/Web/API/HTMLKeygenElement) to Kotlin\n */\npublic external abstract class HTMLKeygenElement : HTMLElement {\n    open var autofocus: Boolean\n    open var challenge: String\n    open var disabled: Boolean\n    open val form: HTMLFormElement?\n    open var keytype: String\n    open var name: String\n    open val type: String\n    open val willValidate: Boolean\n    open val validity: ValidityState\n    open val validationMessage: String\n    open val labels: NodeList\n    fun checkValidity(): Boolean\n    fun reportValidity(): Boolean\n    fun setCustomValidity(error: String)\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLOutputElement](https://developer.mozilla.org/en/docs/Web/API/HTMLOutputElement) to Kotlin\n */\npublic external abstract class HTMLOutputElement : HTMLElement {\n    open val htmlFor: DOMTokenList\n    open val form: HTMLFormElement?\n    open var name: String\n    open val type: String\n    open var defaultValue: String\n    open var value: String\n    open val willValidate: Boolean\n    open val validity: ValidityState\n    open val validationMessage: String\n    open val labels: NodeList\n    fun checkValidity(): Boolean\n    fun reportValidity(): Boolean\n    fun setCustomValidity(error: String)\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLProgressElement](https://developer.mozilla.org/en/docs/Web/API/HTMLProgressElement) to Kotlin\n */\npublic external abstract class HTMLProgressElement : HTMLElement {\n    open var value: Double\n    open var max: Double\n    open val position: Double\n    open val labels: NodeList\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLMeterElement](https://developer.mozilla.org/en/docs/Web/API/HTMLMeterElement) to Kotlin\n */\npublic external abstract class HTMLMeterElement : HTMLElement {\n    open var value: Double\n    open var min: Double\n    open var max: Double\n    open var low: Double\n    open var high: Double\n    open var optimum: Double\n    open val labels: NodeList\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLFieldSetElement](https://developer.mozilla.org/en/docs/Web/API/HTMLFieldSetElement) to Kotlin\n */\npublic external abstract class HTMLFieldSetElement : HTMLElement {\n    open var disabled: Boolean\n    open val form: HTMLFormElement?\n    open var name: String\n    open val type: String\n    open val elements: HTMLCollection\n    open val willValidate: Boolean\n    open val validity: ValidityState\n    open val validationMessage: String\n    fun checkValidity(): Boolean\n    fun reportValidity(): Boolean\n    fun setCustomValidity(error: String)\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLLegendElement](https://developer.mozilla.org/en/docs/Web/API/HTMLLegendElement) to Kotlin\n */\npublic external abstract class HTMLLegendElement : HTMLElement {\n    open val form: HTMLFormElement?\n    open var align: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [ValidityState](https://developer.mozilla.org/en/docs/Web/API/ValidityState) to Kotlin\n */\npublic external abstract class ValidityState {\n    open val valueMissing: Boolean\n    open val typeMismatch: Boolean\n    open val patternMismatch: Boolean\n    open val tooLong: Boolean\n    open val tooShort: Boolean\n    open val rangeUnderflow: Boolean\n    open val rangeOverflow: Boolean\n    open val stepMismatch: Boolean\n    open val badInput: Boolean\n    open val customError: Boolean\n    open val valid: Boolean\n}\n\n/**\n * Exposes the JavaScript [HTMLDetailsElement](https://developer.mozilla.org/en/docs/Web/API/HTMLDetailsElement) to Kotlin\n */\npublic external abstract class HTMLDetailsElement : HTMLElement {\n    open var open: Boolean\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\npublic external abstract class HTMLMenuElement : HTMLElement {\n    open var type: String\n    open var label: String\n    open var compact: Boolean\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\npublic external abstract class HTMLMenuItemElement : HTMLElement {\n    open var type: String\n    open var label: String\n    open var icon: String\n    open var disabled: Boolean\n    open var checked: Boolean\n    open var radiogroup: String\n    open var default: Boolean\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\npublic external open class RelatedEvent(type: String, eventInitDict: RelatedEventInit = definedExternally) : Event {\n    open val relatedTarget: EventTarget?\n\n    companion object {\n        val NONE: Short\n        val CAPTURING_PHASE: Short\n        val AT_TARGET: Short\n        val BUBBLING_PHASE: Short\n    }\n}\n\npublic external interface RelatedEventInit : EventInit {\n    var relatedTarget: EventTarget? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun RelatedEventInit(relatedTarget: EventTarget? = null, bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): RelatedEventInit {\n    val o = js(\"({})\")\n    o[\"relatedTarget\"] = relatedTarget\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n    return o\n}\n\n/**\n * Exposes the JavaScript [HTMLDialogElement](https://developer.mozilla.org/en/docs/Web/API/HTMLDialogElement) to Kotlin\n */\npublic external abstract class HTMLDialogElement : HTMLElement {\n    open var open: Boolean\n    open var returnValue: String\n    fun show(anchor: UnionElementOrMouseEvent = definedExternally)\n    fun showModal(anchor: UnionElementOrMouseEvent = definedExternally)\n    fun close(returnValue: String = definedExternally)\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLScriptElement](https://developer.mozilla.org/en/docs/Web/API/HTMLScriptElement) to Kotlin\n */\npublic external abstract class HTMLScriptElement : HTMLElement, HTMLOrSVGScriptElement {\n    open var src: String\n    open var type: String\n    open var charset: String\n    open var async: Boolean\n    open var defer: Boolean\n    open var crossOrigin: String?\n    open var text: String\n    open var nonce: String\n    open var event: String\n    open var htmlFor: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLTemplateElement](https://developer.mozilla.org/en/docs/Web/API/HTMLTemplateElement) to Kotlin\n */\npublic external abstract class HTMLTemplateElement : HTMLElement {\n    open val content: DocumentFragment\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLSlotElement](https://developer.mozilla.org/en/docs/Web/API/HTMLSlotElement) to Kotlin\n */\npublic external abstract class HTMLSlotElement : HTMLElement {\n    open var name: String\n    fun assignedNodes(options: AssignedNodesOptions = definedExternally): Array<Node>\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\npublic external interface AssignedNodesOptions {\n    var flatten: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun AssignedNodesOptions(flatten: Boolean? = false): AssignedNodesOptions {\n    val o = js(\"({})\")\n    o[\"flatten\"] = flatten\n    return o\n}\n\n/**\n * Exposes the JavaScript [HTMLCanvasElement](https://developer.mozilla.org/en/docs/Web/API/HTMLCanvasElement) to Kotlin\n */\npublic external abstract class HTMLCanvasElement : HTMLElement, CanvasImageSource, TexImageSource {\n    open var width: Int\n    open var height: Int\n    fun getContext(contextId: String, vararg arguments: Any?): RenderingContext?\n    fun toDataURL(type: String = definedExternally, quality: Any? = definedExternally): String\n    fun toBlob(_callback: (Blob?) -> Unit, type: String = definedExternally, quality: Any? = definedExternally)\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\npublic external interface CanvasRenderingContext2DSettings {\n    var alpha: Boolean? /* = true */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun CanvasRenderingContext2DSettings(alpha: Boolean? = true): CanvasRenderingContext2DSettings {\n    val o = js(\"({})\")\n    o[\"alpha\"] = alpha\n    return o\n}\n\n/**\n * Exposes the JavaScript [CanvasRenderingContext2D](https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D) to Kotlin\n */\npublic external abstract class CanvasRenderingContext2D : CanvasState, CanvasTransform, CanvasCompositing, CanvasImageSmoothing, CanvasFillStrokeStyles, CanvasShadowStyles, CanvasFilters, CanvasRect, CanvasDrawPath, CanvasUserInterface, CanvasText, CanvasDrawImage, CanvasHitRegion, CanvasImageData, CanvasPathDrawingStyles, CanvasTextDrawingStyles, CanvasPath, RenderingContext {\n    open val canvas: HTMLCanvasElement\n}\n\npublic external interface CanvasState {\n    fun save()\n    fun restore()\n}\n\npublic external interface CanvasTransform {\n    fun scale(x: Double, y: Double)\n    fun rotate(angle: Double)\n    fun translate(x: Double, y: Double)\n    fun transform(a: Double, b: Double, c: Double, d: Double, e: Double, f: Double)\n    fun getTransform(): DOMMatrix\n    fun setTransform(a: Double, b: Double, c: Double, d: Double, e: Double, f: Double)\n    fun setTransform(transform: dynamic = definedExternally)\n    fun resetTransform()\n}\n\npublic external interface CanvasCompositing {\n    var globalAlpha: Double\n    var globalCompositeOperation: String\n}\n\npublic external interface CanvasImageSmoothing {\n    var imageSmoothingEnabled: Boolean\n    var imageSmoothingQuality: ImageSmoothingQuality\n}\n\npublic external interface CanvasFillStrokeStyles {\n    var strokeStyle: dynamic\n        get() = definedExternally\n        set(value) = definedExternally\n    var fillStyle: dynamic\n        get() = definedExternally\n        set(value) = definedExternally\n    fun createLinearGradient(x0: Double, y0: Double, x1: Double, y1: Double): CanvasGradient\n    fun createRadialGradient(x0: Double, y0: Double, r0: Double, x1: Double, y1: Double, r1: Double): CanvasGradient\n    fun createPattern(image: CanvasImageSource, repetition: String): CanvasPattern?\n}\n\npublic external interface CanvasShadowStyles {\n    var shadowOffsetX: Double\n    var shadowOffsetY: Double\n    var shadowBlur: Double\n    var shadowColor: String\n}\n\npublic external interface CanvasFilters {\n    var filter: String\n}\n\npublic external interface CanvasRect {\n    fun clearRect(x: Double, y: Double, w: Double, h: Double)\n    fun fillRect(x: Double, y: Double, w: Double, h: Double)\n    fun strokeRect(x: Double, y: Double, w: Double, h: Double)\n}\n\npublic external interface CanvasDrawPath {\n    fun beginPath()\n    fun fill(fillRule: CanvasFillRule = definedExternally)\n    fun fill(path: Path2D, fillRule: CanvasFillRule = definedExternally)\n    fun stroke()\n    fun stroke(path: Path2D)\n    fun clip(fillRule: CanvasFillRule = definedExternally)\n    fun clip(path: Path2D, fillRule: CanvasFillRule = definedExternally)\n    fun resetClip()\n    fun isPointInPath(x: Double, y: Double, fillRule: CanvasFillRule = definedExternally): Boolean\n    fun isPointInPath(path: Path2D, x: Double, y: Double, fillRule: CanvasFillRule = definedExternally): Boolean\n    fun isPointInStroke(x: Double, y: Double): Boolean\n    fun isPointInStroke(path: Path2D, x: Double, y: Double): Boolean\n}\n\npublic external interface CanvasUserInterface {\n    fun drawFocusIfNeeded(element: Element)\n    fun drawFocusIfNeeded(path: Path2D, element: Element)\n    fun scrollPathIntoView()\n    fun scrollPathIntoView(path: Path2D)\n}\n\npublic external interface CanvasText {\n    fun fillText(text: String, x: Double, y: Double, maxWidth: Double = definedExternally)\n    fun strokeText(text: String, x: Double, y: Double, maxWidth: Double = definedExternally)\n    fun measureText(text: String): TextMetrics\n}\n\npublic external interface CanvasDrawImage {\n    fun drawImage(image: CanvasImageSource, dx: Double, dy: Double)\n    fun drawImage(image: CanvasImageSource, dx: Double, dy: Double, dw: Double, dh: Double)\n    fun drawImage(image: CanvasImageSource, sx: Double, sy: Double, sw: Double, sh: Double, dx: Double, dy: Double, dw: Double, dh: Double)\n}\n\npublic external interface CanvasHitRegion {\n    fun addHitRegion(options: HitRegionOptions = definedExternally)\n    fun removeHitRegion(id: String)\n    fun clearHitRegions()\n}\n\npublic external interface CanvasImageData {\n    fun createImageData(sw: Double, sh: Double): ImageData\n    fun createImageData(imagedata: ImageData): ImageData\n    fun getImageData(sx: Double, sy: Double, sw: Double, sh: Double): ImageData\n    fun putImageData(imagedata: ImageData, dx: Double, dy: Double)\n    fun putImageData(imagedata: ImageData, dx: Double, dy: Double, dirtyX: Double, dirtyY: Double, dirtyWidth: Double, dirtyHeight: Double)\n}\n\npublic external interface CanvasPathDrawingStyles {\n    var lineWidth: Double\n    var lineCap: CanvasLineCap\n    var lineJoin: CanvasLineJoin\n    var miterLimit: Double\n    var lineDashOffset: Double\n    fun setLineDash(segments: Array<Double>)\n    fun getLineDash(): Array<Double>\n}\n\npublic external interface CanvasTextDrawingStyles {\n    var font: String\n    var textAlign: CanvasTextAlign\n    var textBaseline: CanvasTextBaseline\n    var direction: CanvasDirection\n}\n\npublic external interface CanvasPath {\n    fun closePath()\n    fun moveTo(x: Double, y: Double)\n    fun lineTo(x: Double, y: Double)\n    fun quadraticCurveTo(cpx: Double, cpy: Double, x: Double, y: Double)\n    fun bezierCurveTo(cp1x: Double, cp1y: Double, cp2x: Double, cp2y: Double, x: Double, y: Double)\n    fun arcTo(x1: Double, y1: Double, x2: Double, y2: Double, radius: Double)\n    fun arcTo(x1: Double, y1: Double, x2: Double, y2: Double, radiusX: Double, radiusY: Double, rotation: Double)\n    fun rect(x: Double, y: Double, w: Double, h: Double)\n    fun arc(x: Double, y: Double, radius: Double, startAngle: Double, endAngle: Double, anticlockwise: Boolean = definedExternally)\n    fun ellipse(x: Double, y: Double, radiusX: Double, radiusY: Double, rotation: Double, startAngle: Double, endAngle: Double, anticlockwise: Boolean = definedExternally)\n}\n\n/**\n * Exposes the JavaScript [CanvasGradient](https://developer.mozilla.org/en/docs/Web/API/CanvasGradient) to Kotlin\n */\npublic external abstract class CanvasGradient {\n    fun addColorStop(offset: Double, color: String)\n}\n\n/**\n * Exposes the JavaScript [CanvasPattern](https://developer.mozilla.org/en/docs/Web/API/CanvasPattern) to Kotlin\n */\npublic external abstract class CanvasPattern {\n    fun setTransform(transform: dynamic = definedExternally)\n}\n\n/**\n * Exposes the JavaScript [TextMetrics](https://developer.mozilla.org/en/docs/Web/API/TextMetrics) to Kotlin\n */\npublic external abstract class TextMetrics {\n    open val width: Double\n    open val actualBoundingBoxLeft: Double\n    open val actualBoundingBoxRight: Double\n    open val fontBoundingBoxAscent: Double\n    open val fontBoundingBoxDescent: Double\n    open val actualBoundingBoxAscent: Double\n    open val actualBoundingBoxDescent: Double\n    open val emHeightAscent: Double\n    open val emHeightDescent: Double\n    open val hangingBaseline: Double\n    open val alphabeticBaseline: Double\n    open val ideographicBaseline: Double\n}\n\npublic external interface HitRegionOptions {\n    var path: Path2D? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n    var fillRule: CanvasFillRule? /* = CanvasFillRule.NONZERO */\n        get() = definedExternally\n        set(value) = definedExternally\n    var id: String? /* = \"\" */\n        get() = definedExternally\n        set(value) = definedExternally\n    var parentID: String? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n    var cursor: String? /* = \"inherit\" */\n        get() = definedExternally\n        set(value) = definedExternally\n    var control: Element? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n    var label: String? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n    var role: String? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun HitRegionOptions(path: Path2D? = null, fillRule: CanvasFillRule? = CanvasFillRule.NONZERO, id: String? = \"\", parentID: String? = null, cursor: String? = \"inherit\", control: Element? = null, label: String? = null, role: String? = null): HitRegionOptions {\n    val o = js(\"({})\")\n    o[\"path\"] = path\n    o[\"fillRule\"] = fillRule\n    o[\"id\"] = id\n    o[\"parentID\"] = parentID\n    o[\"cursor\"] = cursor\n    o[\"control\"] = control\n    o[\"label\"] = label\n    o[\"role\"] = role\n    return o\n}\n\n/**\n * Exposes the JavaScript [ImageData](https://developer.mozilla.org/en/docs/Web/API/ImageData) to Kotlin\n */\npublic external open class ImageData : ImageBitmapSource, TexImageSource {\n    constructor(sw: Int, sh: Int)\n    constructor(data: Uint8ClampedArray, sw: Int, sh: Int = definedExternally)\n    open val width: Int\n    open val height: Int\n    open val data: Uint8ClampedArray\n}\n\n/**\n * Exposes the JavaScript [Path2D](https://developer.mozilla.org/en/docs/Web/API/Path2D) to Kotlin\n */\npublic external open class Path2D() : CanvasPath {\n    constructor(path: Path2D)\n    constructor(paths: Array<Path2D>, fillRule: CanvasFillRule = definedExternally)\n    constructor(d: String)\n    fun addPath(path: Path2D, transform: dynamic = definedExternally)\n    override fun closePath()\n    override fun moveTo(x: Double, y: Double)\n    override fun lineTo(x: Double, y: Double)\n    override fun quadraticCurveTo(cpx: Double, cpy: Double, x: Double, y: Double)\n    override fun bezierCurveTo(cp1x: Double, cp1y: Double, cp2x: Double, cp2y: Double, x: Double, y: Double)\n    override fun arcTo(x1: Double, y1: Double, x2: Double, y2: Double, radius: Double)\n    override fun arcTo(x1: Double, y1: Double, x2: Double, y2: Double, radiusX: Double, radiusY: Double, rotation: Double)\n    override fun rect(x: Double, y: Double, w: Double, h: Double)\n    override fun arc(x: Double, y: Double, radius: Double, startAngle: Double, endAngle: Double, anticlockwise: Boolean /* = definedExternally */)\n    override fun ellipse(x: Double, y: Double, radiusX: Double, radiusY: Double, rotation: Double, startAngle: Double, endAngle: Double, anticlockwise: Boolean /* = definedExternally */)\n}\n\n/**\n * Exposes the JavaScript [ImageBitmapRenderingContext](https://developer.mozilla.org/en/docs/Web/API/ImageBitmapRenderingContext) to Kotlin\n */\npublic external abstract class ImageBitmapRenderingContext {\n    open val canvas: HTMLCanvasElement\n    fun transferFromImageBitmap(bitmap: ImageBitmap?)\n}\n\npublic external interface ImageBitmapRenderingContextSettings {\n    var alpha: Boolean? /* = true */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun ImageBitmapRenderingContextSettings(alpha: Boolean? = true): ImageBitmapRenderingContextSettings {\n    val o = js(\"({})\")\n    o[\"alpha\"] = alpha\n    return o\n}\n\n/**\n * Exposes the JavaScript [CustomElementRegistry](https://developer.mozilla.org/en/docs/Web/API/CustomElementRegistry) to Kotlin\n */\npublic external abstract class CustomElementRegistry {\n    fun define(name: String, constructor: () -> dynamic, options: ElementDefinitionOptions = definedExternally)\n    fun get(name: String): Any?\n    fun whenDefined(name: String): Promise<Unit>\n}\n\npublic external interface ElementDefinitionOptions {\n    var extends: String?\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun ElementDefinitionOptions(extends: String? = undefined): ElementDefinitionOptions {\n    val o = js(\"({})\")\n    o[\"extends\"] = extends\n    return o\n}\n\npublic external interface ElementContentEditable {\n    var contentEditable: String\n    val isContentEditable: Boolean\n}\n\n/**\n * Exposes the JavaScript [DataTransfer](https://developer.mozilla.org/en/docs/Web/API/DataTransfer) to Kotlin\n */\npublic external abstract class DataTransfer {\n    open var dropEffect: String\n    open var effectAllowed: String\n    open val items: DataTransferItemList\n    open val types: Array<out String>\n    open val files: FileList\n    fun setDragImage(image: Element, x: Int, y: Int)\n    fun getData(format: String): String\n    fun setData(format: String, data: String)\n    fun clearData(format: String = definedExternally)\n}\n\n/**\n * Exposes the JavaScript [DataTransferItemList](https://developer.mozilla.org/en/docs/Web/API/DataTransferItemList) to Kotlin\n */\npublic external abstract class DataTransferItemList {\n    open val length: Int\n    fun add(data: String, type: String): DataTransferItem?\n    fun add(data: File): DataTransferItem?\n    fun remove(index: Int)\n    fun clear()\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun DataTransferItemList.get(index: Int): DataTransferItem? = asDynamic()[index]\n\n/**\n * Exposes the JavaScript [DataTransferItem](https://developer.mozilla.org/en/docs/Web/API/DataTransferItem) to Kotlin\n */\npublic external abstract class DataTransferItem {\n    open val kind: String\n    open val type: String\n    fun getAsString(_callback: ((String) -> Unit)?)\n    fun getAsFile(): File?\n}\n\n/**\n * Exposes the JavaScript [DragEvent](https://developer.mozilla.org/en/docs/Web/API/DragEvent) to Kotlin\n */\npublic external open class DragEvent(type: String, eventInitDict: DragEventInit = definedExternally) : MouseEvent {\n    open val dataTransfer: DataTransfer?\n\n    companion object {\n        val NONE: Short\n        val CAPTURING_PHASE: Short\n        val AT_TARGET: Short\n        val BUBBLING_PHASE: Short\n    }\n}\n\npublic external interface DragEventInit : MouseEventInit {\n    var dataTransfer: DataTransfer? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun DragEventInit(dataTransfer: DataTransfer? = null, screenX: Int? = 0, screenY: Int? = 0, clientX: Int? = 0, clientY: Int? = 0, button: Short? = 0, buttons: Short? = 0, relatedTarget: EventTarget? = null, region: String? = null, ctrlKey: Boolean? = false, shiftKey: Boolean? = false, altKey: Boolean? = false, metaKey: Boolean? = false, modifierAltGraph: Boolean? = false, modifierCapsLock: Boolean? = false, modifierFn: Boolean? = false, modifierFnLock: Boolean? = false, modifierHyper: Boolean? = false, modifierNumLock: Boolean? = false, modifierScrollLock: Boolean? = false, modifierSuper: Boolean? = false, modifierSymbol: Boolean? = false, modifierSymbolLock: Boolean? = false, view: Window? = null, detail: Int? = 0, bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): DragEventInit {\n    val o = js(\"({})\")\n    o[\"dataTransfer\"] = dataTransfer\n    o[\"screenX\"] = screenX\n    o[\"screenY\"] = screenY\n    o[\"clientX\"] = clientX\n    o[\"clientY\"] = clientY\n    o[\"button\"] = button\n    o[\"buttons\"] = buttons\n    o[\"relatedTarget\"] = relatedTarget\n    o[\"region\"] = region\n    o[\"ctrlKey\"] = ctrlKey\n    o[\"shiftKey\"] = shiftKey\n    o[\"altKey\"] = altKey\n    o[\"metaKey\"] = metaKey\n    o[\"modifierAltGraph\"] = modifierAltGraph\n    o[\"modifierCapsLock\"] = modifierCapsLock\n    o[\"modifierFn\"] = modifierFn\n    o[\"modifierFnLock\"] = modifierFnLock\n    o[\"modifierHyper\"] = modifierHyper\n    o[\"modifierNumLock\"] = modifierNumLock\n    o[\"modifierScrollLock\"] = modifierScrollLock\n    o[\"modifierSuper\"] = modifierSuper\n    o[\"modifierSymbol\"] = modifierSymbol\n    o[\"modifierSymbolLock\"] = modifierSymbolLock\n    o[\"view\"] = view\n    o[\"detail\"] = detail\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n    return o\n}\n\n/**\n * Exposes the JavaScript [Window](https://developer.mozilla.org/en/docs/Web/API/Window) to Kotlin\n */\npublic external abstract class Window : EventTarget, GlobalEventHandlers, WindowEventHandlers, WindowOrWorkerGlobalScope, WindowSessionStorage, WindowLocalStorage, GlobalPerformance, UnionMessagePortOrWindowProxy {\n    open val window: Window\n    open val self: Window\n    open val document: Document\n    open var name: String\n    open val location: Location\n    open val history: History\n    open val customElements: CustomElementRegistry\n    open val locationbar: BarProp\n    open val menubar: BarProp\n    open val personalbar: BarProp\n    open val scrollbars: BarProp\n    open val statusbar: BarProp\n    open val toolbar: BarProp\n    open var status: String\n    open val closed: Boolean\n    open val frames: Window\n    open val length: Int\n    open val top: Window\n    open var opener: Any?\n    open val parent: Window\n    open val frameElement: Element?\n    open val navigator: Navigator\n    open val applicationCache: ApplicationCache\n    open val external: External\n    open val screen: Screen\n    open val innerWidth: Int\n    open val innerHeight: Int\n    open val scrollX: Double\n    open val pageXOffset: Double\n    open val scrollY: Double\n    open val pageYOffset: Double\n    open val screenX: Int\n    open val screenY: Int\n    open val outerWidth: Int\n    open val outerHeight: Int\n    open val devicePixelRatio: Double\n    fun close()\n    fun stop()\n    fun focus()\n    fun blur()\n    fun open(url: String = definedExternally, target: String = definedExternally, features: String = definedExternally): Window?\n    fun alert()\n    fun alert(message: String)\n    fun confirm(message: String = definedExternally): Boolean\n    fun prompt(message: String = definedExternally, default: String = definedExternally): String?\n    fun print()\n    fun requestAnimationFrame(callback: (Double) -> Unit): Int\n    fun cancelAnimationFrame(handle: Int)\n    fun postMessage(message: Any?, targetOrigin: String, transfer: Array<dynamic> = definedExternally)\n    fun captureEvents()\n    fun releaseEvents()\n    fun matchMedia(query: String): MediaQueryList\n    fun moveTo(x: Int, y: Int)\n    fun moveBy(x: Int, y: Int)\n    fun resizeTo(x: Int, y: Int)\n    fun resizeBy(x: Int, y: Int)\n    fun scroll(options: ScrollToOptions = definedExternally)\n    fun scroll(x: Double, y: Double)\n    fun scrollTo(options: ScrollToOptions = definedExternally)\n    fun scrollTo(x: Double, y: Double)\n    fun scrollBy(options: ScrollToOptions = definedExternally)\n    fun scrollBy(x: Double, y: Double)\n    fun getComputedStyle(elt: Element, pseudoElt: String? = definedExternally): CSSStyleDeclaration\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun Window.get(name: String): dynamic = asDynamic()[name]\n\npublic external abstract class BarProp {\n    open val visible: Boolean\n}\n\n/**\n * Exposes the JavaScript [History](https://developer.mozilla.org/en/docs/Web/API/History) to Kotlin\n */\npublic external abstract class History {\n    open val length: Int\n    open var scrollRestoration: ScrollRestoration\n    open val state: Any?\n    fun go(delta: Int = definedExternally)\n    fun back()\n    fun forward()\n    fun pushState(data: Any?, title: String, url: String? = definedExternally)\n    fun replaceState(data: Any?, title: String, url: String? = definedExternally)\n}\n\n/**\n * Exposes the JavaScript [Location](https://developer.mozilla.org/en/docs/Web/API/Location) to Kotlin\n */\npublic external abstract class Location {\n    open var href: String\n    open val origin: String\n    open var protocol: String\n    open var host: String\n    open var hostname: String\n    open var port: String\n    open var pathname: String\n    open var search: String\n    open var hash: String\n    open val ancestorOrigins: Array<out String>\n    fun assign(url: String)\n    fun replace(url: String)\n    fun reload()\n}\n\n/**\n * Exposes the JavaScript [PopStateEvent](https://developer.mozilla.org/en/docs/Web/API/PopStateEvent) to Kotlin\n */\npublic external open class PopStateEvent(type: String, eventInitDict: PopStateEventInit = definedExternally) : Event {\n    open val state: Any?\n\n    companion object {\n        val NONE: Short\n        val CAPTURING_PHASE: Short\n        val AT_TARGET: Short\n        val BUBBLING_PHASE: Short\n    }\n}\n\npublic external interface PopStateEventInit : EventInit {\n    var state: Any? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun PopStateEventInit(state: Any? = null, bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): PopStateEventInit {\n    val o = js(\"({})\")\n    o[\"state\"] = state\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n    return o\n}\n\n/**\n * Exposes the JavaScript [HashChangeEvent](https://developer.mozilla.org/en/docs/Web/API/HashChangeEvent) to Kotlin\n */\npublic external open class HashChangeEvent(type: String, eventInitDict: HashChangeEventInit = definedExternally) : Event {\n    open val oldURL: String\n    open val newURL: String\n\n    companion object {\n        val NONE: Short\n        val CAPTURING_PHASE: Short\n        val AT_TARGET: Short\n        val BUBBLING_PHASE: Short\n    }\n}\n\npublic external interface HashChangeEventInit : EventInit {\n    var oldURL: String? /* = \"\" */\n        get() = definedExternally\n        set(value) = definedExternally\n    var newURL: String? /* = \"\" */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun HashChangeEventInit(oldURL: String? = \"\", newURL: String? = \"\", bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): HashChangeEventInit {\n    val o = js(\"({})\")\n    o[\"oldURL\"] = oldURL\n    o[\"newURL\"] = newURL\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n    return o\n}\n\n/**\n * Exposes the JavaScript [PageTransitionEvent](https://developer.mozilla.org/en/docs/Web/API/PageTransitionEvent) to Kotlin\n */\npublic external open class PageTransitionEvent(type: String, eventInitDict: PageTransitionEventInit = definedExternally) : Event {\n    open val persisted: Boolean\n\n    companion object {\n        val NONE: Short\n        val CAPTURING_PHASE: Short\n        val AT_TARGET: Short\n        val BUBBLING_PHASE: Short\n    }\n}\n\npublic external interface PageTransitionEventInit : EventInit {\n    var persisted: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun PageTransitionEventInit(persisted: Boolean? = false, bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): PageTransitionEventInit {\n    val o = js(\"({})\")\n    o[\"persisted\"] = persisted\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n    return o\n}\n\n/**\n * Exposes the JavaScript [BeforeUnloadEvent](https://developer.mozilla.org/en/docs/Web/API/BeforeUnloadEvent) to Kotlin\n */\npublic external open class BeforeUnloadEvent : Event {\n    var returnValue: String\n\n    companion object {\n        val NONE: Short\n        val CAPTURING_PHASE: Short\n        val AT_TARGET: Short\n        val BUBBLING_PHASE: Short\n    }\n}\n\npublic external abstract class ApplicationCache : EventTarget {\n    open val status: Short\n    open var onchecking: ((Event) -> dynamic)?\n    open var onerror: ((Event) -> dynamic)?\n    open var onnoupdate: ((Event) -> dynamic)?\n    open var ondownloading: ((Event) -> dynamic)?\n    open var onprogress: ((ProgressEvent) -> dynamic)?\n    open var onupdateready: ((Event) -> dynamic)?\n    open var oncached: ((Event) -> dynamic)?\n    open var onobsolete: ((Event) -> dynamic)?\n    fun update()\n    fun abort()\n    fun swapCache()\n\n    companion object {\n        val UNCACHED: Short\n        val IDLE: Short\n        val CHECKING: Short\n        val DOWNLOADING: Short\n        val UPDATEREADY: Short\n        val OBSOLETE: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [NavigatorOnLine](https://developer.mozilla.org/en/docs/Web/API/NavigatorOnLine) to Kotlin\n */\npublic external interface NavigatorOnLine {\n    val onLine: Boolean\n}\n\n/**\n * Exposes the JavaScript [ErrorEvent](https://developer.mozilla.org/en/docs/Web/API/ErrorEvent) to Kotlin\n */\npublic external open class ErrorEvent(type: String, eventInitDict: ErrorEventInit = definedExternally) : Event {\n    open val message: String\n    open val filename: String\n    open val lineno: Int\n    open val colno: Int\n    open val error: Any?\n\n    companion object {\n        val NONE: Short\n        val CAPTURING_PHASE: Short\n        val AT_TARGET: Short\n        val BUBBLING_PHASE: Short\n    }\n}\n\npublic external interface ErrorEventInit : EventInit {\n    var message: String? /* = \"\" */\n        get() = definedExternally\n        set(value) = definedExternally\n    var filename: String? /* = \"\" */\n        get() = definedExternally\n        set(value) = definedExternally\n    var lineno: Int? /* = 0 */\n        get() = definedExternally\n        set(value) = definedExternally\n    var colno: Int? /* = 0 */\n        get() = definedExternally\n        set(value) = definedExternally\n    var error: Any? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun ErrorEventInit(message: String? = \"\", filename: String? = \"\", lineno: Int? = 0, colno: Int? = 0, error: Any? = null, bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): ErrorEventInit {\n    val o = js(\"({})\")\n    o[\"message\"] = message\n    o[\"filename\"] = filename\n    o[\"lineno\"] = lineno\n    o[\"colno\"] = colno\n    o[\"error\"] = error\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n    return o\n}\n\n/**\n * Exposes the JavaScript [PromiseRejectionEvent](https://developer.mozilla.org/en/docs/Web/API/PromiseRejectionEvent) to Kotlin\n */\npublic external open class PromiseRejectionEvent(type: String, eventInitDict: PromiseRejectionEventInit) : Event {\n    open val promise: Promise<Any?>\n    open val reason: Any?\n\n    companion object {\n        val NONE: Short\n        val CAPTURING_PHASE: Short\n        val AT_TARGET: Short\n        val BUBBLING_PHASE: Short\n    }\n}\n\npublic external interface PromiseRejectionEventInit : EventInit {\n    var promise: Promise<Any?>?\n        get() = definedExternally\n        set(value) = definedExternally\n    var reason: Any?\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun PromiseRejectionEventInit(promise: Promise<Any?>?, reason: Any? = undefined, bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): PromiseRejectionEventInit {\n    val o = js(\"({})\")\n    o[\"promise\"] = promise\n    o[\"reason\"] = reason\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n    return o\n}\n\n/**\n * Exposes the JavaScript [GlobalEventHandlers](https://developer.mozilla.org/en/docs/Web/API/GlobalEventHandlers) to Kotlin\n */\npublic external interface GlobalEventHandlers {\n    var onabort: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onblur: ((FocusEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var oncancel: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var oncanplay: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var oncanplaythrough: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onchange: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onclick: ((MouseEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onclose: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var oncontextmenu: ((MouseEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var oncuechange: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var ondblclick: ((MouseEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var ondrag: ((DragEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var ondragend: ((DragEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var ondragenter: ((DragEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var ondragexit: ((DragEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var ondragleave: ((DragEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var ondragover: ((DragEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var ondragstart: ((DragEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var ondrop: ((DragEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var ondurationchange: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onemptied: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onended: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onerror: ((dynamic, String, Int, Int, Any?) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onfocus: ((FocusEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var oninput: ((InputEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var oninvalid: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onkeydown: ((KeyboardEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onkeypress: ((KeyboardEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onkeyup: ((KeyboardEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onload: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onloadeddata: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onloadedmetadata: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onloadend: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onloadstart: ((ProgressEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onmousedown: ((MouseEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onmouseenter: ((MouseEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onmouseleave: ((MouseEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onmousemove: ((MouseEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onmouseout: ((MouseEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onmouseover: ((MouseEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onmouseup: ((MouseEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onwheel: ((WheelEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onpause: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onplay: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onplaying: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onprogress: ((ProgressEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onratechange: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onreset: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onresize: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onscroll: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onseeked: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onseeking: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onselect: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onshow: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onstalled: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onsubmit: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onsuspend: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var ontimeupdate: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var ontoggle: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onvolumechange: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onwaiting: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var ongotpointercapture: ((PointerEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onlostpointercapture: ((PointerEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onpointerdown: ((PointerEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onpointermove: ((PointerEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onpointerup: ((PointerEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onpointercancel: ((PointerEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onpointerover: ((PointerEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onpointerout: ((PointerEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onpointerenter: ((PointerEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onpointerleave: ((PointerEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n/**\n * Exposes the JavaScript [WindowEventHandlers](https://developer.mozilla.org/en/docs/Web/API/WindowEventHandlers) to Kotlin\n */\npublic external interface WindowEventHandlers {\n    var onafterprint: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onbeforeprint: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onbeforeunload: ((BeforeUnloadEvent) -> String?)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onhashchange: ((HashChangeEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onlanguagechange: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onmessage: ((MessageEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onoffline: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var ononline: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onpagehide: ((PageTransitionEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onpageshow: ((PageTransitionEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onpopstate: ((PopStateEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onrejectionhandled: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onstorage: ((StorageEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onunhandledrejection: ((PromiseRejectionEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onunload: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\npublic external interface DocumentAndElementEventHandlers {\n    var oncopy: ((ClipboardEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var oncut: ((ClipboardEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onpaste: ((ClipboardEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n/**\n * Exposes the JavaScript [WindowOrWorkerGlobalScope](https://developer.mozilla.org/en/docs/Web/API/WindowOrWorkerGlobalScope) to Kotlin\n */\npublic external interface WindowOrWorkerGlobalScope {\n    val origin: String\n    val caches: CacheStorage\n    fun btoa(data: String): String\n    fun atob(data: String): String\n    fun setTimeout(handler: dynamic, timeout: Int = definedExternally, vararg arguments: Any?): Int\n    fun clearTimeout(handle: Int = definedExternally)\n    fun setInterval(handler: dynamic, timeout: Int = definedExternally, vararg arguments: Any?): Int\n    fun clearInterval(handle: Int = definedExternally)\n    fun createImageBitmap(image: ImageBitmapSource, options: ImageBitmapOptions = definedExternally): Promise<ImageBitmap>\n    fun createImageBitmap(image: ImageBitmapSource, sx: Int, sy: Int, sw: Int, sh: Int, options: ImageBitmapOptions = definedExternally): Promise<ImageBitmap>\n    fun fetch(input: dynamic, init: RequestInit = definedExternally): Promise<Response>\n}\n\n/**\n * Exposes the JavaScript [Navigator](https://developer.mozilla.org/en/docs/Web/API/Navigator) to Kotlin\n */\npublic external abstract class Navigator : NavigatorID, NavigatorLanguage, NavigatorOnLine, NavigatorContentUtils, NavigatorCookies, NavigatorPlugins, NavigatorConcurrentHardware {\n    open val clipboard: Clipboard\n    open val mediaDevices: MediaDevices\n    open val maxTouchPoints: Int\n    open val serviceWorker: ServiceWorkerContainer\n    fun requestMediaKeySystemAccess(keySystem: String, supportedConfigurations: Array<MediaKeySystemConfiguration>): Promise<MediaKeySystemAccess>\n    fun getUserMedia(constraints: MediaStreamConstraints, successCallback: (MediaStream) -> Unit, errorCallback: (dynamic) -> Unit)\n    fun vibrate(pattern: dynamic): Boolean\n}\n\n/**\n * Exposes the JavaScript [NavigatorID](https://developer.mozilla.org/en/docs/Web/API/NavigatorID) to Kotlin\n */\npublic external interface NavigatorID {\n    val appCodeName: String\n    val appName: String\n    val appVersion: String\n    val platform: String\n    val product: String\n    val productSub: String\n    val userAgent: String\n    val vendor: String\n    val vendorSub: String\n    val oscpu: String\n    fun taintEnabled(): Boolean\n}\n\n/**\n * Exposes the JavaScript [NavigatorLanguage](https://developer.mozilla.org/en/docs/Web/API/NavigatorLanguage) to Kotlin\n */\npublic external interface NavigatorLanguage {\n    val language: String\n    val languages: Array<out String>\n}\n\npublic external interface NavigatorContentUtils {\n    fun registerProtocolHandler(scheme: String, url: String, title: String)\n    fun registerContentHandler(mimeType: String, url: String, title: String)\n    fun isProtocolHandlerRegistered(scheme: String, url: String): String\n    fun isContentHandlerRegistered(mimeType: String, url: String): String\n    fun unregisterProtocolHandler(scheme: String, url: String)\n    fun unregisterContentHandler(mimeType: String, url: String)\n}\n\npublic external interface NavigatorCookies {\n    val cookieEnabled: Boolean\n}\n\n/**\n * Exposes the JavaScript [NavigatorPlugins](https://developer.mozilla.org/en/docs/Web/API/NavigatorPlugins) to Kotlin\n */\npublic external interface NavigatorPlugins {\n    val plugins: PluginArray\n    val mimeTypes: MimeTypeArray\n    fun javaEnabled(): Boolean\n}\n\n/**\n * Exposes the JavaScript [PluginArray](https://developer.mozilla.org/en/docs/Web/API/PluginArray) to Kotlin\n */\npublic external abstract class PluginArray : ItemArrayLike<Plugin> {\n    fun refresh(reload: Boolean = definedExternally)\n    override fun item(index: Int): Plugin?\n    fun namedItem(name: String): Plugin?\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun PluginArray.get(index: Int): Plugin? = asDynamic()[index]\n\n@kotlin.internal.InlineOnly\npublic inline operator fun PluginArray.get(name: String): Plugin? = asDynamic()[name]\n\n/**\n * Exposes the JavaScript [MimeTypeArray](https://developer.mozilla.org/en/docs/Web/API/MimeTypeArray) to Kotlin\n */\npublic external abstract class MimeTypeArray : ItemArrayLike<MimeType> {\n    override fun item(index: Int): MimeType?\n    fun namedItem(name: String): MimeType?\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun MimeTypeArray.get(index: Int): MimeType? = asDynamic()[index]\n\n@kotlin.internal.InlineOnly\npublic inline operator fun MimeTypeArray.get(name: String): MimeType? = asDynamic()[name]\n\n/**\n * Exposes the JavaScript [Plugin](https://developer.mozilla.org/en/docs/Web/API/Plugin) to Kotlin\n */\npublic external abstract class Plugin : ItemArrayLike<MimeType> {\n    open val name: String\n    open val description: String\n    open val filename: String\n    override fun item(index: Int): MimeType?\n    fun namedItem(name: String): MimeType?\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun Plugin.get(index: Int): MimeType? = asDynamic()[index]\n\n@kotlin.internal.InlineOnly\npublic inline operator fun Plugin.get(name: String): MimeType? = asDynamic()[name]\n\n/**\n * Exposes the JavaScript [MimeType](https://developer.mozilla.org/en/docs/Web/API/MimeType) to Kotlin\n */\npublic external abstract class MimeType {\n    open val type: String\n    open val description: String\n    open val suffixes: String\n    open val enabledPlugin: Plugin\n}\n\n/**\n * Exposes the JavaScript [ImageBitmap](https://developer.mozilla.org/en/docs/Web/API/ImageBitmap) to Kotlin\n */\npublic external abstract class ImageBitmap : CanvasImageSource, TexImageSource {\n    open val width: Int\n    open val height: Int\n    fun close()\n}\n\npublic external interface ImageBitmapOptions {\n    var imageOrientation: ImageOrientation? /* = ImageOrientation.NONE */\n        get() = definedExternally\n        set(value) = definedExternally\n    var premultiplyAlpha: PremultiplyAlpha? /* = PremultiplyAlpha.DEFAULT */\n        get() = definedExternally\n        set(value) = definedExternally\n    var colorSpaceConversion: ColorSpaceConversion? /* = ColorSpaceConversion.DEFAULT */\n        get() = definedExternally\n        set(value) = definedExternally\n    var resizeWidth: Int?\n        get() = definedExternally\n        set(value) = definedExternally\n    var resizeHeight: Int?\n        get() = definedExternally\n        set(value) = definedExternally\n    var resizeQuality: ResizeQuality? /* = ResizeQuality.LOW */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun ImageBitmapOptions(imageOrientation: ImageOrientation? = ImageOrientation.NONE, premultiplyAlpha: PremultiplyAlpha? = PremultiplyAlpha.DEFAULT, colorSpaceConversion: ColorSpaceConversion? = ColorSpaceConversion.DEFAULT, resizeWidth: Int? = undefined, resizeHeight: Int? = undefined, resizeQuality: ResizeQuality? = ResizeQuality.LOW): ImageBitmapOptions {\n    val o = js(\"({})\")\n    o[\"imageOrientation\"] = imageOrientation\n    o[\"premultiplyAlpha\"] = premultiplyAlpha\n    o[\"colorSpaceConversion\"] = colorSpaceConversion\n    o[\"resizeWidth\"] = resizeWidth\n    o[\"resizeHeight\"] = resizeHeight\n    o[\"resizeQuality\"] = resizeQuality\n    return o\n}\n\n/**\n * Exposes the JavaScript [MessageEvent](https://developer.mozilla.org/en/docs/Web/API/MessageEvent) to Kotlin\n */\npublic external open class MessageEvent(type: String, eventInitDict: MessageEventInit = definedExternally) : Event {\n    open val data: Any?\n    open val origin: String\n    open val lastEventId: String\n    open val source: UnionMessagePortOrWindowProxy?\n    open val ports: Array<out MessagePort>\n    fun initMessageEvent(type: String, bubbles: Boolean, cancelable: Boolean, data: Any?, origin: String, lastEventId: String, source: UnionMessagePortOrWindowProxy?, ports: Array<MessagePort>)\n\n    companion object {\n        val NONE: Short\n        val CAPTURING_PHASE: Short\n        val AT_TARGET: Short\n        val BUBBLING_PHASE: Short\n    }\n}\n\npublic external interface MessageEventInit : EventInit {\n    var data: Any? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n    var origin: String? /* = \"\" */\n        get() = definedExternally\n        set(value) = definedExternally\n    var lastEventId: String? /* = \"\" */\n        get() = definedExternally\n        set(value) = definedExternally\n    var source: UnionMessagePortOrWindowProxy? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n    var ports: Array<MessagePort>? /* = arrayOf() */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun MessageEventInit(data: Any? = null, origin: String? = \"\", lastEventId: String? = \"\", source: UnionMessagePortOrWindowProxy? = null, ports: Array<MessagePort>? = arrayOf(), bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): MessageEventInit {\n    val o = js(\"({})\")\n    o[\"data\"] = data\n    o[\"origin\"] = origin\n    o[\"lastEventId\"] = lastEventId\n    o[\"source\"] = source\n    o[\"ports\"] = ports\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n    return o\n}\n\n/**\n * Exposes the JavaScript [EventSource](https://developer.mozilla.org/en/docs/Web/API/EventSource) to Kotlin\n */\npublic external open class EventSource(url: String, eventSourceInitDict: EventSourceInit = definedExternally) : EventTarget {\n    open val url: String\n    open val withCredentials: Boolean\n    open val readyState: Short\n    var onopen: ((Event) -> dynamic)?\n    var onmessage: ((MessageEvent) -> dynamic)?\n    var onerror: ((Event) -> dynamic)?\n    fun close()\n\n    companion object {\n        val CONNECTING: Short\n        val OPEN: Short\n        val CLOSED: Short\n    }\n}\n\npublic external interface EventSourceInit {\n    var withCredentials: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun EventSourceInit(withCredentials: Boolean? = false): EventSourceInit {\n    val o = js(\"({})\")\n    o[\"withCredentials\"] = withCredentials\n    return o\n}\n\n/**\n * Exposes the JavaScript [WebSocket](https://developer.mozilla.org/en/docs/Web/API/WebSocket) to Kotlin\n */\npublic external open class WebSocket(url: String, protocols: dynamic = definedExternally) : EventTarget {\n    open val url: String\n    open val readyState: Short\n    open val bufferedAmount: Number\n    var onopen: ((Event) -> dynamic)?\n    var onerror: ((Event) -> dynamic)?\n    var onclose: ((Event) -> dynamic)?\n    open val extensions: String\n    open val protocol: String\n    var onmessage: ((MessageEvent) -> dynamic)?\n    var binaryType: BinaryType\n    fun close(code: Short = definedExternally, reason: String = definedExternally)\n    fun send(data: String)\n    fun send(data: Blob)\n    fun send(data: ArrayBuffer)\n    fun send(data: ArrayBufferView)\n\n    companion object {\n        val CONNECTING: Short\n        val OPEN: Short\n        val CLOSING: Short\n        val CLOSED: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [CloseEvent](https://developer.mozilla.org/en/docs/Web/API/CloseEvent) to Kotlin\n */\npublic external open class CloseEvent(type: String, eventInitDict: CloseEventInit = definedExternally) : Event {\n    open val wasClean: Boolean\n    open val code: Short\n    open val reason: String\n\n    companion object {\n        val NONE: Short\n        val CAPTURING_PHASE: Short\n        val AT_TARGET: Short\n        val BUBBLING_PHASE: Short\n    }\n}\n\npublic external interface CloseEventInit : EventInit {\n    var wasClean: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n    var code: Short? /* = 0 */\n        get() = definedExternally\n        set(value) = definedExternally\n    var reason: String? /* = \"\" */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun CloseEventInit(wasClean: Boolean? = false, code: Short? = 0, reason: String? = \"\", bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): CloseEventInit {\n    val o = js(\"({})\")\n    o[\"wasClean\"] = wasClean\n    o[\"code\"] = code\n    o[\"reason\"] = reason\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n    return o\n}\n\n/**\n * Exposes the JavaScript [MessageChannel](https://developer.mozilla.org/en/docs/Web/API/MessageChannel) to Kotlin\n */\npublic external open class MessageChannel {\n    open val port1: MessagePort\n    open val port2: MessagePort\n}\n\n/**\n * Exposes the JavaScript [MessagePort](https://developer.mozilla.org/en/docs/Web/API/MessagePort) to Kotlin\n */\npublic external abstract class MessagePort : EventTarget, UnionMessagePortOrWindowProxy, UnionMessagePortOrServiceWorker, UnionClientOrMessagePortOrServiceWorker {\n    open var onmessage: ((MessageEvent) -> dynamic)?\n    fun postMessage(message: Any?, transfer: Array<dynamic> = definedExternally)\n    fun start()\n    fun close()\n}\n\n/**\n * Exposes the JavaScript [BroadcastChannel](https://developer.mozilla.org/en/docs/Web/API/BroadcastChannel) to Kotlin\n */\npublic external open class BroadcastChannel(name: String) : EventTarget {\n    open val name: String\n    var onmessage: ((MessageEvent) -> dynamic)?\n    fun postMessage(message: Any?)\n    fun close()\n}\n\n/**\n * Exposes the JavaScript [WorkerGlobalScope](https://developer.mozilla.org/en/docs/Web/API/WorkerGlobalScope) to Kotlin\n */\npublic external abstract class WorkerGlobalScope : EventTarget, WindowOrWorkerGlobalScope, GlobalPerformance {\n    open val self: WorkerGlobalScope\n    open val location: WorkerLocation\n    open val navigator: WorkerNavigator\n    open var onerror: ((dynamic, String, Int, Int, Any?) -> dynamic)?\n    open var onlanguagechange: ((Event) -> dynamic)?\n    open var onoffline: ((Event) -> dynamic)?\n    open var ononline: ((Event) -> dynamic)?\n    open var onrejectionhandled: ((Event) -> dynamic)?\n    open var onunhandledrejection: ((PromiseRejectionEvent) -> dynamic)?\n    fun importScripts(vararg urls: String)\n}\n\n/**\n * Exposes the JavaScript [DedicatedWorkerGlobalScope](https://developer.mozilla.org/en/docs/Web/API/DedicatedWorkerGlobalScope) to Kotlin\n */\npublic external abstract class DedicatedWorkerGlobalScope : WorkerGlobalScope {\n    open var onmessage: ((MessageEvent) -> dynamic)?\n    fun postMessage(message: Any?, transfer: Array<dynamic> = definedExternally)\n    fun close()\n}\n\n/**\n * Exposes the JavaScript [SharedWorkerGlobalScope](https://developer.mozilla.org/en/docs/Web/API/SharedWorkerGlobalScope) to Kotlin\n */\npublic external abstract class SharedWorkerGlobalScope : WorkerGlobalScope {\n    open val name: String\n    open val applicationCache: ApplicationCache\n    open var onconnect: ((Event) -> dynamic)?\n    fun close()\n}\n\n/**\n * Exposes the JavaScript [AbstractWorker](https://developer.mozilla.org/en/docs/Web/API/AbstractWorker) to Kotlin\n */\npublic external interface AbstractWorker {\n    var onerror: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n/**\n * Exposes the JavaScript [Worker](https://developer.mozilla.org/en/docs/Web/API/Worker) to Kotlin\n */\npublic external open class Worker(scriptURL: String, options: WorkerOptions = definedExternally) : EventTarget, AbstractWorker {\n    var onmessage: ((MessageEvent) -> dynamic)?\n    override var onerror: ((Event) -> dynamic)?\n    fun terminate()\n    fun postMessage(message: Any?, transfer: Array<dynamic> = definedExternally)\n}\n\npublic external interface WorkerOptions {\n    var type: WorkerType? /* = WorkerType.CLASSIC */\n        get() = definedExternally\n        set(value) = definedExternally\n    var credentials: RequestCredentials? /* = RequestCredentials.OMIT */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun WorkerOptions(type: WorkerType? = WorkerType.CLASSIC, credentials: RequestCredentials? = RequestCredentials.OMIT): WorkerOptions {\n    val o = js(\"({})\")\n    o[\"type\"] = type\n    o[\"credentials\"] = credentials\n    return o\n}\n\n/**\n * Exposes the JavaScript [SharedWorker](https://developer.mozilla.org/en/docs/Web/API/SharedWorker) to Kotlin\n */\npublic external open class SharedWorker(scriptURL: String, name: String = definedExternally, options: WorkerOptions = definedExternally) : EventTarget, AbstractWorker {\n    open val port: MessagePort\n    override var onerror: ((Event) -> dynamic)?\n}\n\n/**\n * Exposes the JavaScript [NavigatorConcurrentHardware](https://developer.mozilla.org/en/docs/Web/API/NavigatorConcurrentHardware) to Kotlin\n */\npublic external interface NavigatorConcurrentHardware {\n    val hardwareConcurrency: Number\n}\n\n/**\n * Exposes the JavaScript [WorkerNavigator](https://developer.mozilla.org/en/docs/Web/API/WorkerNavigator) to Kotlin\n */\npublic external abstract class WorkerNavigator : NavigatorID, NavigatorLanguage, NavigatorOnLine, NavigatorConcurrentHardware {\n    open val serviceWorker: ServiceWorkerContainer\n}\n\n/**\n * Exposes the JavaScript [WorkerLocation](https://developer.mozilla.org/en/docs/Web/API/WorkerLocation) to Kotlin\n */\npublic external abstract class WorkerLocation {\n    open val href: String\n    open val origin: String\n    open val protocol: String\n    open val host: String\n    open val hostname: String\n    open val port: String\n    open val pathname: String\n    open val search: String\n    open val hash: String\n}\n\n/**\n * Exposes the JavaScript [Storage](https://developer.mozilla.org/en/docs/Web/API/Storage) to Kotlin\n */\npublic external abstract class Storage {\n    open val length: Int\n    fun key(index: Int): String?\n    fun removeItem(key: String)\n    fun clear()\n    fun getItem(key: String): String?\n    fun setItem(key: String, value: String)\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun Storage.get(key: String): String? = asDynamic()[key]\n\n@kotlin.internal.InlineOnly\npublic inline operator fun Storage.set(key: String, value: String) { asDynamic()[key] = value }\n\n/**\n * Exposes the JavaScript [WindowSessionStorage](https://developer.mozilla.org/en/docs/Web/API/WindowSessionStorage) to Kotlin\n */\npublic external interface WindowSessionStorage {\n    val sessionStorage: Storage\n}\n\n/**\n * Exposes the JavaScript [WindowLocalStorage](https://developer.mozilla.org/en/docs/Web/API/WindowLocalStorage) to Kotlin\n */\npublic external interface WindowLocalStorage {\n    val localStorage: Storage\n}\n\n/**\n * Exposes the JavaScript [StorageEvent](https://developer.mozilla.org/en/docs/Web/API/StorageEvent) to Kotlin\n */\npublic external open class StorageEvent(type: String, eventInitDict: StorageEventInit = definedExternally) : Event {\n    open val key: String?\n    open val oldValue: String?\n    open val newValue: String?\n    open val url: String\n    open val storageArea: Storage?\n\n    companion object {\n        val NONE: Short\n        val CAPTURING_PHASE: Short\n        val AT_TARGET: Short\n        val BUBBLING_PHASE: Short\n    }\n}\n\npublic external interface StorageEventInit : EventInit {\n    var key: String? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n    var oldValue: String? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n    var newValue: String? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n    var url: String? /* = \"\" */\n        get() = definedExternally\n        set(value) = definedExternally\n    var storageArea: Storage? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun StorageEventInit(key: String? = null, oldValue: String? = null, newValue: String? = null, url: String? = \"\", storageArea: Storage? = null, bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): StorageEventInit {\n    val o = js(\"({})\")\n    o[\"key\"] = key\n    o[\"oldValue\"] = oldValue\n    o[\"newValue\"] = newValue\n    o[\"url\"] = url\n    o[\"storageArea\"] = storageArea\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n    return o\n}\n\npublic external abstract class HTMLAppletElement : HTMLElement {\n    open var align: String\n    open var alt: String\n    open var archive: String\n    open var code: String\n    open var codeBase: String\n    open var height: String\n    open var hspace: Int\n    open var name: String\n    open var _object: String\n    open var vspace: Int\n    open var width: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLMarqueeElement](https://developer.mozilla.org/en/docs/Web/API/HTMLMarqueeElement) to Kotlin\n */\npublic external abstract class HTMLMarqueeElement : HTMLElement {\n    open var behavior: String\n    open var bgColor: String\n    open var direction: String\n    open var height: String\n    open var hspace: Int\n    open var loop: Int\n    open var scrollAmount: Int\n    open var scrollDelay: Int\n    open var trueSpeed: Boolean\n    open var vspace: Int\n    open var width: String\n    open var onbounce: ((Event) -> dynamic)?\n    open var onfinish: ((Event) -> dynamic)?\n    open var onstart: ((Event) -> dynamic)?\n    fun start()\n    fun stop()\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLFrameSetElement](https://developer.mozilla.org/en/docs/Web/API/HTMLFrameSetElement) to Kotlin\n */\npublic external abstract class HTMLFrameSetElement : HTMLElement, WindowEventHandlers {\n    open var cols: String\n    open var rows: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\npublic external abstract class HTMLFrameElement : HTMLElement {\n    open var name: String\n    open var scrolling: String\n    open var src: String\n    open var frameBorder: String\n    open var longDesc: String\n    open var noResize: Boolean\n    open val contentDocument: Document?\n    open val contentWindow: Window?\n    open var marginHeight: String\n    open var marginWidth: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\npublic external abstract class HTMLDirectoryElement : HTMLElement {\n    open var compact: Boolean\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLFontElement](https://developer.mozilla.org/en/docs/Web/API/HTMLFontElement) to Kotlin\n */\npublic external abstract class HTMLFontElement : HTMLElement {\n    open var color: String\n    open var face: String\n    open var size: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\npublic external interface External {\n    fun AddSearchProvider()\n    fun IsSearchProviderInstalled()\n}\n\npublic external interface EventInit {\n    var bubbles: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n    var cancelable: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n    var composed: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun EventInit(bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): EventInit {\n    val o = js(\"({})\")\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n    return o\n}\n\n/**\n * Exposes the JavaScript [CustomEvent](https://developer.mozilla.org/en/docs/Web/API/CustomEvent) to Kotlin\n */\npublic external open class CustomEvent(type: String, eventInitDict: CustomEventInit = definedExternally) : Event {\n    open val detail: Any?\n    fun initCustomEvent(type: String, bubbles: Boolean, cancelable: Boolean, detail: Any?)\n\n    companion object {\n        val NONE: Short\n        val CAPTURING_PHASE: Short\n        val AT_TARGET: Short\n        val BUBBLING_PHASE: Short\n    }\n}\n\npublic external interface CustomEventInit : EventInit {\n    var detail: Any? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun CustomEventInit(detail: Any? = null, bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): CustomEventInit {\n    val o = js(\"({})\")\n    o[\"detail\"] = detail\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n    return o\n}\n\npublic external interface EventListenerOptions {\n    var capture: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun EventListenerOptions(capture: Boolean? = false): EventListenerOptions {\n    val o = js(\"({})\")\n    o[\"capture\"] = capture\n    return o\n}\n\npublic external interface AddEventListenerOptions : EventListenerOptions {\n    var passive: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n    var once: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun AddEventListenerOptions(passive: Boolean? = false, once: Boolean? = false, capture: Boolean? = false): AddEventListenerOptions {\n    val o = js(\"({})\")\n    o[\"passive\"] = passive\n    o[\"once\"] = once\n    o[\"capture\"] = capture\n    return o\n}\n\npublic external interface NonElementParentNode {\n    fun getElementById(elementId: String): Element?\n}\n\n/**\n * Exposes the JavaScript [DocumentOrShadowRoot](https://developer.mozilla.org/en/docs/Web/API/DocumentOrShadowRoot) to Kotlin\n */\npublic external interface DocumentOrShadowRoot {\n    val fullscreenElement: Element?\n        get() = definedExternally\n}\n\n/**\n * Exposes the JavaScript [ParentNode](https://developer.mozilla.org/en/docs/Web/API/ParentNode) to Kotlin\n */\npublic external interface ParentNode {\n    val children: HTMLCollection\n    val firstElementChild: Element?\n        get() = definedExternally\n    val lastElementChild: Element?\n        get() = definedExternally\n    val childElementCount: Int\n    fun prepend(vararg nodes: dynamic)\n    fun append(vararg nodes: dynamic)\n    fun querySelector(selectors: String): Element?\n    fun querySelectorAll(selectors: String): NodeList\n}\n\n/**\n * Exposes the JavaScript [NonDocumentTypeChildNode](https://developer.mozilla.org/en/docs/Web/API/NonDocumentTypeChildNode) to Kotlin\n */\npublic external interface NonDocumentTypeChildNode {\n    val previousElementSibling: Element?\n        get() = definedExternally\n    val nextElementSibling: Element?\n        get() = definedExternally\n}\n\n/**\n * Exposes the JavaScript [ChildNode](https://developer.mozilla.org/en/docs/Web/API/ChildNode) to Kotlin\n */\npublic external interface ChildNode {\n    fun before(vararg nodes: dynamic)\n    fun after(vararg nodes: dynamic)\n    fun replaceWith(vararg nodes: dynamic)\n    fun remove()\n}\n\n/**\n * Exposes the JavaScript [Slotable](https://developer.mozilla.org/en/docs/Web/API/Slotable) to Kotlin\n */\npublic external interface Slotable {\n    val assignedSlot: HTMLSlotElement?\n        get() = definedExternally\n}\n\n/**\n * Exposes the JavaScript [NodeList](https://developer.mozilla.org/en/docs/Web/API/NodeList) to Kotlin\n */\npublic external abstract class NodeList : ItemArrayLike<Node> {\n    override fun item(index: Int): Node?\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun NodeList.get(index: Int): Node? = asDynamic()[index]\n\n/**\n * Exposes the JavaScript [HTMLCollection](https://developer.mozilla.org/en/docs/Web/API/HTMLCollection) to Kotlin\n */\npublic external abstract class HTMLCollection : ItemArrayLike<Element>, UnionElementOrHTMLCollection {\n    override fun item(index: Int): Element?\n    fun namedItem(name: String): Element?\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun HTMLCollection.get(index: Int): Element? = asDynamic()[index]\n\n@kotlin.internal.InlineOnly\npublic inline operator fun HTMLCollection.get(name: String): Element? = asDynamic()[name]\n\n/**\n * Exposes the JavaScript [MutationObserver](https://developer.mozilla.org/en/docs/Web/API/MutationObserver) to Kotlin\n */\npublic external open class MutationObserver(callback: (Array<MutationRecord>, MutationObserver) -> Unit) {\n    fun observe(target: Node, options: MutationObserverInit = definedExternally)\n    fun disconnect()\n    fun takeRecords(): Array<MutationRecord>\n}\n\n/**\n * Exposes the JavaScript [MutationObserverInit](https://developer.mozilla.org/en/docs/Web/API/MutationObserverInit) to Kotlin\n */\npublic external interface MutationObserverInit {\n    var childList: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n    var attributes: Boolean?\n        get() = definedExternally\n        set(value) = definedExternally\n    var characterData: Boolean?\n        get() = definedExternally\n        set(value) = definedExternally\n    var subtree: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n    var attributeOldValue: Boolean?\n        get() = definedExternally\n        set(value) = definedExternally\n    var characterDataOldValue: Boolean?\n        get() = definedExternally\n        set(value) = definedExternally\n    var attributeFilter: Array<String>?\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun MutationObserverInit(childList: Boolean? = false, attributes: Boolean? = undefined, characterData: Boolean? = undefined, subtree: Boolean? = false, attributeOldValue: Boolean? = undefined, characterDataOldValue: Boolean? = undefined, attributeFilter: Array<String>? = undefined): MutationObserverInit {\n    val o = js(\"({})\")\n    o[\"childList\"] = childList\n    o[\"attributes\"] = attributes\n    o[\"characterData\"] = characterData\n    o[\"subtree\"] = subtree\n    o[\"attributeOldValue\"] = attributeOldValue\n    o[\"characterDataOldValue\"] = characterDataOldValue\n    o[\"attributeFilter\"] = attributeFilter\n    return o\n}\n\n/**\n * Exposes the JavaScript [MutationRecord](https://developer.mozilla.org/en/docs/Web/API/MutationRecord) to Kotlin\n */\npublic external abstract class MutationRecord {\n    open val type: String\n    open val target: Node\n    open val addedNodes: NodeList\n    open val removedNodes: NodeList\n    open val previousSibling: Node?\n    open val nextSibling: Node?\n    open val attributeName: String?\n    open val attributeNamespace: String?\n    open val oldValue: String?\n}\n\n/**\n * Exposes the JavaScript [Node](https://developer.mozilla.org/en/docs/Web/API/Node) to Kotlin\n */\npublic external abstract class Node : EventTarget {\n    open val nodeType: Short\n    open val nodeName: String\n    open val baseURI: String\n    open val isConnected: Boolean\n    open val ownerDocument: Document?\n    open val parentNode: Node?\n    open val parentElement: Element?\n    open val childNodes: NodeList\n    open val firstChild: Node?\n    open val lastChild: Node?\n    open val previousSibling: Node?\n    open val nextSibling: Node?\n    open var nodeValue: String?\n    open var textContent: String?\n    fun getRootNode(options: GetRootNodeOptions = definedExternally): Node\n    fun hasChildNodes(): Boolean\n    fun normalize()\n    fun cloneNode(deep: Boolean = definedExternally): Node\n    fun isEqualNode(otherNode: Node?): Boolean\n    fun isSameNode(otherNode: Node?): Boolean\n    fun compareDocumentPosition(other: Node): Short\n    fun contains(other: Node?): Boolean\n    fun lookupPrefix(namespace: String?): String?\n    fun lookupNamespaceURI(prefix: String?): String?\n    fun isDefaultNamespace(namespace: String?): Boolean\n    fun insertBefore(node: Node, child: Node?): Node\n    fun appendChild(node: Node): Node\n    fun replaceChild(node: Node, child: Node): Node\n    fun removeChild(child: Node): Node\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\npublic external interface GetRootNodeOptions {\n    var composed: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun GetRootNodeOptions(composed: Boolean? = false): GetRootNodeOptions {\n    val o = js(\"({})\")\n    o[\"composed\"] = composed\n    return o\n}\n\n/**\n * Exposes the JavaScript [Document](https://developer.mozilla.org/en/docs/Web/API/Document) to Kotlin\n */\npublic external open class Document : Node, GlobalEventHandlers, DocumentAndElementEventHandlers, NonElementParentNode, DocumentOrShadowRoot, ParentNode, GeometryUtils {\n    open val implementation: DOMImplementation\n    open val URL: String\n    open val documentURI: String\n    open val origin: String\n    open val compatMode: String\n    open val characterSet: String\n    open val charset: String\n    open val inputEncoding: String\n    open val contentType: String\n    open val doctype: DocumentType?\n    open val documentElement: Element?\n    open val location: Location?\n    var domain: String\n    open val referrer: String\n    var cookie: String\n    open val lastModified: String\n    open val readyState: DocumentReadyState\n    var title: String\n    var dir: String\n    var body: HTMLElement?\n    open val head: HTMLHeadElement?\n    open val images: HTMLCollection\n    open val embeds: HTMLCollection\n    open val plugins: HTMLCollection\n    open val links: HTMLCollection\n    open val forms: HTMLCollection\n    open val scripts: HTMLCollection\n    open val currentScript: HTMLOrSVGScriptElement?\n    open val defaultView: Window?\n    open val activeElement: Element?\n    var designMode: String\n    var onreadystatechange: ((Event) -> dynamic)?\n    var fgColor: String\n    var linkColor: String\n    var vlinkColor: String\n    var alinkColor: String\n    var bgColor: String\n    open val anchors: HTMLCollection\n    open val applets: HTMLCollection\n    open val all: HTMLAllCollection\n    open val scrollingElement: Element?\n    open val styleSheets: StyleSheetList\n    open val rootElement: SVGSVGElement?\n    open val fullscreenEnabled: Boolean\n    open val fullscreen: Boolean\n    var onfullscreenchange: ((Event) -> dynamic)?\n    var onfullscreenerror: ((Event) -> dynamic)?\n    override var onabort: ((Event) -> dynamic)?\n    override var onblur: ((FocusEvent) -> dynamic)?\n    override var oncancel: ((Event) -> dynamic)?\n    override var oncanplay: ((Event) -> dynamic)?\n    override var oncanplaythrough: ((Event) -> dynamic)?\n    override var onchange: ((Event) -> dynamic)?\n    override var onclick: ((MouseEvent) -> dynamic)?\n    override var onclose: ((Event) -> dynamic)?\n    override var oncontextmenu: ((MouseEvent) -> dynamic)?\n    override var oncuechange: ((Event) -> dynamic)?\n    override var ondblclick: ((MouseEvent) -> dynamic)?\n    override var ondrag: ((DragEvent) -> dynamic)?\n    override var ondragend: ((DragEvent) -> dynamic)?\n    override var ondragenter: ((DragEvent) -> dynamic)?\n    override var ondragexit: ((DragEvent) -> dynamic)?\n    override var ondragleave: ((DragEvent) -> dynamic)?\n    override var ondragover: ((DragEvent) -> dynamic)?\n    override var ondragstart: ((DragEvent) -> dynamic)?\n    override var ondrop: ((DragEvent) -> dynamic)?\n    override var ondurationchange: ((Event) -> dynamic)?\n    override var onemptied: ((Event) -> dynamic)?\n    override var onended: ((Event) -> dynamic)?\n    override var onerror: ((dynamic, String, Int, Int, Any?) -> dynamic)?\n    override var onfocus: ((FocusEvent) -> dynamic)?\n    override var oninput: ((InputEvent) -> dynamic)?\n    override var oninvalid: ((Event) -> dynamic)?\n    override var onkeydown: ((KeyboardEvent) -> dynamic)?\n    override var onkeypress: ((KeyboardEvent) -> dynamic)?\n    override var onkeyup: ((KeyboardEvent) -> dynamic)?\n    override var onload: ((Event) -> dynamic)?\n    override var onloadeddata: ((Event) -> dynamic)?\n    override var onloadedmetadata: ((Event) -> dynamic)?\n    override var onloadend: ((Event) -> dynamic)?\n    override var onloadstart: ((ProgressEvent) -> dynamic)?\n    override var onmousedown: ((MouseEvent) -> dynamic)?\n    override var onmouseenter: ((MouseEvent) -> dynamic)?\n    override var onmouseleave: ((MouseEvent) -> dynamic)?\n    override var onmousemove: ((MouseEvent) -> dynamic)?\n    override var onmouseout: ((MouseEvent) -> dynamic)?\n    override var onmouseover: ((MouseEvent) -> dynamic)?\n    override var onmouseup: ((MouseEvent) -> dynamic)?\n    override var onwheel: ((WheelEvent) -> dynamic)?\n    override var onpause: ((Event) -> dynamic)?\n    override var onplay: ((Event) -> dynamic)?\n    override var onplaying: ((Event) -> dynamic)?\n    override var onprogress: ((ProgressEvent) -> dynamic)?\n    override var onratechange: ((Event) -> dynamic)?\n    override var onreset: ((Event) -> dynamic)?\n    override var onresize: ((Event) -> dynamic)?\n    override var onscroll: ((Event) -> dynamic)?\n    override var onseeked: ((Event) -> dynamic)?\n    override var onseeking: ((Event) -> dynamic)?\n    override var onselect: ((Event) -> dynamic)?\n    override var onshow: ((Event) -> dynamic)?\n    override var onstalled: ((Event) -> dynamic)?\n    override var onsubmit: ((Event) -> dynamic)?\n    override var onsuspend: ((Event) -> dynamic)?\n    override var ontimeupdate: ((Event) -> dynamic)?\n    override var ontoggle: ((Event) -> dynamic)?\n    override var onvolumechange: ((Event) -> dynamic)?\n    override var onwaiting: ((Event) -> dynamic)?\n    override var ongotpointercapture: ((PointerEvent) -> dynamic)?\n    override var onlostpointercapture: ((PointerEvent) -> dynamic)?\n    override var onpointerdown: ((PointerEvent) -> dynamic)?\n    override var onpointermove: ((PointerEvent) -> dynamic)?\n    override var onpointerup: ((PointerEvent) -> dynamic)?\n    override var onpointercancel: ((PointerEvent) -> dynamic)?\n    override var onpointerover: ((PointerEvent) -> dynamic)?\n    override var onpointerout: ((PointerEvent) -> dynamic)?\n    override var onpointerenter: ((PointerEvent) -> dynamic)?\n    override var onpointerleave: ((PointerEvent) -> dynamic)?\n    override var oncopy: ((ClipboardEvent) -> dynamic)?\n    override var oncut: ((ClipboardEvent) -> dynamic)?\n    override var onpaste: ((ClipboardEvent) -> dynamic)?\n    override val fullscreenElement: Element?\n    override val children: HTMLCollection\n    override val firstElementChild: Element?\n    override val lastElementChild: Element?\n    override val childElementCount: Int\n    fun getElementsByTagName(qualifiedName: String): HTMLCollection\n    fun getElementsByTagNameNS(namespace: String?, localName: String): HTMLCollection\n    fun getElementsByClassName(classNames: String): HTMLCollection\n    fun createElement(localName: String, options: ElementCreationOptions = definedExternally): Element\n    fun createElementNS(namespace: String?, qualifiedName: String, options: ElementCreationOptions = definedExternally): Element\n    fun createDocumentFragment(): DocumentFragment\n    fun createTextNode(data: String): Text\n    fun createCDATASection(data: String): CDATASection\n    fun createComment(data: String): Comment\n    fun createProcessingInstruction(target: String, data: String): ProcessingInstruction\n    fun importNode(node: Node, deep: Boolean = definedExternally): Node\n    fun adoptNode(node: Node): Node\n    fun createAttribute(localName: String): Attr\n    fun createAttributeNS(namespace: String?, qualifiedName: String): Attr\n    fun createEvent(`interface`: String): Event\n    fun createRange(): Range\n    fun createNodeIterator(root: Node, whatToShow: Int = definedExternally, filter: NodeFilter? = definedExternally): NodeIterator\n    fun createNodeIterator(root: Node, whatToShow: Int = definedExternally, filter: ((Node) -> Short)? = definedExternally): NodeIterator\n    fun createTreeWalker(root: Node, whatToShow: Int = definedExternally, filter: NodeFilter? = definedExternally): TreeWalker\n    fun createTreeWalker(root: Node, whatToShow: Int = definedExternally, filter: ((Node) -> Short)? = definedExternally): TreeWalker\n    fun getElementsByName(elementName: String): NodeList\n    fun open(type: String = definedExternally, replace: String = definedExternally): Document\n    fun open(url: String, name: String, features: String): Window\n    fun close()\n    fun write(vararg text: String)\n    fun writeln(vararg text: String)\n    fun hasFocus(): Boolean\n    fun execCommand(commandId: String, showUI: Boolean = definedExternally, value: String = definedExternally): Boolean\n    fun queryCommandEnabled(commandId: String): Boolean\n    fun queryCommandIndeterm(commandId: String): Boolean\n    fun queryCommandState(commandId: String): Boolean\n    fun queryCommandSupported(commandId: String): Boolean\n    fun queryCommandValue(commandId: String): String\n    fun clear()\n    fun captureEvents()\n    fun releaseEvents()\n    fun elementFromPoint(x: Double, y: Double): Element?\n    fun elementsFromPoint(x: Double, y: Double): Array<Element>\n    fun caretPositionFromPoint(x: Double, y: Double): CaretPosition?\n    fun createTouch(view: Window, target: EventTarget, identifier: Int, pageX: Int, pageY: Int, screenX: Int, screenY: Int): Touch\n    fun createTouchList(vararg touches: Touch): TouchList\n    fun exitFullscreen(): Promise<Unit>\n    override fun getElementById(elementId: String): Element?\n    override fun prepend(vararg nodes: dynamic)\n    override fun append(vararg nodes: dynamic)\n    override fun querySelector(selectors: String): Element?\n    override fun querySelectorAll(selectors: String): NodeList\n    override fun getBoxQuads(options: BoxQuadOptions /* = definedExternally */): Array<DOMQuad>\n    override fun convertQuadFromNode(quad: dynamic, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMQuad\n    override fun convertRectFromNode(rect: DOMRectReadOnly, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMQuad\n    override fun convertPointFromNode(point: DOMPointInit, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMPoint\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun Document.get(name: String): dynamic = asDynamic()[name]\n\n/**\n * Exposes the JavaScript [XMLDocument](https://developer.mozilla.org/en/docs/Web/API/XMLDocument) to Kotlin\n */\npublic external open class XMLDocument : Document {\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\npublic external interface ElementCreationOptions {\n    var `is`: String?\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun ElementCreationOptions(`is`: String? = undefined): ElementCreationOptions {\n    val o = js(\"({})\")\n    o[\"is\"] = `is`\n    return o\n}\n\n/**\n * Exposes the JavaScript [DOMImplementation](https://developer.mozilla.org/en/docs/Web/API/DOMImplementation) to Kotlin\n */\npublic external abstract class DOMImplementation {\n    fun createDocumentType(qualifiedName: String, publicId: String, systemId: String): DocumentType\n    fun createDocument(namespace: String?, qualifiedName: String, doctype: DocumentType? = definedExternally): XMLDocument\n    fun createHTMLDocument(title: String = definedExternally): Document\n    fun hasFeature(): Boolean\n}\n\n/**\n * Exposes the JavaScript [DocumentType](https://developer.mozilla.org/en/docs/Web/API/DocumentType) to Kotlin\n */\npublic external abstract class DocumentType : Node, ChildNode {\n    open val name: String\n    open val publicId: String\n    open val systemId: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [DocumentFragment](https://developer.mozilla.org/en/docs/Web/API/DocumentFragment) to Kotlin\n */\npublic external open class DocumentFragment : Node, NonElementParentNode, ParentNode {\n    override val children: HTMLCollection\n    override val firstElementChild: Element?\n    override val lastElementChild: Element?\n    override val childElementCount: Int\n    override fun getElementById(elementId: String): Element?\n    override fun prepend(vararg nodes: dynamic)\n    override fun append(vararg nodes: dynamic)\n    override fun querySelector(selectors: String): Element?\n    override fun querySelectorAll(selectors: String): NodeList\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [ShadowRoot](https://developer.mozilla.org/en/docs/Web/API/ShadowRoot) to Kotlin\n */\npublic external open class ShadowRoot : DocumentFragment, DocumentOrShadowRoot {\n    open val mode: ShadowRootMode\n    open val host: Element\n    override val fullscreenElement: Element?\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [Element](https://developer.mozilla.org/en/docs/Web/API/Element) to Kotlin\n */\npublic external abstract class Element : Node, ParentNode, NonDocumentTypeChildNode, ChildNode, Slotable, GeometryUtils, UnionElementOrHTMLCollection, UnionElementOrRadioNodeList, UnionElementOrMouseEvent, UnionElementOrProcessingInstruction {\n    open val namespaceURI: String?\n    open val prefix: String?\n    open val localName: String\n    open val tagName: String\n    open var id: String\n    open var className: String\n    open val classList: DOMTokenList\n    open var slot: String\n    open val attributes: NamedNodeMap\n    open val shadowRoot: ShadowRoot?\n    open var scrollTop: Double\n    open var scrollLeft: Double\n    open val scrollWidth: Int\n    open val scrollHeight: Int\n    open val clientTop: Int\n    open val clientLeft: Int\n    open val clientWidth: Int\n    open val clientHeight: Int\n    open var innerHTML: String\n    open var outerHTML: String\n    fun hasAttributes(): Boolean\n    fun getAttributeNames(): Array<String>\n    fun getAttribute(qualifiedName: String): String?\n    fun getAttributeNS(namespace: String?, localName: String): String?\n    fun setAttribute(qualifiedName: String, value: String)\n    fun setAttributeNS(namespace: String?, qualifiedName: String, value: String)\n    fun removeAttribute(qualifiedName: String)\n    fun removeAttributeNS(namespace: String?, localName: String)\n    fun hasAttribute(qualifiedName: String): Boolean\n    fun hasAttributeNS(namespace: String?, localName: String): Boolean\n    fun getAttributeNode(qualifiedName: String): Attr?\n    fun getAttributeNodeNS(namespace: String?, localName: String): Attr?\n    fun setAttributeNode(attr: Attr): Attr?\n    fun setAttributeNodeNS(attr: Attr): Attr?\n    fun removeAttributeNode(attr: Attr): Attr\n    fun attachShadow(init: ShadowRootInit): ShadowRoot\n    fun closest(selectors: String): Element?\n    fun matches(selectors: String): Boolean\n    fun webkitMatchesSelector(selectors: String): Boolean\n    fun getElementsByTagName(qualifiedName: String): HTMLCollection\n    fun getElementsByTagNameNS(namespace: String?, localName: String): HTMLCollection\n    fun getElementsByClassName(classNames: String): HTMLCollection\n    fun insertAdjacentElement(where: String, element: Element): Element?\n    fun insertAdjacentText(where: String, data: String)\n    fun getClientRects(): Array<DOMRect>\n    fun getBoundingClientRect(): DOMRect\n    fun scrollIntoView()\n    fun scrollIntoView(arg: dynamic)\n    fun scroll(options: ScrollToOptions = definedExternally)\n    fun scroll(x: Double, y: Double)\n    fun scrollTo(options: ScrollToOptions = definedExternally)\n    fun scrollTo(x: Double, y: Double)\n    fun scrollBy(options: ScrollToOptions = definedExternally)\n    fun scrollBy(x: Double, y: Double)\n    fun insertAdjacentHTML(position: String, text: String)\n    fun setPointerCapture(pointerId: Int)\n    fun releasePointerCapture(pointerId: Int)\n    fun hasPointerCapture(pointerId: Int): Boolean\n    fun requestFullscreen(): Promise<Unit>\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\npublic external interface ShadowRootInit {\n    var mode: ShadowRootMode?\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun ShadowRootInit(mode: ShadowRootMode?): ShadowRootInit {\n    val o = js(\"({})\")\n    o[\"mode\"] = mode\n    return o\n}\n\n/**\n * Exposes the JavaScript [NamedNodeMap](https://developer.mozilla.org/en/docs/Web/API/NamedNodeMap) to Kotlin\n */\npublic external abstract class NamedNodeMap : ItemArrayLike<Attr> {\n    fun getNamedItemNS(namespace: String?, localName: String): Attr?\n    fun setNamedItem(attr: Attr): Attr?\n    fun setNamedItemNS(attr: Attr): Attr?\n    fun removeNamedItem(qualifiedName: String): Attr\n    fun removeNamedItemNS(namespace: String?, localName: String): Attr\n    override fun item(index: Int): Attr?\n    fun getNamedItem(qualifiedName: String): Attr?\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun NamedNodeMap.get(index: Int): Attr? = asDynamic()[index]\n\n@kotlin.internal.InlineOnly\npublic inline operator fun NamedNodeMap.get(qualifiedName: String): Attr? = asDynamic()[qualifiedName]\n\n/**\n * Exposes the JavaScript [Attr](https://developer.mozilla.org/en/docs/Web/API/Attr) to Kotlin\n */\npublic external abstract class Attr : Node {\n    open val namespaceURI: String?\n    open val prefix: String?\n    open val localName: String\n    open val name: String\n    open var value: String\n    open val ownerElement: Element?\n    open val specified: Boolean\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [CharacterData](https://developer.mozilla.org/en/docs/Web/API/CharacterData) to Kotlin\n */\npublic external abstract class CharacterData : Node, NonDocumentTypeChildNode, ChildNode {\n    open var data: String\n    open val length: Int\n    fun substringData(offset: Int, count: Int): String\n    fun appendData(data: String)\n    fun insertData(offset: Int, data: String)\n    fun deleteData(offset: Int, count: Int)\n    fun replaceData(offset: Int, count: Int, data: String)\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [Text](https://developer.mozilla.org/en/docs/Web/API/Text) to Kotlin\n */\npublic external open class Text(data: String = definedExternally) : CharacterData, Slotable, GeometryUtils {\n    open val wholeText: String\n    override val assignedSlot: HTMLSlotElement?\n    override val previousElementSibling: Element?\n    override val nextElementSibling: Element?\n    fun splitText(offset: Int): Text\n    override fun getBoxQuads(options: BoxQuadOptions /* = definedExternally */): Array<DOMQuad>\n    override fun convertQuadFromNode(quad: dynamic, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMQuad\n    override fun convertRectFromNode(rect: DOMRectReadOnly, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMQuad\n    override fun convertPointFromNode(point: DOMPointInit, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMPoint\n    override fun before(vararg nodes: dynamic)\n    override fun after(vararg nodes: dynamic)\n    override fun replaceWith(vararg nodes: dynamic)\n    override fun remove()\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [CDATASection](https://developer.mozilla.org/en/docs/Web/API/CDATASection) to Kotlin\n */\npublic external open class CDATASection : Text {\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [ProcessingInstruction](https://developer.mozilla.org/en/docs/Web/API/ProcessingInstruction) to Kotlin\n */\npublic external abstract class ProcessingInstruction : CharacterData, LinkStyle, UnionElementOrProcessingInstruction {\n    open val target: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [Comment](https://developer.mozilla.org/en/docs/Web/API/Comment) to Kotlin\n */\npublic external open class Comment(data: String = definedExternally) : CharacterData {\n    override val previousElementSibling: Element?\n    override val nextElementSibling: Element?\n    override fun before(vararg nodes: dynamic)\n    override fun after(vararg nodes: dynamic)\n    override fun replaceWith(vararg nodes: dynamic)\n    override fun remove()\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [Range](https://developer.mozilla.org/en/docs/Web/API/Range) to Kotlin\n */\npublic external open class Range {\n    open val startContainer: Node\n    open val startOffset: Int\n    open val endContainer: Node\n    open val endOffset: Int\n    open val collapsed: Boolean\n    open val commonAncestorContainer: Node\n    fun setStart(node: Node, offset: Int)\n    fun setEnd(node: Node, offset: Int)\n    fun setStartBefore(node: Node)\n    fun setStartAfter(node: Node)\n    fun setEndBefore(node: Node)\n    fun setEndAfter(node: Node)\n    fun collapse(toStart: Boolean = definedExternally)\n    fun selectNode(node: Node)\n    fun selectNodeContents(node: Node)\n    fun compareBoundaryPoints(how: Short, sourceRange: Range): Short\n    fun deleteContents()\n    fun extractContents(): DocumentFragment\n    fun cloneContents(): DocumentFragment\n    fun insertNode(node: Node)\n    fun surroundContents(newParent: Node)\n    fun cloneRange(): Range\n    fun detach()\n    fun isPointInRange(node: Node, offset: Int): Boolean\n    fun comparePoint(node: Node, offset: Int): Short\n    fun intersectsNode(node: Node): Boolean\n    fun getClientRects(): Array<DOMRect>\n    fun getBoundingClientRect(): DOMRect\n    fun createContextualFragment(fragment: String): DocumentFragment\n\n    companion object {\n        val START_TO_START: Short\n        val START_TO_END: Short\n        val END_TO_END: Short\n        val END_TO_START: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [NodeIterator](https://developer.mozilla.org/en/docs/Web/API/NodeIterator) to Kotlin\n */\npublic external abstract class NodeIterator {\n    open val root: Node\n    open val referenceNode: Node\n    open val pointerBeforeReferenceNode: Boolean\n    open val whatToShow: Int\n    open val filter: NodeFilter?\n    fun nextNode(): Node?\n    fun previousNode(): Node?\n    fun detach()\n}\n\n/**\n * Exposes the JavaScript [TreeWalker](https://developer.mozilla.org/en/docs/Web/API/TreeWalker) to Kotlin\n */\npublic external abstract class TreeWalker {\n    open val root: Node\n    open val whatToShow: Int\n    open val filter: NodeFilter?\n    open var currentNode: Node\n    fun parentNode(): Node?\n    fun firstChild(): Node?\n    fun lastChild(): Node?\n    fun previousSibling(): Node?\n    fun nextSibling(): Node?\n    fun previousNode(): Node?\n    fun nextNode(): Node?\n}\n\n/**\n * Exposes the JavaScript [NodeFilter](https://developer.mozilla.org/en/docs/Web/API/NodeFilter) to Kotlin\n */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface NodeFilter {\n    fun acceptNode(node: Node): Short\n\n    companion object {\n        val FILTER_ACCEPT: Short\n        val FILTER_REJECT: Short\n        val FILTER_SKIP: Short\n        val SHOW_ALL: Int\n        val SHOW_ELEMENT: Int\n        val SHOW_ATTRIBUTE: Int\n        val SHOW_TEXT: Int\n        val SHOW_CDATA_SECTION: Int\n        val SHOW_ENTITY_REFERENCE: Int\n        val SHOW_ENTITY: Int\n        val SHOW_PROCESSING_INSTRUCTION: Int\n        val SHOW_COMMENT: Int\n        val SHOW_DOCUMENT: Int\n        val SHOW_DOCUMENT_TYPE: Int\n        val SHOW_DOCUMENT_FRAGMENT: Int\n        val SHOW_NOTATION: Int\n    }\n}\n\n/**\n * Exposes the JavaScript [DOMTokenList](https://developer.mozilla.org/en/docs/Web/API/DOMTokenList) to Kotlin\n */\npublic external abstract class DOMTokenList : ItemArrayLike<String> {\n    open var value: String\n    fun contains(token: String): Boolean\n    fun add(vararg tokens: String)\n    fun remove(vararg tokens: String)\n    fun toggle(token: String, force: Boolean = definedExternally): Boolean\n    fun replace(token: String, newToken: String)\n    fun supports(token: String): Boolean\n    override fun item(index: Int): String?\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun DOMTokenList.get(index: Int): String? = asDynamic()[index]\n\n/**\n * Exposes the JavaScript [DOMPointReadOnly](https://developer.mozilla.org/en/docs/Web/API/DOMPointReadOnly) to Kotlin\n */\npublic external open class DOMPointReadOnly(x: Double, y: Double, z: Double, w: Double) {\n    open val x: Double\n    open val y: Double\n    open val z: Double\n    open val w: Double\n    fun matrixTransform(matrix: DOMMatrixReadOnly): DOMPoint\n}\n\n/**\n * Exposes the JavaScript [DOMPoint](https://developer.mozilla.org/en/docs/Web/API/DOMPoint) to Kotlin\n */\npublic external open class DOMPoint : DOMPointReadOnly {\n    constructor(point: DOMPointInit)\n    constructor(x: Double = definedExternally, y: Double = definedExternally, z: Double = definedExternally, w: Double = definedExternally)\n    override var x: Double\n    override var y: Double\n    override var z: Double\n    override var w: Double\n}\n\n/**\n * Exposes the JavaScript [DOMPointInit](https://developer.mozilla.org/en/docs/Web/API/DOMPointInit) to Kotlin\n */\npublic external interface DOMPointInit {\n    var x: Double? /* = 0.0 */\n        get() = definedExternally\n        set(value) = definedExternally\n    var y: Double? /* = 0.0 */\n        get() = definedExternally\n        set(value) = definedExternally\n    var z: Double? /* = 0.0 */\n        get() = definedExternally\n        set(value) = definedExternally\n    var w: Double? /* = 1.0 */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun DOMPointInit(x: Double? = 0.0, y: Double? = 0.0, z: Double? = 0.0, w: Double? = 1.0): DOMPointInit {\n    val o = js(\"({})\")\n    o[\"x\"] = x\n    o[\"y\"] = y\n    o[\"z\"] = z\n    o[\"w\"] = w\n    return o\n}\n\n/**\n * Exposes the JavaScript [DOMRect](https://developer.mozilla.org/en/docs/Web/API/DOMRect) to Kotlin\n */\npublic external open class DOMRect(x: Double = definedExternally, y: Double = definedExternally, width: Double = definedExternally, height: Double = definedExternally) : DOMRectReadOnly {\n    override var x: Double\n    override var y: Double\n    override var width: Double\n    override var height: Double\n}\n\n/**\n * Exposes the JavaScript [DOMRectReadOnly](https://developer.mozilla.org/en/docs/Web/API/DOMRectReadOnly) to Kotlin\n */\npublic external open class DOMRectReadOnly(x: Double, y: Double, width: Double, height: Double) {\n    open val x: Double\n    open val y: Double\n    open val width: Double\n    open val height: Double\n    open val top: Double\n    open val right: Double\n    open val bottom: Double\n    open val left: Double\n}\n\npublic external interface DOMRectInit {\n    var x: Double? /* = 0.0 */\n        get() = definedExternally\n        set(value) = definedExternally\n    var y: Double? /* = 0.0 */\n        get() = definedExternally\n        set(value) = definedExternally\n    var width: Double? /* = 0.0 */\n        get() = definedExternally\n        set(value) = definedExternally\n    var height: Double? /* = 0.0 */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun DOMRectInit(x: Double? = 0.0, y: Double? = 0.0, width: Double? = 0.0, height: Double? = 0.0): DOMRectInit {\n    val o = js(\"({})\")\n    o[\"x\"] = x\n    o[\"y\"] = y\n    o[\"width\"] = width\n    o[\"height\"] = height\n    return o\n}\n\npublic external interface DOMRectList : ItemArrayLike<DOMRect> {\n    override fun item(index: Int): DOMRect?\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun DOMRectList.get(index: Int): DOMRect? = asDynamic()[index]\n\n/**\n * Exposes the JavaScript [DOMQuad](https://developer.mozilla.org/en/docs/Web/API/DOMQuad) to Kotlin\n */\npublic external open class DOMQuad {\n    constructor(p1: DOMPointInit = definedExternally, p2: DOMPointInit = definedExternally, p3: DOMPointInit = definedExternally, p4: DOMPointInit = definedExternally)\n    constructor(rect: DOMRectInit)\n    open val p1: DOMPoint\n    open val p2: DOMPoint\n    open val p3: DOMPoint\n    open val p4: DOMPoint\n    open val bounds: DOMRectReadOnly\n}\n\n/**\n * Exposes the JavaScript [DOMMatrixReadOnly](https://developer.mozilla.org/en/docs/Web/API/DOMMatrixReadOnly) to Kotlin\n */\npublic external open class DOMMatrixReadOnly(numberSequence: Array<Double>) {\n    open val a: Double\n    open val b: Double\n    open val c: Double\n    open val d: Double\n    open val e: Double\n    open val f: Double\n    open val m11: Double\n    open val m12: Double\n    open val m13: Double\n    open val m14: Double\n    open val m21: Double\n    open val m22: Double\n    open val m23: Double\n    open val m24: Double\n    open val m31: Double\n    open val m32: Double\n    open val m33: Double\n    open val m34: Double\n    open val m41: Double\n    open val m42: Double\n    open val m43: Double\n    open val m44: Double\n    open val is2D: Boolean\n    open val isIdentity: Boolean\n    fun translate(tx: Double, ty: Double, tz: Double = definedExternally): DOMMatrix\n    fun scale(scale: Double, originX: Double = definedExternally, originY: Double = definedExternally): DOMMatrix\n    fun scale3d(scale: Double, originX: Double = definedExternally, originY: Double = definedExternally, originZ: Double = definedExternally): DOMMatrix\n    fun scaleNonUniform(scaleX: Double, scaleY: Double = definedExternally, scaleZ: Double = definedExternally, originX: Double = definedExternally, originY: Double = definedExternally, originZ: Double = definedExternally): DOMMatrix\n    fun rotate(angle: Double, originX: Double = definedExternally, originY: Double = definedExternally): DOMMatrix\n    fun rotateFromVector(x: Double, y: Double): DOMMatrix\n    fun rotateAxisAngle(x: Double, y: Double, z: Double, angle: Double): DOMMatrix\n    fun skewX(sx: Double): DOMMatrix\n    fun skewY(sy: Double): DOMMatrix\n    fun multiply(other: DOMMatrix): DOMMatrix\n    fun flipX(): DOMMatrix\n    fun flipY(): DOMMatrix\n    fun inverse(): DOMMatrix\n    fun transformPoint(point: DOMPointInit = definedExternally): DOMPoint\n    fun toFloat32Array(): Float32Array\n    fun toFloat64Array(): Float64Array\n}\n\n/**\n * Exposes the JavaScript [DOMMatrix](https://developer.mozilla.org/en/docs/Web/API/DOMMatrix) to Kotlin\n */\npublic external open class DOMMatrix() : DOMMatrixReadOnly {\n    constructor(transformList: String)\n    constructor(other: DOMMatrixReadOnly)\n    constructor(array32: Float32Array)\n    constructor(array64: Float64Array)\n    constructor(numberSequence: Array<Double>)\n    override var a: Double\n    override var b: Double\n    override var c: Double\n    override var d: Double\n    override var e: Double\n    override var f: Double\n    override var m11: Double\n    override var m12: Double\n    override var m13: Double\n    override var m14: Double\n    override var m21: Double\n    override var m22: Double\n    override var m23: Double\n    override var m24: Double\n    override var m31: Double\n    override var m32: Double\n    override var m33: Double\n    override var m34: Double\n    override var m41: Double\n    override var m42: Double\n    override var m43: Double\n    override var m44: Double\n    fun multiplySelf(other: DOMMatrix): DOMMatrix\n    fun preMultiplySelf(other: DOMMatrix): DOMMatrix\n    fun translateSelf(tx: Double, ty: Double, tz: Double = definedExternally): DOMMatrix\n    fun scaleSelf(scale: Double, originX: Double = definedExternally, originY: Double = definedExternally): DOMMatrix\n    fun scale3dSelf(scale: Double, originX: Double = definedExternally, originY: Double = definedExternally, originZ: Double = definedExternally): DOMMatrix\n    fun scaleNonUniformSelf(scaleX: Double, scaleY: Double = definedExternally, scaleZ: Double = definedExternally, originX: Double = definedExternally, originY: Double = definedExternally, originZ: Double = definedExternally): DOMMatrix\n    fun rotateSelf(angle: Double, originX: Double = definedExternally, originY: Double = definedExternally): DOMMatrix\n    fun rotateFromVectorSelf(x: Double, y: Double): DOMMatrix\n    fun rotateAxisAngleSelf(x: Double, y: Double, z: Double, angle: Double): DOMMatrix\n    fun skewXSelf(sx: Double): DOMMatrix\n    fun skewYSelf(sy: Double): DOMMatrix\n    fun invertSelf(): DOMMatrix\n    fun setMatrixValue(transformList: String): DOMMatrix\n}\n\npublic external interface ScrollOptions {\n    var behavior: ScrollBehavior? /* = ScrollBehavior.AUTO */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun ScrollOptions(behavior: ScrollBehavior? = ScrollBehavior.AUTO): ScrollOptions {\n    val o = js(\"({})\")\n    o[\"behavior\"] = behavior\n    return o\n}\n\n/**\n * Exposes the JavaScript [ScrollToOptions](https://developer.mozilla.org/en/docs/Web/API/ScrollToOptions) to Kotlin\n */\npublic external interface ScrollToOptions : ScrollOptions {\n    var left: Double?\n        get() = definedExternally\n        set(value) = definedExternally\n    var top: Double?\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun ScrollToOptions(left: Double? = undefined, top: Double? = undefined, behavior: ScrollBehavior? = ScrollBehavior.AUTO): ScrollToOptions {\n    val o = js(\"({})\")\n    o[\"left\"] = left\n    o[\"top\"] = top\n    o[\"behavior\"] = behavior\n    return o\n}\n\n/**\n * Exposes the JavaScript [MediaQueryList](https://developer.mozilla.org/en/docs/Web/API/MediaQueryList) to Kotlin\n */\npublic external abstract class MediaQueryList : EventTarget {\n    open val media: String\n    open val matches: Boolean\n    open var onchange: ((Event) -> dynamic)?\n    fun addListener(listener: EventListener?)\n    fun addListener(listener: ((Event) -> Unit)?)\n    fun removeListener(listener: EventListener?)\n    fun removeListener(listener: ((Event) -> Unit)?)\n}\n\n/**\n * Exposes the JavaScript [MediaQueryListEvent](https://developer.mozilla.org/en/docs/Web/API/MediaQueryListEvent) to Kotlin\n */\npublic external open class MediaQueryListEvent(type: String, eventInitDict: MediaQueryListEventInit = definedExternally) : Event {\n    open val media: String\n    open val matches: Boolean\n\n    companion object {\n        val NONE: Short\n        val CAPTURING_PHASE: Short\n        val AT_TARGET: Short\n        val BUBBLING_PHASE: Short\n    }\n}\n\npublic external interface MediaQueryListEventInit : EventInit {\n    var media: String? /* = \"\" */\n        get() = definedExternally\n        set(value) = definedExternally\n    var matches: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun MediaQueryListEventInit(media: String? = \"\", matches: Boolean? = false, bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): MediaQueryListEventInit {\n    val o = js(\"({})\")\n    o[\"media\"] = media\n    o[\"matches\"] = matches\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n    return o\n}\n\n/**\n * Exposes the JavaScript [Screen](https://developer.mozilla.org/en/docs/Web/API/Screen) to Kotlin\n */\npublic external abstract class Screen {\n    open val availWidth: Int\n    open val availHeight: Int\n    open val width: Int\n    open val height: Int\n    open val colorDepth: Int\n    open val pixelDepth: Int\n}\n\n/**\n * Exposes the JavaScript [CaretPosition](https://developer.mozilla.org/en/docs/Web/API/CaretPosition) to Kotlin\n */\npublic external abstract class CaretPosition {\n    open val offsetNode: Node\n    open val offset: Int\n    fun getClientRect(): DOMRect?\n}\n\npublic external interface ScrollIntoViewOptions : ScrollOptions {\n    var block: ScrollLogicalPosition? /* = ScrollLogicalPosition.CENTER */\n        get() = definedExternally\n        set(value) = definedExternally\n    var inline: ScrollLogicalPosition? /* = ScrollLogicalPosition.CENTER */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun ScrollIntoViewOptions(block: ScrollLogicalPosition? = ScrollLogicalPosition.CENTER, inline: ScrollLogicalPosition? = ScrollLogicalPosition.CENTER, behavior: ScrollBehavior? = ScrollBehavior.AUTO): ScrollIntoViewOptions {\n    val o = js(\"({})\")\n    o[\"block\"] = block\n    o[\"inline\"] = inline\n    o[\"behavior\"] = behavior\n    return o\n}\n\npublic external interface BoxQuadOptions {\n    var box: CSSBoxType? /* = CSSBoxType.BORDER */\n        get() = definedExternally\n        set(value) = definedExternally\n    var relativeTo: dynamic\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun BoxQuadOptions(box: CSSBoxType? = CSSBoxType.BORDER, relativeTo: dynamic = undefined): BoxQuadOptions {\n    val o = js(\"({})\")\n    o[\"box\"] = box\n    o[\"relativeTo\"] = relativeTo\n    return o\n}\n\npublic external interface ConvertCoordinateOptions {\n    var fromBox: CSSBoxType? /* = CSSBoxType.BORDER */\n        get() = definedExternally\n        set(value) = definedExternally\n    var toBox: CSSBoxType? /* = CSSBoxType.BORDER */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun ConvertCoordinateOptions(fromBox: CSSBoxType? = CSSBoxType.BORDER, toBox: CSSBoxType? = CSSBoxType.BORDER): ConvertCoordinateOptions {\n    val o = js(\"({})\")\n    o[\"fromBox\"] = fromBox\n    o[\"toBox\"] = toBox\n    return o\n}\n\n/**\n * Exposes the JavaScript [GeometryUtils](https://developer.mozilla.org/en/docs/Web/API/GeometryUtils) to Kotlin\n */\npublic external interface GeometryUtils {\n    fun getBoxQuads(options: BoxQuadOptions = definedExternally): Array<DOMQuad>\n    fun convertQuadFromNode(quad: dynamic, from: dynamic, options: ConvertCoordinateOptions = definedExternally): DOMQuad\n    fun convertRectFromNode(rect: DOMRectReadOnly, from: dynamic, options: ConvertCoordinateOptions = definedExternally): DOMQuad\n    fun convertPointFromNode(point: DOMPointInit, from: dynamic, options: ConvertCoordinateOptions = definedExternally): DOMPoint\n}\n\n/**\n * Exposes the JavaScript [Touch](https://developer.mozilla.org/en/docs/Web/API/Touch) to Kotlin\n */\npublic external abstract class Touch {\n    open val identifier: Int\n    open val target: EventTarget\n    open val screenX: Int\n    open val screenY: Int\n    open val clientX: Int\n    open val clientY: Int\n    open val pageX: Int\n    open val pageY: Int\n    open val region: String?\n}\n\npublic external abstract class TouchList : ItemArrayLike<Touch> {\n    override fun item(index: Int): Touch?\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun TouchList.get(index: Int): Touch? = asDynamic()[index]\n\npublic external open class TouchEvent : UIEvent {\n    open val touches: TouchList\n    open val targetTouches: TouchList\n    open val changedTouches: TouchList\n    open val altKey: Boolean\n    open val metaKey: Boolean\n    open val ctrlKey: Boolean\n    open val shiftKey: Boolean\n\n    companion object {\n        val NONE: Short\n        val CAPTURING_PHASE: Short\n        val AT_TARGET: Short\n        val BUBBLING_PHASE: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [Image](https://developer.mozilla.org/en/docs/Web/API/Image) to Kotlin\n */\npublic external open class Image(width: Int = definedExternally, height: Int = definedExternally) : HTMLImageElement {\n    override var onabort: ((Event) -> dynamic)?\n    override var onblur: ((FocusEvent) -> dynamic)?\n    override var oncancel: ((Event) -> dynamic)?\n    override var oncanplay: ((Event) -> dynamic)?\n    override var oncanplaythrough: ((Event) -> dynamic)?\n    override var onchange: ((Event) -> dynamic)?\n    override var onclick: ((MouseEvent) -> dynamic)?\n    override var onclose: ((Event) -> dynamic)?\n    override var oncontextmenu: ((MouseEvent) -> dynamic)?\n    override var oncuechange: ((Event) -> dynamic)?\n    override var ondblclick: ((MouseEvent) -> dynamic)?\n    override var ondrag: ((DragEvent) -> dynamic)?\n    override var ondragend: ((DragEvent) -> dynamic)?\n    override var ondragenter: ((DragEvent) -> dynamic)?\n    override var ondragexit: ((DragEvent) -> dynamic)?\n    override var ondragleave: ((DragEvent) -> dynamic)?\n    override var ondragover: ((DragEvent) -> dynamic)?\n    override var ondragstart: ((DragEvent) -> dynamic)?\n    override var ondrop: ((DragEvent) -> dynamic)?\n    override var ondurationchange: ((Event) -> dynamic)?\n    override var onemptied: ((Event) -> dynamic)?\n    override var onended: ((Event) -> dynamic)?\n    override var onerror: ((dynamic, String, Int, Int, Any?) -> dynamic)?\n    override var onfocus: ((FocusEvent) -> dynamic)?\n    override var oninput: ((InputEvent) -> dynamic)?\n    override var oninvalid: ((Event) -> dynamic)?\n    override var onkeydown: ((KeyboardEvent) -> dynamic)?\n    override var onkeypress: ((KeyboardEvent) -> dynamic)?\n    override var onkeyup: ((KeyboardEvent) -> dynamic)?\n    override var onload: ((Event) -> dynamic)?\n    override var onloadeddata: ((Event) -> dynamic)?\n    override var onloadedmetadata: ((Event) -> dynamic)?\n    override var onloadend: ((Event) -> dynamic)?\n    override var onloadstart: ((ProgressEvent) -> dynamic)?\n    override var onmousedown: ((MouseEvent) -> dynamic)?\n    override var onmouseenter: ((MouseEvent) -> dynamic)?\n    override var onmouseleave: ((MouseEvent) -> dynamic)?\n    override var onmousemove: ((MouseEvent) -> dynamic)?\n    override var onmouseout: ((MouseEvent) -> dynamic)?\n    override var onmouseover: ((MouseEvent) -> dynamic)?\n    override var onmouseup: ((MouseEvent) -> dynamic)?\n    override var onwheel: ((WheelEvent) -> dynamic)?\n    override var onpause: ((Event) -> dynamic)?\n    override var onplay: ((Event) -> dynamic)?\n    override var onplaying: ((Event) -> dynamic)?\n    override var onprogress: ((ProgressEvent) -> dynamic)?\n    override var onratechange: ((Event) -> dynamic)?\n    override var onreset: ((Event) -> dynamic)?\n    override var onresize: ((Event) -> dynamic)?\n    override var onscroll: ((Event) -> dynamic)?\n    override var onseeked: ((Event) -> dynamic)?\n    override var onseeking: ((Event) -> dynamic)?\n    override var onselect: ((Event) -> dynamic)?\n    override var onshow: ((Event) -> dynamic)?\n    override var onstalled: ((Event) -> dynamic)?\n    override var onsubmit: ((Event) -> dynamic)?\n    override var onsuspend: ((Event) -> dynamic)?\n    override var ontimeupdate: ((Event) -> dynamic)?\n    override var ontoggle: ((Event) -> dynamic)?\n    override var onvolumechange: ((Event) -> dynamic)?\n    override var onwaiting: ((Event) -> dynamic)?\n    override var ongotpointercapture: ((PointerEvent) -> dynamic)?\n    override var onlostpointercapture: ((PointerEvent) -> dynamic)?\n    override var onpointerdown: ((PointerEvent) -> dynamic)?\n    override var onpointermove: ((PointerEvent) -> dynamic)?\n    override var onpointerup: ((PointerEvent) -> dynamic)?\n    override var onpointercancel: ((PointerEvent) -> dynamic)?\n    override var onpointerover: ((PointerEvent) -> dynamic)?\n    override var onpointerout: ((PointerEvent) -> dynamic)?\n    override var onpointerenter: ((PointerEvent) -> dynamic)?\n    override var onpointerleave: ((PointerEvent) -> dynamic)?\n    override var oncopy: ((ClipboardEvent) -> dynamic)?\n    override var oncut: ((ClipboardEvent) -> dynamic)?\n    override var onpaste: ((ClipboardEvent) -> dynamic)?\n    override var contentEditable: String\n    override val isContentEditable: Boolean\n    override val style: CSSStyleDeclaration\n    override val children: HTMLCollection\n    override val firstElementChild: Element?\n    override val lastElementChild: Element?\n    override val childElementCount: Int\n    override val previousElementSibling: Element?\n    override val nextElementSibling: Element?\n    override val assignedSlot: HTMLSlotElement?\n    override fun prepend(vararg nodes: dynamic)\n    override fun append(vararg nodes: dynamic)\n    override fun querySelector(selectors: String): Element?\n    override fun querySelectorAll(selectors: String): NodeList\n    override fun before(vararg nodes: dynamic)\n    override fun after(vararg nodes: dynamic)\n    override fun replaceWith(vararg nodes: dynamic)\n    override fun remove()\n    override fun getBoxQuads(options: BoxQuadOptions /* = definedExternally */): Array<DOMQuad>\n    override fun convertQuadFromNode(quad: dynamic, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMQuad\n    override fun convertRectFromNode(rect: DOMRectReadOnly, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMQuad\n    override fun convertPointFromNode(point: DOMPointInit, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMPoint\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\npublic external open class Audio(src: String = definedExternally) : HTMLAudioElement {\n    override var onabort: ((Event) -> dynamic)?\n    override var onblur: ((FocusEvent) -> dynamic)?\n    override var oncancel: ((Event) -> dynamic)?\n    override var oncanplay: ((Event) -> dynamic)?\n    override var oncanplaythrough: ((Event) -> dynamic)?\n    override var onchange: ((Event) -> dynamic)?\n    override var onclick: ((MouseEvent) -> dynamic)?\n    override var onclose: ((Event) -> dynamic)?\n    override var oncontextmenu: ((MouseEvent) -> dynamic)?\n    override var oncuechange: ((Event) -> dynamic)?\n    override var ondblclick: ((MouseEvent) -> dynamic)?\n    override var ondrag: ((DragEvent) -> dynamic)?\n    override var ondragend: ((DragEvent) -> dynamic)?\n    override var ondragenter: ((DragEvent) -> dynamic)?\n    override var ondragexit: ((DragEvent) -> dynamic)?\n    override var ondragleave: ((DragEvent) -> dynamic)?\n    override var ondragover: ((DragEvent) -> dynamic)?\n    override var ondragstart: ((DragEvent) -> dynamic)?\n    override var ondrop: ((DragEvent) -> dynamic)?\n    override var ondurationchange: ((Event) -> dynamic)?\n    override var onemptied: ((Event) -> dynamic)?\n    override var onended: ((Event) -> dynamic)?\n    override var onerror: ((dynamic, String, Int, Int, Any?) -> dynamic)?\n    override var onfocus: ((FocusEvent) -> dynamic)?\n    override var oninput: ((InputEvent) -> dynamic)?\n    override var oninvalid: ((Event) -> dynamic)?\n    override var onkeydown: ((KeyboardEvent) -> dynamic)?\n    override var onkeypress: ((KeyboardEvent) -> dynamic)?\n    override var onkeyup: ((KeyboardEvent) -> dynamic)?\n    override var onload: ((Event) -> dynamic)?\n    override var onloadeddata: ((Event) -> dynamic)?\n    override var onloadedmetadata: ((Event) -> dynamic)?\n    override var onloadend: ((Event) -> dynamic)?\n    override var onloadstart: ((ProgressEvent) -> dynamic)?\n    override var onmousedown: ((MouseEvent) -> dynamic)?\n    override var onmouseenter: ((MouseEvent) -> dynamic)?\n    override var onmouseleave: ((MouseEvent) -> dynamic)?\n    override var onmousemove: ((MouseEvent) -> dynamic)?\n    override var onmouseout: ((MouseEvent) -> dynamic)?\n    override var onmouseover: ((MouseEvent) -> dynamic)?\n    override var onmouseup: ((MouseEvent) -> dynamic)?\n    override var onwheel: ((WheelEvent) -> dynamic)?\n    override var onpause: ((Event) -> dynamic)?\n    override var onplay: ((Event) -> dynamic)?\n    override var onplaying: ((Event) -> dynamic)?\n    override var onprogress: ((ProgressEvent) -> dynamic)?\n    override var onratechange: ((Event) -> dynamic)?\n    override var onreset: ((Event) -> dynamic)?\n    override var onresize: ((Event) -> dynamic)?\n    override var onscroll: ((Event) -> dynamic)?\n    override var onseeked: ((Event) -> dynamic)?\n    override var onseeking: ((Event) -> dynamic)?\n    override var onselect: ((Event) -> dynamic)?\n    override var onshow: ((Event) -> dynamic)?\n    override var onstalled: ((Event) -> dynamic)?\n    override var onsubmit: ((Event) -> dynamic)?\n    override var onsuspend: ((Event) -> dynamic)?\n    override var ontimeupdate: ((Event) -> dynamic)?\n    override var ontoggle: ((Event) -> dynamic)?\n    override var onvolumechange: ((Event) -> dynamic)?\n    override var onwaiting: ((Event) -> dynamic)?\n    override var ongotpointercapture: ((PointerEvent) -> dynamic)?\n    override var onlostpointercapture: ((PointerEvent) -> dynamic)?\n    override var onpointerdown: ((PointerEvent) -> dynamic)?\n    override var onpointermove: ((PointerEvent) -> dynamic)?\n    override var onpointerup: ((PointerEvent) -> dynamic)?\n    override var onpointercancel: ((PointerEvent) -> dynamic)?\n    override var onpointerover: ((PointerEvent) -> dynamic)?\n    override var onpointerout: ((PointerEvent) -> dynamic)?\n    override var onpointerenter: ((PointerEvent) -> dynamic)?\n    override var onpointerleave: ((PointerEvent) -> dynamic)?\n    override var oncopy: ((ClipboardEvent) -> dynamic)?\n    override var oncut: ((ClipboardEvent) -> dynamic)?\n    override var onpaste: ((ClipboardEvent) -> dynamic)?\n    override var contentEditable: String\n    override val isContentEditable: Boolean\n    override val style: CSSStyleDeclaration\n    override val children: HTMLCollection\n    override val firstElementChild: Element?\n    override val lastElementChild: Element?\n    override val childElementCount: Int\n    override val previousElementSibling: Element?\n    override val nextElementSibling: Element?\n    override val assignedSlot: HTMLSlotElement?\n    override fun prepend(vararg nodes: dynamic)\n    override fun append(vararg nodes: dynamic)\n    override fun querySelector(selectors: String): Element?\n    override fun querySelectorAll(selectors: String): NodeList\n    override fun before(vararg nodes: dynamic)\n    override fun after(vararg nodes: dynamic)\n    override fun replaceWith(vararg nodes: dynamic)\n    override fun remove()\n    override fun getBoxQuads(options: BoxQuadOptions /* = definedExternally */): Array<DOMQuad>\n    override fun convertQuadFromNode(quad: dynamic, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMQuad\n    override fun convertRectFromNode(rect: DOMRectReadOnly, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMQuad\n    override fun convertPointFromNode(point: DOMPointInit, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMPoint\n\n    companion object {\n        val NETWORK_EMPTY: Short\n        val NETWORK_IDLE: Short\n        val NETWORK_LOADING: Short\n        val NETWORK_NO_SOURCE: Short\n        val HAVE_NOTHING: Short\n        val HAVE_METADATA: Short\n        val HAVE_CURRENT_DATA: Short\n        val HAVE_FUTURE_DATA: Short\n        val HAVE_ENOUGH_DATA: Short\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [Option](https://developer.mozilla.org/en/docs/Web/API/Option) to Kotlin\n */\npublic external open class Option(text: String = definedExternally, value: String = definedExternally, defaultSelected: Boolean = definedExternally, selected: Boolean = definedExternally) : HTMLOptionElement {\n    override var onabort: ((Event) -> dynamic)?\n    override var onblur: ((FocusEvent) -> dynamic)?\n    override var oncancel: ((Event) -> dynamic)?\n    override var oncanplay: ((Event) -> dynamic)?\n    override var oncanplaythrough: ((Event) -> dynamic)?\n    override var onchange: ((Event) -> dynamic)?\n    override var onclick: ((MouseEvent) -> dynamic)?\n    override var onclose: ((Event) -> dynamic)?\n    override var oncontextmenu: ((MouseEvent) -> dynamic)?\n    override var oncuechange: ((Event) -> dynamic)?\n    override var ondblclick: ((MouseEvent) -> dynamic)?\n    override var ondrag: ((DragEvent) -> dynamic)?\n    override var ondragend: ((DragEvent) -> dynamic)?\n    override var ondragenter: ((DragEvent) -> dynamic)?\n    override var ondragexit: ((DragEvent) -> dynamic)?\n    override var ondragleave: ((DragEvent) -> dynamic)?\n    override var ondragover: ((DragEvent) -> dynamic)?\n    override var ondragstart: ((DragEvent) -> dynamic)?\n    override var ondrop: ((DragEvent) -> dynamic)?\n    override var ondurationchange: ((Event) -> dynamic)?\n    override var onemptied: ((Event) -> dynamic)?\n    override var onended: ((Event) -> dynamic)?\n    override var onerror: ((dynamic, String, Int, Int, Any?) -> dynamic)?\n    override var onfocus: ((FocusEvent) -> dynamic)?\n    override var oninput: ((InputEvent) -> dynamic)?\n    override var oninvalid: ((Event) -> dynamic)?\n    override var onkeydown: ((KeyboardEvent) -> dynamic)?\n    override var onkeypress: ((KeyboardEvent) -> dynamic)?\n    override var onkeyup: ((KeyboardEvent) -> dynamic)?\n    override var onload: ((Event) -> dynamic)?\n    override var onloadeddata: ((Event) -> dynamic)?\n    override var onloadedmetadata: ((Event) -> dynamic)?\n    override var onloadend: ((Event) -> dynamic)?\n    override var onloadstart: ((ProgressEvent) -> dynamic)?\n    override var onmousedown: ((MouseEvent) -> dynamic)?\n    override var onmouseenter: ((MouseEvent) -> dynamic)?\n    override var onmouseleave: ((MouseEvent) -> dynamic)?\n    override var onmousemove: ((MouseEvent) -> dynamic)?\n    override var onmouseout: ((MouseEvent) -> dynamic)?\n    override var onmouseover: ((MouseEvent) -> dynamic)?\n    override var onmouseup: ((MouseEvent) -> dynamic)?\n    override var onwheel: ((WheelEvent) -> dynamic)?\n    override var onpause: ((Event) -> dynamic)?\n    override var onplay: ((Event) -> dynamic)?\n    override var onplaying: ((Event) -> dynamic)?\n    override var onprogress: ((ProgressEvent) -> dynamic)?\n    override var onratechange: ((Event) -> dynamic)?\n    override var onreset: ((Event) -> dynamic)?\n    override var onresize: ((Event) -> dynamic)?\n    override var onscroll: ((Event) -> dynamic)?\n    override var onseeked: ((Event) -> dynamic)?\n    override var onseeking: ((Event) -> dynamic)?\n    override var onselect: ((Event) -> dynamic)?\n    override var onshow: ((Event) -> dynamic)?\n    override var onstalled: ((Event) -> dynamic)?\n    override var onsubmit: ((Event) -> dynamic)?\n    override var onsuspend: ((Event) -> dynamic)?\n    override var ontimeupdate: ((Event) -> dynamic)?\n    override var ontoggle: ((Event) -> dynamic)?\n    override var onvolumechange: ((Event) -> dynamic)?\n    override var onwaiting: ((Event) -> dynamic)?\n    override var ongotpointercapture: ((PointerEvent) -> dynamic)?\n    override var onlostpointercapture: ((PointerEvent) -> dynamic)?\n    override var onpointerdown: ((PointerEvent) -> dynamic)?\n    override var onpointermove: ((PointerEvent) -> dynamic)?\n    override var onpointerup: ((PointerEvent) -> dynamic)?\n    override var onpointercancel: ((PointerEvent) -> dynamic)?\n    override var onpointerover: ((PointerEvent) -> dynamic)?\n    override var onpointerout: ((PointerEvent) -> dynamic)?\n    override var onpointerenter: ((PointerEvent) -> dynamic)?\n    override var onpointerleave: ((PointerEvent) -> dynamic)?\n    override var oncopy: ((ClipboardEvent) -> dynamic)?\n    override var oncut: ((ClipboardEvent) -> dynamic)?\n    override var onpaste: ((ClipboardEvent) -> dynamic)?\n    override var contentEditable: String\n    override val isContentEditable: Boolean\n    override val style: CSSStyleDeclaration\n    override val children: HTMLCollection\n    override val firstElementChild: Element?\n    override val lastElementChild: Element?\n    override val childElementCount: Int\n    override val previousElementSibling: Element?\n    override val nextElementSibling: Element?\n    override val assignedSlot: HTMLSlotElement?\n    override fun prepend(vararg nodes: dynamic)\n    override fun append(vararg nodes: dynamic)\n    override fun querySelector(selectors: String): Element?\n    override fun querySelectorAll(selectors: String): NodeList\n    override fun before(vararg nodes: dynamic)\n    override fun after(vararg nodes: dynamic)\n    override fun replaceWith(vararg nodes: dynamic)\n    override fun remove()\n    override fun getBoxQuads(options: BoxQuadOptions /* = definedExternally */): Array<DOMQuad>\n    override fun convertQuadFromNode(quad: dynamic, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMQuad\n    override fun convertRectFromNode(rect: DOMRectReadOnly, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMQuad\n    override fun convertPointFromNode(point: DOMPointInit, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMPoint\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\npublic external interface UnionElementOrHTMLCollection\n\npublic external interface UnionElementOrRadioNodeList\n\npublic external interface UnionHTMLOptGroupElementOrHTMLOptionElement\n\npublic external interface MediaProvider\n\npublic external interface UnionAudioTrackOrTextTrackOrVideoTrack\n\npublic external interface UnionElementOrMouseEvent\n\npublic external interface RenderingContext\n\npublic external interface HTMLOrSVGImageElement : CanvasImageSource\n\npublic external interface CanvasImageSource : ImageBitmapSource\n\npublic external interface ImageBitmapSource\n\npublic external interface UnionMessagePortOrWindowProxy\n\npublic external interface HTMLOrSVGScriptElement\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface DocumentReadyState {\n    companion object\n}\n\npublic inline val DocumentReadyState.Companion.LOADING: DocumentReadyState get() = \"loading\".asDynamic().unsafeCast<DocumentReadyState>()\n\npublic inline val DocumentReadyState.Companion.INTERACTIVE: DocumentReadyState get() = \"interactive\".asDynamic().unsafeCast<DocumentReadyState>()\n\npublic inline val DocumentReadyState.Companion.COMPLETE: DocumentReadyState get() = \"complete\".asDynamic().unsafeCast<DocumentReadyState>()\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface CanPlayTypeResult {\n    companion object\n}\n\npublic inline val CanPlayTypeResult.Companion.EMPTY: CanPlayTypeResult get() = \"\".asDynamic().unsafeCast<CanPlayTypeResult>()\n\npublic inline val CanPlayTypeResult.Companion.MAYBE: CanPlayTypeResult get() = \"maybe\".asDynamic().unsafeCast<CanPlayTypeResult>()\n\npublic inline val CanPlayTypeResult.Companion.PROBABLY: CanPlayTypeResult get() = \"probably\".asDynamic().unsafeCast<CanPlayTypeResult>()\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface TextTrackMode {\n    companion object\n}\n\npublic inline val TextTrackMode.Companion.DISABLED: TextTrackMode get() = \"disabled\".asDynamic().unsafeCast<TextTrackMode>()\n\npublic inline val TextTrackMode.Companion.HIDDEN: TextTrackMode get() = \"hidden\".asDynamic().unsafeCast<TextTrackMode>()\n\npublic inline val TextTrackMode.Companion.SHOWING: TextTrackMode get() = \"showing\".asDynamic().unsafeCast<TextTrackMode>()\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface TextTrackKind {\n    companion object\n}\n\npublic inline val TextTrackKind.Companion.SUBTITLES: TextTrackKind get() = \"subtitles\".asDynamic().unsafeCast<TextTrackKind>()\n\npublic inline val TextTrackKind.Companion.CAPTIONS: TextTrackKind get() = \"captions\".asDynamic().unsafeCast<TextTrackKind>()\n\npublic inline val TextTrackKind.Companion.DESCRIPTIONS: TextTrackKind get() = \"descriptions\".asDynamic().unsafeCast<TextTrackKind>()\n\npublic inline val TextTrackKind.Companion.CHAPTERS: TextTrackKind get() = \"chapters\".asDynamic().unsafeCast<TextTrackKind>()\n\npublic inline val TextTrackKind.Companion.METADATA: TextTrackKind get() = \"metadata\".asDynamic().unsafeCast<TextTrackKind>()\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface SelectionMode {\n    companion object\n}\n\npublic inline val SelectionMode.Companion.SELECT: SelectionMode get() = \"select\".asDynamic().unsafeCast<SelectionMode>()\n\npublic inline val SelectionMode.Companion.START: SelectionMode get() = \"start\".asDynamic().unsafeCast<SelectionMode>()\n\npublic inline val SelectionMode.Companion.END: SelectionMode get() = \"end\".asDynamic().unsafeCast<SelectionMode>()\n\npublic inline val SelectionMode.Companion.PRESERVE: SelectionMode get() = \"preserve\".asDynamic().unsafeCast<SelectionMode>()\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface CanvasFillRule {\n    companion object\n}\n\npublic inline val CanvasFillRule.Companion.NONZERO: CanvasFillRule get() = \"nonzero\".asDynamic().unsafeCast<CanvasFillRule>()\n\npublic inline val CanvasFillRule.Companion.EVENODD: CanvasFillRule get() = \"evenodd\".asDynamic().unsafeCast<CanvasFillRule>()\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface ImageSmoothingQuality {\n    companion object\n}\n\npublic inline val ImageSmoothingQuality.Companion.LOW: ImageSmoothingQuality get() = \"low\".asDynamic().unsafeCast<ImageSmoothingQuality>()\n\npublic inline val ImageSmoothingQuality.Companion.MEDIUM: ImageSmoothingQuality get() = \"medium\".asDynamic().unsafeCast<ImageSmoothingQuality>()\n\npublic inline val ImageSmoothingQuality.Companion.HIGH: ImageSmoothingQuality get() = \"high\".asDynamic().unsafeCast<ImageSmoothingQuality>()\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface CanvasLineCap {\n    companion object\n}\n\npublic inline val CanvasLineCap.Companion.BUTT: CanvasLineCap get() = \"butt\".asDynamic().unsafeCast<CanvasLineCap>()\n\npublic inline val CanvasLineCap.Companion.ROUND: CanvasLineCap get() = \"round\".asDynamic().unsafeCast<CanvasLineCap>()\n\npublic inline val CanvasLineCap.Companion.SQUARE: CanvasLineCap get() = \"square\".asDynamic().unsafeCast<CanvasLineCap>()\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface CanvasLineJoin {\n    companion object\n}\n\npublic inline val CanvasLineJoin.Companion.ROUND: CanvasLineJoin get() = \"round\".asDynamic().unsafeCast<CanvasLineJoin>()\n\npublic inline val CanvasLineJoin.Companion.BEVEL: CanvasLineJoin get() = \"bevel\".asDynamic().unsafeCast<CanvasLineJoin>()\n\npublic inline val CanvasLineJoin.Companion.MITER: CanvasLineJoin get() = \"miter\".asDynamic().unsafeCast<CanvasLineJoin>()\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface CanvasTextAlign {\n    companion object\n}\n\npublic inline val CanvasTextAlign.Companion.START: CanvasTextAlign get() = \"start\".asDynamic().unsafeCast<CanvasTextAlign>()\n\npublic inline val CanvasTextAlign.Companion.END: CanvasTextAlign get() = \"end\".asDynamic().unsafeCast<CanvasTextAlign>()\n\npublic inline val CanvasTextAlign.Companion.LEFT: CanvasTextAlign get() = \"left\".asDynamic().unsafeCast<CanvasTextAlign>()\n\npublic inline val CanvasTextAlign.Companion.RIGHT: CanvasTextAlign get() = \"right\".asDynamic().unsafeCast<CanvasTextAlign>()\n\npublic inline val CanvasTextAlign.Companion.CENTER: CanvasTextAlign get() = \"center\".asDynamic().unsafeCast<CanvasTextAlign>()\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface CanvasTextBaseline {\n    companion object\n}\n\npublic inline val CanvasTextBaseline.Companion.TOP: CanvasTextBaseline get() = \"top\".asDynamic().unsafeCast<CanvasTextBaseline>()\n\npublic inline val CanvasTextBaseline.Companion.HANGING: CanvasTextBaseline get() = \"hanging\".asDynamic().unsafeCast<CanvasTextBaseline>()\n\npublic inline val CanvasTextBaseline.Companion.MIDDLE: CanvasTextBaseline get() = \"middle\".asDynamic().unsafeCast<CanvasTextBaseline>()\n\npublic inline val CanvasTextBaseline.Companion.ALPHABETIC: CanvasTextBaseline get() = \"alphabetic\".asDynamic().unsafeCast<CanvasTextBaseline>()\n\npublic inline val CanvasTextBaseline.Companion.IDEOGRAPHIC: CanvasTextBaseline get() = \"ideographic\".asDynamic().unsafeCast<CanvasTextBaseline>()\n\npublic inline val CanvasTextBaseline.Companion.BOTTOM: CanvasTextBaseline get() = \"bottom\".asDynamic().unsafeCast<CanvasTextBaseline>()\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface CanvasDirection {\n    companion object\n}\n\npublic inline val CanvasDirection.Companion.LTR: CanvasDirection get() = \"ltr\".asDynamic().unsafeCast<CanvasDirection>()\n\npublic inline val CanvasDirection.Companion.RTL: CanvasDirection get() = \"rtl\".asDynamic().unsafeCast<CanvasDirection>()\n\npublic inline val CanvasDirection.Companion.INHERIT: CanvasDirection get() = \"inherit\".asDynamic().unsafeCast<CanvasDirection>()\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface ScrollRestoration {\n    companion object\n}\n\npublic inline val ScrollRestoration.Companion.AUTO: ScrollRestoration get() = \"auto\".asDynamic().unsafeCast<ScrollRestoration>()\n\npublic inline val ScrollRestoration.Companion.MANUAL: ScrollRestoration get() = \"manual\".asDynamic().unsafeCast<ScrollRestoration>()\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface ImageOrientation {\n    companion object\n}\n\npublic inline val ImageOrientation.Companion.NONE: ImageOrientation get() = \"none\".asDynamic().unsafeCast<ImageOrientation>()\n\npublic inline val ImageOrientation.Companion.FLIPY: ImageOrientation get() = \"flipY\".asDynamic().unsafeCast<ImageOrientation>()\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface PremultiplyAlpha {\n    companion object\n}\n\npublic inline val PremultiplyAlpha.Companion.NONE: PremultiplyAlpha get() = \"none\".asDynamic().unsafeCast<PremultiplyAlpha>()\n\npublic inline val PremultiplyAlpha.Companion.PREMULTIPLY: PremultiplyAlpha get() = \"premultiply\".asDynamic().unsafeCast<PremultiplyAlpha>()\n\npublic inline val PremultiplyAlpha.Companion.DEFAULT: PremultiplyAlpha get() = \"default\".asDynamic().unsafeCast<PremultiplyAlpha>()\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface ColorSpaceConversion {\n    companion object\n}\n\npublic inline val ColorSpaceConversion.Companion.NONE: ColorSpaceConversion get() = \"none\".asDynamic().unsafeCast<ColorSpaceConversion>()\n\npublic inline val ColorSpaceConversion.Companion.DEFAULT: ColorSpaceConversion get() = \"default\".asDynamic().unsafeCast<ColorSpaceConversion>()\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface ResizeQuality {\n    companion object\n}\n\npublic inline val ResizeQuality.Companion.PIXELATED: ResizeQuality get() = \"pixelated\".asDynamic().unsafeCast<ResizeQuality>()\n\npublic inline val ResizeQuality.Companion.LOW: ResizeQuality get() = \"low\".asDynamic().unsafeCast<ResizeQuality>()\n\npublic inline val ResizeQuality.Companion.MEDIUM: ResizeQuality get() = \"medium\".asDynamic().unsafeCast<ResizeQuality>()\n\npublic inline val ResizeQuality.Companion.HIGH: ResizeQuality get() = \"high\".asDynamic().unsafeCast<ResizeQuality>()\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface BinaryType {\n    companion object\n}\n\npublic inline val BinaryType.Companion.BLOB: BinaryType get() = \"blob\".asDynamic().unsafeCast<BinaryType>()\n\npublic inline val BinaryType.Companion.ARRAYBUFFER: BinaryType get() = \"arraybuffer\".asDynamic().unsafeCast<BinaryType>()\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface WorkerType {\n    companion object\n}\n\npublic inline val WorkerType.Companion.CLASSIC: WorkerType get() = \"classic\".asDynamic().unsafeCast<WorkerType>()\n\npublic inline val WorkerType.Companion.MODULE: WorkerType get() = \"module\".asDynamic().unsafeCast<WorkerType>()\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface ShadowRootMode {\n    companion object\n}\n\npublic inline val ShadowRootMode.Companion.OPEN: ShadowRootMode get() = \"open\".asDynamic().unsafeCast<ShadowRootMode>()\n\npublic inline val ShadowRootMode.Companion.CLOSED: ShadowRootMode get() = \"closed\".asDynamic().unsafeCast<ShadowRootMode>()\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface ScrollBehavior {\n    companion object\n}\n\npublic inline val ScrollBehavior.Companion.AUTO: ScrollBehavior get() = \"auto\".asDynamic().unsafeCast<ScrollBehavior>()\n\npublic inline val ScrollBehavior.Companion.INSTANT: ScrollBehavior get() = \"instant\".asDynamic().unsafeCast<ScrollBehavior>()\n\npublic inline val ScrollBehavior.Companion.SMOOTH: ScrollBehavior get() = \"smooth\".asDynamic().unsafeCast<ScrollBehavior>()\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface ScrollLogicalPosition {\n    companion object\n}\n\npublic inline val ScrollLogicalPosition.Companion.START: ScrollLogicalPosition get() = \"start\".asDynamic().unsafeCast<ScrollLogicalPosition>()\n\npublic inline val ScrollLogicalPosition.Companion.CENTER: ScrollLogicalPosition get() = \"center\".asDynamic().unsafeCast<ScrollLogicalPosition>()\n\npublic inline val ScrollLogicalPosition.Companion.END: ScrollLogicalPosition get() = \"end\".asDynamic().unsafeCast<ScrollLogicalPosition>()\n\npublic inline val ScrollLogicalPosition.Companion.NEAREST: ScrollLogicalPosition get() = \"nearest\".asDynamic().unsafeCast<ScrollLogicalPosition>()\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface CSSBoxType {\n    companion object\n}\n\npublic inline val CSSBoxType.Companion.MARGIN: CSSBoxType get() = \"margin\".asDynamic().unsafeCast<CSSBoxType>()\n\npublic inline val CSSBoxType.Companion.BORDER: CSSBoxType get() = \"border\".asDynamic().unsafeCast<CSSBoxType>()\n\npublic inline val CSSBoxType.Companion.PADDING: CSSBoxType get() = \"padding\".asDynamic().unsafeCast<CSSBoxType>()\n\npublic inline val CSSBoxType.Companion.CONTENT: CSSBoxType get() = \"content\".asDynamic().unsafeCast<CSSBoxType>()","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n// NOTE: THIS FILE IS AUTO-GENERATED, DO NOT EDIT!\n// See github.com/kotlin/dukat for details\n\npackage org.w3c.fetch\n\nimport kotlin.js.*\nimport org.khronos.webgl.*\nimport org.w3c.css.masking.*\nimport org.w3c.dom.*\nimport org.w3c.dom.clipboard.*\nimport org.w3c.dom.css.*\nimport org.w3c.dom.encryptedmedia.*\nimport org.w3c.dom.events.*\nimport org.w3c.dom.mediacapture.*\nimport org.w3c.dom.mediasource.*\nimport org.w3c.dom.parsing.*\nimport org.w3c.dom.pointerevents.*\nimport org.w3c.dom.svg.*\nimport org.w3c.dom.url.*\nimport org.w3c.files.*\nimport org.w3c.notifications.*\nimport org.w3c.performance.*\nimport org.w3c.workers.*\nimport org.w3c.xhr.*\n\n/**\n * Exposes the JavaScript [Headers](https://developer.mozilla.org/en/docs/Web/API/Headers) to Kotlin\n */\npublic external open class Headers(init: dynamic = definedExternally) {\n    fun append(name: String, value: String)\n    fun delete(name: String)\n    fun get(name: String): String?\n    fun has(name: String): Boolean\n    fun set(name: String, value: String)\n}\n\n/**\n * Exposes the JavaScript [Body](https://developer.mozilla.org/en/docs/Web/API/Body) to Kotlin\n */\npublic external interface Body {\n    val bodyUsed: Boolean\n    fun arrayBuffer(): Promise<ArrayBuffer>\n    fun blob(): Promise<Blob>\n    fun formData(): Promise<FormData>\n    fun json(): Promise<Any?>\n    fun text(): Promise<String>\n}\n\n/**\n * Exposes the JavaScript [Request](https://developer.mozilla.org/en/docs/Web/API/Request) to Kotlin\n */\npublic external open class Request(input: dynamic, init: RequestInit = definedExternally) : Body {\n    open val method: String\n    open val url: String\n    open val headers: Headers\n    open val type: RequestType\n    open val destination: RequestDestination\n    open val referrer: String\n    open val referrerPolicy: dynamic\n    open val mode: RequestMode\n    open val credentials: RequestCredentials\n    open val cache: RequestCache\n    open val redirect: RequestRedirect\n    open val integrity: String\n    open val keepalive: Boolean\n    override val bodyUsed: Boolean\n    fun clone(): Request\n    override fun arrayBuffer(): Promise<ArrayBuffer>\n    override fun blob(): Promise<Blob>\n    override fun formData(): Promise<FormData>\n    override fun json(): Promise<Any?>\n    override fun text(): Promise<String>\n}\n\npublic external interface RequestInit {\n    var method: String?\n        get() = definedExternally\n        set(value) = definedExternally\n    var headers: dynamic\n        get() = definedExternally\n        set(value) = definedExternally\n    var body: dynamic\n        get() = definedExternally\n        set(value) = definedExternally\n    var referrer: String?\n        get() = definedExternally\n        set(value) = definedExternally\n    var referrerPolicy: dynamic\n        get() = definedExternally\n        set(value) = definedExternally\n    var mode: RequestMode?\n        get() = definedExternally\n        set(value) = definedExternally\n    var credentials: RequestCredentials?\n        get() = definedExternally\n        set(value) = definedExternally\n    var cache: RequestCache?\n        get() = definedExternally\n        set(value) = definedExternally\n    var redirect: RequestRedirect?\n        get() = definedExternally\n        set(value) = definedExternally\n    var integrity: String?\n        get() = definedExternally\n        set(value) = definedExternally\n    var keepalive: Boolean?\n        get() = definedExternally\n        set(value) = definedExternally\n    var window: Any?\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun RequestInit(method: String? = undefined, headers: dynamic = undefined, body: dynamic = undefined, referrer: String? = undefined, referrerPolicy: dynamic = undefined, mode: RequestMode? = undefined, credentials: RequestCredentials? = undefined, cache: RequestCache? = undefined, redirect: RequestRedirect? = undefined, integrity: String? = undefined, keepalive: Boolean? = undefined, window: Any? = undefined): RequestInit {\n    val o = js(\"({})\")\n    o[\"method\"] = method\n    o[\"headers\"] = headers\n    o[\"body\"] = body\n    o[\"referrer\"] = referrer\n    o[\"referrerPolicy\"] = referrerPolicy\n    o[\"mode\"] = mode\n    o[\"credentials\"] = credentials\n    o[\"cache\"] = cache\n    o[\"redirect\"] = redirect\n    o[\"integrity\"] = integrity\n    o[\"keepalive\"] = keepalive\n    o[\"window\"] = window\n    return o\n}\n\n/**\n * Exposes the JavaScript [Response](https://developer.mozilla.org/en/docs/Web/API/Response) to Kotlin\n */\npublic external open class Response(body: dynamic = definedExternally, init: ResponseInit = definedExternally) : Body {\n    open val type: ResponseType\n    open val url: String\n    open val redirected: Boolean\n    open val status: Short\n    open val ok: Boolean\n    open val statusText: String\n    open val headers: Headers\n    open val body: dynamic\n    open val trailer: Promise<Headers>\n    override val bodyUsed: Boolean\n    fun clone(): Response\n    override fun arrayBuffer(): Promise<ArrayBuffer>\n    override fun blob(): Promise<Blob>\n    override fun formData(): Promise<FormData>\n    override fun json(): Promise<Any?>\n    override fun text(): Promise<String>\n\n    companion object {\n        fun error(): Response\n        fun redirect(url: String, status: Short = definedExternally): Response\n    }\n}\n\npublic external interface ResponseInit {\n    var status: Short? /* = 200 */\n        get() = definedExternally\n        set(value) = definedExternally\n    var statusText: String? /* = \"OK\" */\n        get() = definedExternally\n        set(value) = definedExternally\n    var headers: dynamic\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun ResponseInit(status: Short? = 200, statusText: String? = \"OK\", headers: dynamic = undefined): ResponseInit {\n    val o = js(\"({})\")\n    o[\"status\"] = status\n    o[\"statusText\"] = statusText\n    o[\"headers\"] = headers\n    return o\n}\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface RequestType {\n    companion object\n}\n\npublic inline val RequestType.Companion.EMPTY: RequestType get() = \"\".asDynamic().unsafeCast<RequestType>()\n\npublic inline val RequestType.Companion.AUDIO: RequestType get() = \"audio\".asDynamic().unsafeCast<RequestType>()\n\npublic inline val RequestType.Companion.FONT: RequestType get() = \"font\".asDynamic().unsafeCast<RequestType>()\n\npublic inline val RequestType.Companion.IMAGE: RequestType get() = \"image\".asDynamic().unsafeCast<RequestType>()\n\npublic inline val RequestType.Companion.SCRIPT: RequestType get() = \"script\".asDynamic().unsafeCast<RequestType>()\n\npublic inline val RequestType.Companion.STYLE: RequestType get() = \"style\".asDynamic().unsafeCast<RequestType>()\n\npublic inline val RequestType.Companion.TRACK: RequestType get() = \"track\".asDynamic().unsafeCast<RequestType>()\n\npublic inline val RequestType.Companion.VIDEO: RequestType get() = \"video\".asDynamic().unsafeCast<RequestType>()\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface RequestDestination {\n    companion object\n}\n\npublic inline val RequestDestination.Companion.EMPTY: RequestDestination get() = \"\".asDynamic().unsafeCast<RequestDestination>()\n\npublic inline val RequestDestination.Companion.DOCUMENT: RequestDestination get() = \"document\".asDynamic().unsafeCast<RequestDestination>()\n\npublic inline val RequestDestination.Companion.EMBED: RequestDestination get() = \"embed\".asDynamic().unsafeCast<RequestDestination>()\n\npublic inline val RequestDestination.Companion.FONT: RequestDestination get() = \"font\".asDynamic().unsafeCast<RequestDestination>()\n\npublic inline val RequestDestination.Companion.IMAGE: RequestDestination get() = \"image\".asDynamic().unsafeCast<RequestDestination>()\n\npublic inline val RequestDestination.Companion.MANIFEST: RequestDestination get() = \"manifest\".asDynamic().unsafeCast<RequestDestination>()\n\npublic inline val RequestDestination.Companion.MEDIA: RequestDestination get() = \"media\".asDynamic().unsafeCast<RequestDestination>()\n\npublic inline val RequestDestination.Companion.OBJECT: RequestDestination get() = \"object\".asDynamic().unsafeCast<RequestDestination>()\n\npublic inline val RequestDestination.Companion.REPORT: RequestDestination get() = \"report\".asDynamic().unsafeCast<RequestDestination>()\n\npublic inline val RequestDestination.Companion.SCRIPT: RequestDestination get() = \"script\".asDynamic().unsafeCast<RequestDestination>()\n\npublic inline val RequestDestination.Companion.SERVICEWORKER: RequestDestination get() = \"serviceworker\".asDynamic().unsafeCast<RequestDestination>()\n\npublic inline val RequestDestination.Companion.SHAREDWORKER: RequestDestination get() = \"sharedworker\".asDynamic().unsafeCast<RequestDestination>()\n\npublic inline val RequestDestination.Companion.STYLE: RequestDestination get() = \"style\".asDynamic().unsafeCast<RequestDestination>()\n\npublic inline val RequestDestination.Companion.WORKER: RequestDestination get() = \"worker\".asDynamic().unsafeCast<RequestDestination>()\n\npublic inline val RequestDestination.Companion.XSLT: RequestDestination get() = \"xslt\".asDynamic().unsafeCast<RequestDestination>()\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface RequestMode {\n    companion object\n}\n\npublic inline val RequestMode.Companion.NAVIGATE: RequestMode get() = \"navigate\".asDynamic().unsafeCast<RequestMode>()\n\npublic inline val RequestMode.Companion.SAME_ORIGIN: RequestMode get() = \"same-origin\".asDynamic().unsafeCast<RequestMode>()\n\npublic inline val RequestMode.Companion.NO_CORS: RequestMode get() = \"no-cors\".asDynamic().unsafeCast<RequestMode>()\n\npublic inline val RequestMode.Companion.CORS: RequestMode get() = \"cors\".asDynamic().unsafeCast<RequestMode>()\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface RequestCredentials {\n    companion object\n}\n\npublic inline val RequestCredentials.Companion.OMIT: RequestCredentials get() = \"omit\".asDynamic().unsafeCast<RequestCredentials>()\n\npublic inline val RequestCredentials.Companion.SAME_ORIGIN: RequestCredentials get() = \"same-origin\".asDynamic().unsafeCast<RequestCredentials>()\n\npublic inline val RequestCredentials.Companion.INCLUDE: RequestCredentials get() = \"include\".asDynamic().unsafeCast<RequestCredentials>()\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface RequestCache {\n    companion object\n}\n\npublic inline val RequestCache.Companion.DEFAULT: RequestCache get() = \"default\".asDynamic().unsafeCast<RequestCache>()\n\npublic inline val RequestCache.Companion.NO_STORE: RequestCache get() = \"no-store\".asDynamic().unsafeCast<RequestCache>()\n\npublic inline val RequestCache.Companion.RELOAD: RequestCache get() = \"reload\".asDynamic().unsafeCast<RequestCache>()\n\npublic inline val RequestCache.Companion.NO_CACHE: RequestCache get() = \"no-cache\".asDynamic().unsafeCast<RequestCache>()\n\npublic inline val RequestCache.Companion.FORCE_CACHE: RequestCache get() = \"force-cache\".asDynamic().unsafeCast<RequestCache>()\n\npublic inline val RequestCache.Companion.ONLY_IF_CACHED: RequestCache get() = \"only-if-cached\".asDynamic().unsafeCast<RequestCache>()\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface RequestRedirect {\n    companion object\n}\n\npublic inline val RequestRedirect.Companion.FOLLOW: RequestRedirect get() = \"follow\".asDynamic().unsafeCast<RequestRedirect>()\n\npublic inline val RequestRedirect.Companion.ERROR: RequestRedirect get() = \"error\".asDynamic().unsafeCast<RequestRedirect>()\n\npublic inline val RequestRedirect.Companion.MANUAL: RequestRedirect get() = \"manual\".asDynamic().unsafeCast<RequestRedirect>()\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface ResponseType {\n    companion object\n}\n\npublic inline val ResponseType.Companion.BASIC: ResponseType get() = \"basic\".asDynamic().unsafeCast<ResponseType>()\n\npublic inline val ResponseType.Companion.CORS: ResponseType get() = \"cors\".asDynamic().unsafeCast<ResponseType>()\n\npublic inline val ResponseType.Companion.DEFAULT: ResponseType get() = \"default\".asDynamic().unsafeCast<ResponseType>()\n\npublic inline val ResponseType.Companion.ERROR: ResponseType get() = \"error\".asDynamic().unsafeCast<ResponseType>()\n\npublic inline val ResponseType.Companion.OPAQUE: ResponseType get() = \"opaque\".asDynamic().unsafeCast<ResponseType>()\n\npublic inline val ResponseType.Companion.OPAQUEREDIRECT: ResponseType get() = \"opaqueredirect\".asDynamic().unsafeCast<ResponseType>()","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n// NOTE: THIS FILE IS AUTO-GENERATED, DO NOT EDIT!\n// See github.com/kotlin/dukat for details\n\npackage org.w3c.dom.mediacapture\n\nimport kotlin.js.*\nimport org.khronos.webgl.*\nimport org.w3c.css.masking.*\nimport org.w3c.dom.*\nimport org.w3c.dom.clipboard.*\nimport org.w3c.dom.css.*\nimport org.w3c.dom.encryptedmedia.*\nimport org.w3c.dom.events.*\nimport org.w3c.dom.mediasource.*\nimport org.w3c.dom.parsing.*\nimport org.w3c.dom.pointerevents.*\nimport org.w3c.dom.svg.*\nimport org.w3c.dom.url.*\nimport org.w3c.fetch.*\nimport org.w3c.files.*\nimport org.w3c.notifications.*\nimport org.w3c.performance.*\nimport org.w3c.workers.*\nimport org.w3c.xhr.*\n\n/**\n * Exposes the JavaScript [MediaStream](https://developer.mozilla.org/en/docs/Web/API/MediaStream) to Kotlin\n */\npublic external open class MediaStream() : EventTarget, MediaProvider {\n    constructor(stream: MediaStream)\n    constructor(tracks: Array<MediaStreamTrack>)\n    open val id: String\n    open val active: Boolean\n    var onaddtrack: ((MediaStreamTrackEvent) -> dynamic)?\n    var onremovetrack: ((MediaStreamTrackEvent) -> dynamic)?\n    fun getAudioTracks(): Array<MediaStreamTrack>\n    fun getVideoTracks(): Array<MediaStreamTrack>\n    fun getTracks(): Array<MediaStreamTrack>\n    fun getTrackById(trackId: String): MediaStreamTrack?\n    fun addTrack(track: MediaStreamTrack)\n    fun removeTrack(track: MediaStreamTrack)\n    fun clone(): MediaStream\n}\n\n/**\n * Exposes the JavaScript [MediaStreamTrack](https://developer.mozilla.org/en/docs/Web/API/MediaStreamTrack) to Kotlin\n */\npublic external abstract class MediaStreamTrack : EventTarget {\n    open val kind: String\n    open val id: String\n    open val label: String\n    open var enabled: Boolean\n    open val muted: Boolean\n    open var onmute: ((Event) -> dynamic)?\n    open var onunmute: ((Event) -> dynamic)?\n    open val readyState: MediaStreamTrackState\n    open var onended: ((Event) -> dynamic)?\n    open var onoverconstrained: ((Event) -> dynamic)?\n    fun clone(): MediaStreamTrack\n    fun stop()\n    fun getCapabilities(): MediaTrackCapabilities\n    fun getConstraints(): MediaTrackConstraints\n    fun getSettings(): MediaTrackSettings\n    fun applyConstraints(constraints: MediaTrackConstraints = definedExternally): Promise<Unit>\n}\n\n/**\n * Exposes the JavaScript [MediaTrackSupportedConstraints](https://developer.mozilla.org/en/docs/Web/API/MediaTrackSupportedConstraints) to Kotlin\n */\npublic external interface MediaTrackSupportedConstraints {\n    var width: Boolean? /* = true */\n        get() = definedExternally\n        set(value) = definedExternally\n    var height: Boolean? /* = true */\n        get() = definedExternally\n        set(value) = definedExternally\n    var aspectRatio: Boolean? /* = true */\n        get() = definedExternally\n        set(value) = definedExternally\n    var frameRate: Boolean? /* = true */\n        get() = definedExternally\n        set(value) = definedExternally\n    var facingMode: Boolean? /* = true */\n        get() = definedExternally\n        set(value) = definedExternally\n    var resizeMode: Boolean? /* = true */\n        get() = definedExternally\n        set(value) = definedExternally\n    var volume: Boolean? /* = true */\n        get() = definedExternally\n        set(value) = definedExternally\n    var sampleRate: Boolean? /* = true */\n        get() = definedExternally\n        set(value) = definedExternally\n    var sampleSize: Boolean? /* = true */\n        get() = definedExternally\n        set(value) = definedExternally\n    var echoCancellation: Boolean? /* = true */\n        get() = definedExternally\n        set(value) = definedExternally\n    var autoGainControl: Boolean? /* = true */\n        get() = definedExternally\n        set(value) = definedExternally\n    var noiseSuppression: Boolean? /* = true */\n        get() = definedExternally\n        set(value) = definedExternally\n    var latency: Boolean? /* = true */\n        get() = definedExternally\n        set(value) = definedExternally\n    var channelCount: Boolean? /* = true */\n        get() = definedExternally\n        set(value) = definedExternally\n    var deviceId: Boolean? /* = true */\n        get() = definedExternally\n        set(value) = definedExternally\n    var groupId: Boolean? /* = true */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun MediaTrackSupportedConstraints(width: Boolean? = true, height: Boolean? = true, aspectRatio: Boolean? = true, frameRate: Boolean? = true, facingMode: Boolean? = true, resizeMode: Boolean? = true, volume: Boolean? = true, sampleRate: Boolean? = true, sampleSize: Boolean? = true, echoCancellation: Boolean? = true, autoGainControl: Boolean? = true, noiseSuppression: Boolean? = true, latency: Boolean? = true, channelCount: Boolean? = true, deviceId: Boolean? = true, groupId: Boolean? = true): MediaTrackSupportedConstraints {\n    val o = js(\"({})\")\n    o[\"width\"] = width\n    o[\"height\"] = height\n    o[\"aspectRatio\"] = aspectRatio\n    o[\"frameRate\"] = frameRate\n    o[\"facingMode\"] = facingMode\n    o[\"resizeMode\"] = resizeMode\n    o[\"volume\"] = volume\n    o[\"sampleRate\"] = sampleRate\n    o[\"sampleSize\"] = sampleSize\n    o[\"echoCancellation\"] = echoCancellation\n    o[\"autoGainControl\"] = autoGainControl\n    o[\"noiseSuppression\"] = noiseSuppression\n    o[\"latency\"] = latency\n    o[\"channelCount\"] = channelCount\n    o[\"deviceId\"] = deviceId\n    o[\"groupId\"] = groupId\n    return o\n}\n\npublic external interface MediaTrackCapabilities {\n    var width: ULongRange?\n        get() = definedExternally\n        set(value) = definedExternally\n    var height: ULongRange?\n        get() = definedExternally\n        set(value) = definedExternally\n    var aspectRatio: DoubleRange?\n        get() = definedExternally\n        set(value) = definedExternally\n    var frameRate: DoubleRange?\n        get() = definedExternally\n        set(value) = definedExternally\n    var facingMode: Array<String>?\n        get() = definedExternally\n        set(value) = definedExternally\n    var resizeMode: Array<String>?\n        get() = definedExternally\n        set(value) = definedExternally\n    var volume: DoubleRange?\n        get() = definedExternally\n        set(value) = definedExternally\n    var sampleRate: ULongRange?\n        get() = definedExternally\n        set(value) = definedExternally\n    var sampleSize: ULongRange?\n        get() = definedExternally\n        set(value) = definedExternally\n    var echoCancellation: Array<Boolean>?\n        get() = definedExternally\n        set(value) = definedExternally\n    var autoGainControl: Array<Boolean>?\n        get() = definedExternally\n        set(value) = definedExternally\n    var noiseSuppression: Array<Boolean>?\n        get() = definedExternally\n        set(value) = definedExternally\n    var latency: DoubleRange?\n        get() = definedExternally\n        set(value) = definedExternally\n    var channelCount: ULongRange?\n        get() = definedExternally\n        set(value) = definedExternally\n    var deviceId: String?\n        get() = definedExternally\n        set(value) = definedExternally\n    var groupId: String?\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun MediaTrackCapabilities(width: ULongRange? = undefined, height: ULongRange? = undefined, aspectRatio: DoubleRange? = undefined, frameRate: DoubleRange? = undefined, facingMode: Array<String>? = undefined, resizeMode: Array<String>? = undefined, volume: DoubleRange? = undefined, sampleRate: ULongRange? = undefined, sampleSize: ULongRange? = undefined, echoCancellation: Array<Boolean>? = undefined, autoGainControl: Array<Boolean>? = undefined, noiseSuppression: Array<Boolean>? = undefined, latency: DoubleRange? = undefined, channelCount: ULongRange? = undefined, deviceId: String? = undefined, groupId: String? = undefined): MediaTrackCapabilities {\n    val o = js(\"({})\")\n    o[\"width\"] = width\n    o[\"height\"] = height\n    o[\"aspectRatio\"] = aspectRatio\n    o[\"frameRate\"] = frameRate\n    o[\"facingMode\"] = facingMode\n    o[\"resizeMode\"] = resizeMode\n    o[\"volume\"] = volume\n    o[\"sampleRate\"] = sampleRate\n    o[\"sampleSize\"] = sampleSize\n    o[\"echoCancellation\"] = echoCancellation\n    o[\"autoGainControl\"] = autoGainControl\n    o[\"noiseSuppression\"] = noiseSuppression\n    o[\"latency\"] = latency\n    o[\"channelCount\"] = channelCount\n    o[\"deviceId\"] = deviceId\n    o[\"groupId\"] = groupId\n    return o\n}\n\n/**\n * Exposes the JavaScript [MediaTrackConstraints](https://developer.mozilla.org/en/docs/Web/API/MediaTrackConstraints) to Kotlin\n */\npublic external interface MediaTrackConstraints : MediaTrackConstraintSet {\n    var advanced: Array<MediaTrackConstraintSet>?\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun MediaTrackConstraints(advanced: Array<MediaTrackConstraintSet>? = undefined, width: dynamic = undefined, height: dynamic = undefined, aspectRatio: dynamic = undefined, frameRate: dynamic = undefined, facingMode: dynamic = undefined, resizeMode: dynamic = undefined, volume: dynamic = undefined, sampleRate: dynamic = undefined, sampleSize: dynamic = undefined, echoCancellation: dynamic = undefined, autoGainControl: dynamic = undefined, noiseSuppression: dynamic = undefined, latency: dynamic = undefined, channelCount: dynamic = undefined, deviceId: dynamic = undefined, groupId: dynamic = undefined): MediaTrackConstraints {\n    val o = js(\"({})\")\n    o[\"advanced\"] = advanced\n    o[\"width\"] = width\n    o[\"height\"] = height\n    o[\"aspectRatio\"] = aspectRatio\n    o[\"frameRate\"] = frameRate\n    o[\"facingMode\"] = facingMode\n    o[\"resizeMode\"] = resizeMode\n    o[\"volume\"] = volume\n    o[\"sampleRate\"] = sampleRate\n    o[\"sampleSize\"] = sampleSize\n    o[\"echoCancellation\"] = echoCancellation\n    o[\"autoGainControl\"] = autoGainControl\n    o[\"noiseSuppression\"] = noiseSuppression\n    o[\"latency\"] = latency\n    o[\"channelCount\"] = channelCount\n    o[\"deviceId\"] = deviceId\n    o[\"groupId\"] = groupId\n    return o\n}\n\npublic external interface MediaTrackConstraintSet {\n    var width: dynamic\n        get() = definedExternally\n        set(value) = definedExternally\n    var height: dynamic\n        get() = definedExternally\n        set(value) = definedExternally\n    var aspectRatio: dynamic\n        get() = definedExternally\n        set(value) = definedExternally\n    var frameRate: dynamic\n        get() = definedExternally\n        set(value) = definedExternally\n    var facingMode: dynamic\n        get() = definedExternally\n        set(value) = definedExternally\n    var resizeMode: dynamic\n        get() = definedExternally\n        set(value) = definedExternally\n    var volume: dynamic\n        get() = definedExternally\n        set(value) = definedExternally\n    var sampleRate: dynamic\n        get() = definedExternally\n        set(value) = definedExternally\n    var sampleSize: dynamic\n        get() = definedExternally\n        set(value) = definedExternally\n    var echoCancellation: dynamic\n        get() = definedExternally\n        set(value) = definedExternally\n    var autoGainControl: dynamic\n        get() = definedExternally\n        set(value) = definedExternally\n    var noiseSuppression: dynamic\n        get() = definedExternally\n        set(value) = definedExternally\n    var latency: dynamic\n        get() = definedExternally\n        set(value) = definedExternally\n    var channelCount: dynamic\n        get() = definedExternally\n        set(value) = definedExternally\n    var deviceId: dynamic\n        get() = definedExternally\n        set(value) = definedExternally\n    var groupId: dynamic\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun MediaTrackConstraintSet(width: dynamic = undefined, height: dynamic = undefined, aspectRatio: dynamic = undefined, frameRate: dynamic = undefined, facingMode: dynamic = undefined, resizeMode: dynamic = undefined, volume: dynamic = undefined, sampleRate: dynamic = undefined, sampleSize: dynamic = undefined, echoCancellation: dynamic = undefined, autoGainControl: dynamic = undefined, noiseSuppression: dynamic = undefined, latency: dynamic = undefined, channelCount: dynamic = undefined, deviceId: dynamic = undefined, groupId: dynamic = undefined): MediaTrackConstraintSet {\n    val o = js(\"({})\")\n    o[\"width\"] = width\n    o[\"height\"] = height\n    o[\"aspectRatio\"] = aspectRatio\n    o[\"frameRate\"] = frameRate\n    o[\"facingMode\"] = facingMode\n    o[\"resizeMode\"] = resizeMode\n    o[\"volume\"] = volume\n    o[\"sampleRate\"] = sampleRate\n    o[\"sampleSize\"] = sampleSize\n    o[\"echoCancellation\"] = echoCancellation\n    o[\"autoGainControl\"] = autoGainControl\n    o[\"noiseSuppression\"] = noiseSuppression\n    o[\"latency\"] = latency\n    o[\"channelCount\"] = channelCount\n    o[\"deviceId\"] = deviceId\n    o[\"groupId\"] = groupId\n    return o\n}\n\n/**\n * Exposes the JavaScript [MediaTrackSettings](https://developer.mozilla.org/en/docs/Web/API/MediaTrackSettings) to Kotlin\n */\npublic external interface MediaTrackSettings {\n    var width: Int?\n        get() = definedExternally\n        set(value) = definedExternally\n    var height: Int?\n        get() = definedExternally\n        set(value) = definedExternally\n    var aspectRatio: Double?\n        get() = definedExternally\n        set(value) = definedExternally\n    var frameRate: Double?\n        get() = definedExternally\n        set(value) = definedExternally\n    var facingMode: String?\n        get() = definedExternally\n        set(value) = definedExternally\n    var resizeMode: String?\n        get() = definedExternally\n        set(value) = definedExternally\n    var volume: Double?\n        get() = definedExternally\n        set(value) = definedExternally\n    var sampleRate: Int?\n        get() = definedExternally\n        set(value) = definedExternally\n    var sampleSize: Int?\n        get() = definedExternally\n        set(value) = definedExternally\n    var echoCancellation: Boolean?\n        get() = definedExternally\n        set(value) = definedExternally\n    var autoGainControl: Boolean?\n        get() = definedExternally\n        set(value) = definedExternally\n    var noiseSuppression: Boolean?\n        get() = definedExternally\n        set(value) = definedExternally\n    var latency: Double?\n        get() = definedExternally\n        set(value) = definedExternally\n    var channelCount: Int?\n        get() = definedExternally\n        set(value) = definedExternally\n    var deviceId: String?\n        get() = definedExternally\n        set(value) = definedExternally\n    var groupId: String?\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun MediaTrackSettings(width: Int? = undefined, height: Int? = undefined, aspectRatio: Double? = undefined, frameRate: Double? = undefined, facingMode: String? = undefined, resizeMode: String? = undefined, volume: Double? = undefined, sampleRate: Int? = undefined, sampleSize: Int? = undefined, echoCancellation: Boolean? = undefined, autoGainControl: Boolean? = undefined, noiseSuppression: Boolean? = undefined, latency: Double? = undefined, channelCount: Int? = undefined, deviceId: String? = undefined, groupId: String? = undefined): MediaTrackSettings {\n    val o = js(\"({})\")\n    o[\"width\"] = width\n    o[\"height\"] = height\n    o[\"aspectRatio\"] = aspectRatio\n    o[\"frameRate\"] = frameRate\n    o[\"facingMode\"] = facingMode\n    o[\"resizeMode\"] = resizeMode\n    o[\"volume\"] = volume\n    o[\"sampleRate\"] = sampleRate\n    o[\"sampleSize\"] = sampleSize\n    o[\"echoCancellation\"] = echoCancellation\n    o[\"autoGainControl\"] = autoGainControl\n    o[\"noiseSuppression\"] = noiseSuppression\n    o[\"latency\"] = latency\n    o[\"channelCount\"] = channelCount\n    o[\"deviceId\"] = deviceId\n    o[\"groupId\"] = groupId\n    return o\n}\n\n/**\n * Exposes the JavaScript [MediaStreamTrackEvent](https://developer.mozilla.org/en/docs/Web/API/MediaStreamTrackEvent) to Kotlin\n */\npublic external open class MediaStreamTrackEvent(type: String, eventInitDict: MediaStreamTrackEventInit) : Event {\n    open val track: MediaStreamTrack\n\n    companion object {\n        val NONE: Short\n        val CAPTURING_PHASE: Short\n        val AT_TARGET: Short\n        val BUBBLING_PHASE: Short\n    }\n}\n\npublic external interface MediaStreamTrackEventInit : EventInit {\n    var track: MediaStreamTrack?\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun MediaStreamTrackEventInit(track: MediaStreamTrack?, bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): MediaStreamTrackEventInit {\n    val o = js(\"({})\")\n    o[\"track\"] = track\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n    return o\n}\n\npublic external open class OverconstrainedErrorEvent(type: String, eventInitDict: OverconstrainedErrorEventInit) : Event {\n    open val error: dynamic\n\n    companion object {\n        val NONE: Short\n        val CAPTURING_PHASE: Short\n        val AT_TARGET: Short\n        val BUBBLING_PHASE: Short\n    }\n}\n\npublic external interface OverconstrainedErrorEventInit : EventInit {\n    var error: dynamic /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun OverconstrainedErrorEventInit(error: dynamic = null, bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): OverconstrainedErrorEventInit {\n    val o = js(\"({})\")\n    o[\"error\"] = error\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n    return o\n}\n\n/**\n * Exposes the JavaScript [MediaDevices](https://developer.mozilla.org/en/docs/Web/API/MediaDevices) to Kotlin\n */\npublic external abstract class MediaDevices : EventTarget {\n    open var ondevicechange: ((Event) -> dynamic)?\n    fun enumerateDevices(): Promise<Array<MediaDeviceInfo>>\n    fun getSupportedConstraints(): MediaTrackSupportedConstraints\n    fun getUserMedia(constraints: MediaStreamConstraints = definedExternally): Promise<MediaStream>\n}\n\n/**\n * Exposes the JavaScript [MediaDeviceInfo](https://developer.mozilla.org/en/docs/Web/API/MediaDeviceInfo) to Kotlin\n */\npublic external abstract class MediaDeviceInfo {\n    open val deviceId: String\n    open val kind: MediaDeviceKind\n    open val label: String\n    open val groupId: String\n    fun toJSON(): dynamic\n}\n\npublic external abstract class InputDeviceInfo : MediaDeviceInfo {\n    fun getCapabilities(): MediaTrackCapabilities\n}\n\n/**\n * Exposes the JavaScript [MediaStreamConstraints](https://developer.mozilla.org/en/docs/Web/API/MediaStreamConstraints) to Kotlin\n */\npublic external interface MediaStreamConstraints {\n    var video: dynamic /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n    var audio: dynamic /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun MediaStreamConstraints(video: dynamic = false, audio: dynamic = false): MediaStreamConstraints {\n    val o = js(\"({})\")\n    o[\"video\"] = video\n    o[\"audio\"] = audio\n    return o\n}\n\npublic external interface ConstrainablePattern {\n    var onoverconstrained: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    fun getCapabilities(): Capabilities\n    fun getConstraints(): Constraints\n    fun getSettings(): Settings\n    fun applyConstraints(constraints: Constraints = definedExternally): Promise<Unit>\n}\n\n/**\n * Exposes the JavaScript [DoubleRange](https://developer.mozilla.org/en/docs/Web/API/DoubleRange) to Kotlin\n */\npublic external interface DoubleRange {\n    var max: Double?\n        get() = definedExternally\n        set(value) = definedExternally\n    var min: Double?\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun DoubleRange(max: Double? = undefined, min: Double? = undefined): DoubleRange {\n    val o = js(\"({})\")\n    o[\"max\"] = max\n    o[\"min\"] = min\n    return o\n}\n\npublic external interface ConstrainDoubleRange : DoubleRange {\n    var exact: Double?\n        get() = definedExternally\n        set(value) = definedExternally\n    var ideal: Double?\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun ConstrainDoubleRange(exact: Double? = undefined, ideal: Double? = undefined, max: Double? = undefined, min: Double? = undefined): ConstrainDoubleRange {\n    val o = js(\"({})\")\n    o[\"exact\"] = exact\n    o[\"ideal\"] = ideal\n    o[\"max\"] = max\n    o[\"min\"] = min\n    return o\n}\n\npublic external interface ULongRange {\n    var max: Int?\n        get() = definedExternally\n        set(value) = definedExternally\n    var min: Int?\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun ULongRange(max: Int? = undefined, min: Int? = undefined): ULongRange {\n    val o = js(\"({})\")\n    o[\"max\"] = max\n    o[\"min\"] = min\n    return o\n}\n\npublic external interface ConstrainULongRange : ULongRange {\n    var exact: Int?\n        get() = definedExternally\n        set(value) = definedExternally\n    var ideal: Int?\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun ConstrainULongRange(exact: Int? = undefined, ideal: Int? = undefined, max: Int? = undefined, min: Int? = undefined): ConstrainULongRange {\n    val o = js(\"({})\")\n    o[\"exact\"] = exact\n    o[\"ideal\"] = ideal\n    o[\"max\"] = max\n    o[\"min\"] = min\n    return o\n}\n\n/**\n * Exposes the JavaScript [ConstrainBooleanParameters](https://developer.mozilla.org/en/docs/Web/API/ConstrainBooleanParameters) to Kotlin\n */\npublic external interface ConstrainBooleanParameters {\n    var exact: Boolean?\n        get() = definedExternally\n        set(value) = definedExternally\n    var ideal: Boolean?\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun ConstrainBooleanParameters(exact: Boolean? = undefined, ideal: Boolean? = undefined): ConstrainBooleanParameters {\n    val o = js(\"({})\")\n    o[\"exact\"] = exact\n    o[\"ideal\"] = ideal\n    return o\n}\n\n/**\n * Exposes the JavaScript [ConstrainDOMStringParameters](https://developer.mozilla.org/en/docs/Web/API/ConstrainDOMStringParameters) to Kotlin\n */\npublic external interface ConstrainDOMStringParameters {\n    var exact: dynamic\n        get() = definedExternally\n        set(value) = definedExternally\n    var ideal: dynamic\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun ConstrainDOMStringParameters(exact: dynamic = undefined, ideal: dynamic = undefined): ConstrainDOMStringParameters {\n    val o = js(\"({})\")\n    o[\"exact\"] = exact\n    o[\"ideal\"] = ideal\n    return o\n}\n\npublic external interface Capabilities\n\n@kotlin.internal.InlineOnly\npublic inline fun Capabilities(): Capabilities {\n    val o = js(\"({})\")\n    return o\n}\n\npublic external interface Settings\n\n@kotlin.internal.InlineOnly\npublic inline fun Settings(): Settings {\n    val o = js(\"({})\")\n    return o\n}\n\npublic external interface ConstraintSet\n\n@kotlin.internal.InlineOnly\npublic inline fun ConstraintSet(): ConstraintSet {\n    val o = js(\"({})\")\n    return o\n}\n\npublic external interface Constraints : ConstraintSet {\n    var advanced: Array<ConstraintSet>?\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun Constraints(advanced: Array<ConstraintSet>? = undefined): Constraints {\n    val o = js(\"({})\")\n    o[\"advanced\"] = advanced\n    return o\n}\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface MediaStreamTrackState {\n    companion object\n}\n\npublic inline val MediaStreamTrackState.Companion.LIVE: MediaStreamTrackState get() = \"live\".asDynamic().unsafeCast<MediaStreamTrackState>()\n\npublic inline val MediaStreamTrackState.Companion.ENDED: MediaStreamTrackState get() = \"ended\".asDynamic().unsafeCast<MediaStreamTrackState>()\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface VideoFacingModeEnum {\n    companion object\n}\n\npublic inline val VideoFacingModeEnum.Companion.USER: VideoFacingModeEnum get() = \"user\".asDynamic().unsafeCast<VideoFacingModeEnum>()\n\npublic inline val VideoFacingModeEnum.Companion.ENVIRONMENT: VideoFacingModeEnum get() = \"environment\".asDynamic().unsafeCast<VideoFacingModeEnum>()\n\npublic inline val VideoFacingModeEnum.Companion.LEFT: VideoFacingModeEnum get() = \"left\".asDynamic().unsafeCast<VideoFacingModeEnum>()\n\npublic inline val VideoFacingModeEnum.Companion.RIGHT: VideoFacingModeEnum get() = \"right\".asDynamic().unsafeCast<VideoFacingModeEnum>()\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface VideoResizeModeEnum {\n    companion object\n}\n\npublic inline val VideoResizeModeEnum.Companion.NONE: VideoResizeModeEnum get() = \"none\".asDynamic().unsafeCast<VideoResizeModeEnum>()\n\npublic inline val VideoResizeModeEnum.Companion.CROP_AND_SCALE: VideoResizeModeEnum get() = \"crop-and-scale\".asDynamic().unsafeCast<VideoResizeModeEnum>()\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface MediaDeviceKind {\n    companion object\n}\n\npublic inline val MediaDeviceKind.Companion.AUDIOINPUT: MediaDeviceKind get() = \"audioinput\".asDynamic().unsafeCast<MediaDeviceKind>()\n\npublic inline val MediaDeviceKind.Companion.AUDIOOUTPUT: MediaDeviceKind get() = \"audiooutput\".asDynamic().unsafeCast<MediaDeviceKind>()\n\npublic inline val MediaDeviceKind.Companion.VIDEOINPUT: MediaDeviceKind get() = \"videoinput\".asDynamic().unsafeCast<MediaDeviceKind>()","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n// NOTE: THIS FILE IS AUTO-GENERATED, DO NOT EDIT!\n// See github.com/kotlin/dukat for details\n\npackage org.w3c.dom.mediasource\n\nimport kotlin.js.*\nimport org.khronos.webgl.*\nimport org.w3c.css.masking.*\nimport org.w3c.dom.*\nimport org.w3c.dom.clipboard.*\nimport org.w3c.dom.css.*\nimport org.w3c.dom.encryptedmedia.*\nimport org.w3c.dom.events.*\nimport org.w3c.dom.mediacapture.*\nimport org.w3c.dom.parsing.*\nimport org.w3c.dom.pointerevents.*\nimport org.w3c.dom.svg.*\nimport org.w3c.dom.url.*\nimport org.w3c.fetch.*\nimport org.w3c.files.*\nimport org.w3c.notifications.*\nimport org.w3c.performance.*\nimport org.w3c.workers.*\nimport org.w3c.xhr.*\n\npublic external open class MediaSource : EventTarget, MediaProvider {\n    open val sourceBuffers: SourceBufferList\n    open val activeSourceBuffers: SourceBufferList\n    open val readyState: ReadyState\n    var duration: Double\n    var onsourceopen: ((Event) -> dynamic)?\n    var onsourceended: ((Event) -> dynamic)?\n    var onsourceclose: ((Event) -> dynamic)?\n    fun addSourceBuffer(type: String): SourceBuffer\n    fun removeSourceBuffer(sourceBuffer: SourceBuffer)\n    fun endOfStream(error: EndOfStreamError = definedExternally)\n    fun setLiveSeekableRange(start: Double, end: Double)\n    fun clearLiveSeekableRange()\n\n    companion object {\n        fun isTypeSupported(type: String): Boolean\n    }\n}\n\npublic external abstract class SourceBuffer : EventTarget {\n    open var mode: AppendMode\n    open val updating: Boolean\n    open val buffered: TimeRanges\n    open var timestampOffset: Double\n    open val audioTracks: AudioTrackList\n    open val videoTracks: VideoTrackList\n    open val textTracks: TextTrackList\n    open var appendWindowStart: Double\n    open var appendWindowEnd: Double\n    open var onupdatestart: ((Event) -> dynamic)?\n    open var onupdate: ((Event) -> dynamic)?\n    open var onupdateend: ((Event) -> dynamic)?\n    open var onerror: ((Event) -> dynamic)?\n    open var onabort: ((Event) -> dynamic)?\n    fun appendBuffer(data: dynamic)\n    fun abort()\n    fun remove(start: Double, end: Double)\n}\n\npublic external abstract class SourceBufferList : EventTarget {\n    open val length: Int\n    open var onaddsourcebuffer: ((Event) -> dynamic)?\n    open var onremovesourcebuffer: ((Event) -> dynamic)?\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun SourceBufferList.get(index: Int): SourceBuffer? = asDynamic()[index]\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface ReadyState {\n    companion object\n}\n\npublic inline val ReadyState.Companion.CLOSED: ReadyState get() = \"closed\".asDynamic().unsafeCast<ReadyState>()\n\npublic inline val ReadyState.Companion.OPEN: ReadyState get() = \"open\".asDynamic().unsafeCast<ReadyState>()\n\npublic inline val ReadyState.Companion.ENDED: ReadyState get() = \"ended\".asDynamic().unsafeCast<ReadyState>()\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface EndOfStreamError {\n    companion object\n}\n\npublic inline val EndOfStreamError.Companion.NETWORK: EndOfStreamError get() = \"network\".asDynamic().unsafeCast<EndOfStreamError>()\n\npublic inline val EndOfStreamError.Companion.DECODE: EndOfStreamError get() = \"decode\".asDynamic().unsafeCast<EndOfStreamError>()\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface AppendMode {\n    companion object\n}\n\npublic inline val AppendMode.Companion.SEGMENTS: AppendMode get() = \"segments\".asDynamic().unsafeCast<AppendMode>()\n\npublic inline val AppendMode.Companion.SEQUENCE: AppendMode get() = \"sequence\".asDynamic().unsafeCast<AppendMode>()","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n// NOTE: THIS FILE IS AUTO-GENERATED, DO NOT EDIT!\n// See github.com/kotlin/dukat for details\n\npackage org.w3c.dom.pointerevents\n\nimport kotlin.js.*\nimport org.khronos.webgl.*\nimport org.w3c.css.masking.*\nimport org.w3c.dom.*\nimport org.w3c.dom.clipboard.*\nimport org.w3c.dom.css.*\nimport org.w3c.dom.encryptedmedia.*\nimport org.w3c.dom.events.*\nimport org.w3c.dom.mediacapture.*\nimport org.w3c.dom.mediasource.*\nimport org.w3c.dom.parsing.*\nimport org.w3c.dom.svg.*\nimport org.w3c.dom.url.*\nimport org.w3c.fetch.*\nimport org.w3c.files.*\nimport org.w3c.notifications.*\nimport org.w3c.performance.*\nimport org.w3c.workers.*\nimport org.w3c.xhr.*\n\npublic external interface PointerEventInit : MouseEventInit {\n    var pointerId: Int? /* = 0 */\n        get() = definedExternally\n        set(value) = definedExternally\n    var width: Double? /* = 1.0 */\n        get() = definedExternally\n        set(value) = definedExternally\n    var height: Double? /* = 1.0 */\n        get() = definedExternally\n        set(value) = definedExternally\n    var pressure: Float? /* = 0f */\n        get() = definedExternally\n        set(value) = definedExternally\n    var tangentialPressure: Float? /* = 0f */\n        get() = definedExternally\n        set(value) = definedExternally\n    var tiltX: Int? /* = 0 */\n        get() = definedExternally\n        set(value) = definedExternally\n    var tiltY: Int? /* = 0 */\n        get() = definedExternally\n        set(value) = definedExternally\n    var twist: Int? /* = 0 */\n        get() = definedExternally\n        set(value) = definedExternally\n    var pointerType: String? /* = \"\" */\n        get() = definedExternally\n        set(value) = definedExternally\n    var isPrimary: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun PointerEventInit(pointerId: Int? = 0, width: Double? = 1.0, height: Double? = 1.0, pressure: Float? = 0f, tangentialPressure: Float? = 0f, tiltX: Int? = 0, tiltY: Int? = 0, twist: Int? = 0, pointerType: String? = \"\", isPrimary: Boolean? = false, screenX: Int? = 0, screenY: Int? = 0, clientX: Int? = 0, clientY: Int? = 0, button: Short? = 0, buttons: Short? = 0, relatedTarget: EventTarget? = null, region: String? = null, ctrlKey: Boolean? = false, shiftKey: Boolean? = false, altKey: Boolean? = false, metaKey: Boolean? = false, modifierAltGraph: Boolean? = false, modifierCapsLock: Boolean? = false, modifierFn: Boolean? = false, modifierFnLock: Boolean? = false, modifierHyper: Boolean? = false, modifierNumLock: Boolean? = false, modifierScrollLock: Boolean? = false, modifierSuper: Boolean? = false, modifierSymbol: Boolean? = false, modifierSymbolLock: Boolean? = false, view: Window? = null, detail: Int? = 0, bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): PointerEventInit {\n    val o = js(\"({})\")\n    o[\"pointerId\"] = pointerId\n    o[\"width\"] = width\n    o[\"height\"] = height\n    o[\"pressure\"] = pressure\n    o[\"tangentialPressure\"] = tangentialPressure\n    o[\"tiltX\"] = tiltX\n    o[\"tiltY\"] = tiltY\n    o[\"twist\"] = twist\n    o[\"pointerType\"] = pointerType\n    o[\"isPrimary\"] = isPrimary\n    o[\"screenX\"] = screenX\n    o[\"screenY\"] = screenY\n    o[\"clientX\"] = clientX\n    o[\"clientY\"] = clientY\n    o[\"button\"] = button\n    o[\"buttons\"] = buttons\n    o[\"relatedTarget\"] = relatedTarget\n    o[\"region\"] = region\n    o[\"ctrlKey\"] = ctrlKey\n    o[\"shiftKey\"] = shiftKey\n    o[\"altKey\"] = altKey\n    o[\"metaKey\"] = metaKey\n    o[\"modifierAltGraph\"] = modifierAltGraph\n    o[\"modifierCapsLock\"] = modifierCapsLock\n    o[\"modifierFn\"] = modifierFn\n    o[\"modifierFnLock\"] = modifierFnLock\n    o[\"modifierHyper\"] = modifierHyper\n    o[\"modifierNumLock\"] = modifierNumLock\n    o[\"modifierScrollLock\"] = modifierScrollLock\n    o[\"modifierSuper\"] = modifierSuper\n    o[\"modifierSymbol\"] = modifierSymbol\n    o[\"modifierSymbolLock\"] = modifierSymbolLock\n    o[\"view\"] = view\n    o[\"detail\"] = detail\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n    return o\n}\n\n/**\n * Exposes the JavaScript [PointerEvent](https://developer.mozilla.org/en/docs/Web/API/PointerEvent) to Kotlin\n */\npublic external open class PointerEvent(type: String, eventInitDict: PointerEventInit = definedExternally) : MouseEvent {\n    open val pointerId: Int\n    open val width: Double\n    open val height: Double\n    open val pressure: Float\n    open val tangentialPressure: Float\n    open val tiltX: Int\n    open val tiltY: Int\n    open val twist: Int\n    open val pointerType: String\n    open val isPrimary: Boolean\n\n    companion object {\n        val NONE: Short\n        val CAPTURING_PHASE: Short\n        val AT_TARGET: Short\n        val BUBBLING_PHASE: Short\n    }\n}","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n// NOTE: THIS FILE IS AUTO-GENERATED, DO NOT EDIT!\n// See github.com/kotlin/dukat for details\n\npackage org.w3c.dom.svg\n\nimport kotlin.js.*\nimport org.khronos.webgl.*\nimport org.w3c.css.masking.*\nimport org.w3c.dom.*\nimport org.w3c.dom.clipboard.*\nimport org.w3c.dom.css.*\nimport org.w3c.dom.encryptedmedia.*\nimport org.w3c.dom.events.*\nimport org.w3c.dom.mediacapture.*\nimport org.w3c.dom.mediasource.*\nimport org.w3c.dom.parsing.*\nimport org.w3c.dom.pointerevents.*\nimport org.w3c.dom.url.*\nimport org.w3c.fetch.*\nimport org.w3c.files.*\nimport org.w3c.notifications.*\nimport org.w3c.performance.*\nimport org.w3c.workers.*\nimport org.w3c.xhr.*\n\n/**\n * Exposes the JavaScript [SVGElement](https://developer.mozilla.org/en/docs/Web/API/SVGElement) to Kotlin\n */\npublic external abstract class SVGElement : Element, ElementCSSInlineStyle, GlobalEventHandlers, SVGElementInstance {\n    open val dataset: DOMStringMap\n    open val ownerSVGElement: SVGSVGElement?\n    open val viewportElement: SVGElement?\n    open var tabIndex: Int\n    fun focus()\n    fun blur()\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\npublic external interface SVGBoundingBoxOptions {\n    var fill: Boolean? /* = true */\n        get() = definedExternally\n        set(value) = definedExternally\n    var stroke: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n    var markers: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n    var clipped: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun SVGBoundingBoxOptions(fill: Boolean? = true, stroke: Boolean? = false, markers: Boolean? = false, clipped: Boolean? = false): SVGBoundingBoxOptions {\n    val o = js(\"({})\")\n    o[\"fill\"] = fill\n    o[\"stroke\"] = stroke\n    o[\"markers\"] = markers\n    o[\"clipped\"] = clipped\n    return o\n}\n\n/**\n * Exposes the JavaScript [SVGGraphicsElement](https://developer.mozilla.org/en/docs/Web/API/SVGGraphicsElement) to Kotlin\n */\npublic external abstract class SVGGraphicsElement : SVGElement, SVGTests {\n    open val transform: SVGAnimatedTransformList\n    fun getBBox(options: SVGBoundingBoxOptions = definedExternally): DOMRect\n    fun getCTM(): DOMMatrix?\n    fun getScreenCTM(): DOMMatrix?\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [SVGGeometryElement](https://developer.mozilla.org/en/docs/Web/API/SVGGeometryElement) to Kotlin\n */\npublic external abstract class SVGGeometryElement : SVGGraphicsElement {\n    open val pathLength: SVGAnimatedNumber\n    fun isPointInFill(point: DOMPoint): Boolean\n    fun isPointInStroke(point: DOMPoint): Boolean\n    fun getTotalLength(): Float\n    fun getPointAtLength(distance: Float): DOMPoint\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [SVGNumber](https://developer.mozilla.org/en/docs/Web/API/SVGNumber) to Kotlin\n */\npublic external abstract class SVGNumber {\n    open var value: Float\n}\n\n/**\n * Exposes the JavaScript [SVGLength](https://developer.mozilla.org/en/docs/Web/API/SVGLength) to Kotlin\n */\npublic external abstract class SVGLength {\n    open val unitType: Short\n    open var value: Float\n    open var valueInSpecifiedUnits: Float\n    open var valueAsString: String\n    fun newValueSpecifiedUnits(unitType: Short, valueInSpecifiedUnits: Float)\n    fun convertToSpecifiedUnits(unitType: Short)\n\n    companion object {\n        val SVG_LENGTHTYPE_UNKNOWN: Short\n        val SVG_LENGTHTYPE_NUMBER: Short\n        val SVG_LENGTHTYPE_PERCENTAGE: Short\n        val SVG_LENGTHTYPE_EMS: Short\n        val SVG_LENGTHTYPE_EXS: Short\n        val SVG_LENGTHTYPE_PX: Short\n        val SVG_LENGTHTYPE_CM: Short\n        val SVG_LENGTHTYPE_MM: Short\n        val SVG_LENGTHTYPE_IN: Short\n        val SVG_LENGTHTYPE_PT: Short\n        val SVG_LENGTHTYPE_PC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [SVGAngle](https://developer.mozilla.org/en/docs/Web/API/SVGAngle) to Kotlin\n */\npublic external abstract class SVGAngle {\n    open val unitType: Short\n    open var value: Float\n    open var valueInSpecifiedUnits: Float\n    open var valueAsString: String\n    fun newValueSpecifiedUnits(unitType: Short, valueInSpecifiedUnits: Float)\n    fun convertToSpecifiedUnits(unitType: Short)\n\n    companion object {\n        val SVG_ANGLETYPE_UNKNOWN: Short\n        val SVG_ANGLETYPE_UNSPECIFIED: Short\n        val SVG_ANGLETYPE_DEG: Short\n        val SVG_ANGLETYPE_RAD: Short\n        val SVG_ANGLETYPE_GRAD: Short\n    }\n}\n\npublic external abstract class SVGNameList {\n    open val length: Int\n    open val numberOfItems: Int\n    fun clear()\n    fun initialize(newItem: dynamic): dynamic\n    fun insertItemBefore(newItem: dynamic, index: Int): dynamic\n    fun replaceItem(newItem: dynamic, index: Int): dynamic\n    fun removeItem(index: Int): dynamic\n    fun appendItem(newItem: dynamic): dynamic\n    fun getItem(index: Int): dynamic\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun SVGNameList.get(index: Int): dynamic = asDynamic()[index]\n\n@kotlin.internal.InlineOnly\npublic inline operator fun SVGNameList.set(index: Int, newItem: dynamic) { asDynamic()[index] = newItem }\n\n/**\n * Exposes the JavaScript [SVGNumberList](https://developer.mozilla.org/en/docs/Web/API/SVGNumberList) to Kotlin\n */\npublic external abstract class SVGNumberList {\n    open val length: Int\n    open val numberOfItems: Int\n    fun clear()\n    fun initialize(newItem: SVGNumber): SVGNumber\n    fun insertItemBefore(newItem: SVGNumber, index: Int): SVGNumber\n    fun replaceItem(newItem: SVGNumber, index: Int): SVGNumber\n    fun removeItem(index: Int): SVGNumber\n    fun appendItem(newItem: SVGNumber): SVGNumber\n    fun getItem(index: Int): SVGNumber\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun SVGNumberList.get(index: Int): SVGNumber? = asDynamic()[index]\n\n@kotlin.internal.InlineOnly\npublic inline operator fun SVGNumberList.set(index: Int, newItem: SVGNumber) { asDynamic()[index] = newItem }\n\n/**\n * Exposes the JavaScript [SVGLengthList](https://developer.mozilla.org/en/docs/Web/API/SVGLengthList) to Kotlin\n */\npublic external abstract class SVGLengthList {\n    open val length: Int\n    open val numberOfItems: Int\n    fun clear()\n    fun initialize(newItem: SVGLength): SVGLength\n    fun insertItemBefore(newItem: SVGLength, index: Int): SVGLength\n    fun replaceItem(newItem: SVGLength, index: Int): SVGLength\n    fun removeItem(index: Int): SVGLength\n    fun appendItem(newItem: SVGLength): SVGLength\n    fun getItem(index: Int): SVGLength\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun SVGLengthList.get(index: Int): SVGLength? = asDynamic()[index]\n\n@kotlin.internal.InlineOnly\npublic inline operator fun SVGLengthList.set(index: Int, newItem: SVGLength) { asDynamic()[index] = newItem }\n\n/**\n * Exposes the JavaScript [SVGAnimatedBoolean](https://developer.mozilla.org/en/docs/Web/API/SVGAnimatedBoolean) to Kotlin\n */\npublic external abstract class SVGAnimatedBoolean {\n    open var baseVal: Boolean\n    open val animVal: Boolean\n}\n\n/**\n * Exposes the JavaScript [SVGAnimatedEnumeration](https://developer.mozilla.org/en/docs/Web/API/SVGAnimatedEnumeration) to Kotlin\n */\npublic external abstract class SVGAnimatedEnumeration {\n    open var baseVal: Short\n    open val animVal: Short\n}\n\n/**\n * Exposes the JavaScript [SVGAnimatedInteger](https://developer.mozilla.org/en/docs/Web/API/SVGAnimatedInteger) to Kotlin\n */\npublic external abstract class SVGAnimatedInteger {\n    open var baseVal: Int\n    open val animVal: Int\n}\n\n/**\n * Exposes the JavaScript [SVGAnimatedNumber](https://developer.mozilla.org/en/docs/Web/API/SVGAnimatedNumber) to Kotlin\n */\npublic external abstract class SVGAnimatedNumber {\n    open var baseVal: Float\n    open val animVal: Float\n}\n\n/**\n * Exposes the JavaScript [SVGAnimatedLength](https://developer.mozilla.org/en/docs/Web/API/SVGAnimatedLength) to Kotlin\n */\npublic external abstract class SVGAnimatedLength {\n    open val baseVal: SVGLength\n    open val animVal: SVGLength\n}\n\n/**\n * Exposes the JavaScript [SVGAnimatedAngle](https://developer.mozilla.org/en/docs/Web/API/SVGAnimatedAngle) to Kotlin\n */\npublic external abstract class SVGAnimatedAngle {\n    open val baseVal: SVGAngle\n    open val animVal: SVGAngle\n}\n\n/**\n * Exposes the JavaScript [SVGAnimatedString](https://developer.mozilla.org/en/docs/Web/API/SVGAnimatedString) to Kotlin\n */\npublic external abstract class SVGAnimatedString {\n    open var baseVal: String\n    open val animVal: String\n}\n\n/**\n * Exposes the JavaScript [SVGAnimatedRect](https://developer.mozilla.org/en/docs/Web/API/SVGAnimatedRect) to Kotlin\n */\npublic external abstract class SVGAnimatedRect {\n    open val baseVal: DOMRect\n    open val animVal: DOMRectReadOnly\n}\n\n/**\n * Exposes the JavaScript [SVGAnimatedNumberList](https://developer.mozilla.org/en/docs/Web/API/SVGAnimatedNumberList) to Kotlin\n */\npublic external abstract class SVGAnimatedNumberList {\n    open val baseVal: SVGNumberList\n    open val animVal: SVGNumberList\n}\n\n/**\n * Exposes the JavaScript [SVGAnimatedLengthList](https://developer.mozilla.org/en/docs/Web/API/SVGAnimatedLengthList) to Kotlin\n */\npublic external abstract class SVGAnimatedLengthList {\n    open val baseVal: SVGLengthList\n    open val animVal: SVGLengthList\n}\n\n/**\n * Exposes the JavaScript [SVGStringList](https://developer.mozilla.org/en/docs/Web/API/SVGStringList) to Kotlin\n */\npublic external abstract class SVGStringList {\n    open val length: Int\n    open val numberOfItems: Int\n    fun clear()\n    fun initialize(newItem: String): String\n    fun insertItemBefore(newItem: String, index: Int): String\n    fun replaceItem(newItem: String, index: Int): String\n    fun removeItem(index: Int): String\n    fun appendItem(newItem: String): String\n    fun getItem(index: Int): String\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun SVGStringList.get(index: Int): String? = asDynamic()[index]\n\n@kotlin.internal.InlineOnly\npublic inline operator fun SVGStringList.set(index: Int, newItem: String) { asDynamic()[index] = newItem }\n\n/**\n * Exposes the JavaScript [SVGUnitTypes](https://developer.mozilla.org/en/docs/Web/API/SVGUnitTypes) to Kotlin\n */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface SVGUnitTypes {\n    companion object {\n        val SVG_UNIT_TYPE_UNKNOWN: Short\n        val SVG_UNIT_TYPE_USERSPACEONUSE: Short\n        val SVG_UNIT_TYPE_OBJECTBOUNDINGBOX: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [SVGTests](https://developer.mozilla.org/en/docs/Web/API/SVGTests) to Kotlin\n */\npublic external interface SVGTests {\n    val requiredExtensions: SVGStringList\n    val systemLanguage: SVGStringList\n}\n\npublic external interface SVGFitToViewBox {\n    val viewBox: SVGAnimatedRect\n    val preserveAspectRatio: SVGAnimatedPreserveAspectRatio\n}\n\n/**\n * Exposes the JavaScript [SVGZoomAndPan](https://developer.mozilla.org/en/docs/Web/API/SVGZoomAndPan) to Kotlin\n */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface SVGZoomAndPan {\n    var zoomAndPan: Short\n\n    companion object {\n        val SVG_ZOOMANDPAN_UNKNOWN: Short\n        val SVG_ZOOMANDPAN_DISABLE: Short\n        val SVG_ZOOMANDPAN_MAGNIFY: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [SVGURIReference](https://developer.mozilla.org/en/docs/Web/API/SVGURIReference) to Kotlin\n */\npublic external interface SVGURIReference {\n    val href: SVGAnimatedString\n}\n\n/**\n * Exposes the JavaScript [SVGSVGElement](https://developer.mozilla.org/en/docs/Web/API/SVGSVGElement) to Kotlin\n */\npublic external abstract class SVGSVGElement : SVGGraphicsElement, SVGFitToViewBox, SVGZoomAndPan, WindowEventHandlers {\n    open val x: SVGAnimatedLength\n    open val y: SVGAnimatedLength\n    open val width: SVGAnimatedLength\n    open val height: SVGAnimatedLength\n    open var currentScale: Float\n    open val currentTranslate: DOMPointReadOnly\n    fun getIntersectionList(rect: DOMRectReadOnly, referenceElement: SVGElement?): NodeList\n    fun getEnclosureList(rect: DOMRectReadOnly, referenceElement: SVGElement?): NodeList\n    fun checkIntersection(element: SVGElement, rect: DOMRectReadOnly): Boolean\n    fun checkEnclosure(element: SVGElement, rect: DOMRectReadOnly): Boolean\n    fun deselectAll()\n    fun createSVGNumber(): SVGNumber\n    fun createSVGLength(): SVGLength\n    fun createSVGAngle(): SVGAngle\n    fun createSVGPoint(): DOMPoint\n    fun createSVGMatrix(): DOMMatrix\n    fun createSVGRect(): DOMRect\n    fun createSVGTransform(): SVGTransform\n    fun createSVGTransformFromMatrix(matrix: DOMMatrixReadOnly): SVGTransform\n    fun getElementById(elementId: String): Element\n    fun suspendRedraw(maxWaitMilliseconds: Int): Int\n    fun unsuspendRedraw(suspendHandleID: Int)\n    fun unsuspendRedrawAll()\n    fun forceRedraw()\n\n    companion object {\n        val SVG_ZOOMANDPAN_UNKNOWN: Short\n        val SVG_ZOOMANDPAN_DISABLE: Short\n        val SVG_ZOOMANDPAN_MAGNIFY: Short\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [SVGGElement](https://developer.mozilla.org/en/docs/Web/API/SVGGElement) to Kotlin\n */\npublic external abstract class SVGGElement : SVGGraphicsElement {\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\npublic external abstract class SVGUnknownElement : SVGGraphicsElement {\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [SVGDefsElement](https://developer.mozilla.org/en/docs/Web/API/SVGDefsElement) to Kotlin\n */\npublic external abstract class SVGDefsElement : SVGGraphicsElement {\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [SVGDescElement](https://developer.mozilla.org/en/docs/Web/API/SVGDescElement) to Kotlin\n */\npublic external abstract class SVGDescElement : SVGElement {\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [SVGMetadataElement](https://developer.mozilla.org/en/docs/Web/API/SVGMetadataElement) to Kotlin\n */\npublic external abstract class SVGMetadataElement : SVGElement {\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [SVGTitleElement](https://developer.mozilla.org/en/docs/Web/API/SVGTitleElement) to Kotlin\n */\npublic external abstract class SVGTitleElement : SVGElement {\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [SVGSymbolElement](https://developer.mozilla.org/en/docs/Web/API/SVGSymbolElement) to Kotlin\n */\npublic external abstract class SVGSymbolElement : SVGGraphicsElement, SVGFitToViewBox {\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [SVGUseElement](https://developer.mozilla.org/en/docs/Web/API/SVGUseElement) to Kotlin\n */\npublic external abstract class SVGUseElement : SVGGraphicsElement, SVGURIReference {\n    open val x: SVGAnimatedLength\n    open val y: SVGAnimatedLength\n    open val width: SVGAnimatedLength\n    open val height: SVGAnimatedLength\n    open val instanceRoot: SVGElement?\n    open val animatedInstanceRoot: SVGElement?\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\npublic external open class SVGUseElementShadowRoot : ShadowRoot {\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\npublic external interface SVGElementInstance {\n    val correspondingElement: SVGElement?\n        get() = definedExternally\n    val correspondingUseElement: SVGUseElement?\n        get() = definedExternally\n}\n\npublic external open class ShadowAnimation(source: dynamic, newTarget: dynamic) {\n    open val sourceAnimation: dynamic\n}\n\n/**\n * Exposes the JavaScript [SVGSwitchElement](https://developer.mozilla.org/en/docs/Web/API/SVGSwitchElement) to Kotlin\n */\npublic external abstract class SVGSwitchElement : SVGGraphicsElement {\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\npublic external interface GetSVGDocument {\n    fun getSVGDocument(): Document\n}\n\n/**\n * Exposes the JavaScript [SVGStyleElement](https://developer.mozilla.org/en/docs/Web/API/SVGStyleElement) to Kotlin\n */\npublic external abstract class SVGStyleElement : SVGElement, LinkStyle {\n    open var type: String\n    open var media: String\n    open var title: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [SVGTransform](https://developer.mozilla.org/en/docs/Web/API/SVGTransform) to Kotlin\n */\npublic external abstract class SVGTransform {\n    open val type: Short\n    open val matrix: DOMMatrix\n    open val angle: Float\n    fun setMatrix(matrix: DOMMatrixReadOnly)\n    fun setTranslate(tx: Float, ty: Float)\n    fun setScale(sx: Float, sy: Float)\n    fun setRotate(angle: Float, cx: Float, cy: Float)\n    fun setSkewX(angle: Float)\n    fun setSkewY(angle: Float)\n\n    companion object {\n        val SVG_TRANSFORM_UNKNOWN: Short\n        val SVG_TRANSFORM_MATRIX: Short\n        val SVG_TRANSFORM_TRANSLATE: Short\n        val SVG_TRANSFORM_SCALE: Short\n        val SVG_TRANSFORM_ROTATE: Short\n        val SVG_TRANSFORM_SKEWX: Short\n        val SVG_TRANSFORM_SKEWY: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [SVGTransformList](https://developer.mozilla.org/en/docs/Web/API/SVGTransformList) to Kotlin\n */\npublic external abstract class SVGTransformList {\n    open val length: Int\n    open val numberOfItems: Int\n    fun clear()\n    fun initialize(newItem: SVGTransform): SVGTransform\n    fun insertItemBefore(newItem: SVGTransform, index: Int): SVGTransform\n    fun replaceItem(newItem: SVGTransform, index: Int): SVGTransform\n    fun removeItem(index: Int): SVGTransform\n    fun appendItem(newItem: SVGTransform): SVGTransform\n    fun createSVGTransformFromMatrix(matrix: DOMMatrixReadOnly): SVGTransform\n    fun consolidate(): SVGTransform?\n    fun getItem(index: Int): SVGTransform\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun SVGTransformList.get(index: Int): SVGTransform? = asDynamic()[index]\n\n@kotlin.internal.InlineOnly\npublic inline operator fun SVGTransformList.set(index: Int, newItem: SVGTransform) { asDynamic()[index] = newItem }\n\n/**\n * Exposes the JavaScript [SVGAnimatedTransformList](https://developer.mozilla.org/en/docs/Web/API/SVGAnimatedTransformList) to Kotlin\n */\npublic external abstract class SVGAnimatedTransformList {\n    open val baseVal: SVGTransformList\n    open val animVal: SVGTransformList\n}\n\n/**\n * Exposes the JavaScript [SVGPreserveAspectRatio](https://developer.mozilla.org/en/docs/Web/API/SVGPreserveAspectRatio) to Kotlin\n */\npublic external abstract class SVGPreserveAspectRatio {\n    open var align: Short\n    open var meetOrSlice: Short\n\n    companion object {\n        val SVG_PRESERVEASPECTRATIO_UNKNOWN: Short\n        val SVG_PRESERVEASPECTRATIO_NONE: Short\n        val SVG_PRESERVEASPECTRATIO_XMINYMIN: Short\n        val SVG_PRESERVEASPECTRATIO_XMIDYMIN: Short\n        val SVG_PRESERVEASPECTRATIO_XMAXYMIN: Short\n        val SVG_PRESERVEASPECTRATIO_XMINYMID: Short\n        val SVG_PRESERVEASPECTRATIO_XMIDYMID: Short\n        val SVG_PRESERVEASPECTRATIO_XMAXYMID: Short\n        val SVG_PRESERVEASPECTRATIO_XMINYMAX: Short\n        val SVG_PRESERVEASPECTRATIO_XMIDYMAX: Short\n        val SVG_PRESERVEASPECTRATIO_XMAXYMAX: Short\n        val SVG_MEETORSLICE_UNKNOWN: Short\n        val SVG_MEETORSLICE_MEET: Short\n        val SVG_MEETORSLICE_SLICE: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [SVGAnimatedPreserveAspectRatio](https://developer.mozilla.org/en/docs/Web/API/SVGAnimatedPreserveAspectRatio) to Kotlin\n */\npublic external abstract class SVGAnimatedPreserveAspectRatio {\n    open val baseVal: SVGPreserveAspectRatio\n    open val animVal: SVGPreserveAspectRatio\n}\n\n/**\n * Exposes the JavaScript [SVGPathElement](https://developer.mozilla.org/en/docs/Web/API/SVGPathElement) to Kotlin\n */\npublic external abstract class SVGPathElement : SVGGeometryElement {\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [SVGRectElement](https://developer.mozilla.org/en/docs/Web/API/SVGRectElement) to Kotlin\n */\npublic external abstract class SVGRectElement : SVGGeometryElement {\n    open val x: SVGAnimatedLength\n    open val y: SVGAnimatedLength\n    open val width: SVGAnimatedLength\n    open val height: SVGAnimatedLength\n    open val rx: SVGAnimatedLength\n    open val ry: SVGAnimatedLength\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [SVGCircleElement](https://developer.mozilla.org/en/docs/Web/API/SVGCircleElement) to Kotlin\n */\npublic external abstract class SVGCircleElement : SVGGeometryElement {\n    open val cx: SVGAnimatedLength\n    open val cy: SVGAnimatedLength\n    open val r: SVGAnimatedLength\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [SVGEllipseElement](https://developer.mozilla.org/en/docs/Web/API/SVGEllipseElement) to Kotlin\n */\npublic external abstract class SVGEllipseElement : SVGGeometryElement {\n    open val cx: SVGAnimatedLength\n    open val cy: SVGAnimatedLength\n    open val rx: SVGAnimatedLength\n    open val ry: SVGAnimatedLength\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [SVGLineElement](https://developer.mozilla.org/en/docs/Web/API/SVGLineElement) to Kotlin\n */\npublic external abstract class SVGLineElement : SVGGeometryElement {\n    open val x1: SVGAnimatedLength\n    open val y1: SVGAnimatedLength\n    open val x2: SVGAnimatedLength\n    open val y2: SVGAnimatedLength\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [SVGMeshElement](https://developer.mozilla.org/en/docs/Web/API/SVGMeshElement) to Kotlin\n */\npublic external abstract class SVGMeshElement : SVGGeometryElement, SVGURIReference {\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [SVGAnimatedPoints](https://developer.mozilla.org/en/docs/Web/API/SVGAnimatedPoints) to Kotlin\n */\npublic external interface SVGAnimatedPoints {\n    val points: SVGPointList\n    val animatedPoints: SVGPointList\n}\n\npublic external abstract class SVGPointList {\n    open val length: Int\n    open val numberOfItems: Int\n    fun clear()\n    fun initialize(newItem: DOMPoint): DOMPoint\n    fun insertItemBefore(newItem: DOMPoint, index: Int): DOMPoint\n    fun replaceItem(newItem: DOMPoint, index: Int): DOMPoint\n    fun removeItem(index: Int): DOMPoint\n    fun appendItem(newItem: DOMPoint): DOMPoint\n    fun getItem(index: Int): DOMPoint\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun SVGPointList.get(index: Int): DOMPoint? = asDynamic()[index]\n\n@kotlin.internal.InlineOnly\npublic inline operator fun SVGPointList.set(index: Int, newItem: DOMPoint) { asDynamic()[index] = newItem }\n\n/**\n * Exposes the JavaScript [SVGPolylineElement](https://developer.mozilla.org/en/docs/Web/API/SVGPolylineElement) to Kotlin\n */\npublic external abstract class SVGPolylineElement : SVGGeometryElement, SVGAnimatedPoints {\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [SVGPolygonElement](https://developer.mozilla.org/en/docs/Web/API/SVGPolygonElement) to Kotlin\n */\npublic external abstract class SVGPolygonElement : SVGGeometryElement, SVGAnimatedPoints {\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [SVGTextContentElement](https://developer.mozilla.org/en/docs/Web/API/SVGTextContentElement) to Kotlin\n */\npublic external abstract class SVGTextContentElement : SVGGraphicsElement {\n    open val textLength: SVGAnimatedLength\n    open val lengthAdjust: SVGAnimatedEnumeration\n    fun getNumberOfChars(): Int\n    fun getComputedTextLength(): Float\n    fun getSubStringLength(charnum: Int, nchars: Int): Float\n    fun getStartPositionOfChar(charnum: Int): DOMPoint\n    fun getEndPositionOfChar(charnum: Int): DOMPoint\n    fun getExtentOfChar(charnum: Int): DOMRect\n    fun getRotationOfChar(charnum: Int): Float\n    fun getCharNumAtPosition(point: DOMPoint): Int\n    fun selectSubString(charnum: Int, nchars: Int)\n\n    companion object {\n        val LENGTHADJUST_UNKNOWN: Short\n        val LENGTHADJUST_SPACING: Short\n        val LENGTHADJUST_SPACINGANDGLYPHS: Short\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [SVGTextPositioningElement](https://developer.mozilla.org/en/docs/Web/API/SVGTextPositioningElement) to Kotlin\n */\npublic external abstract class SVGTextPositioningElement : SVGTextContentElement {\n    open val x: SVGAnimatedLengthList\n    open val y: SVGAnimatedLengthList\n    open val dx: SVGAnimatedLengthList\n    open val dy: SVGAnimatedLengthList\n    open val rotate: SVGAnimatedNumberList\n\n    companion object {\n        val LENGTHADJUST_UNKNOWN: Short\n        val LENGTHADJUST_SPACING: Short\n        val LENGTHADJUST_SPACINGANDGLYPHS: Short\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [SVGTextElement](https://developer.mozilla.org/en/docs/Web/API/SVGTextElement) to Kotlin\n */\npublic external abstract class SVGTextElement : SVGTextPositioningElement {\n    companion object {\n        val LENGTHADJUST_UNKNOWN: Short\n        val LENGTHADJUST_SPACING: Short\n        val LENGTHADJUST_SPACINGANDGLYPHS: Short\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [SVGTSpanElement](https://developer.mozilla.org/en/docs/Web/API/SVGTSpanElement) to Kotlin\n */\npublic external abstract class SVGTSpanElement : SVGTextPositioningElement {\n    companion object {\n        val LENGTHADJUST_UNKNOWN: Short\n        val LENGTHADJUST_SPACING: Short\n        val LENGTHADJUST_SPACINGANDGLYPHS: Short\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [SVGTextPathElement](https://developer.mozilla.org/en/docs/Web/API/SVGTextPathElement) to Kotlin\n */\npublic external abstract class SVGTextPathElement : SVGTextContentElement, SVGURIReference {\n    open val startOffset: SVGAnimatedLength\n    open val method: SVGAnimatedEnumeration\n    open val spacing: SVGAnimatedEnumeration\n\n    companion object {\n        val TEXTPATH_METHODTYPE_UNKNOWN: Short\n        val TEXTPATH_METHODTYPE_ALIGN: Short\n        val TEXTPATH_METHODTYPE_STRETCH: Short\n        val TEXTPATH_SPACINGTYPE_UNKNOWN: Short\n        val TEXTPATH_SPACINGTYPE_AUTO: Short\n        val TEXTPATH_SPACINGTYPE_EXACT: Short\n        val LENGTHADJUST_UNKNOWN: Short\n        val LENGTHADJUST_SPACING: Short\n        val LENGTHADJUST_SPACINGANDGLYPHS: Short\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [SVGImageElement](https://developer.mozilla.org/en/docs/Web/API/SVGImageElement) to Kotlin\n */\npublic external abstract class SVGImageElement : SVGGraphicsElement, SVGURIReference, HTMLOrSVGImageElement {\n    open val x: SVGAnimatedLength\n    open val y: SVGAnimatedLength\n    open val width: SVGAnimatedLength\n    open val height: SVGAnimatedLength\n    open val preserveAspectRatio: SVGAnimatedPreserveAspectRatio\n    open var crossOrigin: String?\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [SVGForeignObjectElement](https://developer.mozilla.org/en/docs/Web/API/SVGForeignObjectElement) to Kotlin\n */\npublic external abstract class SVGForeignObjectElement : SVGGraphicsElement {\n    open val x: SVGAnimatedLength\n    open val y: SVGAnimatedLength\n    open val width: SVGAnimatedLength\n    open val height: SVGAnimatedLength\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\npublic external abstract class SVGMarkerElement : SVGElement, SVGFitToViewBox {\n    open val refX: SVGAnimatedLength\n    open val refY: SVGAnimatedLength\n    open val markerUnits: SVGAnimatedEnumeration\n    open val markerWidth: SVGAnimatedLength\n    open val markerHeight: SVGAnimatedLength\n    open val orientType: SVGAnimatedEnumeration\n    open val orientAngle: SVGAnimatedAngle\n    open var orient: String\n    fun setOrientToAuto()\n    fun setOrientToAngle(angle: SVGAngle)\n\n    companion object {\n        val SVG_MARKERUNITS_UNKNOWN: Short\n        val SVG_MARKERUNITS_USERSPACEONUSE: Short\n        val SVG_MARKERUNITS_STROKEWIDTH: Short\n        val SVG_MARKER_ORIENT_UNKNOWN: Short\n        val SVG_MARKER_ORIENT_AUTO: Short\n        val SVG_MARKER_ORIENT_ANGLE: Short\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [SVGSolidcolorElement](https://developer.mozilla.org/en/docs/Web/API/SVGSolidcolorElement) to Kotlin\n */\npublic external abstract class SVGSolidcolorElement : SVGElement {\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [SVGGradientElement](https://developer.mozilla.org/en/docs/Web/API/SVGGradientElement) to Kotlin\n */\npublic external abstract class SVGGradientElement : SVGElement, SVGURIReference, SVGUnitTypes {\n    open val gradientUnits: SVGAnimatedEnumeration\n    open val gradientTransform: SVGAnimatedTransformList\n    open val spreadMethod: SVGAnimatedEnumeration\n\n    companion object {\n        val SVG_SPREADMETHOD_UNKNOWN: Short\n        val SVG_SPREADMETHOD_PAD: Short\n        val SVG_SPREADMETHOD_REFLECT: Short\n        val SVG_SPREADMETHOD_REPEAT: Short\n        val SVG_UNIT_TYPE_UNKNOWN: Short\n        val SVG_UNIT_TYPE_USERSPACEONUSE: Short\n        val SVG_UNIT_TYPE_OBJECTBOUNDINGBOX: Short\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [SVGLinearGradientElement](https://developer.mozilla.org/en/docs/Web/API/SVGLinearGradientElement) to Kotlin\n */\npublic external abstract class SVGLinearGradientElement : SVGGradientElement {\n    open val x1: SVGAnimatedLength\n    open val y1: SVGAnimatedLength\n    open val x2: SVGAnimatedLength\n    open val y2: SVGAnimatedLength\n\n    companion object {\n        val SVG_SPREADMETHOD_UNKNOWN: Short\n        val SVG_SPREADMETHOD_PAD: Short\n        val SVG_SPREADMETHOD_REFLECT: Short\n        val SVG_SPREADMETHOD_REPEAT: Short\n        val SVG_UNIT_TYPE_UNKNOWN: Short\n        val SVG_UNIT_TYPE_USERSPACEONUSE: Short\n        val SVG_UNIT_TYPE_OBJECTBOUNDINGBOX: Short\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [SVGRadialGradientElement](https://developer.mozilla.org/en/docs/Web/API/SVGRadialGradientElement) to Kotlin\n */\npublic external abstract class SVGRadialGradientElement : SVGGradientElement {\n    open val cx: SVGAnimatedLength\n    open val cy: SVGAnimatedLength\n    open val r: SVGAnimatedLength\n    open val fx: SVGAnimatedLength\n    open val fy: SVGAnimatedLength\n    open val fr: SVGAnimatedLength\n\n    companion object {\n        val SVG_SPREADMETHOD_UNKNOWN: Short\n        val SVG_SPREADMETHOD_PAD: Short\n        val SVG_SPREADMETHOD_REFLECT: Short\n        val SVG_SPREADMETHOD_REPEAT: Short\n        val SVG_UNIT_TYPE_UNKNOWN: Short\n        val SVG_UNIT_TYPE_USERSPACEONUSE: Short\n        val SVG_UNIT_TYPE_OBJECTBOUNDINGBOX: Short\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\npublic external abstract class SVGMeshGradientElement : SVGGradientElement {\n    companion object {\n        val SVG_SPREADMETHOD_UNKNOWN: Short\n        val SVG_SPREADMETHOD_PAD: Short\n        val SVG_SPREADMETHOD_REFLECT: Short\n        val SVG_SPREADMETHOD_REPEAT: Short\n        val SVG_UNIT_TYPE_UNKNOWN: Short\n        val SVG_UNIT_TYPE_USERSPACEONUSE: Short\n        val SVG_UNIT_TYPE_OBJECTBOUNDINGBOX: Short\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\npublic external abstract class SVGMeshrowElement : SVGElement {\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\npublic external abstract class SVGMeshpatchElement : SVGElement {\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [SVGStopElement](https://developer.mozilla.org/en/docs/Web/API/SVGStopElement) to Kotlin\n */\npublic external abstract class SVGStopElement : SVGElement {\n    open val offset: SVGAnimatedNumber\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [SVGPatternElement](https://developer.mozilla.org/en/docs/Web/API/SVGPatternElement) to Kotlin\n */\npublic external abstract class SVGPatternElement : SVGElement, SVGFitToViewBox, SVGURIReference, SVGUnitTypes {\n    open val patternUnits: SVGAnimatedEnumeration\n    open val patternContentUnits: SVGAnimatedEnumeration\n    open val patternTransform: SVGAnimatedTransformList\n    open val x: SVGAnimatedLength\n    open val y: SVGAnimatedLength\n    open val width: SVGAnimatedLength\n    open val height: SVGAnimatedLength\n\n    companion object {\n        val SVG_UNIT_TYPE_UNKNOWN: Short\n        val SVG_UNIT_TYPE_USERSPACEONUSE: Short\n        val SVG_UNIT_TYPE_OBJECTBOUNDINGBOX: Short\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\npublic external abstract class SVGHatchElement : SVGElement {\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\npublic external abstract class SVGHatchpathElement : SVGElement {\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [SVGCursorElement](https://developer.mozilla.org/en/docs/Web/API/SVGCursorElement) to Kotlin\n */\npublic external abstract class SVGCursorElement : SVGElement, SVGURIReference {\n    open val x: SVGAnimatedLength\n    open val y: SVGAnimatedLength\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [SVGScriptElement](https://developer.mozilla.org/en/docs/Web/API/SVGScriptElement) to Kotlin\n */\npublic external abstract class SVGScriptElement : SVGElement, SVGURIReference, HTMLOrSVGScriptElement {\n    open var type: String\n    open var crossOrigin: String?\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [SVGAElement](https://developer.mozilla.org/en/docs/Web/API/SVGAElement) to Kotlin\n */\npublic external abstract class SVGAElement : SVGGraphicsElement, SVGURIReference {\n    open val target: SVGAnimatedString\n    open val download: SVGAnimatedString\n    open val rel: SVGAnimatedString\n    open val relList: SVGAnimatedString\n    open val hreflang: SVGAnimatedString\n    open val type: SVGAnimatedString\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [SVGViewElement](https://developer.mozilla.org/en/docs/Web/API/SVGViewElement) to Kotlin\n */\npublic external abstract class SVGViewElement : SVGElement, SVGFitToViewBox, SVGZoomAndPan {\n    companion object {\n        val SVG_ZOOMANDPAN_UNKNOWN: Short\n        val SVG_ZOOMANDPAN_DISABLE: Short\n        val SVG_ZOOMANDPAN_MAGNIFY: Short\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n// NOTE: THIS FILE IS AUTO-GENERATED, DO NOT EDIT!\n// See github.com/kotlin/dukat for details\n\npackage org.w3c.files\n\nimport kotlin.js.*\nimport org.khronos.webgl.*\nimport org.w3c.css.masking.*\nimport org.w3c.dom.*\nimport org.w3c.dom.clipboard.*\nimport org.w3c.dom.css.*\nimport org.w3c.dom.encryptedmedia.*\nimport org.w3c.dom.events.*\nimport org.w3c.dom.mediacapture.*\nimport org.w3c.dom.mediasource.*\nimport org.w3c.dom.parsing.*\nimport org.w3c.dom.pointerevents.*\nimport org.w3c.dom.svg.*\nimport org.w3c.dom.url.*\nimport org.w3c.fetch.*\nimport org.w3c.notifications.*\nimport org.w3c.performance.*\nimport org.w3c.workers.*\nimport org.w3c.xhr.*\n\n/**\n * Exposes the JavaScript [Blob](https://developer.mozilla.org/en/docs/Web/API/Blob) to Kotlin\n */\npublic external open class Blob(blobParts: Array<dynamic> = definedExternally, options: BlobPropertyBag = definedExternally) : MediaProvider, ImageBitmapSource {\n    open val size: Number\n    open val type: String\n    open val isClosed: Boolean\n    fun slice(start: Int = definedExternally, end: Int = definedExternally, contentType: String = definedExternally): Blob\n    fun close()\n}\n\npublic external interface BlobPropertyBag {\n    var type: String? /* = \"\" */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun BlobPropertyBag(type: String? = \"\"): BlobPropertyBag {\n    val o = js(\"({})\")\n    o[\"type\"] = type\n    return o\n}\n\n/**\n * Exposes the JavaScript [File](https://developer.mozilla.org/en/docs/Web/API/File) to Kotlin\n */\npublic external open class File(fileBits: Array<dynamic>, fileName: String, options: FilePropertyBag = definedExternally) : Blob {\n    open val name: String\n    open val lastModified: Int\n}\n\npublic external interface FilePropertyBag : BlobPropertyBag {\n    var lastModified: Int?\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun FilePropertyBag(lastModified: Int? = undefined, type: String? = \"\"): FilePropertyBag {\n    val o = js(\"({})\")\n    o[\"lastModified\"] = lastModified\n    o[\"type\"] = type\n    return o\n}\n\n/**\n * Exposes the JavaScript [FileList](https://developer.mozilla.org/en/docs/Web/API/FileList) to Kotlin\n */\npublic external abstract class FileList : ItemArrayLike<File> {\n    override fun item(index: Int): File?\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun FileList.get(index: Int): File? = asDynamic()[index]\n\n/**\n * Exposes the JavaScript [FileReader](https://developer.mozilla.org/en/docs/Web/API/FileReader) to Kotlin\n */\npublic external open class FileReader : EventTarget {\n    open val readyState: Short\n    open val result: dynamic\n    open val error: dynamic\n    var onloadstart: ((ProgressEvent) -> dynamic)?\n    var onprogress: ((ProgressEvent) -> dynamic)?\n    var onload: ((Event) -> dynamic)?\n    var onabort: ((Event) -> dynamic)?\n    var onerror: ((Event) -> dynamic)?\n    var onloadend: ((Event) -> dynamic)?\n    fun readAsArrayBuffer(blob: Blob)\n    fun readAsBinaryString(blob: Blob)\n    fun readAsText(blob: Blob, label: String = definedExternally)\n    fun readAsDataURL(blob: Blob)\n    fun abort()\n\n    companion object {\n        val EMPTY: Short\n        val LOADING: Short\n        val DONE: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [FileReaderSync](https://developer.mozilla.org/en/docs/Web/API/FileReaderSync) to Kotlin\n */\npublic external open class FileReaderSync {\n    fun readAsArrayBuffer(blob: Blob): ArrayBuffer\n    fun readAsBinaryString(blob: Blob): String\n    fun readAsText(blob: Blob, label: String = definedExternally): String\n    fun readAsDataURL(blob: Blob): String\n}","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n// NOTE: THIS FILE IS AUTO-GENERATED, DO NOT EDIT!\n// See github.com/kotlin/dukat for details\n\npackage org.w3c.notifications\n\nimport kotlin.js.*\nimport org.khronos.webgl.*\nimport org.w3c.css.masking.*\nimport org.w3c.dom.*\nimport org.w3c.dom.clipboard.*\nimport org.w3c.dom.css.*\nimport org.w3c.dom.encryptedmedia.*\nimport org.w3c.dom.events.*\nimport org.w3c.dom.mediacapture.*\nimport org.w3c.dom.mediasource.*\nimport org.w3c.dom.parsing.*\nimport org.w3c.dom.pointerevents.*\nimport org.w3c.dom.svg.*\nimport org.w3c.dom.url.*\nimport org.w3c.fetch.*\nimport org.w3c.files.*\nimport org.w3c.performance.*\nimport org.w3c.workers.*\nimport org.w3c.xhr.*\n\n/**\n * Exposes the JavaScript [Notification](https://developer.mozilla.org/en/docs/Web/API/Notification) to Kotlin\n */\npublic external open class Notification(title: String, options: NotificationOptions = definedExternally) : EventTarget {\n    var onclick: ((MouseEvent) -> dynamic)?\n    var onerror: ((Event) -> dynamic)?\n    open val title: String\n    open val dir: NotificationDirection\n    open val lang: String\n    open val body: String\n    open val tag: String\n    open val image: String\n    open val icon: String\n    open val badge: String\n    open val sound: String\n    open val vibrate: Array<out Int>\n    open val timestamp: Number\n    open val renotify: Boolean\n    open val silent: Boolean\n    open val noscreen: Boolean\n    open val requireInteraction: Boolean\n    open val sticky: Boolean\n    open val data: Any?\n    open val actions: Array<out NotificationAction>\n    fun close()\n\n    companion object {\n        val permission: NotificationPermission\n        val maxActions: Int\n        fun requestPermission(deprecatedCallback: (NotificationPermission) -> Unit = definedExternally): Promise<NotificationPermission>\n    }\n}\n\npublic external interface NotificationOptions {\n    var dir: NotificationDirection? /* = NotificationDirection.AUTO */\n        get() = definedExternally\n        set(value) = definedExternally\n    var lang: String? /* = \"\" */\n        get() = definedExternally\n        set(value) = definedExternally\n    var body: String? /* = \"\" */\n        get() = definedExternally\n        set(value) = definedExternally\n    var tag: String? /* = \"\" */\n        get() = definedExternally\n        set(value) = definedExternally\n    var image: String?\n        get() = definedExternally\n        set(value) = definedExternally\n    var icon: String?\n        get() = definedExternally\n        set(value) = definedExternally\n    var badge: String?\n        get() = definedExternally\n        set(value) = definedExternally\n    var sound: String?\n        get() = definedExternally\n        set(value) = definedExternally\n    var vibrate: dynamic\n        get() = definedExternally\n        set(value) = definedExternally\n    var timestamp: Number?\n        get() = definedExternally\n        set(value) = definedExternally\n    var renotify: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n    var silent: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n    var noscreen: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n    var requireInteraction: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n    var sticky: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n    var data: Any? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n    var actions: Array<NotificationAction>? /* = arrayOf() */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun NotificationOptions(dir: NotificationDirection? = NotificationDirection.AUTO, lang: String? = \"\", body: String? = \"\", tag: String? = \"\", image: String? = undefined, icon: String? = undefined, badge: String? = undefined, sound: String? = undefined, vibrate: dynamic = undefined, timestamp: Number? = undefined, renotify: Boolean? = false, silent: Boolean? = false, noscreen: Boolean? = false, requireInteraction: Boolean? = false, sticky: Boolean? = false, data: Any? = null, actions: Array<NotificationAction>? = arrayOf()): NotificationOptions {\n    val o = js(\"({})\")\n    o[\"dir\"] = dir\n    o[\"lang\"] = lang\n    o[\"body\"] = body\n    o[\"tag\"] = tag\n    o[\"image\"] = image\n    o[\"icon\"] = icon\n    o[\"badge\"] = badge\n    o[\"sound\"] = sound\n    o[\"vibrate\"] = vibrate\n    o[\"timestamp\"] = timestamp\n    o[\"renotify\"] = renotify\n    o[\"silent\"] = silent\n    o[\"noscreen\"] = noscreen\n    o[\"requireInteraction\"] = requireInteraction\n    o[\"sticky\"] = sticky\n    o[\"data\"] = data\n    o[\"actions\"] = actions\n    return o\n}\n\npublic external interface NotificationAction {\n    var action: String?\n        get() = definedExternally\n        set(value) = definedExternally\n    var title: String?\n        get() = definedExternally\n        set(value) = definedExternally\n    var icon: String?\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun NotificationAction(action: String?, title: String?, icon: String? = undefined): NotificationAction {\n    val o = js(\"({})\")\n    o[\"action\"] = action\n    o[\"title\"] = title\n    o[\"icon\"] = icon\n    return o\n}\n\npublic external interface GetNotificationOptions {\n    var tag: String? /* = \"\" */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun GetNotificationOptions(tag: String? = \"\"): GetNotificationOptions {\n    val o = js(\"({})\")\n    o[\"tag\"] = tag\n    return o\n}\n\n/**\n * Exposes the JavaScript [NotificationEvent](https://developer.mozilla.org/en/docs/Web/API/NotificationEvent) to Kotlin\n */\npublic external open class NotificationEvent(type: String, eventInitDict: NotificationEventInit) : ExtendableEvent {\n    open val notification: Notification\n    open val action: String\n\n    companion object {\n        val NONE: Short\n        val CAPTURING_PHASE: Short\n        val AT_TARGET: Short\n        val BUBBLING_PHASE: Short\n    }\n}\n\npublic external interface NotificationEventInit : ExtendableEventInit {\n    var notification: Notification?\n        get() = definedExternally\n        set(value) = definedExternally\n    var action: String? /* = \"\" */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun NotificationEventInit(notification: Notification?, action: String? = \"\", bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): NotificationEventInit {\n    val o = js(\"({})\")\n    o[\"notification\"] = notification\n    o[\"action\"] = action\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n    return o\n}\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface NotificationPermission {\n    companion object\n}\n\npublic inline val NotificationPermission.Companion.DEFAULT: NotificationPermission get() = \"default\".asDynamic().unsafeCast<NotificationPermission>()\n\npublic inline val NotificationPermission.Companion.DENIED: NotificationPermission get() = \"denied\".asDynamic().unsafeCast<NotificationPermission>()\n\npublic inline val NotificationPermission.Companion.GRANTED: NotificationPermission get() = \"granted\".asDynamic().unsafeCast<NotificationPermission>()\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface NotificationDirection {\n    companion object\n}\n\npublic inline val NotificationDirection.Companion.AUTO: NotificationDirection get() = \"auto\".asDynamic().unsafeCast<NotificationDirection>()\n\npublic inline val NotificationDirection.Companion.LTR: NotificationDirection get() = \"ltr\".asDynamic().unsafeCast<NotificationDirection>()\n\npublic inline val NotificationDirection.Companion.RTL: NotificationDirection get() = \"rtl\".asDynamic().unsafeCast<NotificationDirection>()","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n// NOTE: THIS FILE IS AUTO-GENERATED, DO NOT EDIT!\n// See github.com/kotlin/dukat for details\n\npackage org.w3c.workers\n\nimport kotlin.js.*\nimport org.khronos.webgl.*\nimport org.w3c.css.masking.*\nimport org.w3c.dom.*\nimport org.w3c.dom.clipboard.*\nimport org.w3c.dom.css.*\nimport org.w3c.dom.encryptedmedia.*\nimport org.w3c.dom.events.*\nimport org.w3c.dom.mediacapture.*\nimport org.w3c.dom.mediasource.*\nimport org.w3c.dom.parsing.*\nimport org.w3c.dom.pointerevents.*\nimport org.w3c.dom.svg.*\nimport org.w3c.dom.url.*\nimport org.w3c.fetch.*\nimport org.w3c.files.*\nimport org.w3c.notifications.*\nimport org.w3c.performance.*\nimport org.w3c.xhr.*\n\n/**\n * Exposes the JavaScript [ServiceWorker](https://developer.mozilla.org/en/docs/Web/API/ServiceWorker) to Kotlin\n */\npublic external abstract class ServiceWorker : EventTarget, AbstractWorker, UnionMessagePortOrServiceWorker, UnionClientOrMessagePortOrServiceWorker {\n    open val scriptURL: String\n    open val state: ServiceWorkerState\n    open var onstatechange: ((Event) -> dynamic)?\n    fun postMessage(message: Any?, transfer: Array<dynamic> = definedExternally)\n}\n\n/**\n * Exposes the JavaScript [ServiceWorkerRegistration](https://developer.mozilla.org/en/docs/Web/API/ServiceWorkerRegistration) to Kotlin\n */\npublic external abstract class ServiceWorkerRegistration : EventTarget {\n    open val installing: ServiceWorker?\n    open val waiting: ServiceWorker?\n    open val active: ServiceWorker?\n    open val scope: String\n    open var onupdatefound: ((Event) -> dynamic)?\n    open val APISpace: dynamic\n    fun update(): Promise<Unit>\n    fun unregister(): Promise<Boolean>\n    fun showNotification(title: String, options: NotificationOptions = definedExternally): Promise<Unit>\n    fun getNotifications(filter: GetNotificationOptions = definedExternally): Promise<Array<Notification>>\n    fun methodName(): Promise<dynamic>\n}\n\n/**\n * Exposes the JavaScript [ServiceWorkerContainer](https://developer.mozilla.org/en/docs/Web/API/ServiceWorkerContainer) to Kotlin\n */\npublic external abstract class ServiceWorkerContainer : EventTarget {\n    open val controller: ServiceWorker?\n    open val ready: Promise<ServiceWorkerRegistration>\n    open var oncontrollerchange: ((Event) -> dynamic)?\n    open var onmessage: ((MessageEvent) -> dynamic)?\n    fun register(scriptURL: String, options: RegistrationOptions = definedExternally): Promise<ServiceWorkerRegistration>\n    fun getRegistration(clientURL: String = definedExternally): Promise<Any?>\n    fun getRegistrations(): Promise<Array<ServiceWorkerRegistration>>\n    fun startMessages()\n}\n\npublic external interface RegistrationOptions {\n    var scope: String?\n        get() = definedExternally\n        set(value) = definedExternally\n    var type: WorkerType? /* = WorkerType.CLASSIC */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun RegistrationOptions(scope: String? = undefined, type: WorkerType? = WorkerType.CLASSIC): RegistrationOptions {\n    val o = js(\"({})\")\n    o[\"scope\"] = scope\n    o[\"type\"] = type\n    return o\n}\n\n/**\n * Exposes the JavaScript [ServiceWorkerMessageEvent](https://developer.mozilla.org/en/docs/Web/API/ServiceWorkerMessageEvent) to Kotlin\n */\npublic external open class ServiceWorkerMessageEvent(type: String, eventInitDict: ServiceWorkerMessageEventInit = definedExternally) : Event {\n    open val data: Any?\n    open val origin: String\n    open val lastEventId: String\n    open val source: UnionMessagePortOrServiceWorker?\n    open val ports: Array<out MessagePort>?\n\n    companion object {\n        val NONE: Short\n        val CAPTURING_PHASE: Short\n        val AT_TARGET: Short\n        val BUBBLING_PHASE: Short\n    }\n}\n\npublic external interface ServiceWorkerMessageEventInit : EventInit {\n    var data: Any?\n        get() = definedExternally\n        set(value) = definedExternally\n    var origin: String?\n        get() = definedExternally\n        set(value) = definedExternally\n    var lastEventId: String?\n        get() = definedExternally\n        set(value) = definedExternally\n    var source: UnionMessagePortOrServiceWorker?\n        get() = definedExternally\n        set(value) = definedExternally\n    var ports: Array<MessagePort>?\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun ServiceWorkerMessageEventInit(data: Any? = undefined, origin: String? = undefined, lastEventId: String? = undefined, source: UnionMessagePortOrServiceWorker? = undefined, ports: Array<MessagePort>? = undefined, bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): ServiceWorkerMessageEventInit {\n    val o = js(\"({})\")\n    o[\"data\"] = data\n    o[\"origin\"] = origin\n    o[\"lastEventId\"] = lastEventId\n    o[\"source\"] = source\n    o[\"ports\"] = ports\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n    return o\n}\n\n/**\n * Exposes the JavaScript [ServiceWorkerGlobalScope](https://developer.mozilla.org/en/docs/Web/API/ServiceWorkerGlobalScope) to Kotlin\n */\npublic external abstract class ServiceWorkerGlobalScope : WorkerGlobalScope {\n    open val clients: Clients\n    open val registration: ServiceWorkerRegistration\n    open var oninstall: ((Event) -> dynamic)?\n    open var onactivate: ((Event) -> dynamic)?\n    open var onfetch: ((FetchEvent) -> dynamic)?\n    open var onforeignfetch: ((Event) -> dynamic)?\n    open var onmessage: ((MessageEvent) -> dynamic)?\n    open var onnotificationclick: ((NotificationEvent) -> dynamic)?\n    open var onnotificationclose: ((NotificationEvent) -> dynamic)?\n    open var onfunctionalevent: ((Event) -> dynamic)?\n    fun skipWaiting(): Promise<Unit>\n}\n\n/**\n * Exposes the JavaScript [Client](https://developer.mozilla.org/en/docs/Web/API/Client) to Kotlin\n */\npublic external abstract class Client : UnionClientOrMessagePortOrServiceWorker {\n    open val url: String\n    open val frameType: FrameType\n    open val id: String\n    fun postMessage(message: Any?, transfer: Array<dynamic> = definedExternally)\n}\n\n/**\n * Exposes the JavaScript [WindowClient](https://developer.mozilla.org/en/docs/Web/API/WindowClient) to Kotlin\n */\npublic external abstract class WindowClient : Client {\n    open val visibilityState: dynamic\n    open val focused: Boolean\n    fun focus(): Promise<WindowClient>\n    fun navigate(url: String): Promise<WindowClient>\n}\n\n/**\n * Exposes the JavaScript [Clients](https://developer.mozilla.org/en/docs/Web/API/Clients) to Kotlin\n */\npublic external abstract class Clients {\n    fun get(id: String): Promise<Any?>\n    fun matchAll(options: ClientQueryOptions = definedExternally): Promise<Array<Client>>\n    fun openWindow(url: String): Promise<WindowClient?>\n    fun claim(): Promise<Unit>\n}\n\npublic external interface ClientQueryOptions {\n    var includeUncontrolled: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n    var type: ClientType? /* = ClientType.WINDOW */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun ClientQueryOptions(includeUncontrolled: Boolean? = false, type: ClientType? = ClientType.WINDOW): ClientQueryOptions {\n    val o = js(\"({})\")\n    o[\"includeUncontrolled\"] = includeUncontrolled\n    o[\"type\"] = type\n    return o\n}\n\n/**\n * Exposes the JavaScript [ExtendableEvent](https://developer.mozilla.org/en/docs/Web/API/ExtendableEvent) to Kotlin\n */\npublic external open class ExtendableEvent(type: String, eventInitDict: ExtendableEventInit = definedExternally) : Event {\n    fun waitUntil(f: Promise<Any?>)\n\n    companion object {\n        val NONE: Short\n        val CAPTURING_PHASE: Short\n        val AT_TARGET: Short\n        val BUBBLING_PHASE: Short\n    }\n}\n\npublic external interface ExtendableEventInit : EventInit\n\n@kotlin.internal.InlineOnly\npublic inline fun ExtendableEventInit(bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): ExtendableEventInit {\n    val o = js(\"({})\")\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n    return o\n}\n\n/**\n * Exposes the JavaScript [InstallEvent](https://developer.mozilla.org/en/docs/Web/API/InstallEvent) to Kotlin\n */\npublic external open class InstallEvent(type: String, eventInitDict: ExtendableEventInit = definedExternally) : ExtendableEvent {\n    fun registerForeignFetch(options: ForeignFetchOptions)\n\n    companion object {\n        val NONE: Short\n        val CAPTURING_PHASE: Short\n        val AT_TARGET: Short\n        val BUBBLING_PHASE: Short\n    }\n}\n\npublic external interface ForeignFetchOptions {\n    var scopes: Array<String>?\n        get() = definedExternally\n        set(value) = definedExternally\n    var origins: Array<String>?\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun ForeignFetchOptions(scopes: Array<String>?, origins: Array<String>?): ForeignFetchOptions {\n    val o = js(\"({})\")\n    o[\"scopes\"] = scopes\n    o[\"origins\"] = origins\n    return o\n}\n\n/**\n * Exposes the JavaScript [FetchEvent](https://developer.mozilla.org/en/docs/Web/API/FetchEvent) to Kotlin\n */\npublic external open class FetchEvent(type: String, eventInitDict: FetchEventInit) : ExtendableEvent {\n    open val request: Request\n    open val clientId: String?\n    open val isReload: Boolean\n    fun respondWith(r: Promise<Response>)\n\n    companion object {\n        val NONE: Short\n        val CAPTURING_PHASE: Short\n        val AT_TARGET: Short\n        val BUBBLING_PHASE: Short\n    }\n}\n\npublic external interface FetchEventInit : ExtendableEventInit {\n    var request: Request?\n        get() = definedExternally\n        set(value) = definedExternally\n    var clientId: String? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n    var isReload: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun FetchEventInit(request: Request?, clientId: String? = null, isReload: Boolean? = false, bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): FetchEventInit {\n    val o = js(\"({})\")\n    o[\"request\"] = request\n    o[\"clientId\"] = clientId\n    o[\"isReload\"] = isReload\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n    return o\n}\n\npublic external open class ForeignFetchEvent(type: String, eventInitDict: ForeignFetchEventInit) : ExtendableEvent {\n    open val request: Request\n    open val origin: String\n    fun respondWith(r: Promise<ForeignFetchResponse>)\n\n    companion object {\n        val NONE: Short\n        val CAPTURING_PHASE: Short\n        val AT_TARGET: Short\n        val BUBBLING_PHASE: Short\n    }\n}\n\npublic external interface ForeignFetchEventInit : ExtendableEventInit {\n    var request: Request?\n        get() = definedExternally\n        set(value) = definedExternally\n    var origin: String? /* = \"null\" */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun ForeignFetchEventInit(request: Request?, origin: String? = \"null\", bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): ForeignFetchEventInit {\n    val o = js(\"({})\")\n    o[\"request\"] = request\n    o[\"origin\"] = origin\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n    return o\n}\n\npublic external interface ForeignFetchResponse {\n    var response: Response?\n        get() = definedExternally\n        set(value) = definedExternally\n    var origin: String?\n        get() = definedExternally\n        set(value) = definedExternally\n    var headers: Array<String>?\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun ForeignFetchResponse(response: Response?, origin: String? = undefined, headers: Array<String>? = undefined): ForeignFetchResponse {\n    val o = js(\"({})\")\n    o[\"response\"] = response\n    o[\"origin\"] = origin\n    o[\"headers\"] = headers\n    return o\n}\n\n/**\n * Exposes the JavaScript [ExtendableMessageEvent](https://developer.mozilla.org/en/docs/Web/API/ExtendableMessageEvent) to Kotlin\n */\npublic external open class ExtendableMessageEvent(type: String, eventInitDict: ExtendableMessageEventInit = definedExternally) : ExtendableEvent {\n    open val data: Any?\n    open val origin: String\n    open val lastEventId: String\n    open val source: UnionClientOrMessagePortOrServiceWorker?\n    open val ports: Array<out MessagePort>?\n\n    companion object {\n        val NONE: Short\n        val CAPTURING_PHASE: Short\n        val AT_TARGET: Short\n        val BUBBLING_PHASE: Short\n    }\n}\n\npublic external interface ExtendableMessageEventInit : ExtendableEventInit {\n    var data: Any?\n        get() = definedExternally\n        set(value) = definedExternally\n    var origin: String?\n        get() = definedExternally\n        set(value) = definedExternally\n    var lastEventId: String?\n        get() = definedExternally\n        set(value) = definedExternally\n    var source: UnionClientOrMessagePortOrServiceWorker?\n        get() = definedExternally\n        set(value) = definedExternally\n    var ports: Array<MessagePort>?\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun ExtendableMessageEventInit(data: Any? = undefined, origin: String? = undefined, lastEventId: String? = undefined, source: UnionClientOrMessagePortOrServiceWorker? = undefined, ports: Array<MessagePort>? = undefined, bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): ExtendableMessageEventInit {\n    val o = js(\"({})\")\n    o[\"data\"] = data\n    o[\"origin\"] = origin\n    o[\"lastEventId\"] = lastEventId\n    o[\"source\"] = source\n    o[\"ports\"] = ports\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n    return o\n}\n\n/**\n * Exposes the JavaScript [Cache](https://developer.mozilla.org/en/docs/Web/API/Cache) to Kotlin\n */\npublic external abstract class Cache {\n    fun match(request: dynamic, options: CacheQueryOptions = definedExternally): Promise<Any?>\n    fun matchAll(request: dynamic = definedExternally, options: CacheQueryOptions = definedExternally): Promise<Array<Response>>\n    fun add(request: dynamic): Promise<Unit>\n    fun addAll(requests: Array<dynamic>): Promise<Unit>\n    fun put(request: dynamic, response: Response): Promise<Unit>\n    fun delete(request: dynamic, options: CacheQueryOptions = definedExternally): Promise<Boolean>\n    fun keys(request: dynamic = definedExternally, options: CacheQueryOptions = definedExternally): Promise<Array<Request>>\n}\n\npublic external interface CacheQueryOptions {\n    var ignoreSearch: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n    var ignoreMethod: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n    var ignoreVary: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n    var cacheName: String?\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun CacheQueryOptions(ignoreSearch: Boolean? = false, ignoreMethod: Boolean? = false, ignoreVary: Boolean? = false, cacheName: String? = undefined): CacheQueryOptions {\n    val o = js(\"({})\")\n    o[\"ignoreSearch\"] = ignoreSearch\n    o[\"ignoreMethod\"] = ignoreMethod\n    o[\"ignoreVary\"] = ignoreVary\n    o[\"cacheName\"] = cacheName\n    return o\n}\n\npublic external interface CacheBatchOperation {\n    var type: String?\n        get() = definedExternally\n        set(value) = definedExternally\n    var request: Request?\n        get() = definedExternally\n        set(value) = definedExternally\n    var response: Response?\n        get() = definedExternally\n        set(value) = definedExternally\n    var options: CacheQueryOptions?\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun CacheBatchOperation(type: String? = undefined, request: Request? = undefined, response: Response? = undefined, options: CacheQueryOptions? = undefined): CacheBatchOperation {\n    val o = js(\"({})\")\n    o[\"type\"] = type\n    o[\"request\"] = request\n    o[\"response\"] = response\n    o[\"options\"] = options\n    return o\n}\n\n/**\n * Exposes the JavaScript [CacheStorage](https://developer.mozilla.org/en/docs/Web/API/CacheStorage) to Kotlin\n */\npublic external abstract class CacheStorage {\n    fun match(request: dynamic, options: CacheQueryOptions = definedExternally): Promise<Any?>\n    fun has(cacheName: String): Promise<Boolean>\n    fun open(cacheName: String): Promise<Cache>\n    fun delete(cacheName: String): Promise<Boolean>\n    fun keys(): Promise<Array<String>>\n}\n\npublic external open class FunctionalEvent : ExtendableEvent {\n    companion object {\n        val NONE: Short\n        val CAPTURING_PHASE: Short\n        val AT_TARGET: Short\n        val BUBBLING_PHASE: Short\n    }\n}\n\npublic external interface UnionMessagePortOrServiceWorker\n\npublic external interface UnionClientOrMessagePortOrServiceWorker\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface ServiceWorkerState {\n    companion object\n}\n\npublic inline val ServiceWorkerState.Companion.INSTALLING: ServiceWorkerState get() = \"installing\".asDynamic().unsafeCast<ServiceWorkerState>()\n\npublic inline val ServiceWorkerState.Companion.INSTALLED: ServiceWorkerState get() = \"installed\".asDynamic().unsafeCast<ServiceWorkerState>()\n\npublic inline val ServiceWorkerState.Companion.ACTIVATING: ServiceWorkerState get() = \"activating\".asDynamic().unsafeCast<ServiceWorkerState>()\n\npublic inline val ServiceWorkerState.Companion.ACTIVATED: ServiceWorkerState get() = \"activated\".asDynamic().unsafeCast<ServiceWorkerState>()\n\npublic inline val ServiceWorkerState.Companion.REDUNDANT: ServiceWorkerState get() = \"redundant\".asDynamic().unsafeCast<ServiceWorkerState>()\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface FrameType {\n    companion object\n}\n\npublic inline val FrameType.Companion.AUXILIARY: FrameType get() = \"auxiliary\".asDynamic().unsafeCast<FrameType>()\n\npublic inline val FrameType.Companion.TOP_LEVEL: FrameType get() = \"top-level\".asDynamic().unsafeCast<FrameType>()\n\npublic inline val FrameType.Companion.NESTED: FrameType get() = \"nested\".asDynamic().unsafeCast<FrameType>()\n\npublic inline val FrameType.Companion.NONE: FrameType get() = \"none\".asDynamic().unsafeCast<FrameType>()\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface ClientType {\n    companion object\n}\n\npublic inline val ClientType.Companion.WINDOW: ClientType get() = \"window\".asDynamic().unsafeCast<ClientType>()\n\npublic inline val ClientType.Companion.WORKER: ClientType get() = \"worker\".asDynamic().unsafeCast<ClientType>()\n\npublic inline val ClientType.Companion.SHAREDWORKER: ClientType get() = \"sharedworker\".asDynamic().unsafeCast<ClientType>()\n\npublic inline val ClientType.Companion.ALL: ClientType get() = \"all\".asDynamic().unsafeCast<ClientType>()","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n// NOTE: THIS FILE IS AUTO-GENERATED, DO NOT EDIT!\n// See github.com/kotlin/dukat for details\n\npackage org.w3c.xhr\n\nimport kotlin.js.*\nimport org.khronos.webgl.*\nimport org.w3c.css.masking.*\nimport org.w3c.dom.*\nimport org.w3c.dom.clipboard.*\nimport org.w3c.dom.css.*\nimport org.w3c.dom.encryptedmedia.*\nimport org.w3c.dom.events.*\nimport org.w3c.dom.mediacapture.*\nimport org.w3c.dom.mediasource.*\nimport org.w3c.dom.parsing.*\nimport org.w3c.dom.pointerevents.*\nimport org.w3c.dom.svg.*\nimport org.w3c.dom.url.*\nimport org.w3c.fetch.*\nimport org.w3c.files.*\nimport org.w3c.notifications.*\nimport org.w3c.performance.*\nimport org.w3c.workers.*\n\n/**\n * Exposes the JavaScript [XMLHttpRequestEventTarget](https://developer.mozilla.org/en/docs/Web/API/XMLHttpRequestEventTarget) to Kotlin\n */\npublic external abstract class XMLHttpRequestEventTarget : EventTarget {\n    open var onloadstart: ((ProgressEvent) -> dynamic)?\n    open var onprogress: ((ProgressEvent) -> dynamic)?\n    open var onabort: ((Event) -> dynamic)?\n    open var onerror: ((Event) -> dynamic)?\n    open var onload: ((Event) -> dynamic)?\n    open var ontimeout: ((Event) -> dynamic)?\n    open var onloadend: ((Event) -> dynamic)?\n}\n\npublic external abstract class XMLHttpRequestUpload : XMLHttpRequestEventTarget\n\n/**\n * Exposes the JavaScript [XMLHttpRequest](https://developer.mozilla.org/en/docs/Web/API/XMLHttpRequest) to Kotlin\n */\npublic external open class XMLHttpRequest : XMLHttpRequestEventTarget {\n    var onreadystatechange: ((Event) -> dynamic)?\n    open val readyState: Short\n    var timeout: Int\n    var withCredentials: Boolean\n    open val upload: XMLHttpRequestUpload\n    open val responseURL: String\n    open val status: Short\n    open val statusText: String\n    var responseType: XMLHttpRequestResponseType\n    open val response: Any?\n    open val responseText: String\n    open val responseXML: Document?\n    fun open(method: String, url: String)\n    fun open(method: String, url: String, async: Boolean, username: String? = definedExternally, password: String? = definedExternally)\n    fun setRequestHeader(name: String, value: String)\n    fun send(body: dynamic = definedExternally)\n    fun abort()\n    fun getResponseHeader(name: String): String?\n    fun getAllResponseHeaders(): String\n    fun overrideMimeType(mime: String)\n\n    companion object {\n        val UNSENT: Short\n        val OPENED: Short\n        val HEADERS_RECEIVED: Short\n        val LOADING: Short\n        val DONE: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [FormData](https://developer.mozilla.org/en/docs/Web/API/FormData) to Kotlin\n */\npublic external open class FormData(form: HTMLFormElement = definedExternally) {\n    fun append(name: String, value: String)\n    fun append(name: String, value: Blob, filename: String = definedExternally)\n    fun delete(name: String)\n    fun get(name: String): dynamic\n    fun getAll(name: String): Array<dynamic>\n    fun has(name: String): Boolean\n    fun set(name: String, value: String)\n    fun set(name: String, value: Blob, filename: String = definedExternally)\n}\n\n/**\n * Exposes the JavaScript [ProgressEvent](https://developer.mozilla.org/en/docs/Web/API/ProgressEvent) to Kotlin\n */\npublic external open class ProgressEvent(type: String, eventInitDict: ProgressEventInit = definedExternally) : Event {\n    open val lengthComputable: Boolean\n    open val loaded: Number\n    open val total: Number\n\n    companion object {\n        val NONE: Short\n        val CAPTURING_PHASE: Short\n        val AT_TARGET: Short\n        val BUBBLING_PHASE: Short\n    }\n}\n\npublic external interface ProgressEventInit : EventInit {\n    var lengthComputable: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n    var loaded: Number? /* = 0 */\n        get() = definedExternally\n        set(value) = definedExternally\n    var total: Number? /* = 0 */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun ProgressEventInit(lengthComputable: Boolean? = false, loaded: Number? = 0, total: Number? = 0, bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): ProgressEventInit {\n    val o = js(\"({})\")\n    o[\"lengthComputable\"] = lengthComputable\n    o[\"loaded\"] = loaded\n    o[\"total\"] = total\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n    return o\n}\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface XMLHttpRequestResponseType {\n    companion object\n}\n\npublic inline val XMLHttpRequestResponseType.Companion.EMPTY: XMLHttpRequestResponseType get() = \"\".asDynamic().unsafeCast<XMLHttpRequestResponseType>()\n\npublic inline val XMLHttpRequestResponseType.Companion.ARRAYBUFFER: XMLHttpRequestResponseType get() = \"arraybuffer\".asDynamic().unsafeCast<XMLHttpRequestResponseType>()\n\npublic inline val XMLHttpRequestResponseType.Companion.BLOB: XMLHttpRequestResponseType get() = \"blob\".asDynamic().unsafeCast<XMLHttpRequestResponseType>()\n\npublic inline val XMLHttpRequestResponseType.Companion.DOCUMENT: XMLHttpRequestResponseType get() = \"document\".asDynamic().unsafeCast<XMLHttpRequestResponseType>()\n\npublic inline val XMLHttpRequestResponseType.Companion.JSON: XMLHttpRequestResponseType get() = \"json\".asDynamic().unsafeCast<XMLHttpRequestResponseType>()\n\npublic inline val XMLHttpRequestResponseType.Companion.TEXT: XMLHttpRequestResponseType get() = \"text\".asDynamic().unsafeCast<XMLHttpRequestResponseType>()","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin\n\nimport kotlin.annotation.AnnotationRetention.BINARY\nimport kotlin.annotation.AnnotationRetention.SOURCE\nimport kotlin.annotation.AnnotationTarget.*\nimport kotlin.internal.RequireKotlin\nimport kotlin.internal.RequireKotlinVersionKind\nimport kotlin.reflect.KClass\n\n/**\n * Signals that the annotated annotation class is a marker of an experimental API.\n *\n * Any declaration annotated with that marker is considered an experimental declaration\n * and its call sites should accept the experimental aspect of it either by using [UseExperimental],\n * or by being annotated with that marker themselves, effectively causing further propagation of that experimental aspect.\n *\n * This class is deprecated in favor of a more general approach provided by [RequiresOptIn]/[OptIn].\n */\n@Target(ANNOTATION_CLASS)\n@Retention(BINARY)\n@SinceKotlin(\"1.2\")\n@RequireKotlin(\"1.2.50\", versionKind = RequireKotlinVersionKind.COMPILER_VERSION)\n@Deprecated(\"Please use RequiresOptIn instead.\")\npublic annotation class Experimental(val level: Level = Level.ERROR) {\n    /**\n     * Severity of the diagnostic that should be reported on usages of experimental API which did not explicitly accept the experimental aspect\n     * of that API either by using [UseExperimental] or by being annotated with the corresponding marker annotation.\n     */\n    public enum class Level {\n        /** Specifies that a warning should be reported on incorrect usages of this experimental API. */\n        WARNING,\n        /** Specifies that an error should be reported on incorrect usages of this experimental API. */\n        ERROR,\n    }\n}\n\n/**\n * Allows to use experimental API denoted by the given markers in the annotated file, declaration, or expression.\n * If a declaration is annotated with [UseExperimental], its usages are **not** required to opt-in to that experimental API.\n *\n * This class is deprecated in favor of a more general approach provided by [RequiresOptIn]/[OptIn].\n */\n@Target(\n    CLASS, PROPERTY, LOCAL_VARIABLE, VALUE_PARAMETER, CONSTRUCTOR, FUNCTION, PROPERTY_GETTER, PROPERTY_SETTER, EXPRESSION, FILE, TYPEALIAS\n)\n@Retention(SOURCE)\n@SinceKotlin(\"1.2\")\n@RequireKotlin(\"1.2.50\", versionKind = RequireKotlinVersionKind.COMPILER_VERSION)\n@Deprecated(\"Please use OptIn instead.\", ReplaceWith(\"OptIn(*markerClass)\", \"kotlin.OptIn\"))\npublic annotation class UseExperimental(\n    vararg val markerClass: KClass<out Annotation>\n)\n\n\n@Target(CLASS, PROPERTY, CONSTRUCTOR, FUNCTION, TYPEALIAS)\n@Retention(BINARY)\ninternal annotation class WasExperimental(\n    vararg val markerClass: KClass<out Annotation>\n)\n","package kotlin\n\nimport kotlin.annotation.AnnotationTarget.*\n\n/**\n * This annotation marks the standard library API that is considered experimental and is not subject to the\n * [general compatibility guarantees](https://kotlinlang.org/docs/reference/evolution/components-stability.html) given for the standard library:\n * the behavior of such API may be changed or the API may be removed completely in any further release.\n *\n * > Beware using the annotated API especially if you're developing a library, since your library might become binary incompatible\n * with the future versions of the standard library.\n *\n * Any usage of a declaration annotated with `@ExperimentalStdlibApi` must be accepted either by\n * annotating that usage with the [OptIn] annotation, e.g. `@OptIn(ExperimentalStdlibApi::class)`,\n * or by using the compiler argument `-Xopt-in=kotlin.ExperimentalStdlibApi`.\n */\n@Suppress(\"DEPRECATION\")\n@Experimental(level = Experimental.Level.ERROR)\n@RequiresOptIn(level = RequiresOptIn.Level.ERROR)\n@Retention(AnnotationRetention.BINARY)\n@Target(\n    CLASS,\n    ANNOTATION_CLASS,\n    PROPERTY,\n    FIELD,\n    LOCAL_VARIABLE,\n    VALUE_PARAMETER,\n    CONSTRUCTOR,\n    FUNCTION,\n    PROPERTY_GETTER,\n    PROPERTY_SETTER,\n    TYPEALIAS\n)\n@MustBeDocumented\n@SinceKotlin(\"1.3\")\npublic annotation class ExperimentalStdlibApi\n","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin\n\nimport kotlin.annotation.AnnotationTarget.*\nimport kotlin.experimental.ExperimentalTypeInference\n\n/**\n * Allows to infer generic type arguments of a function from the calls in the annotated function parameter of that function.\n *\n * When this annotation is placed on a generic function parameter of a function,\n * it enables to infer the type arguments of that generic function from the lambda body passed to that parameter.\n *\n * The calls that affect inference are either members of the receiver type of an annotated function parameter or\n * extensions for that type. The extensions must be themselves annotated with `@BuilderInference`.\n *\n * Example: we declare\n * ```\n * fun <T> sequence(@BuilderInference block: suspend SequenceScope<T>.() -> Unit): Sequence<T>\n * ```\n * and use it like\n * ```\n * val result = sequence { yield(\"result\") }\n * ```\n * Here the type argument of the resulting sequence is inferred to `String` from\n * the argument of the [SequenceScope.yield] function, that is called inside the lambda passed to [sequence].\n *\n * Note: this annotation is experimental, see [ExperimentalTypeInference] on how to opt-in for it.\n */\n@Target(VALUE_PARAMETER, FUNCTION, PROPERTY)\n@Retention(AnnotationRetention.BINARY)\n@SinceKotlin(\"1.3\")\n@ExperimentalTypeInference\npublic annotation class BuilderInference\n\n\n/**\n * Enables overload selection based on the type of the value returned from lambda argument.\n *\n * When two or more function overloads have otherwise the same parameter lists that differ only in the return type\n * of a functional parameter, this annotation enables overload selection by the type of the value returned from\n * the lambda function passed to this functional parameter.\n *\n * Example:\n * ```\n * @OverloadResolutionByLambdaReturnType\n * fun create(intProducer: () -> Int): Int\n *\n * fun create(doubleProducer: () -> Double): Double\n *\n * val newValue = create { 3.14 }\n * ```\n *\n * The annotation being applied to one of overloads allows to resolve this ambiguity by analyzing what value is returned\n * from the lambda function.\n *\n * This annotation is also used to discriminate the annotated overloads in case if overload selection still cannot\n * choose one of them even taking in account the result of lambda parameter analysis. In that case a warning is reported.\n *\n * Note: this annotation is experimental, see [ExperimentalTypeInference] on how to opt-in for it.\n */\n@Target(FUNCTION)\n@Retention(AnnotationRetention.BINARY)\n@SinceKotlin(\"1.4\")\n@ExperimentalTypeInference\npublic annotation class OverloadResolutionByLambdaReturnType","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin\n\nimport kotlin.annotation.AnnotationTarget.*\nimport kotlin.internal.RequireKotlin\nimport kotlin.internal.RequireKotlinVersionKind\n\n/**\n * The experimental multiplatform support API marker.\n *\n * Any usage of a declaration annotated with `@ExperimentalMultiplatform` must be accepted either by\n * annotating that usage with the [OptIn] annotation, e.g. `@OptIn(ExperimentalMultiplatform::class)`,\n * or by using the compiler argument `-Xopt-in=kotlin.ExperimentalMultiplatform`.\n */\n@Suppress(\"DEPRECATION\")\n@Experimental\n@RequiresOptIn\n@MustBeDocumented\n@Target(\n    CLASS,\n    ANNOTATION_CLASS,\n    PROPERTY,\n    FIELD,\n    LOCAL_VARIABLE,\n    VALUE_PARAMETER,\n    CONSTRUCTOR,\n    FUNCTION,\n    PROPERTY_GETTER,\n    PROPERTY_SETTER,\n    TYPEALIAS\n)\n@Retention(AnnotationRetention.BINARY)\n@RequireKotlin(\"1.2.50\", versionKind = RequireKotlinVersionKind.COMPILER_VERSION)\npublic annotation class ExperimentalMultiplatform\n\n/**\n * Marks an expected annotation class that it isn't required to have actual counterparts in all platforms.\n *\n * This annotation is only applicable to `expect` annotation classes in multi-platform projects and marks that class as \"optional\".\n * Optional expected class is allowed to have no corresponding actual class on the platform. Optional annotations can only be used\n * to annotate something, not as types in signatures. If an optional annotation has no corresponding actual class on a platform,\n * the annotation entries where it's used are simply erased when compiling code on that platform.\n *\n * Note: this annotation is experimental, see [ExperimentalMultiplatform] on how to opt-in for it.\n */\n@Target(ANNOTATION_CLASS)\n@Retention(AnnotationRetention.BINARY)\n@ExperimentalMultiplatform\n@RequireKotlin(\"1.2.50\", versionKind = RequireKotlinVersionKind.COMPILER_VERSION)\npublic annotation class OptionalExpectation\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin\n\nimport kotlin.annotation.AnnotationRetention.BINARY\nimport kotlin.annotation.AnnotationRetention.SOURCE\nimport kotlin.annotation.AnnotationTarget.*\nimport kotlin.internal.RequireKotlin\nimport kotlin.internal.RequireKotlinVersionKind\nimport kotlin.reflect.KClass\n\n/**\n * Signals that the annotated annotation class is a marker of an API that requires an explicit opt-in.\n *\n * Call sites of any declaration annotated with that marker should opt in to the API either by using [OptIn],\n * or by being annotated with that marker themselves, effectively causing further propagation of the opt-in requirement.\n *\n * This class requires opt-in itself and can only be used with the compiler argument `-Xopt-in=kotlin.RequiresOptIn`.\n *\n * @property message message to be reported on usages of API without an explicit opt-in, or empty string for the default message.\n *                   The default message is: \"This declaration is experimental and its usage should be marked with 'Marker'\n *                   or '@OptIn(Marker::class)'\", where `Marker` is the opt-in requirement marker.\n * @property level specifies how usages of API without an explicit opt-in are reported in code.\n */\n@Target(ANNOTATION_CLASS)\n@Retention(BINARY)\n@SinceKotlin(\"1.3\")\n@RequireKotlin(\"1.3.70\", versionKind = RequireKotlinVersionKind.COMPILER_VERSION)\npublic annotation class RequiresOptIn(\n    val message: String = \"\",\n    val level: Level = Level.ERROR\n) {\n    /**\n     * Severity of the diagnostic that should be reported on usages which did not explicitly opted into\n     * the API either by using [OptIn] or by being annotated with the corresponding marker annotation.\n     */\n    public enum class Level {\n        /** Specifies that a warning should be reported on incorrect usages of this API. */\n        WARNING,\n\n        /** Specifies that an error should be reported on incorrect usages of this API. */\n        ERROR,\n    }\n}\n\n/**\n * Allows to use the API denoted by the given markers in the annotated file, declaration, or expression.\n * If a declaration is annotated with [OptIn], its usages are **not** required to opt in to that API.\n *\n * This class requires opt-in itself and can only be used with the compiler argument `-Xopt-in=kotlin.RequiresOptIn`.\n */\n@Target(\n    CLASS, PROPERTY, LOCAL_VARIABLE, VALUE_PARAMETER, CONSTRUCTOR, FUNCTION, PROPERTY_GETTER, PROPERTY_SETTER, EXPRESSION, FILE, TYPEALIAS\n)\n@Retention(SOURCE)\n@SinceKotlin(\"1.3\")\n@RequireKotlin(\"1.3.70\", versionKind = RequireKotlinVersionKind.COMPILER_VERSION)\npublic annotation class OptIn(\n    vararg val markerClass: KClass<out Annotation>\n)\n","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\npackage kotlin.collections\n\nimport kotlin.js.JsName\n\n/**\n * Provides a skeletal implementation of the read-only [Collection] interface.\n *\n * @param E the type of elements contained in the collection. The collection is covariant in its element type.\n */\n@SinceKotlin(\"1.1\")\npublic abstract class AbstractCollection<out E> protected constructor() : Collection<E> {\n    abstract override val size: Int\n    abstract override fun iterator(): Iterator<E>\n\n    override fun contains(element: @UnsafeVariance E): Boolean = any { it == element }\n\n    override fun containsAll(elements: Collection<@UnsafeVariance E>): Boolean =\n        elements.all { contains(it) } // use when js will support bound refs: elements.all(this::contains)\n\n    override fun isEmpty(): Boolean = size == 0\n\n    override fun toString(): String = joinToString(\", \", \"[\", \"]\") {\n        if (it === this) \"(this Collection)\" else it.toString()\n    }\n\n    /**\n     * Returns new array of type `Array<Any?>` with the elements of this collection.\n     */\n    @JsName(\"toArray\")\n    protected open fun toArray(): Array<Any?> = copyToArrayImpl(this)\n\n    /**\n     * Fills the provided [array] or creates new array of the same type\n     * and fills it with the elements of this collection.\n     */\n    protected open fun <T> toArray(array: Array<T>): Array<T> = copyToArrayImpl(this, array)\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.collections\n\n\nprivate enum class State {\n    Ready,\n    NotReady,\n    Done,\n    Failed\n}\n\n/**\n * A base class to simplify implementing iterators so that implementations only have to implement [computeNext]\n * to implement the iterator, calling [done] when the iteration is complete.\n */\npublic abstract class AbstractIterator<T> : Iterator<T> {\n    private var state = State.NotReady\n    private var nextValue: T? = null\n\n    override fun hasNext(): Boolean {\n        require(state != State.Failed)\n        return when (state) {\n            State.Done -> false\n            State.Ready -> true\n            else -> tryToComputeNext()\n        }\n    }\n\n    override fun next(): T {\n        if (!hasNext()) throw NoSuchElementException()\n        state = State.NotReady\n        @Suppress(\"UNCHECKED_CAST\")\n        return nextValue as T\n    }\n\n    private fun tryToComputeNext(): Boolean {\n        state = State.Failed\n        computeNext()\n        return state == State.Ready\n    }\n\n    /**\n     * Computes the next item in the iterator.\n     *\n     * This callback method should call one of these two methods:\n     *\n     * * [setNext] with the next value of the iteration\n     * * [done] to indicate there are no more elements\n     *\n     * Failure to call either method will result in the iteration terminating with a failed state\n     */\n    abstract protected fun computeNext(): Unit\n\n    /**\n     * Sets the next value in the iteration, called from the [computeNext] function\n     */\n    protected fun setNext(value: T): Unit {\n        nextValue = value\n        state = State.Ready\n    }\n\n    /**\n     * Sets the state to done so that the iteration terminates.\n     */\n    protected fun done() {\n        state = State.Done\n    }\n}\n\n\n","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n/*\n * Based on GWT AbstractList\n * Copyright 2007 Google Inc.\n*/\n\npackage kotlin.collections\n\n/**\n * Provides a skeletal implementation of the read-only [List] interface.\n *\n * This class is intended to help implementing read-only lists so it doesn't support concurrent modification tracking.\n *\n * @param E the type of elements contained in the list. The list is covariant in its element type.\n */\n@SinceKotlin(\"1.1\")\npublic abstract class AbstractList<out E> protected constructor() : AbstractCollection<E>(), List<E> {\n    abstract override val size: Int\n    abstract override fun get(index: Int): E\n\n    override fun iterator(): Iterator<E> = IteratorImpl()\n\n    override fun indexOf(element: @UnsafeVariance E): Int = indexOfFirst { it == element }\n\n    override fun lastIndexOf(element: @UnsafeVariance E): Int = indexOfLast { it == element }\n\n    override fun listIterator(): ListIterator<E> = ListIteratorImpl(0)\n\n    override fun listIterator(index: Int): ListIterator<E> = ListIteratorImpl(index)\n\n    override fun subList(fromIndex: Int, toIndex: Int): List<E> = SubList(this, fromIndex, toIndex)\n\n    private class SubList<out E>(private val list: AbstractList<E>, private val fromIndex: Int, toIndex: Int) : AbstractList<E>(), RandomAccess {\n        private var _size: Int = 0\n\n        init {\n            checkRangeIndexes(fromIndex, toIndex, list.size)\n            this._size = toIndex - fromIndex\n        }\n\n        override fun get(index: Int): E {\n            checkElementIndex(index, _size)\n\n            return list[fromIndex + index]\n        }\n\n        override val size: Int get() = _size\n    }\n\n    /**\n     * Compares this list with other list instance with the ordered structural equality.\n     *\n     * @return true, if [other] instance is a [List] of the same size, which contains the same elements in the same order.\n     */\n    override fun equals(other: Any?): Boolean {\n        if (other === this) return true\n        if (other !is List<*>) return false\n\n        return orderedEquals(this, other)\n    }\n\n    /**\n     * Returns the hash code value for this list.\n     */\n    override fun hashCode(): Int = orderedHashCode(this)\n\n    private open inner class IteratorImpl : Iterator<E> {\n        /** the index of the item that will be returned on the next call to [next]`()` */\n        protected var index = 0\n\n        override fun hasNext(): Boolean = index < size\n\n        override fun next(): E {\n            if (!hasNext()) throw NoSuchElementException()\n            return get(index++)\n        }\n    }\n\n    /**\n     * Implementation of [ListIterator] for abstract lists.\n     */\n    private open inner class ListIteratorImpl(index: Int) : IteratorImpl(), ListIterator<E> {\n\n        init {\n            checkPositionIndex(index, this@AbstractList.size)\n            this.index = index\n        }\n\n        override fun hasPrevious(): Boolean = index > 0\n\n        override fun nextIndex(): Int = index\n\n        override fun previous(): E {\n            if (!hasPrevious()) throw NoSuchElementException()\n            return get(--index)\n        }\n\n        override fun previousIndex(): Int = index - 1\n    }\n\n    internal companion object {\n        internal fun checkElementIndex(index: Int, size: Int) {\n            if (index < 0 || index >= size) {\n                throw IndexOutOfBoundsException(\"index: $index, size: $size\")\n            }\n        }\n\n        internal fun checkPositionIndex(index: Int, size: Int) {\n            if (index < 0 || index > size) {\n                throw IndexOutOfBoundsException(\"index: $index, size: $size\")\n            }\n        }\n\n        internal fun checkRangeIndexes(fromIndex: Int, toIndex: Int, size: Int) {\n            if (fromIndex < 0 || toIndex > size) {\n                throw IndexOutOfBoundsException(\"fromIndex: $fromIndex, toIndex: $toIndex, size: $size\")\n            }\n            if (fromIndex > toIndex) {\n                throw IllegalArgumentException(\"fromIndex: $fromIndex > toIndex: $toIndex\")\n            }\n        }\n\n        internal fun checkBoundsIndexes(startIndex: Int, endIndex: Int, size: Int) {\n            if (startIndex < 0 || endIndex > size) {\n                throw IndexOutOfBoundsException(\"startIndex: $startIndex, endIndex: $endIndex, size: $size\")\n            }\n            if (startIndex > endIndex) {\n                throw IllegalArgumentException(\"startIndex: $startIndex > endIndex: $endIndex\")\n            }\n        }\n\n        internal fun orderedHashCode(c: Collection<*>): Int {\n            var hashCode = 1\n            for (e in c) {\n                hashCode = 31 * hashCode + (e?.hashCode() ?: 0)\n            }\n            return hashCode\n        }\n\n        internal fun orderedEquals(c: Collection<*>, other: Collection<*>): Boolean {\n            if (c.size != other.size) return false\n\n            val otherIterator = other.iterator()\n            for (elem in c) {\n                val elemOther = otherIterator.next()\n                if (elem != elemOther) {\n                    return false\n                }\n            }\n            return true\n        }\n    }\n}","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n/*\n * Based on GWT AbstractMap\n * Copyright 2007 Google Inc.\n */\n\npackage kotlin.collections\n\n/**\n * Provides a skeletal implementation of the read-only [Map] interface.\n *\n * The implementor is required to implement [entries] property, which should return read-only set of map entries.\n *\n * @param K the type of map keys. The map is invariant in its key type.\n * @param V the type of map values. The map is covariant in its value type.\n */\n@SinceKotlin(\"1.1\")\npublic abstract class AbstractMap<K, out V> protected constructor() : Map<K, V> {\n\n    override fun containsKey(key: K): Boolean {\n        return implFindEntry(key) != null\n    }\n\n    override fun containsValue(value: @UnsafeVariance V): Boolean = entries.any { it.value == value }\n\n    internal fun containsEntry(entry: Map.Entry<*, *>?): Boolean {\n        // since entry comes from @UnsafeVariance parameters it can be virtually anything\n        if (entry !is Map.Entry<*, *>) return false\n        val key = entry.key\n        val value = entry.value\n        val ourValue = get(key)\n\n        if (value != ourValue) {\n            return false\n        }\n\n        // Perhaps it was null and we don't contain the key?\n        if (ourValue == null && !containsKey(key)) {\n            return false\n        }\n\n        return true\n    }\n\n\n    /**\n     * Compares this map with other instance with the ordered structural equality.\n     *\n     * @return true, if [other] instance is a [Map] of the same size, all entries of which are contained in the [entries] set of this map.\n     */\n    override fun equals(other: Any?): Boolean {\n        if (other === this) return true\n        if (other !is Map<*, *>) return false\n        if (size != other.size) return false\n\n        return other.entries.all { containsEntry(it) }\n    }\n\n    override operator fun get(key: K): V? = implFindEntry(key)?.value\n\n\n    /**\n     * Returns the hash code value for this map.\n     *\n     * It is the same as the hashCode of [entries] set.\n     */\n    override fun hashCode(): Int = entries.hashCode()\n\n    override fun isEmpty(): Boolean = size == 0\n    override val size: Int get() = entries.size\n\n    /**\n     * Returns a read-only [Set] of all keys in this map.\n     *\n     * Accessing this property first time creates a keys view from [entries].\n     * All subsequent accesses just return the created instance.\n     */\n    override val keys: Set<K>\n        get() {\n            if (_keys == null) {\n                _keys = object : AbstractSet<K>() {\n                    override operator fun contains(element: K): Boolean = containsKey(element)\n\n                    override operator fun iterator(): Iterator<K> {\n                        val entryIterator = entries.iterator()\n                        return object : Iterator<K> {\n                            override fun hasNext(): Boolean = entryIterator.hasNext()\n                            override fun next(): K = entryIterator.next().key\n                        }\n                    }\n\n                    override val size: Int get() = this@AbstractMap.size\n                }\n            }\n            return _keys!!\n        }\n\n    @kotlin.jvm.Volatile\n    private var _keys: Set<K>? = null\n\n\n    override fun toString(): String = entries.joinToString(\", \", \"{\", \"}\") { toString(it) }\n\n    private fun toString(entry: Map.Entry<K, V>): String = toString(entry.key) + \"=\" + toString(entry.value)\n\n    private fun toString(o: Any?): String = if (o === this) \"(this Map)\" else o.toString()\n\n    /**\n     * Returns a read-only [Collection] of all values in this map.\n     *\n     * Accessing this property first time creates a values view from [entries].\n     * All subsequent accesses just return the created instance.\n     */\n    override val values: Collection<V>\n        get() {\n            if (_values == null) {\n                _values = object : AbstractCollection<V>() {\n                    override operator fun contains(element: @UnsafeVariance V): Boolean = containsValue(element)\n\n                    override operator fun iterator(): Iterator<V> {\n                        val entryIterator = entries.iterator()\n                        return object : Iterator<V> {\n                            override fun hasNext(): Boolean = entryIterator.hasNext()\n                            override fun next(): V = entryIterator.next().value\n                        }\n                    }\n\n                    override val size: Int get() = this@AbstractMap.size\n                }\n            }\n            return _values!!\n        }\n\n    @kotlin.jvm.Volatile\n    private var _values: Collection<V>? = null\n\n    private fun implFindEntry(key: K): Map.Entry<K, V>? = entries.firstOrNull { it.key == key }\n\n    internal companion object {\n\n        internal fun entryHashCode(e: Map.Entry<*, *>): Int = with(e) { (key?.hashCode() ?: 0) xor (value?.hashCode() ?: 0) }\n        internal fun entryToString(e: Map.Entry<*, *>): String = with(e) { \"$key=$value\" }\n        internal fun entryEquals(e: Map.Entry<*, *>, other: Any?): Boolean {\n            if (other !is Map.Entry<*, *>) return false\n            return e.key == other.key && e.value == other.value\n        }\n    }\n}\n","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\npackage kotlin.collections\n\n/**\n * Provides a skeletal implementation of the read-only [Set] interface.\n *\n * This class is intended to help implementing read-only sets so it doesn't support concurrent modification tracking.\n *\n * @param E the type of elements contained in the set. The set is covariant in its element type.\n */\n@SinceKotlin(\"1.1\")\npublic abstract class AbstractSet<out E> protected constructor() : AbstractCollection<E>(), Set<E> {\n\n    /**\n     * Compares this set with other set instance with the unordered structural equality.\n     *\n     * @return true, if [other] instance is a [Set] of the same size, all elements of which are contained in this set.\n     */\n    override fun equals(other: Any?): Boolean {\n        if (other === this) return true\n        if (other !is Set<*>) return false\n        return setEquals(this, other)\n    }\n\n    /**\n     * Returns the hash code value for this set.\n     */\n    override fun hashCode(): Int = unorderedHashCode(this)\n\n    internal companion object {\n        internal fun unorderedHashCode(c: Collection<*>): Int {\n            var hashCode = 0\n            for (element in c) {\n                hashCode += (element?.hashCode() ?: 0)\n            }\n            return hashCode\n        }\n\n        internal fun setEquals(c: Set<*>, other: Set<*>): Boolean {\n            if (c.size != other.size) return false\n            return c.containsAll(other)\n        }\n    }\n\n}","/*\n * Copyright 2010-2019 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.collections\n\n/**\n * Resizable-array implementation of the deque data structure.\n *\n * The name deque is short for \"double ended queue\" and is usually pronounced \"deck\".\n *\n * The collection provide methods for convenient access to the both ends.\n * It also implements [MutableList] interface and supports efficient get/set operations by index.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic class ArrayDeque<E> : AbstractMutableList<E> {\n    private var head: Int = 0\n    private var elementData: Array<Any?>\n\n    override var size: Int = 0\n        private set\n\n    /**\n     * Constructs an empty deque with specified [initialCapacity], or throws [IllegalArgumentException] if [initialCapacity] is negative.\n     */\n    public constructor(initialCapacity: Int) {\n        elementData = when {\n            initialCapacity == 0 -> emptyElementData\n            initialCapacity > 0 -> arrayOfNulls(initialCapacity)\n            else -> throw IllegalArgumentException(\"Illegal Capacity: $initialCapacity\")\n        }\n    }\n\n    /**\n     * Constructs an empty deque.\n     */\n    public constructor() {\n        elementData = emptyElementData\n    }\n\n    /**\n     * Constructs a deque that contains the same elements as the specified [elements] collection in the same order.\n     */\n    public constructor(elements: Collection<E>) {\n        elementData = elements.toTypedArray()\n        size = elementData.size\n        if (elementData.isEmpty()) elementData = emptyElementData\n    }\n\n    /**\n     * Ensures that the capacity of this deque is at least equal to the specified [minCapacity].\n     *\n     * If the current capacity is less than the [minCapacity], a new backing storage is allocated with greater capacity.\n     * Otherwise, this method takes no action and simply returns.\n     */\n    private fun ensureCapacity(minCapacity: Int) {\n        if (minCapacity < 0) throw IllegalStateException(\"Deque is too big.\")    // overflow\n        if (minCapacity <= elementData.size) return\n        if (elementData === emptyElementData) {\n            elementData = arrayOfNulls(minCapacity.coerceAtLeast(defaultMinCapacity))\n            return\n        }\n\n        val newCapacity = newCapacity(elementData.size, minCapacity)\n        copyElements(newCapacity)\n    }\n\n    /**\n     * Creates a new array with the specified [newCapacity] size and copies elements in the [elementData] array to it.\n     */\n    private fun copyElements(newCapacity: Int) {\n        val newElements = arrayOfNulls<Any?>(newCapacity)\n        elementData.copyInto(newElements, 0, head, elementData.size)\n        elementData.copyInto(newElements, elementData.size - head, 0, head)\n        head = 0\n        elementData = newElements\n    }\n\n    @kotlin.internal.InlineOnly\n    private inline fun internalGet(internalIndex: Int): E {\n        @Suppress(\"UNCHECKED_CAST\")\n        return elementData[internalIndex] as E\n    }\n\n    private fun positiveMod(index: Int): Int = if (index >= elementData.size) index - elementData.size else index\n\n    private fun negativeMod(index: Int): Int = if (index < 0) index + elementData.size else index\n\n    @kotlin.internal.InlineOnly\n    private inline fun internalIndex(index: Int): Int = positiveMod(head + index)\n\n    private fun incremented(index: Int): Int = if (index == elementData.lastIndex) 0 else index + 1\n\n    private fun decremented(index: Int): Int = if (index == 0) elementData.lastIndex else index - 1\n\n    override fun isEmpty(): Boolean = size == 0\n\n    /**\n     * Returns the first element, or throws [NoSuchElementException] if this deque is empty.\n     */\n    public fun first(): E = if (isEmpty()) throw NoSuchElementException(\"ArrayDeque is empty.\") else internalGet(head)\n\n    /**\n     * Returns the first element, or `null` if this deque is empty.\n     */\n    public fun firstOrNull(): E? = if (isEmpty()) null else internalGet(head)\n\n    /**\n     * Returns the last element, or throws [NoSuchElementException] if this deque is empty.\n     */\n    public fun last(): E = if (isEmpty()) throw NoSuchElementException(\"ArrayDeque is empty.\") else internalGet(internalIndex(lastIndex))\n\n    /**\n     * Returns the last element, or `null` if this deque is empty.\n     */\n    public fun lastOrNull(): E? = if (isEmpty()) null else internalGet(internalIndex(lastIndex))\n\n    /**\n     * Prepends the specified [element] to this deque.\n     */\n    public fun addFirst(element: E) {\n        ensureCapacity(size + 1)\n\n        head = decremented(head)\n        elementData[head] = element\n        size += 1\n    }\n\n    /**\n     * Appends the specified [element] to this deque.\n     */\n    public fun addLast(element: E) {\n        ensureCapacity(size + 1)\n\n        elementData[internalIndex(size)] = element\n        size += 1\n    }\n\n    /**\n     * Removes the first element from this deque and returns that removed element, or throws [NoSuchElementException] if this deque is empty.\n     */\n    public fun removeFirst(): E {\n        if (isEmpty()) throw NoSuchElementException(\"ArrayDeque is empty.\")\n\n        val element = internalGet(head)\n        elementData[head] = null\n        head = incremented(head)\n        size -= 1\n        return element\n    }\n\n    /**\n     * Removes the first element from this deque and returns that removed element, or returns `null` if this deque is empty.\n     */\n    public fun removeFirstOrNull(): E? = if (isEmpty()) null else removeFirst()\n\n    /**\n     * Removes the last element from this deque and returns that removed element, or throws [NoSuchElementException] if this deque is empty.\n     */\n    public fun removeLast(): E {\n        if (isEmpty()) throw NoSuchElementException(\"ArrayDeque is empty.\")\n\n        val internalLastIndex = internalIndex(lastIndex)\n        val element = internalGet(internalLastIndex)\n        elementData[internalLastIndex] = null\n        size -= 1\n        return element\n    }\n\n    /**\n     * Removes the last element from this deque and returns that removed element, or returns `null` if this deque is empty.\n     */\n    public fun removeLastOrNull(): E? = if (isEmpty()) null else removeLast()\n\n    // MutableList, MutableCollection\n    public override fun add(element: E): Boolean {\n        addLast(element)\n        return true\n    }\n\n    public override fun add(index: Int, element: E) {\n        AbstractList.checkPositionIndex(index, size)\n\n        if (index == size) {\n            addLast(element)\n            return\n        } else if (index == 0) {\n            addFirst(element)\n            return\n        }\n\n        ensureCapacity(size + 1)\n\n        // Elements in circular array lay in 2 ways:\n        //   1. `head` is less than `tail`:       [#, #, e1, e2, e3, #]\n        //   2. `head` is greater than `tail`:    [e3, #, #, #, e1, e2]\n        // where head is the index of the first element in the circular array,\n        // and tail is the index following the last element.\n        //\n        // At this point the insertion index is not equal to head or tail.\n        // Also the circular array can store at least one more element.\n        //\n        // Depending on where the given element must be inserted the preceding or the succeeding\n        // elements will be shifted to make room for the element to be inserted.\n        //\n        // In case the preceding elements are shifted:\n        //   * if the insertion index is greater than the head (regardless of circular array form)\n        //      -> shift the preceding elements\n        //   * otherwise, the circular array has (2) form and the insertion index is less than tail\n        //      -> shift all elements in the back of the array\n        //      -> shift preceding elements in the front of the array\n        // In case the succeeding elements are shifted:\n        //   * if the insertion index is less than the tail (regardless of circular array form)\n        //      -> shift the succeeding elements\n        //   * otherwise, the circular array has (2) form and the insertion index is greater than head\n        //      -> shift all elements in the front of the array\n        //      -> shift succeeding elements in the back of the array\n\n        val internalIndex = internalIndex(index)\n\n        if (index < (size + 1) shr 1) {\n            // closer to the first element -> shift preceding elements\n            val decrementedInternalIndex = decremented(internalIndex)\n            val decrementedHead = decremented(head)\n\n            if (decrementedInternalIndex >= head) {\n                elementData[decrementedHead] = elementData[head]  // head can be zero\n                elementData.copyInto(elementData, head, head + 1, decrementedInternalIndex + 1)\n            } else { // head > tail\n                elementData.copyInto(elementData, head - 1, head, elementData.size) // head can't be zero\n                elementData[elementData.size - 1] = elementData[0]\n                elementData.copyInto(elementData, 0, 1, decrementedInternalIndex + 1)\n            }\n\n            elementData[decrementedInternalIndex] = element\n            head = decrementedHead\n        } else {\n            // closer to the last element -> shift succeeding elements\n            val tail = internalIndex(size)\n\n            if (internalIndex < tail) {\n                elementData.copyInto(elementData, internalIndex + 1, internalIndex, tail)\n            } else { // head > tail\n                elementData.copyInto(elementData, 1, 0, tail)\n                elementData[0] = elementData[elementData.size - 1]\n                elementData.copyInto(elementData, internalIndex + 1, internalIndex, elementData.size - 1)\n            }\n\n            elementData[internalIndex] = element\n        }\n        size += 1\n    }\n\n    private fun copyCollectionElements(internalIndex: Int, elements: Collection<E>) {\n        val iterator = elements.iterator()\n\n        for (index in internalIndex until elementData.size) {\n            if (!iterator.hasNext()) break\n            elementData[index] = iterator.next()\n        }\n        for (index in 0 until head) {\n            if (!iterator.hasNext()) break\n            elementData[index] = iterator.next()\n        }\n\n        size += elements.size\n    }\n\n    public override fun addAll(elements: Collection<E>): Boolean {\n        if (elements.isEmpty()) return false\n        ensureCapacity(this.size + elements.size)\n        copyCollectionElements(internalIndex(size), elements)\n        return true\n    }\n\n    public override fun addAll(index: Int, elements: Collection<E>): Boolean {\n        AbstractList.checkPositionIndex(index, size)\n\n        if (elements.isEmpty()) {\n            return false\n        } else if (index == size) {\n            return addAll(elements)\n        }\n\n        ensureCapacity(this.size + elements.size)\n\n        val tail = internalIndex(size)\n        val internalIndex = internalIndex(index)\n        val elementsSize = elements.size\n\n        if (index < (size + 1) shr 1) {\n            // closer to the first element -> shift preceding elements\n\n            var shiftedHead = head - elementsSize\n\n            if (internalIndex >= head) {\n                if (shiftedHead >= 0) {\n                    elementData.copyInto(elementData, shiftedHead, head, internalIndex)\n                } else { // head < tail, insertion leads to head >= tail\n                    shiftedHead += elementData.size\n                    val elementsToShift = internalIndex - head\n                    val shiftToBack = elementData.size - shiftedHead\n\n                    if (shiftToBack >= elementsToShift) {\n                        elementData.copyInto(elementData, shiftedHead, head, internalIndex)\n                    } else {\n                        elementData.copyInto(elementData, shiftedHead, head, head + shiftToBack)\n                        elementData.copyInto(elementData, 0, head + shiftToBack, internalIndex)\n                    }\n                }\n            } else { // head > tail, internalIndex < tail\n                elementData.copyInto(elementData, shiftedHead, head, elementData.size)\n                if (elementsSize >= internalIndex) {\n                    elementData.copyInto(elementData, elementData.size - elementsSize, 0, internalIndex)\n                } else {\n                    elementData.copyInto(elementData, elementData.size - elementsSize, 0, elementsSize)\n                    elementData.copyInto(elementData, 0, elementsSize, internalIndex)\n                }\n            }\n            head = shiftedHead\n            copyCollectionElements(negativeMod(internalIndex - elementsSize), elements)\n        } else {\n            // closer to the last element -> shift succeeding elements\n\n            val shiftedInternalIndex = internalIndex + elementsSize\n\n            if (internalIndex < tail) {\n                if (tail + elementsSize <= elementData.size) {\n                    elementData.copyInto(elementData, shiftedInternalIndex, internalIndex, tail)\n                } else { // head < tail, insertion leads to head >= tail\n                    if (shiftedInternalIndex >= elementData.size) {\n                        elementData.copyInto(elementData, shiftedInternalIndex - elementData.size, internalIndex, tail)\n                    } else {\n                        val shiftToFront = tail + elementsSize - elementData.size\n                        elementData.copyInto(elementData, 0, tail - shiftToFront, tail)\n                        elementData.copyInto(elementData, shiftedInternalIndex, internalIndex, tail - shiftToFront)\n                    }\n                }\n            } else { // head > tail, internalIndex > head\n                elementData.copyInto(elementData, elementsSize, 0, tail)\n                if (shiftedInternalIndex >= elementData.size) {\n                    elementData.copyInto(elementData, shiftedInternalIndex - elementData.size, internalIndex, elementData.size)\n                } else {\n                    elementData.copyInto(elementData, 0, elementData.size - elementsSize, elementData.size)\n                    elementData.copyInto(elementData, shiftedInternalIndex, internalIndex, elementData.size - elementsSize)\n                }\n            }\n            copyCollectionElements(internalIndex, elements)\n        }\n\n        return true\n    }\n\n    public override fun get(index: Int): E {\n        AbstractList.checkElementIndex(index, size)\n\n        return internalGet(internalIndex(index))\n    }\n\n    public override fun set(index: Int, element: E): E {\n        AbstractList.checkElementIndex(index, size)\n\n        val internalIndex = internalIndex(index)\n        val oldElement = internalGet(internalIndex)\n        elementData[internalIndex] = element\n\n        return oldElement\n    }\n\n    public override fun contains(element: E): Boolean = indexOf(element) != -1\n\n    public override fun indexOf(element: E): Int {\n        val tail = internalIndex(size)\n\n        if (head < tail) {\n            for (index in head until tail) {\n                if (element == elementData[index]) return index - head\n            }\n        } else if (head >= tail) {\n            for (index in head until elementData.size) {\n                if (element == elementData[index]) return index - head\n            }\n            for (index in 0 until tail) {\n                if (element == elementData[index]) return index + elementData.size - head\n            }\n        }\n\n        return -1\n    }\n\n    public override fun lastIndexOf(element: E): Int {\n        val tail = internalIndex(size)\n\n        if (head < tail) {\n            for (index in tail - 1 downTo head) {\n                if (element == elementData[index]) return index - head\n            }\n        } else if (head > tail) {\n            for (index in tail - 1 downTo 0) {\n                if (element == elementData[index]) return index + elementData.size - head\n            }\n            for (index in elementData.lastIndex downTo head) {\n                if (element == elementData[index]) return index - head\n            }\n        }\n\n        return -1\n    }\n\n    public override fun remove(element: E): Boolean {\n        val index = indexOf(element)\n        if (index == -1) return false\n        removeAt(index)\n        return true\n    }\n\n    public override fun removeAt(index: Int): E {\n        AbstractList.checkElementIndex(index, size)\n\n        if (index == lastIndex) {\n            return removeLast()\n        } else if (index == 0) {\n            return removeFirst()\n        }\n\n        val internalIndex = internalIndex(index)\n        val element = internalGet(internalIndex)\n\n        if (index < size shr 1) {\n            // closer to the first element -> shift preceding elements\n            if (internalIndex >= head) {\n                elementData.copyInto(elementData, head + 1, head, internalIndex)\n            } else { // head > tail, internalIndex < head\n                elementData.copyInto(elementData, 1, 0, internalIndex)\n                elementData[0] = elementData[elementData.size - 1]\n                elementData.copyInto(elementData, head + 1, head, elementData.size - 1)\n            }\n\n            elementData[head] = null\n            head = incremented(head)\n        } else {\n            // closer to the last element -> shift succeeding elements\n            val internalLastIndex = internalIndex(lastIndex)\n\n            if (internalIndex <= internalLastIndex) {\n                elementData.copyInto(elementData, internalIndex, internalIndex + 1, internalLastIndex + 1)\n            } else { // head > tail, internalIndex > head\n                elementData.copyInto(elementData, internalIndex, internalIndex + 1, elementData.size)\n                elementData[elementData.size - 1] = elementData[0]\n                elementData.copyInto(elementData, 0, 1, internalLastIndex + 1)\n            }\n\n            elementData[internalLastIndex] = null\n        }\n        size -= 1\n\n        return element\n    }\n\n    public override fun removeAll(elements: Collection<E>): Boolean = filterInPlace { !elements.contains(it) }\n\n    public override fun retainAll(elements: Collection<E>): Boolean = filterInPlace { elements.contains(it) }\n\n    private inline fun filterInPlace(predicate: (E) -> Boolean): Boolean {\n        if (this.isEmpty() || elementData.isEmpty())\n            return false\n\n        val tail = internalIndex(size)\n        var newTail = head\n        var modified = false\n\n        if (head < tail) {\n            for (index in head until tail) {\n                val element = elementData[index]\n\n                @Suppress(\"UNCHECKED_CAST\")\n                if (predicate(element as E))\n                    elementData[newTail++] = element\n                else\n                    modified = true\n            }\n\n            elementData.fill(null, newTail, tail)\n\n        } else {\n            for (index in head until elementData.size) {\n                val element = elementData[index]\n                elementData[index] = null\n\n                @Suppress(\"UNCHECKED_CAST\")\n                if (predicate(element as E))\n                    elementData[newTail++] = element\n                else\n                    modified = true\n            }\n\n            newTail = positiveMod(newTail)\n\n            for (index in 0 until tail) {\n                val element = elementData[index]\n                elementData[index] = null\n\n                @Suppress(\"UNCHECKED_CAST\")\n                if (predicate(element as E)) {\n                    elementData[newTail] = element\n                    newTail = incremented(newTail)\n                } else {\n                    modified = true\n                }\n            }\n        }\n        if (modified)\n            size = negativeMod(newTail - head)\n\n        return modified\n    }\n\n    public override fun clear() {\n        val tail = internalIndex(size)\n        if (head < tail) {\n            elementData.fill(null, head, tail)\n        } else if (isNotEmpty()) {\n            elementData.fill(null, head, elementData.size)\n            elementData.fill(null, 0, tail)\n        }\n        head = 0\n        size = 0\n    }\n\n    @Suppress(\"NOTHING_TO_OVERRIDE\")\n    override fun <T> toArray(array: Array<T>): Array<T> {\n        @Suppress(\"UNCHECKED_CAST\")\n        val dest = (if (array.size >= size) array else arrayOfNulls(array, size)) as Array<Any?>\n\n        val tail = internalIndex(size)\n        if (head < tail) {\n            elementData.copyInto(dest, startIndex = head, endIndex = tail)\n        } else if (isNotEmpty()) {\n            elementData.copyInto(dest, destinationOffset = 0, startIndex = head, endIndex = elementData.size)\n            elementData.copyInto(dest, destinationOffset = elementData.size - head, startIndex = 0, endIndex = tail)\n        }\n        if (dest.size > size) {\n            dest[size] = null // null-terminate\n        }\n\n        @Suppress(\"UNCHECKED_CAST\")\n        return dest as Array<T>\n    }\n\n    @Suppress(\"NOTHING_TO_OVERRIDE\")\n    override fun toArray(): Array<Any?> {\n        return toArray(arrayOfNulls<Any?>(size))\n    }\n\n    // for testing\n    internal fun <T> testToArray(array: Array<T>): Array<T> = toArray(array)\n    internal fun testToArray(): Array<Any?> = toArray()\n\n    internal companion object {\n        private val emptyElementData = emptyArray<Any?>()\n        private const val maxArraySize = Int.MAX_VALUE - 8\n        private const val defaultMinCapacity = 10\n\n        internal fun newCapacity(oldCapacity: Int, minCapacity: Int): Int {\n            // overflow-conscious\n            var newCapacity = oldCapacity + (oldCapacity shr 1)\n            if (newCapacity - minCapacity < 0)\n                newCapacity = minCapacity\n            if (newCapacity - maxArraySize > 0)\n                newCapacity = if (minCapacity > maxArraySize) Int.MAX_VALUE else maxArraySize\n            return newCapacity\n        }\n    }\n\n    // For testing only\n    internal fun internalStructure(structure: (head: Int, elements: Array<Any?>) -> Unit) {\n        val tail = internalIndex(size)\n        val head = if (isEmpty() || head < tail) head else head - elementData.size\n        structure(head, toArray())\n    }\n}","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"ArraysKt\")\n\n\npackage kotlin.collections\n\nimport kotlin.contracts.*\n\n\n/**\n * Returns a single list of all elements from all arrays in the given array.\n * @sample samples.collections.Arrays.Transformations.flattenArray\n */\npublic fun <T> Array<out Array<out T>>.flatten(): List<T> {\n    val result = ArrayList<T>(sumOf { it.size })\n    for (element in this) {\n        result.addAll(element)\n    }\n    return result\n}\n\n/**\n * Returns a pair of lists, where\n * *first* list is built from the first values of each pair from this array,\n * *second* list is built from the second values of each pair from this array.\n * @sample samples.collections.Arrays.Transformations.unzipArray\n */\npublic fun <T, R> Array<out Pair<T, R>>.unzip(): Pair<List<T>, List<R>> {\n    val listT = ArrayList<T>(size)\n    val listR = ArrayList<R>(size)\n    for (pair in this) {\n        listT.add(pair.first)\n        listR.add(pair.second)\n    }\n    return listT to listR\n}\n\n/**\n * Returns `true` if this nullable array is either null or empty.\n * @sample samples.collections.Arrays.Usage.arrayIsNullOrEmpty\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun Array<*>?.isNullOrEmpty(): Boolean {\n    contract {\n        returns(false) implies (this@isNullOrEmpty != null)\n    }\n\n    return this == null || this.isEmpty()\n}\n\n/**\n * Returns this array if it's not empty\n * or the result of calling [defaultValue] function if the array is empty.\n *\n * @sample samples.collections.Arrays.Usage.arrayIfEmpty\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"UPPER_BOUND_CANNOT_BE_ARRAY\")\npublic inline fun <C, R> C.ifEmpty(defaultValue: () -> R): R where C : Array<*>, C : R =\n    if (isEmpty()) defaultValue() else this\n\n\n@OptIn(ExperimentalUnsignedTypes::class)\n@SinceKotlin(\"1.3\")\n@PublishedApi\n@kotlin.jvm.JvmName(\"contentDeepEquals\")\n@kotlin.js.JsName(\"contentDeepEqualsImpl\")\ninternal fun <T> Array<out T>?.contentDeepEqualsImpl(other: Array<out T>?): Boolean {\n    if (this === other) return true\n    if (this == null || other == null || this.size != other.size) return false\n\n    for (i in indices) {\n        val v1 = this[i]\n        val v2 = other[i]\n\n        if (v1 === v2) {\n            continue\n        } else if (v1 == null || v2 == null) {\n            return false\n        }\n\n        when {\n            v1 is Array<*>     && v2 is Array<*>     -> if (!v1.contentDeepEquals(v2)) return false\n            v1 is ByteArray    && v2 is ByteArray    -> if (!v1.contentEquals(v2)) return false\n            v1 is ShortArray   && v2 is ShortArray   -> if (!v1.contentEquals(v2)) return false\n            v1 is IntArray     && v2 is IntArray     -> if (!v1.contentEquals(v2)) return false\n            v1 is LongArray    && v2 is LongArray    -> if (!v1.contentEquals(v2)) return false\n            v1 is FloatArray   && v2 is FloatArray   -> if (!v1.contentEquals(v2)) return false\n            v1 is DoubleArray  && v2 is DoubleArray  -> if (!v1.contentEquals(v2)) return false\n            v1 is CharArray    && v2 is CharArray    -> if (!v1.contentEquals(v2)) return false\n            v1 is BooleanArray && v2 is BooleanArray -> if (!v1.contentEquals(v2)) return false\n\n            v1 is UByteArray   && v2 is UByteArray   -> if (!v1.contentEquals(v2)) return false\n            v1 is UShortArray  && v2 is UShortArray  -> if (!v1.contentEquals(v2)) return false\n            v1 is UIntArray    && v2 is UIntArray    -> if (!v1.contentEquals(v2)) return false\n            v1 is ULongArray   && v2 is ULongArray   -> if (!v1.contentEquals(v2)) return false\n\n            else -> if (v1 != v2) return false\n        }\n\n    }\n    return true\n}\n\n@SinceKotlin(\"1.3\")\n@PublishedApi\n@kotlin.jvm.JvmName(\"contentDeepToString\")\n@kotlin.js.JsName(\"contentDeepToStringImpl\")\ninternal fun <T> Array<out T>?.contentDeepToStringImpl(): String {\n    if (this == null) return \"null\"\n    val length = size.coerceAtMost((Int.MAX_VALUE - 2) / 5) * 5 + 2 // in order not to overflow Int.MAX_VALUE\n    return buildString(length) {\n        contentDeepToStringInternal(this, mutableListOf())\n    }\n}\n\n@OptIn(ExperimentalUnsignedTypes::class)\nprivate fun <T> Array<out T>.contentDeepToStringInternal(result: StringBuilder, processed: MutableList<Array<*>>) {\n    if (this in processed) {\n        result.append(\"[...]\")\n        return\n    }\n    processed.add(this)\n    result.append('[')\n\n    for (i in indices) {\n        if (i != 0) {\n            result.append(\", \")\n        }\n        val element = this[i]\n        when (element) {\n            null            -> result.append(\"null\")\n            is Array<*>     -> element.contentDeepToStringInternal(result, processed)\n            is ByteArray    -> result.append(element.contentToString())\n            is ShortArray   -> result.append(element.contentToString())\n            is IntArray     -> result.append(element.contentToString())\n            is LongArray    -> result.append(element.contentToString())\n            is FloatArray   -> result.append(element.contentToString())\n            is DoubleArray  -> result.append(element.contentToString())\n            is CharArray    -> result.append(element.contentToString())\n            is BooleanArray -> result.append(element.contentToString())\n\n            is UByteArray   -> result.append(element.contentToString())\n            is UShortArray  -> result.append(element.contentToString())\n            is UIntArray    -> result.append(element.contentToString())\n            is ULongArray   -> result.append(element.contentToString())\n\n            else            -> result.append(element.toString())\n        }\n    }\n\n    result.append(']')\n    processed.removeAt(processed.lastIndex)\n}","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmName(\"GroupingKt\")\n@file:kotlin.jvm.JvmMultifileClass\n\npackage kotlin.collections\n\n/**\n * Represents a source of elements with a [keyOf] function, which can be applied to each element to get its key.\n *\n * A [Grouping] structure serves as an intermediate step in group-and-fold operations:\n * they group elements by their keys and then fold each group with some aggregating operation.\n *\n * It is created by attaching `keySelector: (T) -> K` function to a source of elements.\n * To get an instance of [Grouping] use one of `groupingBy` extension functions:\n * - [Iterable.groupingBy]\n * - [Sequence.groupingBy]\n * - [Array.groupingBy]\n * - [CharSequence.groupingBy]\n *\n * For the list of group-and-fold operations available, see the [extension functions](#extension-functions) for `Grouping`.\n */\n@SinceKotlin(\"1.1\")\npublic interface Grouping<T, out K> {\n    /** Returns an [Iterator] over the elements of the source of this grouping. */\n    fun sourceIterator(): Iterator<T>\n    /** Extracts the key of an [element]. */\n    fun keyOf(element: T): K\n}\n\n/**\n * Groups elements from the [Grouping] source by key and applies [operation] to the elements of each group sequentially,\n * passing the previously accumulated value and the current element as arguments, and stores the results in a new map.\n *\n * The key for each element is provided by the [Grouping.keyOf] function.\n *\n * @param operation function is invoked on each element with the following parameters:\n *  - `key`: the key of the group this element belongs to;\n *  - `accumulator`: the current value of the accumulator of the group, can be `null` if it's the first `element` encountered in the group;\n *  - `element`: the element from the source being aggregated;\n *  - `first`: indicates whether it's the first `element` encountered in the group.\n *\n * @return a [Map] associating the key of each group with the result of aggregation of the group elements.\n * @sample samples.collections.Grouping.aggregateByRadix\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <T, K, R> Grouping<T, K>.aggregate(\n    operation: (key: K, accumulator: R?, element: T, first: Boolean) -> R\n): Map<K, R> {\n    return aggregateTo(mutableMapOf<K, R>(), operation)\n}\n\n/**\n * Groups elements from the [Grouping] source by key and applies [operation] to the elements of each group sequentially,\n * passing the previously accumulated value and the current element as arguments,\n * and stores the results in the given [destination] map.\n *\n * The key for each element is provided by the [Grouping.keyOf] function.\n *\n * @param operation a function that is invoked on each element with the following parameters:\n *  - `key`: the key of the group this element belongs to;\n *  - `accumulator`: the current value of the accumulator of the group, can be `null` if it's the first `element` encountered in the group;\n *  - `element`: the element from the source being aggregated;\n *  - `first`: indicates whether it's the first `element` encountered in the group.\n *\n * If the [destination] map already has a value corresponding to some key,\n * then the elements being aggregated for that key are never considered as `first`.\n *\n * @return the [destination] map associating the key of each group with the result of aggregation of the group elements.\n * @sample samples.collections.Grouping.aggregateByRadixTo\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <T, K, R, M : MutableMap<in K, R>> Grouping<T, K>.aggregateTo(\n    destination: M,\n    operation: (key: K, accumulator: R?, element: T, first: Boolean) -> R\n): M {\n    for (e in this.sourceIterator()) {\n        val key = keyOf(e)\n        val accumulator = destination[key]\n        destination[key] = operation(key, accumulator, e, accumulator == null && !destination.containsKey(key))\n    }\n    return destination\n}\n\n/**\n * Groups elements from the [Grouping] source by key and applies [operation] to the elements of each group sequentially,\n * passing the previously accumulated value and the current element as arguments, and stores the results in a new map.\n * An initial value of accumulator is provided by [initialValueSelector] function.\n *\n * @param initialValueSelector a function that provides an initial value of accumulator for each group.\n *  It's invoked with parameters:\n *  - `key`: the key of the group;\n *  - `element`: the first element being encountered in that group.\n *\n * @param operation a function that is invoked on each element with the following parameters:\n *  - `key`: the key of the group this element belongs to;\n *  - `accumulator`: the current value of the accumulator of the group;\n *  - `element`: the element from the source being accumulated.\n *\n * @return a [Map] associating the key of each group with the result of accumulating the group elements.\n * @sample samples.collections.Grouping.foldByEvenLengthWithComputedInitialValue\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <T, K, R> Grouping<T, K>.fold(\n    initialValueSelector: (key: K, element: T) -> R,\n    operation: (key: K, accumulator: R, element: T) -> R\n): Map<K, R> =\n    @Suppress(\"UNCHECKED_CAST\")\n    aggregate { key, acc, e, first -> operation(key, if (first) initialValueSelector(key, e) else acc as R, e) }\n\n/**\n * Groups elements from the [Grouping] source by key and applies [operation] to the elements of each group sequentially,\n * passing the previously accumulated value and the current element as arguments,\n * and stores the results in the given [destination] map.\n * An initial value of accumulator is provided by [initialValueSelector] function.\n *\n * @param initialValueSelector a function that provides an initial value of accumulator for each group.\n *  It's invoked with parameters:\n *  - `key`: the key of the group;\n *  - `element`: the first element being encountered in that group.\n *\n * If the [destination] map already has a value corresponding to some key, that value is used as an initial value of\n * the accumulator for that group and the [initialValueSelector] function is not called for that group.\n *\n * @param operation a function that is invoked on each element with the following parameters:\n *  - `key`: the key of the group this element belongs to;\n *  - `accumulator`: the current value of the accumulator of the group;\n *  - `element`: the element from the source being accumulated.\n *\n * @return the [destination] map associating the key of each group with the result of accumulating the group elements.\n * @sample samples.collections.Grouping.foldByEvenLengthWithComputedInitialValueTo\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <T, K, R, M : MutableMap<in K, R>> Grouping<T, K>.foldTo(\n    destination: M,\n    initialValueSelector: (key: K, element: T) -> R,\n    operation: (key: K, accumulator: R, element: T) -> R\n): M =\n    @Suppress(\"UNCHECKED_CAST\")\n    aggregateTo(destination) { key, acc, e, first -> operation(key, if (first) initialValueSelector(key, e) else acc as R, e) }\n\n\n/**\n * Groups elements from the [Grouping] source by key and applies [operation] to the elements of each group sequentially,\n * passing the previously accumulated value and the current element as arguments, and stores the results in a new map.\n * An initial value of accumulator is the same [initialValue] for each group.\n *\n * @param operation a function that is invoked on each element with the following parameters:\n *  - `accumulator`: the current value of the accumulator of the group;\n *  - `element`: the element from the source being accumulated.\n *\n * @return a [Map] associating the key of each group with the result of accumulating the group elements.\n * @sample samples.collections.Grouping.foldByEvenLengthWithConstantInitialValue\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <T, K, R> Grouping<T, K>.fold(\n    initialValue: R,\n    operation: (accumulator: R, element: T) -> R\n): Map<K, R> =\n    @Suppress(\"UNCHECKED_CAST\")\n    aggregate { _, acc, e, first -> operation(if (first) initialValue else acc as R, e) }\n\n/**\n * Groups elements from the [Grouping] source by key and applies [operation] to the elements of each group sequentially,\n * passing the previously accumulated value and the current element as arguments,\n * and stores the results in the given [destination] map.\n * An initial value of accumulator is the same [initialValue] for each group.\n *\n * If the [destination] map already has a value corresponding to the key of some group,\n * that value is used as an initial value of the accumulator for that group.\n *\n * @param operation a function that is invoked on each element with the following parameters:\n *  - `accumulator`: the current value of the accumulator of the group;\n *  - `element`: the element from the source being accumulated.\n *\n * @return the [destination] map associating the key of each group with the result of accumulating the group elements.\n * @sample samples.collections.Grouping.foldByEvenLengthWithConstantInitialValueTo\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <T, K, R, M : MutableMap<in K, R>> Grouping<T, K>.foldTo(\n    destination: M,\n    initialValue: R,\n    operation: (accumulator: R, element: T) -> R\n): M =\n    @Suppress(\"UNCHECKED_CAST\")\n    aggregateTo(destination) { _, acc, e, first -> operation(if (first) initialValue else acc as R, e) }\n\n\n/**\n * Groups elements from the [Grouping] source by key and applies the reducing [operation] to the elements of each group\n * sequentially starting from the second element of the group,\n * passing the previously accumulated value and the current element as arguments,\n * and stores the results in a new map.\n * An initial value of accumulator is the first element of the group.\n *\n * @param operation a function that is invoked on each subsequent element of the group with the following parameters:\n *  - `key`: the key of the group this element belongs to;\n *  - `accumulator`: the current value of the accumulator of the group;\n *  - `element`: the element from the source being accumulated.\n *\n * @return a [Map] associating the key of each group with the result of accumulating the group elements.\n * @sample samples.collections.Grouping.reduceByMaxVowels\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <S, T : S, K> Grouping<T, K>.reduce(\n    operation: (key: K, accumulator: S, element: T) -> S\n): Map<K, S> =\n    aggregate { key, acc, e, first ->\n        @Suppress(\"UNCHECKED_CAST\")\n        if (first) e else operation(key, acc as S, e)\n    }\n\n/**\n * Groups elements from the [Grouping] source by key and applies the reducing [operation] to the elements of each group\n * sequentially starting from the second element of the group,\n * passing the previously accumulated value and the current element as arguments,\n * and stores the results in the given [destination] map.\n * An initial value of accumulator is the first element of the group.\n *\n * If the [destination] map already has a value corresponding to the key of some group,\n * that value is used as an initial value of the accumulator for that group and the first element of that group is also\n * subjected to the [operation].\n\n * @param operation a function that is invoked on each subsequent element of the group with the following parameters:\n *  - `accumulator`: the current value of the accumulator of the group;\n *  - `element`: the element from the source being folded;\n *\n * @return the [destination] map associating the key of each group with the result of accumulating the group elements.\n * @sample samples.collections.Grouping.reduceByMaxVowelsTo\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <S, T : S, K, M : MutableMap<in K, S>> Grouping<T, K>.reduceTo(\n    destination: M,\n    operation: (key: K, accumulator: S, element: T) -> S\n): M =\n    aggregateTo(destination) { key, acc, e, first ->\n        @Suppress(\"UNCHECKED_CAST\")\n        if (first) e else operation(key, acc as S, e)\n    }\n\n\n/**\n * Groups elements from the [Grouping] source by key and counts elements in each group to the given [destination] map.\n *\n * If the [destination] map already has a value corresponding to the key of some group,\n * that value is used as an initial value of the counter for that group.\n *\n * @return the [destination] map associating the key of each group with the count of elements in the group.\n *\n * @sample samples.collections.Grouping.groupingByEachCount\n */\n@SinceKotlin(\"1.1\")\npublic fun <T, K, M : MutableMap<in K, Int>> Grouping<T, K>.eachCountTo(destination: M): M =\n    foldTo(destination, 0) { acc, _ -> acc + 1 }\n\n/*\n/**\n * Groups elements from the [Grouping] source by key and sums values provided by the [valueSelector] function for elements in each group\n * to the given [destination] map.\n *\n *\n * If the [destination] map already has a value corresponding to the key of some group,\n * that value is used as an initial value of the sum for that group.\n *\n * @return the [destination] map associating the key of each group with the sum of elements in the group.\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <T, K, M : MutableMap<in K, Int>> Grouping<T, K>.eachSumOfTo(destination: M, valueSelector: (T) -> Int): M =\n        foldTo(destination, 0) { acc, e -> acc + valueSelector(e)}\n*/\n\n\n/*\n// TODO: sum by long and by double overloads\n\npublic inline fun <T, K, M : MutableMap<in K, Long>> Grouping<T, K>.sumEachByLongTo(destination: M, valueSelector: (T) -> Long): M =\n        foldTo(destination, 0L) { acc, e -> acc + valueSelector(e)}\n\npublic inline fun <T, K> Grouping<T, K>.sumEachByLong(valueSelector: (T) -> Long): Map<K, Long> =\n        fold(0L) { acc, e -> acc + valueSelector(e)}\n\npublic inline fun <T, K, M : MutableMap<in K, Double>> Grouping<T, K>.sumEachByDoubleTo(destination: M, valueSelector: (T) -> Double): M =\n        foldTo(destination, 0.0) { acc, e -> acc + valueSelector(e)}\n\npublic inline fun <T, K> Grouping<T, K>.sumEachByDouble(valueSelector: (T) -> Double): Map<K, Double> =\n        fold(0.0) { acc, e -> acc + valueSelector(e)}\n*/\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.collections\n\n/**\n * Data class representing a value from a collection or sequence, along with its index in that collection or sequence.\n *\n * @property value the underlying value.\n * @property index the index of the value in the collection or sequence.\n */\npublic data class IndexedValue<out T>(public val index: Int, public val value: T)\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"MapsKt\")\n\npackage kotlin.collections\n\n/**\n * Returns the value for the given key, or the implicit default value for this map.\n * By default no implicit value is provided for maps and a [NoSuchElementException] is thrown.\n * To create a map with implicit default value use [withDefault] method.\n *\n * @throws NoSuchElementException when the map doesn't contain a value for the specified key and no implicit default was provided for that map.\n */\n@kotlin.jvm.JvmName(\"getOrImplicitDefaultNullable\")\n@PublishedApi\ninternal fun <K, V> Map<K, V>.getOrImplicitDefault(key: K): V {\n    if (this is MapWithDefault)\n        return this.getOrImplicitDefault(key)\n\n    return getOrElseNullable(key, { throw NoSuchElementException(\"Key $key is missing in the map.\") })\n}\n\n/**\n * Returns a wrapper of this read-only map, having the implicit default value provided with the specified function [defaultValue].\n *\n * This implicit default value is used when the original map doesn't contain a value for the key specified\n * and a value is obtained with [Map.getValue] function, for example when properties are delegated to the map.\n *\n * When this map already has an implicit default value provided with a former call to [withDefault], it is being replaced by this call.\n */\npublic fun <K, V> Map<K, V>.withDefault(defaultValue: (key: K) -> V): Map<K, V> =\n    when (this) {\n        is MapWithDefault -> this.map.withDefault(defaultValue)\n        else -> MapWithDefaultImpl(this, defaultValue)\n    }\n\n/**\n * Returns a wrapper of this mutable map, having the implicit default value provided with the specified function [defaultValue].\n *\n * This implicit default value is used when the original map doesn't contain a value for the key specified\n * and a value is obtained with [Map.getValue] function, for example when properties are delegated to the map.\n *\n * When this map already has an implicit default value provided with a former call to [withDefault], it is being replaced by this call.\n */\n@kotlin.jvm.JvmName(\"withDefaultMutable\")\npublic fun <K, V> MutableMap<K, V>.withDefault(defaultValue: (key: K) -> V): MutableMap<K, V> =\n    when (this) {\n        is MutableMapWithDefault -> this.map.withDefault(defaultValue)\n        else -> MutableMapWithDefaultImpl(this, defaultValue)\n    }\n\n\nprivate interface MapWithDefault<K, out V> : Map<K, V> {\n    public val map: Map<K, V>\n    public fun getOrImplicitDefault(key: K): V\n}\n\nprivate interface MutableMapWithDefault<K, V> : MutableMap<K, V>, MapWithDefault<K, V> {\n    public override val map: MutableMap<K, V>\n}\n\n\nprivate class MapWithDefaultImpl<K, out V>(public override val map: Map<K, V>, private val default: (key: K) -> V) : MapWithDefault<K, V> {\n    override fun equals(other: Any?): Boolean = map.equals(other)\n    override fun hashCode(): Int = map.hashCode()\n    override fun toString(): String = map.toString()\n    override val size: Int get() = map.size\n    override fun isEmpty(): Boolean = map.isEmpty()\n    override fun containsKey(key: K): Boolean = map.containsKey(key)\n    override fun containsValue(value: @UnsafeVariance V): Boolean = map.containsValue(value)\n    override fun get(key: K): V? = map.get(key)\n    override val keys: Set<K> get() = map.keys\n    override val values: Collection<V> get() = map.values\n    override val entries: Set<Map.Entry<K, V>> get() = map.entries\n\n    override fun getOrImplicitDefault(key: K): V = map.getOrElseNullable(key, { default(key) })\n}\n\nprivate class MutableMapWithDefaultImpl<K, V>(public override val map: MutableMap<K, V>, private val default: (key: K) -> V) : MutableMapWithDefault<K, V> {\n    override fun equals(other: Any?): Boolean = map.equals(other)\n    override fun hashCode(): Int = map.hashCode()\n    override fun toString(): String = map.toString()\n    override val size: Int get() = map.size\n    override fun isEmpty(): Boolean = map.isEmpty()\n    override fun containsKey(key: K): Boolean = map.containsKey(key)\n    override fun containsValue(value: @UnsafeVariance V): Boolean = map.containsValue(value)\n    override fun get(key: K): V? = map.get(key)\n    override val keys: MutableSet<K> get() = map.keys\n    override val values: MutableCollection<V> get() = map.values\n    override val entries: MutableSet<MutableMap.MutableEntry<K, V>> get() = map.entries\n\n    override fun put(key: K, value: V): V? = map.put(key, value)\n    override fun remove(key: K): V? = map.remove(key)\n    override fun putAll(from: Map<out K, V>) = map.putAll(from)\n    override fun clear() = map.clear()\n\n    override fun getOrImplicitDefault(key: K): V = map.getOrElseNullable(key, { default(key) })\n}\n\n","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmName(\"MapAccessorsKt\")\n\npackage kotlin.collections\n\nimport kotlin.reflect.KProperty\nimport kotlin.internal.Exact\n\n/**\n * Returns the value of the property for the given object from this read-only map.\n * @param thisRef the object for which the value is requested (not used).\n * @param property the metadata for the property, used to get the name of property and lookup the value corresponding to this name in the map.\n * @return the property value.\n *\n * @throws NoSuchElementException when the map doesn't contain value for the property name and doesn't provide an implicit default (see [withDefault]).\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <V, V1 : V> Map<in String, @Exact V>.getValue(thisRef: Any?, property: KProperty<*>): V1 =\n    @Suppress(\"UNCHECKED_CAST\") (getOrImplicitDefault(property.name) as V1)\n\n/**\n * Returns the value of the property for the given object from this mutable map.\n * @param thisRef the object for which the value is requested (not used).\n * @param property the metadata for the property, used to get the name of property and lookup the value corresponding to this name in the map.\n * @return the property value.\n *\n * @throws NoSuchElementException when the map doesn't contain value for the property name and doesn't provide an implicit default (see [withDefault]).\n */\n@kotlin.jvm.JvmName(\"getVar\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <V, V1 : V> MutableMap<in String, out @Exact V>.getValue(thisRef: Any?, property: KProperty<*>): V1 =\n    @Suppress(\"UNCHECKED_CAST\") (getOrImplicitDefault(property.name) as V1)\n\n/**\n * Stores the value of the property for the given object in this mutable map.\n * @param thisRef the object for which the value is requested (not used).\n * @param property the metadata for the property, used to get the name of property and store the value associated with that name in the map.\n * @param value the value to set.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <V> MutableMap<in String, in V>.setValue(thisRef: Any?, property: KProperty<*>, value: V) {\n    this.put(property.name, value)\n}\n","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"CollectionsKt\")\n\npackage kotlin.collections\n\nimport kotlin.random.Random\n\n/**\n * Removes a single instance of the specified element from this\n * collection, if it is present.\n *\n * Allows to overcome type-safety restriction of `remove` that requires to pass an element of type `E`.\n *\n * @return `true` if the element has been successfully removed; `false` if it was not present in the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes T> MutableCollection<out T>.remove(element: T): Boolean =\n    @Suppress(\"UNCHECKED_CAST\") (this as MutableCollection<T>).remove(element)\n\n/**\n * Removes all of this collection's elements that are also contained in the specified collection.\n\n * Allows to overcome type-safety restriction of `removeAll` that requires to pass a collection of type `Collection<E>`.\n *\n * @return `true` if any of the specified elements was removed from the collection, `false` if the collection was not modified.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes T> MutableCollection<out T>.removeAll(elements: Collection<T>): Boolean =\n    @Suppress(\"UNCHECKED_CAST\") (this as MutableCollection<T>).removeAll(elements)\n\n/**\n * Retains only the elements in this collection that are contained in the specified collection.\n *\n * Allows to overcome type-safety restriction of `retainAll` that requires to pass a collection of type `Collection<E>`.\n *\n * @return `true` if any element was removed from the collection, `false` if the collection was not modified.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes T> MutableCollection<out T>.retainAll(elements: Collection<T>): Boolean =\n    @Suppress(\"UNCHECKED_CAST\") (this as MutableCollection<T>).retainAll(elements)\n\n/**\n * Adds the specified [element] to this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.plusAssign(element: T) {\n    this.add(element)\n}\n\n/**\n * Adds all elements of the given [elements] collection to this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.plusAssign(elements: Iterable<T>) {\n    this.addAll(elements)\n}\n\n/**\n * Adds all elements of the given [elements] array to this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.plusAssign(elements: Array<T>) {\n    this.addAll(elements)\n}\n\n/**\n * Adds all elements of the given [elements] sequence to this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.plusAssign(elements: Sequence<T>) {\n    this.addAll(elements)\n}\n\n/**\n * Removes a single instance of the specified [element] from this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.minusAssign(element: T) {\n    this.remove(element)\n}\n\n/**\n * Removes all elements contained in the given [elements] collection from this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.minusAssign(elements: Iterable<T>) {\n    this.removeAll(elements)\n}\n\n/**\n * Removes all elements contained in the given [elements] array from this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.minusAssign(elements: Array<T>) {\n    this.removeAll(elements)\n}\n\n/**\n * Removes all elements contained in the given [elements] sequence from this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.minusAssign(elements: Sequence<T>) {\n    this.removeAll(elements)\n}\n\n/**\n * Adds all elements of the given [elements] collection to this [MutableCollection].\n */\npublic fun <T> MutableCollection<in T>.addAll(elements: Iterable<T>): Boolean {\n    when (elements) {\n        is Collection -> return addAll(elements)\n        else -> {\n            var result: Boolean = false\n            for (item in elements)\n                if (add(item)) result = true\n            return result\n        }\n    }\n}\n\n/**\n * Adds all elements of the given [elements] sequence to this [MutableCollection].\n */\npublic fun <T> MutableCollection<in T>.addAll(elements: Sequence<T>): Boolean {\n    var result: Boolean = false\n    for (item in elements) {\n        if (add(item)) result = true\n    }\n    return result\n}\n\n/**\n * Adds all elements of the given [elements] array to this [MutableCollection].\n */\npublic fun <T> MutableCollection<in T>.addAll(elements: Array<out T>): Boolean {\n    return addAll(elements.asList())\n}\n\n/**\n * Removes all elements from this [MutableCollection] that are also contained in the given [elements] collection.\n */\npublic fun <T> MutableCollection<in T>.removeAll(elements: Iterable<T>): Boolean {\n    return removeAll(elements.convertToSetForSetOperationWith(this))\n}\n\n/**\n * Removes all elements from this [MutableCollection] that are also contained in the given [elements] sequence.\n */\npublic fun <T> MutableCollection<in T>.removeAll(elements: Sequence<T>): Boolean {\n    val set = elements.toHashSet()\n    return set.isNotEmpty() && removeAll(set)\n}\n\n/**\n * Removes all elements from this [MutableCollection] that are also contained in the given [elements] array.\n */\npublic fun <T> MutableCollection<in T>.removeAll(elements: Array<out T>): Boolean {\n    return elements.isNotEmpty() && removeAll(elements.toHashSet())\n}\n\n/**\n * Retains only elements of this [MutableCollection] that are contained in the given [elements] collection.\n */\npublic fun <T> MutableCollection<in T>.retainAll(elements: Iterable<T>): Boolean {\n    return retainAll(elements.convertToSetForSetOperationWith(this))\n}\n\n/**\n * Retains only elements of this [MutableCollection] that are contained in the given [elements] array.\n */\npublic fun <T> MutableCollection<in T>.retainAll(elements: Array<out T>): Boolean {\n    if (elements.isNotEmpty())\n        return retainAll(elements.toHashSet())\n    else\n        return retainNothing()\n}\n\n/**\n * Retains only elements of this [MutableCollection] that are contained in the given [elements] sequence.\n */\npublic fun <T> MutableCollection<in T>.retainAll(elements: Sequence<T>): Boolean {\n    val set = elements.toHashSet()\n    if (set.isNotEmpty())\n        return retainAll(set)\n    else\n        return retainNothing()\n}\n\nprivate fun MutableCollection<*>.retainNothing(): Boolean {\n    val result = isNotEmpty()\n    clear()\n    return result\n}\n\n\n/**\n * Removes all elements from this [MutableIterable] that match the given [predicate].\n *\n * @return `true` if any element was removed from this collection, or `false` when no elements were removed and collection was not modified.\n */\npublic fun <T> MutableIterable<T>.removeAll(predicate: (T) -> Boolean): Boolean = filterInPlace(predicate, true)\n\n/**\n * Retains only elements of this [MutableIterable] that match the given [predicate].\n *\n * @return `true` if any element was removed from this collection, or `false` when all elements were retained and collection was not modified.\n */\npublic fun <T> MutableIterable<T>.retainAll(predicate: (T) -> Boolean): Boolean = filterInPlace(predicate, false)\n\nprivate fun <T> MutableIterable<T>.filterInPlace(predicate: (T) -> Boolean, predicateResultToRemove: Boolean): Boolean {\n    var result = false\n    with(iterator()) {\n        while (hasNext())\n            if (predicate(next()) == predicateResultToRemove) {\n                remove()\n                result = true\n            }\n    }\n    return result\n}\n\n\n/**\n * Removes the element at the specified [index] from this list.\n * In Kotlin one should use the [MutableList.removeAt] function instead.\n */\n@Deprecated(\"Use removeAt(index) instead.\", ReplaceWith(\"removeAt(index)\"), level = DeprecationLevel.ERROR)\n@kotlin.internal.InlineOnly\npublic inline fun <T> MutableList<T>.remove(index: Int): T = removeAt(index)\n\n/**\n * Removes the first element from this mutable list and returns that removed element, or throws [NoSuchElementException] if this list is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun <T> MutableList<T>.removeFirst(): T = if (isEmpty()) throw NoSuchElementException(\"List is empty.\") else removeAt(0)\n\n/**\n * Removes the first element from this mutable list and returns that removed element, or returns `null` if this list is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun <T> MutableList<T>.removeFirstOrNull(): T? = if (isEmpty()) null else removeAt(0)\n\n/**\n * Removes the last element from this mutable list and returns that removed element, or throws [NoSuchElementException] if this list is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun <T> MutableList<T>.removeLast(): T = if (isEmpty()) throw NoSuchElementException(\"List is empty.\") else removeAt(lastIndex)\n\n/**\n * Removes the last element from this mutable list and returns that removed element, or returns `null` if this list is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun <T> MutableList<T>.removeLastOrNull(): T? = if (isEmpty()) null else removeAt(lastIndex)\n\n/**\n * Removes all elements from this [MutableList] that match the given [predicate].\n *\n * @return `true` if any element was removed from this collection, or `false` when no elements were removed and collection was not modified.\n */\npublic fun <T> MutableList<T>.removeAll(predicate: (T) -> Boolean): Boolean = filterInPlace(predicate, true)\n\n/**\n * Retains only elements of this [MutableList] that match the given [predicate].\n *\n * @return `true` if any element was removed from this collection, or `false` when all elements were retained and collection was not modified.\n */\npublic fun <T> MutableList<T>.retainAll(predicate: (T) -> Boolean): Boolean = filterInPlace(predicate, false)\n\nprivate fun <T> MutableList<T>.filterInPlace(predicate: (T) -> Boolean, predicateResultToRemove: Boolean): Boolean {\n    if (this !is RandomAccess)\n        return (this as MutableIterable<T>).filterInPlace(predicate, predicateResultToRemove)\n\n    var writeIndex: Int = 0\n    for (readIndex in 0..lastIndex) {\n        val element = this[readIndex]\n        if (predicate(element) == predicateResultToRemove)\n            continue\n\n        if (writeIndex != readIndex)\n            this[writeIndex] = element\n\n        writeIndex++\n    }\n    if (writeIndex < size) {\n        for (removeIndex in lastIndex downTo writeIndex)\n            removeAt(removeIndex)\n\n        return true\n    } else {\n        return false\n    }\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"CollectionsKt\")\n\npackage kotlin.collections\n\nprivate open class ReversedListReadOnly<out T>(private val delegate: List<T>) : AbstractList<T>() {\n    override val size: Int get() = delegate.size\n    override fun get(index: Int): T = delegate[reverseElementIndex(index)]\n}\n\nprivate class ReversedList<T>(private val delegate: MutableList<T>) : AbstractMutableList<T>() {\n    override val size: Int get() = delegate.size\n    override fun get(index: Int): T = delegate[reverseElementIndex(index)]\n\n    override fun clear() = delegate.clear()\n    override fun removeAt(index: Int): T = delegate.removeAt(reverseElementIndex(index))\n\n    override fun set(index: Int, element: T): T = delegate.set(reverseElementIndex(index), element)\n    override fun add(index: Int, element: T) {\n        delegate.add(reversePositionIndex(index), element)\n    }\n}\n\nprivate fun List<*>.reverseElementIndex(index: Int) =\n    if (index in 0..lastIndex) lastIndex - index else throw IndexOutOfBoundsException(\"Element index $index must be in range [${0..lastIndex}].\")\n\nprivate fun List<*>.reversePositionIndex(index: Int) =\n    if (index in 0..size) size - index else throw IndexOutOfBoundsException(\"Position index $index must be in range [${0..size}].\")\n\n\n/**\n * Returns a reversed read-only view of the original List.\n * All changes made in the original list will be reflected in the reversed one.\n * @sample samples.collections.ReversedViews.asReversedList\n */\npublic fun <T> List<T>.asReversed(): List<T> = ReversedListReadOnly(this)\n\n/**\n * Returns a reversed mutable view of the original mutable List.\n * All changes made in the original list will be reflected in the reversed one and vice versa.\n * @sample samples.collections.ReversedViews.asReversedMutableList\n */\n@kotlin.jvm.JvmName(\"asReversedMutable\")\npublic fun <T> MutableList<T>.asReversed(): MutableList<T> = ReversedList(this)\n\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"SequencesKt\")\n@file:OptIn(ExperimentalTypeInference::class)\n\npackage kotlin.sequences\n\nimport kotlin.coroutines.*\nimport kotlin.coroutines.intrinsics.*\nimport kotlin.experimental.ExperimentalTypeInference\n\n/**\n * Builds a [Sequence] lazily yielding values one by one.\n *\n * @see kotlin.sequences.generateSequence\n *\n * @sample samples.collections.Sequences.Building.buildSequenceYieldAll\n * @sample samples.collections.Sequences.Building.buildFibonacciSequence\n */\n@SinceKotlin(\"1.3\")\npublic fun <T> sequence(@BuilderInference block: suspend SequenceScope<T>.() -> Unit): Sequence<T> = Sequence { iterator(block) }\n\n@SinceKotlin(\"1.3\")\n@Deprecated(\"Use 'sequence { }' function instead.\", ReplaceWith(\"sequence(builderAction)\"), level = DeprecationLevel.ERROR)\n@kotlin.internal.InlineOnly\npublic inline fun <T> buildSequence(@BuilderInference noinline builderAction: suspend SequenceScope<T>.() -> Unit): Sequence<T> = Sequence { iterator(builderAction) }\n\n/**\n * Builds an [Iterator] lazily yielding values one by one.\n *\n * @sample samples.collections.Sequences.Building.buildIterator\n * @sample samples.collections.Iterables.Building.iterable\n */\n@SinceKotlin(\"1.3\")\npublic fun <T> iterator(@BuilderInference block: suspend SequenceScope<T>.() -> Unit): Iterator<T> {\n    val iterator = SequenceBuilderIterator<T>()\n    iterator.nextStep = block.createCoroutineUnintercepted(receiver = iterator, completion = iterator)\n    return iterator\n}\n\n@SinceKotlin(\"1.3\")\n@Deprecated(\"Use 'iterator { }' function instead.\", ReplaceWith(\"iterator(builderAction)\"), level = DeprecationLevel.ERROR)\n@kotlin.internal.InlineOnly\npublic inline fun <T> buildIterator(@BuilderInference noinline builderAction: suspend SequenceScope<T>.() -> Unit): Iterator<T> = iterator(builderAction)\n\n/**\n * The scope for yielding values of a [Sequence] or an [Iterator], provides [yield] and [yieldAll] suspension functions.\n *\n * @see sequence\n * @see iterator\n *\n * @sample samples.collections.Sequences.Building.buildSequenceYieldAll\n * @sample samples.collections.Sequences.Building.buildFibonacciSequence\n */\n@RestrictsSuspension\n@SinceKotlin(\"1.3\")\npublic abstract class SequenceScope<in T> internal constructor() {\n    /**\n     * Yields a value to the [Iterator] being built and suspends\n     * until the next value is requested.\n     *\n     * @sample samples.collections.Sequences.Building.buildSequenceYieldAll\n     * @sample samples.collections.Sequences.Building.buildFibonacciSequence\n     */\n    public abstract suspend fun yield(value: T)\n\n    /**\n     * Yields all values from the `iterator` to the [Iterator] being built\n     * and suspends until all these values are iterated and the next one is requested.\n     *\n     * The sequence of values returned by the given iterator can be potentially infinite.\n     *\n     * @sample samples.collections.Sequences.Building.buildSequenceYieldAll\n     */\n    public abstract suspend fun yieldAll(iterator: Iterator<T>)\n\n    /**\n     * Yields a collections of values to the [Iterator] being built\n     * and suspends until all these values are iterated and the next one is requested.\n     *\n     * @sample samples.collections.Sequences.Building.buildSequenceYieldAll\n     */\n    public suspend fun yieldAll(elements: Iterable<T>) {\n        if (elements is Collection && elements.isEmpty()) return\n        return yieldAll(elements.iterator())\n    }\n\n    /**\n     * Yields potentially infinite sequence of values  to the [Iterator] being built\n     * and suspends until all these values are iterated and the next one is requested.\n     *\n     * The sequence can be potentially infinite.\n     *\n     * @sample samples.collections.Sequences.Building.buildSequenceYieldAll\n     */\n    public suspend fun yieldAll(sequence: Sequence<T>) = yieldAll(sequence.iterator())\n}\n\n@Deprecated(\"Use SequenceScope class instead.\", ReplaceWith(\"SequenceScope<T>\"), level = DeprecationLevel.ERROR)\npublic typealias SequenceBuilder<T> = SequenceScope<T>\n\nprivate typealias State = Int\n\nprivate const val State_NotReady: State = 0\nprivate const val State_ManyNotReady: State = 1\nprivate const val State_ManyReady: State = 2\nprivate const val State_Ready: State = 3\nprivate const val State_Done: State = 4\nprivate const val State_Failed: State = 5\n\nprivate class SequenceBuilderIterator<T> : SequenceScope<T>(), Iterator<T>, Continuation<Unit> {\n    private var state = State_NotReady\n    private var nextValue: T? = null\n    private var nextIterator: Iterator<T>? = null\n    var nextStep: Continuation<Unit>? = null\n\n    override fun hasNext(): Boolean {\n        while (true) {\n            when (state) {\n                State_NotReady -> {}\n                State_ManyNotReady ->\n                    if (nextIterator!!.hasNext()) {\n                        state = State_ManyReady\n                        return true\n                    } else {\n                        nextIterator = null\n                    }\n                State_Done -> return false\n                State_Ready, State_ManyReady -> return true\n                else -> throw exceptionalState()\n            }\n\n            state = State_Failed\n            val step = nextStep!!\n            nextStep = null\n            step.resume(Unit)\n        }\n    }\n\n    override fun next(): T {\n        when (state) {\n            State_NotReady, State_ManyNotReady -> return nextNotReady()\n            State_ManyReady -> {\n                state = State_ManyNotReady\n                return nextIterator!!.next()\n            }\n            State_Ready -> {\n                state = State_NotReady\n                @Suppress(\"UNCHECKED_CAST\")\n                val result = nextValue as T\n                nextValue = null\n                return result\n            }\n            else -> throw exceptionalState()\n        }\n    }\n\n    private fun nextNotReady(): T {\n        if (!hasNext()) throw NoSuchElementException() else return next()\n    }\n\n    private fun exceptionalState(): Throwable = when (state) {\n        State_Done -> NoSuchElementException()\n        State_Failed -> IllegalStateException(\"Iterator has failed.\")\n        else -> IllegalStateException(\"Unexpected state of the iterator: $state\")\n    }\n\n\n    override suspend fun yield(value: T) {\n        nextValue = value\n        state = State_Ready\n        return suspendCoroutineUninterceptedOrReturn { c ->\n            nextStep = c\n            COROUTINE_SUSPENDED\n        }\n    }\n\n    override suspend fun yieldAll(iterator: Iterator<T>) {\n        if (!iterator.hasNext()) return\n        nextIterator = iterator\n        state = State_ManyReady\n        return suspendCoroutineUninterceptedOrReturn { c ->\n            nextStep = c\n            COROUTINE_SUSPENDED\n        }\n    }\n\n    // Completion continuation implementation\n    override fun resumeWith(result: Result<Unit>) {\n        result.getOrThrow() // just rethrow exception if it is there\n        state = State_Done\n    }\n\n    override val context: CoroutineContext\n        get() = EmptyCoroutineContext\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.collections\n\ninternal fun checkWindowSizeStep(size: Int, step: Int) {\n    require(size > 0 && step > 0) {\n        if (size != step)\n            \"Both size $size and step $step must be greater than zero.\"\n        else\n            \"size $size must be greater than zero.\"\n    }\n}\n\ninternal fun <T> Sequence<T>.windowedSequence(size: Int, step: Int, partialWindows: Boolean, reuseBuffer: Boolean): Sequence<List<T>> {\n    checkWindowSizeStep(size, step)\n    return Sequence { windowedIterator(iterator(), size, step, partialWindows, reuseBuffer) }\n}\n\ninternal fun <T> windowedIterator(iterator: Iterator<T>, size: Int, step: Int, partialWindows: Boolean, reuseBuffer: Boolean): Iterator<List<T>> {\n    if (!iterator.hasNext()) return EmptyIterator\n    return iterator<List<T>> {\n        val bufferInitialCapacity = size.coerceAtMost(1024)\n        val gap = step - size\n        if (gap >= 0) {\n            var buffer = ArrayList<T>(bufferInitialCapacity)\n            var skip = 0\n            for (e in iterator) {\n                if (skip > 0) { skip -= 1; continue }\n                buffer.add(e)\n                if (buffer.size == size) {\n                    yield(buffer)\n                    if (reuseBuffer) buffer.clear() else buffer = ArrayList(size)\n                    skip = gap\n                }\n            }\n            if (buffer.isNotEmpty()) {\n                if (partialWindows || buffer.size == size) yield(buffer)\n            }\n        } else {\n            var buffer = RingBuffer<T>(bufferInitialCapacity)\n            for (e in iterator) {\n                buffer.add(e)\n                if (buffer.isFull()) {\n                    if (buffer.size < size) { buffer = buffer.expanded(maxCapacity = size); continue }\n\n                    yield(if (reuseBuffer) buffer else ArrayList(buffer))\n                    buffer.removeFirst(step)\n                }\n            }\n            if (partialWindows) {\n                while (buffer.size > step) {\n                    yield(if (reuseBuffer) buffer else ArrayList(buffer))\n                    buffer.removeFirst(step)\n                }\n                if (buffer.isNotEmpty()) yield(buffer)\n            }\n        }\n    }\n}\n\ninternal class MovingSubList<out E>(private val list: List<E>) : AbstractList<E>(), RandomAccess {\n    private var fromIndex: Int = 0\n    private var _size: Int = 0\n\n    fun move(fromIndex: Int, toIndex: Int) {\n        checkRangeIndexes(fromIndex, toIndex, list.size)\n        this.fromIndex = fromIndex\n        this._size = toIndex - fromIndex\n    }\n\n    override fun get(index: Int): E {\n        checkElementIndex(index, _size)\n\n        return list[fromIndex + index]\n    }\n\n    override val size: Int get() = _size\n}\n\n\n/**\n * Provides ring buffer implementation.\n *\n * Buffer overflow is not allowed so [add] doesn't overwrite tail but raises an exception.\n */\nprivate class RingBuffer<T>(private val buffer: Array<Any?>, filledSize: Int) : AbstractList<T>(), RandomAccess {\n    init {\n        require(filledSize >= 0) { \"ring buffer filled size should not be negative but it is $filledSize\" }\n        require(filledSize <= buffer.size) { \"ring buffer filled size: $filledSize cannot be larger than the buffer size: ${buffer.size}\" }\n    }\n\n    constructor(capacity: Int) : this(arrayOfNulls<Any?>(capacity), 0)\n\n    private val capacity = buffer.size\n    private var startIndex: Int = 0\n\n    override var size: Int = filledSize\n        private set\n\n    override fun get(index: Int): T {\n        checkElementIndex(index, size)\n        @Suppress(\"UNCHECKED_CAST\")\n        return buffer[startIndex.forward(index)] as T\n    }\n\n    fun isFull() = size == capacity\n\n    override fun iterator(): Iterator<T> = object : AbstractIterator<T>() {\n        private var count = size\n        private var index = startIndex\n\n        override fun computeNext() {\n            if (count == 0) {\n                done()\n            } else {\n                @Suppress(\"UNCHECKED_CAST\")\n                setNext(buffer[index] as T)\n                index = index.forward(1)\n                count--\n            }\n        }\n    }\n\n    @Suppress(\"UNCHECKED_CAST\")\n    override fun <T> toArray(array: Array<T>): Array<T> {\n        val result: Array<T?> =\n            if (array.size < this.size) array.copyOf(this.size) else array as Array<T?>\n\n        val size = this.size\n\n        var widx = 0\n        var idx = startIndex\n\n        while (widx < size && idx < capacity) {\n            result[widx] = buffer[idx] as T\n            widx++\n            idx++\n        }\n\n        idx = 0\n        while (widx < size) {\n            result[widx] = buffer[idx] as T\n            widx++\n            idx++\n        }\n        if (result.size > this.size) result[this.size] = null\n\n        return result as Array<T>\n    }\n\n    override fun toArray(): Array<Any?> {\n        return toArray(arrayOfNulls(size))\n    }\n\n    /**\n     * Creates a new ring buffer with the capacity equal to the minimum of [maxCapacity] and 1.5 * [capacity].\n     * The returned ring buffer contains the same elements as this ring buffer.\n     */\n    fun expanded(maxCapacity: Int): RingBuffer<T> {\n        val newCapacity = (capacity + (capacity shr 1) + 1).coerceAtMost(maxCapacity)\n        val newBuffer = if (startIndex == 0) buffer.copyOf(newCapacity) else toArray(arrayOfNulls(newCapacity))\n        return RingBuffer(newBuffer, size)\n    }\n\n    /**\n     * Add [element] to the buffer or fail with [IllegalStateException] if no free space available in the buffer\n     */\n    fun add(element: T) {\n        if (isFull()) {\n            throw IllegalStateException(\"ring buffer is full\")\n        }\n\n        buffer[startIndex.forward(size)] = element\n        size++\n    }\n\n    /**\n     * Removes [n] first elements from the buffer or fails with [IllegalArgumentException] if not enough elements in the buffer to remove\n     */\n    fun removeFirst(n: Int) {\n        require(n >= 0) { \"n shouldn't be negative but it is $n\" }\n        require(n <= size) { \"n shouldn't be greater than the buffer size: n = $n, size = $size\" }\n\n        if (n > 0) {\n            val start = startIndex\n            val end = start.forward(n)\n\n            if (start > end) {\n                buffer.fill(null, start, capacity)\n                buffer.fill(null, 0, end)\n            } else {\n                buffer.fill(null, start, end)\n            }\n\n            startIndex = end\n            size -= n\n        }\n    }\n\n\n    @Suppress(\"NOTHING_TO_INLINE\")\n    private inline fun Int.forward(n: Int): Int = (this + n) % capacity\n}\n","/*\n * Copyright 2010-2019 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.collections\n\n// UByteArray    =============================================================================\n@ExperimentalUnsignedTypes\nprivate fun partition(\n    array: UByteArray, left: Int, right: Int): Int {\n    var i = left\n    var j = right\n    val pivot = array[(left + right) / 2]\n    while (i <= j) {\n        while (array[i] < pivot)\n            i++\n        while (array[j] > pivot)\n            j--\n        if (i <= j) {\n            val tmp = array[i]\n            array[i] = array[j]\n            array[j] = tmp\n            i++\n            j--\n        }\n    }\n    return i\n}\n\n@ExperimentalUnsignedTypes\nprivate fun quickSort(\n    array: UByteArray, left: Int, right: Int) {\n    val index = partition(array, left, right)\n    if (left < index - 1)\n        quickSort(array, left, index - 1)\n    if (index < right)\n        quickSort(array, index, right)\n}\n\n// UShortArray   =============================================================================\n@ExperimentalUnsignedTypes\nprivate fun partition(\n    array: UShortArray, left: Int, right: Int): Int {\n    var i = left\n    var j = right\n    val pivot = array[(left + right) / 2]\n    while (i <= j) {\n        while (array[i] < pivot)\n            i++\n        while (array[j] > pivot)\n            j--\n        if (i <= j) {\n            val tmp = array[i]\n            array[i] = array[j]\n            array[j] = tmp\n            i++\n            j--\n        }\n    }\n    return i\n}\n\n@ExperimentalUnsignedTypes\nprivate fun quickSort(\n    array: UShortArray, left: Int, right: Int) {\n    val index = partition(array, left, right)\n    if (left < index - 1)\n        quickSort(array, left, index - 1)\n    if (index < right)\n        quickSort(array, index, right)\n}\n\n// UIntArray     =============================================================================\n@ExperimentalUnsignedTypes\nprivate fun partition(\n    array: UIntArray, left: Int, right: Int): Int {\n    var i = left\n    var j = right\n    val pivot = array[(left + right) / 2]\n    while (i <= j) {\n        while (array[i] < pivot)\n            i++\n        while (array[j] > pivot)\n            j--\n        if (i <= j) {\n            val tmp = array[i]\n            array[i] = array[j]\n            array[j] = tmp\n            i++\n            j--\n        }\n    }\n    return i\n}\n\n@ExperimentalUnsignedTypes\nprivate fun quickSort(\n    array: UIntArray, left: Int, right: Int) {\n    val index = partition(array, left, right)\n    if (left < index - 1)\n        quickSort(array, left, index - 1)\n    if (index < right)\n        quickSort(array, index, right)\n}\n\n// ULongArray    =============================================================================\n@ExperimentalUnsignedTypes\nprivate fun partition(\n    array: ULongArray, left: Int, right: Int): Int {\n    var i = left\n    var j = right\n    val pivot = array[(left + right) / 2]\n    while (i <= j) {\n        while (array[i] < pivot)\n            i++\n        while (array[j] > pivot)\n            j--\n        if (i <= j) {\n            val tmp = array[i]\n            array[i] = array[j]\n            array[j] = tmp\n            i++\n            j--\n        }\n    }\n    return i\n}\n\n@ExperimentalUnsignedTypes\nprivate fun quickSort(\n    array: ULongArray, left: Int, right: Int) {\n    val index = partition(array, left, right)\n    if (left < index - 1)\n        quickSort(array, left, index - 1)\n    if (index < right)\n        quickSort(array, index, right)\n}\n\n\n// Interfaces   =============================================================================\n/**\n * Sorts the given array using qsort algorithm.\n */\n@ExperimentalUnsignedTypes\ninternal fun sortArray(array: UByteArray, fromIndex: Int, toIndex: Int)    = quickSort(array, fromIndex, toIndex - 1)\n@ExperimentalUnsignedTypes\ninternal fun sortArray(array: UShortArray, fromIndex: Int, toIndex: Int)   = quickSort(array, fromIndex, toIndex - 1)\n@ExperimentalUnsignedTypes\ninternal fun sortArray(array: UIntArray, fromIndex: Int, toIndex: Int)     = quickSort(array, fromIndex, toIndex - 1)\n@ExperimentalUnsignedTypes\ninternal fun sortArray(array: ULongArray, fromIndex: Int, toIndex: Int)    = quickSort(array, fromIndex, toIndex - 1)","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.contracts\n\nimport kotlin.internal.ContractsDsl\nimport kotlin.internal.InlineOnly\n\n/**\n * This marker distinguishes the experimental contract declaration API and is used to opt-in for that feature\n * when declaring contracts of user functions.\n *\n * Any usage of a declaration annotated with `@ExperimentalContracts` must be accepted either by\n * annotating that usage with the [OptIn] annotation, e.g. `@OptIn(ExperimentalContracts::class)`,\n * or by using the compiler argument `-Xopt-in=kotlin.contracts.ExperimentalContracts`.\n */\n@Suppress(\"DEPRECATION\")\n@Retention(AnnotationRetention.BINARY)\n@SinceKotlin(\"1.3\")\n@Experimental\n@RequiresOptIn\n@MustBeDocumented\npublic annotation class ExperimentalContracts\n\n/**\n * Provides a scope, where the functions of the contract DSL, such as [returns], [callsInPlace], etc.,\n * can be used to describe the contract of a function.\n *\n * This type is used as a receiver type of the lambda function passed to the [contract] function.\n *\n * @see contract\n */\n@ContractsDsl\n@ExperimentalContracts\n@SinceKotlin(\"1.3\")\npublic interface ContractBuilder {\n    /**\n     * Describes a situation when a function returns normally, without any exceptions thrown.\n     *\n     * Use [SimpleEffect.implies] function to describe a conditional effect that happens in such case.\n     *\n     */\n    // @sample samples.contracts.returnsContract\n    @ContractsDsl public fun returns(): Returns\n\n    /**\n     * Describes a situation when a function returns normally with the specified return [value].\n     *\n     * The possible values of [value] are limited to `true`, `false` or `null`.\n     *\n     * Use [SimpleEffect.implies] function to describe a conditional effect that happens in such case.\n     *\n     */\n    // @sample samples.contracts.returnsTrueContract\n    // @sample samples.contracts.returnsFalseContract\n    // @sample samples.contracts.returnsNullContract\n    @ContractsDsl public fun returns(value: Any?): Returns\n\n    /**\n     * Describes a situation when a function returns normally with any value that is not `null`.\n     *\n     * Use [SimpleEffect.implies] function to describe a conditional effect that happens in such case.\n     *\n     */\n    // @sample samples.contracts.returnsNotNullContract\n    @ContractsDsl public fun returnsNotNull(): ReturnsNotNull\n\n    /**\n     * Specifies that the function parameter [lambda] is invoked in place.\n     *\n     * This contract specifies that:\n     * 1. the function [lambda] can only be invoked during the call of the owner function,\n     *  and it won't be invoked after that owner function call is completed;\n     * 2. _(optionally)_ the function [lambda] is invoked the amount of times specified by the [kind] parameter,\n     *  see the [InvocationKind] enum for possible values.\n     *\n     * A function declaring the `callsInPlace` effect must be _inline_.\n     *\n     */\n    /* @sample samples.contracts.callsInPlaceAtMostOnceContract\n    * @sample samples.contracts.callsInPlaceAtLeastOnceContract\n    * @sample samples.contracts.callsInPlaceExactlyOnceContract\n    * @sample samples.contracts.callsInPlaceUnknownContract\n    */\n    @ContractsDsl public fun <R> callsInPlace(lambda: Function<R>, kind: InvocationKind = InvocationKind.UNKNOWN): CallsInPlace\n}\n\n/**\n * Specifies how many times a function invokes its function parameter in place.\n *\n * See [ContractBuilder.callsInPlace] for the details of the call-in-place function contract.\n */\n@ContractsDsl\n@ExperimentalContracts\n@SinceKotlin(\"1.3\")\npublic enum class InvocationKind {\n    /**\n     * A function parameter will be invoked one time or not invoked at all.\n     */\n    // @sample samples.contracts.callsInPlaceAtMostOnceContract\n    @ContractsDsl AT_MOST_ONCE,\n\n    /**\n     * A function parameter will be invoked one or more times.\n     *\n     */\n    // @sample samples.contracts.callsInPlaceAtLeastOnceContract\n    @ContractsDsl AT_LEAST_ONCE,\n\n    /**\n     * A function parameter will be invoked exactly one time.\n     *\n     */\n    // @sample samples.contracts.callsInPlaceExactlyOnceContract\n    @ContractsDsl EXACTLY_ONCE,\n\n    /**\n     * A function parameter is called in place, but it's unknown how many times it can be called.\n     *\n     */\n    // @sample samples.contracts.callsInPlaceUnknownContract\n    @ContractsDsl UNKNOWN\n}\n\n/**\n * Specifies the contract of a function.\n *\n * The contract description must be at the beginning of a function and have at least one effect.\n *\n * Only the top-level functions can have a contract for now.\n *\n * @param builder the lambda where the contract of a function is described with the help of the [ContractBuilder] members.\n *\n */\n/* @sample samples.contracts.returnsContract\n* @sample samples.contracts.returnsTrueContract\n* @sample samples.contracts.returnsFalseContract\n* @sample samples.contracts.returnsNullContract\n* @sample samples.contracts.returnsNotNullContract\n* @sample samples.contracts.callsInPlaceAtMostOnceContract\n* @sample samples.contracts.callsInPlaceAtLeastOnceContract\n* @sample samples.contracts.callsInPlaceExactlyOnceContract\n* @sample samples.contracts.callsInPlaceUnknownContract\n*/\n@ContractsDsl\n@ExperimentalContracts\n@InlineOnly\n@SinceKotlin(\"1.3\")\n@Suppress(\"UNUSED_PARAMETER\")\npublic inline fun contract(builder: ContractBuilder.() -> Unit) { }\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.coroutines\n\n/**\n * Marks coroutine context element that intercepts coroutine continuations.\n * The coroutines framework uses [ContinuationInterceptor.Key] to retrieve the interceptor and\n * intercepts all coroutine continuations with [interceptContinuation] invocations.\n *\n * [ContinuationInterceptor] behaves like a [polymorphic element][AbstractCoroutineContextKey], meaning that\n * its implementation delegates [get][CoroutineContext.Element.get] and [minusKey][CoroutineContext.Element.minusKey]\n * to [getPolymorphicElement] and [minusPolymorphicKey] respectively.\n * [ContinuationInterceptor] subtypes can be extracted from the coroutine context using either [ContinuationInterceptor.Key]\n * or subtype key if it extends [AbstractCoroutineContextKey].\n */\n@SinceKotlin(\"1.3\")\npublic interface ContinuationInterceptor : CoroutineContext.Element {\n    /**\n     * The key that defines *the* context interceptor.\n     */\n    companion object Key : CoroutineContext.Key<ContinuationInterceptor>\n\n    /**\n     * Returns continuation that wraps the original [continuation], thus intercepting all resumptions.\n     * This function is invoked by coroutines framework when needed and the resulting continuations are\n     * cached internally per each instance of the original [continuation].\n     *\n     * This function may simply return original [continuation] if it does not want to intercept this particular continuation.\n     *\n     * When the original [continuation] completes, coroutine framework invokes [releaseInterceptedContinuation]\n     * with the resulting continuation if it was intercepted, that is if `interceptContinuation` had previously\n     * returned a different continuation instance.\n     */\n    public fun <T> interceptContinuation(continuation: Continuation<T>): Continuation<T>\n\n    /**\n     * Invoked for the continuation instance returned by [interceptContinuation] when the original\n     * continuation completes and will not be used anymore. This function is invoked only if [interceptContinuation]\n     * had returned a different continuation instance from the one it was invoked with.\n     *\n     * Default implementation does nothing.\n     *\n     * @param continuation Continuation instance returned by this interceptor's [interceptContinuation] invocation.\n     */\n    public fun releaseInterceptedContinuation(continuation: Continuation<*>) {\n        /* do nothing by default */\n    }\n\n    public override operator fun <E : CoroutineContext.Element> get(key: CoroutineContext.Key<E>): E? {\n        // getPolymorphicKey specialized for ContinuationInterceptor key\n        @OptIn(ExperimentalStdlibApi::class)\n        if (key is AbstractCoroutineContextKey<*, *>) {\n            @Suppress(\"UNCHECKED_CAST\")\n            return if (key.isSubKey(this.key)) key.tryCast(this) as? E else null\n        }\n        @Suppress(\"UNCHECKED_CAST\")\n        return if (ContinuationInterceptor === key) this as E else null\n    }\n\n\n    public override fun minusKey(key: CoroutineContext.Key<*>): CoroutineContext {\n        // minusPolymorphicKey specialized for ContinuationInterceptor key\n        @OptIn(ExperimentalStdlibApi::class)\n        if (key is AbstractCoroutineContextKey<*, *>) {\n            return if (key.isSubKey(this.key) && key.tryCast(this) != null) EmptyCoroutineContext else this\n        }\n        return if (ContinuationInterceptor === key) EmptyCoroutineContext else this\n    }\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.coroutines\n\n/**\n * Persistent context for the coroutine. It is an indexed set of [Element] instances.\n * An indexed set is a mix between a set and a map.\n * Every element in this set has a unique [Key].\n */\n@SinceKotlin(\"1.3\")\npublic interface CoroutineContext {\n    /**\n     * Returns the element with the given [key] from this context or `null`.\n     */\n    public operator fun <E : Element> get(key: Key<E>): E?\n\n    /**\n     * Accumulates entries of this context starting with [initial] value and applying [operation]\n     * from left to right to current accumulator value and each element of this context.\n     */\n    public fun <R> fold(initial: R, operation: (R, Element) -> R): R\n\n    /**\n     * Returns a context containing elements from this context and elements from  other [context].\n     * The elements from this context with the same key as in the other one are dropped.\n     */\n    public operator fun plus(context: CoroutineContext): CoroutineContext =\n        if (context === EmptyCoroutineContext) this else // fast path -- avoid lambda creation\n            context.fold(this) { acc, element ->\n                val removed = acc.minusKey(element.key)\n                if (removed === EmptyCoroutineContext) element else {\n                    // make sure interceptor is always last in the context (and thus is fast to get when present)\n                    val interceptor = removed[ContinuationInterceptor]\n                    if (interceptor == null) CombinedContext(removed, element) else {\n                        val left = removed.minusKey(ContinuationInterceptor)\n                        if (left === EmptyCoroutineContext) CombinedContext(element, interceptor) else\n                            CombinedContext(CombinedContext(left, element), interceptor)\n                    }\n                }\n            }\n\n    /**\n     * Returns a context containing elements from this context, but without an element with\n     * the specified [key].\n     */\n    public fun minusKey(key: Key<*>): CoroutineContext\n\n    /**\n     * Key for the elements of [CoroutineContext]. [E] is a type of element with this key.\n     */\n    public interface Key<E : Element>\n\n    /**\n     * An element of the [CoroutineContext]. An element of the coroutine context is a singleton context by itself.\n     */\n    public interface Element : CoroutineContext {\n        /**\n         * A key of this coroutine context element.\n         */\n        public val key: Key<*>\n\n        public override operator fun <E : Element> get(key: Key<E>): E? =\n            @Suppress(\"UNCHECKED_CAST\")\n            if (this.key == key) this as E else null\n\n        public override fun <R> fold(initial: R, operation: (R, Element) -> R): R =\n            operation(initial, this)\n\n        public override fun minusKey(key: Key<*>): CoroutineContext =\n            if (this.key == key) EmptyCoroutineContext else this\n    }\n}\n","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.coroutines\n\nimport kotlin.coroutines.CoroutineContext.Element\nimport kotlin.coroutines.CoroutineContext.Key\n\n/**\n * Base class for [CoroutineContext.Element] implementations.\n */\n@SinceKotlin(\"1.3\")\npublic abstract class AbstractCoroutineContextElement(public override val key: Key<*>) : Element\n\n/**\n * Base class for [CoroutineContext.Key] associated with polymorphic [CoroutineContext.Element] implementation.\n * Polymorphic element implementation implies delegating its [get][Element.get] and [minusKey][Element.minusKey]\n * to [getPolymorphicElement] and [minusPolymorphicKey] respectively.\n *\n * Polymorphic elements can be extracted from the coroutine context using both element key and its supertype key.\n * Example of polymorphic elements:\n * ```\n * open class BaseElement : CoroutineContext.Element {\n *     companion object Key : CoroutineContext.Key<BaseElement>\n *     override val key: CoroutineContext.Key<*> get() = Key\n *     // It is important to use getPolymorphicKey and minusPolymorphicKey\n *     override fun <E : CoroutineContext.Element> get(key: CoroutineContext.Key<E>): E? = getPolymorphicElement(key)\n *     override fun minusKey(key: CoroutineContext.Key<*>): CoroutineContext = minusPolymorphicKey(key)\n * }\n *\n * class DerivedElement : BaseElement() {\n *     companion object Key : AbstractCoroutineContextKey<BaseElement, DerivedElement>(BaseElement, { it as? DerivedElement })\n * }\n * // Now it is possible to query both `BaseElement` and `DerivedElement`\n * someContext[BaseElement] // Returns BaseElement?, non-null both for BaseElement and DerivedElement instances\n * someContext[DerivedElement] // Returns DerivedElement?, non-null only for DerivedElement instance\n * ```\n * @param B base class of a polymorphic element\n * @param baseKey an instance of base key\n * @param E element type associated with the current key\n * @param safeCast a function that can safely cast abstract [CoroutineContext.Element] to the concrete [E] type\n *                 and return the element if it is a subtype of [E] or `null` otherwise.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic abstract class AbstractCoroutineContextKey<B : Element, E : B>(\n    baseKey: Key<B>,\n    private val safeCast: (element: Element) -> E?\n) : Key<E> {\n    private val topmostKey: Key<*> = if (baseKey is AbstractCoroutineContextKey<*, *>) baseKey.topmostKey else baseKey\n\n    internal fun tryCast(element: Element): E? = safeCast(element)\n    internal fun isSubKey(key: Key<*>): Boolean = key === this || topmostKey === key\n}\n\n/**\n * Returns the current element if it is associated with the given [key] in a polymorphic manner or `null` otherwise.\n * This method returns non-null value if either [Element.key] is equal to the given [key] or if the [key] is associated\n * with [Element.key] via [AbstractCoroutineContextKey].\n * See [AbstractCoroutineContextKey] for the example of usage.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic fun <E : Element> Element.getPolymorphicElement(key: Key<E>): E? {\n    if (key is AbstractCoroutineContextKey<*, *>) {\n        @Suppress(\"UNCHECKED_CAST\")\n        return if (key.isSubKey(this.key)) key.tryCast(this) as? E else null\n    }\n    @Suppress(\"UNCHECKED_CAST\")\n    return if (this.key === key) this as E else null\n}\n\n/**\n * Returns empty coroutine context if the element is associated with the given [key] in a polymorphic manner\n * or `null` otherwise.\n * This method returns empty context if either [Element.key] is equal to the given [key] or if the [key] is associated\n * with [Element.key] via [AbstractCoroutineContextKey].\n * See [AbstractCoroutineContextKey] for the example of usage.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic fun Element.minusPolymorphicKey(key: Key<*>): CoroutineContext {\n    if (key is AbstractCoroutineContextKey<*, *>) {\n        return if (key.isSubKey(this.key) && key.tryCast(this) != null) EmptyCoroutineContext else this\n    }\n    return if (this.key === key) EmptyCoroutineContext else this\n}\n\n/**\n * An empty coroutine context.\n */\n@SinceKotlin(\"1.3\")\npublic object EmptyCoroutineContext : CoroutineContext, Serializable {\n    private const val serialVersionUID: Long = 0\n    private fun readResolve(): Any = EmptyCoroutineContext\n\n    public override fun <E : Element> get(key: Key<E>): E? = null\n    public override fun <R> fold(initial: R, operation: (R, Element) -> R): R = initial\n    public override fun plus(context: CoroutineContext): CoroutineContext = context\n    public override fun minusKey(key: Key<*>): CoroutineContext = this\n    public override fun hashCode(): Int = 0\n    public override fun toString(): String = \"EmptyCoroutineContext\"\n}\n\n//--------------------- internal impl ---------------------\n\n// this class is not exposed, but is hidden inside implementations\n// this is a left-biased list, so that `plus` works naturally\n@SinceKotlin(\"1.3\")\ninternal class CombinedContext(\n    private val left: CoroutineContext,\n    private val element: Element\n) : CoroutineContext, Serializable {\n\n    override fun <E : Element> get(key: Key<E>): E? {\n        var cur = this\n        while (true) {\n            cur.element[key]?.let { return it }\n            val next = cur.left\n            if (next is CombinedContext) {\n                cur = next\n            } else {\n                return next[key]\n            }\n        }\n    }\n\n    public override fun <R> fold(initial: R, operation: (R, Element) -> R): R =\n        operation(left.fold(initial, operation), element)\n\n    public override fun minusKey(key: Key<*>): CoroutineContext {\n        element[key]?.let { return left }\n        val newLeft = left.minusKey(key)\n        return when {\n            newLeft === left -> this\n            newLeft === EmptyCoroutineContext -> element\n            else -> CombinedContext(newLeft, element)\n        }\n    }\n\n    private fun size(): Int {\n        var cur = this\n        var size = 2\n        while (true) {\n            cur = cur.left as? CombinedContext ?: return size\n            size++\n        }\n    }\n\n    private fun contains(element: Element): Boolean =\n        get(element.key) == element\n\n    private fun containsAll(context: CombinedContext): Boolean {\n        var cur = context\n        while (true) {\n            if (!contains(cur.element)) return false\n            val next = cur.left\n            if (next is CombinedContext) {\n                cur = next\n            } else {\n                return contains(next as Element)\n            }\n        }\n    }\n\n    override fun equals(other: Any?): Boolean =\n        this === other || other is CombinedContext && other.size() == size() && other.containsAll(this)\n\n    override fun hashCode(): Int = left.hashCode() + element.hashCode()\n\n    override fun toString(): String =\n        \"[\" + fold(\"\") { acc, element ->\n            if (acc.isEmpty()) element.toString() else \"$acc, $element\"\n        } + \"]\"\n\n    private fun writeReplace(): Any {\n        val n = size()\n        val elements = arrayOfNulls<CoroutineContext>(n)\n        var index = 0\n        fold(Unit) { _, element -> elements[index++] = element }\n        check(index == n)\n        @Suppress(\"UNCHECKED_CAST\")\n        return Serialized(elements as Array<CoroutineContext>)\n    }\n\n    private class Serialized(val elements: Array<CoroutineContext>) : Serializable {\n        companion object {\n            private const val serialVersionUID: Long = 0L\n        }\n\n        private fun readResolve(): Any = elements.fold(EmptyCoroutineContext, CoroutineContext::plus)\n    }\n}\n","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmName(\"IntrinsicsKt\")\n@file:kotlin.jvm.JvmMultifileClass\n\npackage kotlin.coroutines.intrinsics\n\nimport kotlin.contracts.*\nimport kotlin.coroutines.*\nimport kotlin.internal.InlineOnly\n\n/**\n * Obtains the current continuation instance inside suspend functions and either suspends\n * currently running coroutine or returns result immediately without suspension.\n *\n * If the [block] returns the special [COROUTINE_SUSPENDED] value, it means that suspend function did suspend the execution and will\n * not return any result immediately. In this case, the [Continuation] provided to the [block] shall be\n * resumed by invoking [Continuation.resumeWith] at some moment in the\n * future when the result becomes available to resume the computation.\n *\n * Otherwise, the return value of the [block] must have a type assignable to [T] and represents the result of this suspend function.\n * It means that the execution was not suspended and the [Continuation] provided to the [block] shall not be invoked.\n * As the result type of the [block] is declared as `Any?` and cannot be correctly type-checked,\n * its proper return type remains on the conscience of the suspend function's author.\n *\n * Invocation of [Continuation.resumeWith] resumes coroutine directly in the invoker's thread without going through the\n * [ContinuationInterceptor] that might be present in the coroutine's [CoroutineContext].\n * It is the invoker's responsibility to ensure that a proper invocation context is established.\n * [Continuation.intercepted] can be used to acquire the intercepted continuation.\n *\n * Note that it is not recommended to call either [Continuation.resume] nor [Continuation.resumeWithException] functions synchronously\n * in the same stackframe where suspension function is run. Use [suspendCoroutine] as a safer way to obtain current\n * continuation instance.\n */\n@SinceKotlin(\"1.3\")\n@InlineOnly\n@Suppress(\"UNUSED_PARAMETER\", \"RedundantSuspendModifier\")\npublic suspend inline fun <T> suspendCoroutineUninterceptedOrReturn(crossinline block: (Continuation<T>) -> Any?): T {\n    contract { callsInPlace(block, InvocationKind.EXACTLY_ONCE) }\n    throw NotImplementedError(\"Implementation of suspendCoroutineUninterceptedOrReturn is intrinsic\")\n}\n\n/**\n * This value is used as a return value of [suspendCoroutineUninterceptedOrReturn] `block` argument to state that\n * the execution was suspended and will not return any result immediately.\n *\n * **Note: this value should not be used in general code.** Using it outside of the context of\n * `suspendCoroutineUninterceptedOrReturn` function return value  (including, but not limited to,\n * storing this value in other properties, returning it from other functions, etc)\n * can lead to unspecified behavior of the code.\n */\n// It is implemented as property with getter to avoid ProGuard <clinit> problem with multifile IntrinsicsKt class\n@SinceKotlin(\"1.3\")\npublic val COROUTINE_SUSPENDED: Any get() = CoroutineSingletons.COROUTINE_SUSPENDED\n\n// Using enum here ensures two important properties:\n//  1. It makes SafeContinuation serializable with all kinds of serialization frameworks (since all of them natively support enums)\n//  2. It improves debugging experience, since you clearly see toString() value of those objects and what package they come from\n@SinceKotlin(\"1.3\")\n@PublishedApi // This class is Published API via serialized representation of SafeContinuation, don't rename/move\ninternal enum class CoroutineSingletons { COROUTINE_SUSPENDED, UNDECIDED, RESUMED }\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.experimental\n\n/**\n * The experimental marker for type inference augmenting annotations.\n *\n * Any usage of a declaration annotated with `@ExperimentalTypeInference` must be accepted either by\n * annotating that usage with the [OptIn] annotation, e.g. `@OptIn(ExperimentalTypeInference::class)`,\n * or by using the compiler argument `-Xopt-in=kotlin.experimental.ExperimentalTypeInference`.\n */\n@Suppress(\"DEPRECATION\")\n@Experimental(level = Experimental.Level.ERROR)\n@RequiresOptIn(level = RequiresOptIn.Level.ERROR)\n@MustBeDocumented\n@Retention(AnnotationRetention.BINARY)\n@Target(AnnotationTarget.ANNOTATION_CLASS)\n@SinceKotlin(\"1.3\")\npublic annotation class ExperimentalTypeInference\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.internal\n\n/**\n * Specifies that the corresponding type should be ignored during type inference.\n */\n@Target(AnnotationTarget.TYPE)\n@Retention(AnnotationRetention.BINARY)\ninternal annotation class NoInfer\n\n/**\n * Specifies that the constraint built for the type during type inference should be an equality one.\n */\n@Target(AnnotationTarget.TYPE)\n@Retention(AnnotationRetention.BINARY)\ninternal annotation class Exact\n\n/**\n * Specifies that a corresponding member has the lowest priority in overload resolution.\n */\n@Target(AnnotationTarget.FUNCTION, AnnotationTarget.PROPERTY)\n@Retention(AnnotationRetention.BINARY)\ninternal annotation class LowPriorityInOverloadResolution\n\n/**\n * Specifies that the corresponding member has the highest priority in overload resolution. Effectively this means that\n * an extension annotated with this annotation will win in overload resolution over a member with the same signature.\n */\n@Target(AnnotationTarget.FUNCTION, AnnotationTarget.PROPERTY)\n@Retention(AnnotationRetention.BINARY)\ninternal annotation class HidesMembers\n\n/**\n * The value of this type parameter should be mentioned in input types (argument types, receiver type or expected type).\n */\n@Target(AnnotationTarget.TYPE_PARAMETER)\n@Retention(AnnotationRetention.BINARY)\ninternal annotation class OnlyInputTypes\n\n/**\n * Specifies that this function should not be called directly without inlining\n */\n@Target(AnnotationTarget.FUNCTION, AnnotationTarget.PROPERTY, AnnotationTarget.PROPERTY_GETTER, AnnotationTarget.PROPERTY_SETTER)\n@Retention(AnnotationRetention.BINARY)\ninternal annotation class InlineOnly\n\n/**\n * Specifies that this declaration can have dynamic receiver type.\n */\n@Target(AnnotationTarget.FUNCTION, AnnotationTarget.PROPERTY)\n@Retention(AnnotationRetention.BINARY)\ninternal annotation class DynamicExtension\n\n/**\n * The value of this parameter should be a property reference expression (`this::foo`), referencing a `lateinit` property,\n * the backing field of which is accessible at the point where the corresponding argument is passed.\n */\n@Target(AnnotationTarget.VALUE_PARAMETER)\n@Retention(AnnotationRetention.BINARY)\n@SinceKotlin(\"1.2\")\ninternal annotation class AccessibleLateinitPropertyLiteral\n\n/**\n * Specifies that this declaration is only completely supported since the specified version.\n *\n * The Kotlin compiler of an earlier version is going to report a diagnostic on usages of this declaration.\n * The diagnostic message can be specified with [message], or via [errorCode] (takes less space, but might not be immediately clear\n * to the user). The diagnostic severity can be specified with [level]: WARNING/ERROR mean that either a warning or an error\n * is going to be reported, HIDDEN means that the declaration is going to be removed from resolution completely.\n *\n * [versionKind] specifies which version should be compared with the [version] value, when compiling the usage of the annotated declaration.\n * Note that prior to 1.2, only [RequireKotlinVersionKind.LANGUAGE_VERSION] was supported, so the Kotlin compiler before 1.2 is going to\n * treat any [RequireKotlin] as if it requires the language version. Since 1.2, the Kotlin compiler supports\n * [RequireKotlinVersionKind.LANGUAGE_VERSION], [RequireKotlinVersionKind.COMPILER_VERSION] and [RequireKotlinVersionKind.API_VERSION].\n * If the actual value of [versionKind] is something different (e.g. a new version kind, added in future versions of Kotlin),\n * Kotlin 1.2 is going to ignore this [RequireKotlin] altogether, where as Kotlin before 1.2 is going to treat this as a requirement\n * on the language version.\n *\n * This annotation is erased at compile time; its arguments are stored in a more compact form in the Kotlin metadata.\n */\n@Target(AnnotationTarget.CLASS, AnnotationTarget.FUNCTION, AnnotationTarget.PROPERTY, AnnotationTarget.CONSTRUCTOR, AnnotationTarget.TYPEALIAS)\n@Retention(AnnotationRetention.SOURCE)\n@Repeatable\n@SinceKotlin(\"1.2\")\ninternal annotation class RequireKotlin(\n    val version: String,\n    val message: String = \"\",\n    val level: DeprecationLevel = DeprecationLevel.ERROR,\n    val versionKind: RequireKotlinVersionKind = RequireKotlinVersionKind.LANGUAGE_VERSION,\n    val errorCode: Int = -1\n)\n\n/**\n * The kind of the version that is required by [RequireKotlin].\n */\n@SinceKotlin(\"1.2\")\ninternal enum class RequireKotlinVersionKind {\n    LANGUAGE_VERSION,\n    COMPILER_VERSION,\n    API_VERSION,\n}\n\n/**\n * Specifies that this declaration is a part of special DSL, used for constructing function's contract.\n */\n@Retention(AnnotationRetention.BINARY)\n@SinceKotlin(\"1.2\")\ninternal annotation class ContractsDsl\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.properties\n\nimport kotlin.reflect.KProperty\n\n/**\n * Standard property delegates.\n */\npublic object Delegates {\n    /**\n     * Returns a property delegate for a read/write property with a non-`null` value that is initialized not during\n     * object construction time but at a later time. Trying to read the property before the initial value has been\n     * assigned results in an exception.\n     *\n     * @sample samples.properties.Delegates.notNullDelegate\n     */\n    public fun <T : Any> notNull(): ReadWriteProperty<Any?, T> = NotNullVar()\n\n    /**\n     * Returns a property delegate for a read/write property that calls a specified callback function when changed.\n     * @param initialValue the initial value of the property.\n     * @param onChange the callback which is called after the change of the property is made. The value of the property\n     *  has already been changed when this callback is invoked.\n     *\n     *  @sample samples.properties.Delegates.observableDelegate\n     */\n    public inline fun <T> observable(initialValue: T, crossinline onChange: (property: KProperty<*>, oldValue: T, newValue: T) -> Unit):\n            ReadWriteProperty<Any?, T> =\n        object : ObservableProperty<T>(initialValue) {\n            override fun afterChange(property: KProperty<*>, oldValue: T, newValue: T) = onChange(property, oldValue, newValue)\n        }\n\n    /**\n     * Returns a property delegate for a read/write property that calls a specified callback function when changed,\n     * allowing the callback to veto the modification.\n     * @param initialValue the initial value of the property.\n     * @param onChange the callback which is called before a change to the property value is attempted.\n     *  The value of the property hasn't been changed yet, when this callback is invoked.\n     *  If the callback returns `true` the value of the property is being set to the new value,\n     *  and if the callback returns `false` the new value is discarded and the property remains its old value.\n     *\n     *  @sample samples.properties.Delegates.vetoableDelegate\n     *  @sample samples.properties.Delegates.throwVetoableDelegate\n     */\n    public inline fun <T> vetoable(initialValue: T, crossinline onChange: (property: KProperty<*>, oldValue: T, newValue: T) -> Boolean):\n            ReadWriteProperty<Any?, T> =\n        object : ObservableProperty<T>(initialValue) {\n            override fun beforeChange(property: KProperty<*>, oldValue: T, newValue: T): Boolean = onChange(property, oldValue, newValue)\n        }\n\n}\n\n\nprivate class NotNullVar<T : Any>() : ReadWriteProperty<Any?, T> {\n    private var value: T? = null\n\n    public override fun getValue(thisRef: Any?, property: KProperty<*>): T {\n        return value ?: throw IllegalStateException(\"Property ${property.name} should be initialized before get.\")\n    }\n\n    public override fun setValue(thisRef: Any?, property: KProperty<*>, value: T) {\n        this.value = value\n    }\n}\n\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.experimental\n\n/** Performs a bitwise AND operation between the two values. */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline infix fun Byte.and(other: Byte): Byte = (this.toInt() and other.toInt()).toByte()\n\n/** Performs a bitwise OR operation between the two values. */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline infix fun Byte.or(other: Byte): Byte = (this.toInt() or other.toInt()).toByte()\n\n/** Performs a bitwise XOR operation between the two values. */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline infix fun Byte.xor(other: Byte): Byte = (this.toInt() xor other.toInt()).toByte()\n\n/** Inverts the bits in this value. */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun Byte.inv(): Byte = (this.toInt().inv()).toByte()\n\n\n/** Performs a bitwise AND operation between the two values. */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline infix fun Short.and(other: Short): Short = (this.toInt() and other.toInt()).toShort()\n\n/** Performs a bitwise OR operation between the two values. */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline infix fun Short.or(other: Short): Short = (this.toInt() or other.toInt()).toShort()\n\n/** Performs a bitwise XOR operation between the two values. */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline infix fun Short.xor(other: Short): Short = (this.toInt() xor other.toInt()).toShort()\n\n/** Inverts the bits in this value. */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun Short.inv(): Short = (this.toInt().inv()).toShort()\n\n\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.properties\n\nimport kotlin.reflect.KProperty\n\n/**\n * Implements the core logic of a property delegate for a read/write property that calls callback functions when changed.\n * @param initialValue the initial value of the property.\n */\npublic abstract class ObservableProperty<V>(initialValue: V) : ReadWriteProperty<Any?, V> {\n    private var value = initialValue\n\n    /**\n     *  The callback which is called before a change to the property value is attempted.\n     *  The value of the property hasn't been changed yet, when this callback is invoked.\n     *  If the callback returns `true` the value of the property is being set to the new value,\n     *  and if the callback returns `false` the new value is discarded and the property remains its old value.\n     */\n    protected open fun beforeChange(property: KProperty<*>, oldValue: V, newValue: V): Boolean = true\n\n    /**\n     * The callback which is called after the change of the property is made. The value of the property\n     * has already been changed when this callback is invoked.\n     */\n    protected open fun afterChange(property: KProperty<*>, oldValue: V, newValue: V): Unit {}\n\n    public override fun getValue(thisRef: Any?, property: KProperty<*>): V {\n        return value\n    }\n\n    public override fun setValue(thisRef: Any?, property: KProperty<*>, value: V) {\n        val oldValue = this.value\n        if (!beforeChange(property, oldValue, value)) {\n            return\n        }\n        this.value = value\n        afterChange(property, oldValue, value)\n    }\n}","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.random\n\nimport kotlin.math.nextDown\n\n/**\n * An abstract class that is implemented by random number generator algorithms.\n *\n * The companion object [Random.Default] is the default instance of [Random].\n *\n * To get a seeded instance of random generator use [Random] function.\n *\n * @sample samples.random.Randoms.defaultRandom\n */\n@SinceKotlin(\"1.3\")\npublic abstract class Random {\n\n    /**\n     * Gets the next random [bitCount] number of bits.\n     *\n     * Generates an `Int` whose lower [bitCount] bits are filled with random values and the remaining upper bits are zero.\n     *\n     * @param bitCount number of bits to generate, must be in range 0..32, otherwise the behavior is unspecified.\n     *\n     * @sample samples.random.Randoms.nextBits\n     */\n    public abstract fun nextBits(bitCount: Int): Int\n\n    /**\n     * Gets the next random `Int` from the random number generator.\n     *\n     * Generates an `Int` random value uniformly distributed between `Int.MIN_VALUE` and `Int.MAX_VALUE` (inclusive).\n     *\n     * @sample samples.random.Randoms.nextInt\n     */\n    public open fun nextInt(): Int = nextBits(32)\n\n    /**\n     * Gets the next random non-negative `Int` from the random number generator less than the specified [until] bound.\n     *\n     * Generates an `Int` random value uniformly distributed between `0` (inclusive) and the specified [until] bound (exclusive).\n     *\n     * @param until must be positive.\n     *\n     * @throws IllegalArgumentException if [until] is negative or zero.\n     *\n     * @sample samples.random.Randoms.nextIntFromUntil\n     */\n    public open fun nextInt(until: Int): Int = nextInt(0, until)\n\n    /**\n     * Gets the next random `Int` from the random number generator in the specified range.\n     *\n     * Generates an `Int` random value uniformly distributed between the specified [from] (inclusive) and [until] (exclusive) bounds.\n     *\n     * @throws IllegalArgumentException if [from] is greater than or equal to [until].\n     *\n     * @sample samples.random.Randoms.nextIntFromUntil\n     */\n    public open fun nextInt(from: Int, until: Int): Int {\n        checkRangeBounds(from, until)\n        val n = until - from\n        if (n > 0 || n == Int.MIN_VALUE) {\n            val rnd = if (n and -n == n) {\n                val bitCount = fastLog2(n)\n                nextBits(bitCount)\n            } else {\n                var v: Int\n                do {\n                    val bits = nextInt().ushr(1)\n                    v = bits % n\n                } while (bits - v + (n - 1) < 0)\n                v\n            }\n            return from + rnd\n        } else {\n            while (true) {\n                val rnd = nextInt()\n                if (rnd in from until until) return rnd\n            }\n        }\n    }\n\n    /**\n     * Gets the next random `Long` from the random number generator.\n     *\n     * Generates a `Long` random value uniformly distributed between `Long.MIN_VALUE` and `Long.MAX_VALUE` (inclusive).\n     *\n     * @sample samples.random.Randoms.nextLong\n     */\n    public open fun nextLong(): Long = nextInt().toLong().shl(32) + nextInt()\n\n    /**\n     * Gets the next random non-negative `Long` from the random number generator less than the specified [until] bound.\n     *\n     * Generates a `Long` random value uniformly distributed between `0` (inclusive) and the specified [until] bound (exclusive).\n     *\n     * @param until must be positive.\n     *\n     * @throws IllegalArgumentException if [until] is negative or zero.\n     *\n     * @sample samples.random.Randoms.nextLongFromUntil\n     */\n    public open fun nextLong(until: Long): Long = nextLong(0, until)\n\n    /**\n     * Gets the next random `Long` from the random number generator in the specified range.\n     *\n     * Generates a `Long` random value uniformly distributed between the specified [from] (inclusive) and [until] (exclusive) bounds.\n     *\n     * @throws IllegalArgumentException if [from] is greater than or equal to [until].\n     *\n     * @sample samples.random.Randoms.nextLongFromUntil\n     */\n    public open fun nextLong(from: Long, until: Long): Long {\n        checkRangeBounds(from, until)\n        val n = until - from\n        if (n > 0) {\n            val rnd: Long\n            if (n and -n == n) {\n                val nLow = n.toInt()\n                val nHigh = (n ushr 32).toInt()\n                rnd = when {\n                    nLow != 0 -> {\n                        val bitCount = fastLog2(nLow)\n                        // toUInt().toLong()\n                        nextBits(bitCount).toLong() and 0xFFFF_FFFF\n                    }\n                    nHigh == 1 ->\n                        // toUInt().toLong()\n                        nextInt().toLong() and 0xFFFF_FFFF\n                    else -> {\n                        val bitCount = fastLog2(nHigh)\n                        nextBits(bitCount).toLong().shl(32) + nextInt()\n                    }\n                }\n            } else {\n                var v: Long\n                do {\n                    val bits = nextLong().ushr(1)\n                    v = bits % n\n                } while (bits - v + (n - 1) < 0)\n                rnd = v\n            }\n            return from + rnd\n        } else {\n            while (true) {\n                val rnd = nextLong()\n                if (rnd in from until until) return rnd\n            }\n        }\n    }\n\n    /**\n     * Gets the next random [Boolean] value.\n     *\n     * @sample samples.random.Randoms.nextBoolean\n     */\n    public open fun nextBoolean(): Boolean = nextBits(1) != 0\n\n    /**\n     * Gets the next random [Double] value uniformly distributed between 0 (inclusive) and 1 (exclusive).\n     *\n     * @sample samples.random.Randoms.nextDouble\n     */\n    public open fun nextDouble(): Double = doubleFromParts(nextBits(26), nextBits(27))\n\n    /**\n     * Gets the next random non-negative `Double` from the random number generator less than the specified [until] bound.\n     *\n     * Generates a `Double` random value uniformly distributed between 0 (inclusive) and [until] (exclusive).\n     *\n     * @throws IllegalArgumentException if [until] is negative or zero.\n     *\n     * @sample samples.random.Randoms.nextDoubleFromUntil\n     */\n    public open fun nextDouble(until: Double): Double = nextDouble(0.0, until)\n\n    /**\n     * Gets the next random `Double` from the random number generator in the specified range.\n     *\n     * Generates a `Double` random value uniformly distributed between the specified [from] (inclusive) and [until] (exclusive) bounds.\n     *\n     * [from] and [until] must be finite otherwise the behavior is unspecified.\n     *\n     * @throws IllegalArgumentException if [from] is greater than or equal to [until].\n     *\n     * @sample samples.random.Randoms.nextDoubleFromUntil\n     */\n    public open fun nextDouble(from: Double, until: Double): Double {\n        checkRangeBounds(from, until)\n        val size = until - from\n        val r = if (size.isInfinite() && from.isFinite() && until.isFinite()) {\n            val r1 = nextDouble() * (until / 2 - from / 2)\n            from + r1 + r1\n        } else {\n            from + nextDouble() * size\n        }\n        return if (r >= until) until.nextDown() else r\n    }\n\n    /**\n     * Gets the next random [Float] value uniformly distributed between 0 (inclusive) and 1 (exclusive).\n     *\n     * @sample samples.random.Randoms.nextFloat\n     */\n    public open fun nextFloat(): Float = nextBits(24) / (1 shl 24).toFloat()\n\n    /**\n     * Fills a subrange of the specified byte [array] starting from [fromIndex] inclusive and ending [toIndex] exclusive\n     * with random bytes.\n     *\n     * @return [array] with the subrange filled with random bytes.\n     *\n     * @sample samples.random.Randoms.nextBytes\n     */\n    public open fun nextBytes(array: ByteArray, fromIndex: Int = 0, toIndex: Int = array.size): ByteArray {\n        require(fromIndex in 0..array.size && toIndex in 0..array.size) { \"fromIndex ($fromIndex) or toIndex ($toIndex) are out of range: 0..${array.size}.\" }\n        require(fromIndex <= toIndex) { \"fromIndex ($fromIndex) must be not greater than toIndex ($toIndex).\" }\n\n        val steps = (toIndex - fromIndex) / 4\n\n        var position = fromIndex\n        repeat(steps) {\n            val v = nextInt()\n            array[position] = v.toByte()\n            array[position + 1] = v.ushr(8).toByte()\n            array[position + 2] = v.ushr(16).toByte()\n            array[position + 3] = v.ushr(24).toByte()\n            position += 4\n        }\n\n        val remainder = toIndex - position\n        val vr = nextBits(remainder * 8)\n        for (i in 0 until remainder) {\n            array[position + i] = vr.ushr(i * 8).toByte()\n        }\n\n        return array\n    }\n\n    /**\n     * Fills the specified byte [array] with random bytes and returns it.\n     *\n     * @return [array] filled with random bytes.\n     *\n     * @sample samples.random.Randoms.nextBytes\n     */\n    public open fun nextBytes(array: ByteArray): ByteArray = nextBytes(array, 0, array.size)\n\n    /**\n     * Creates a byte array of the specified [size], filled with random bytes.\n     *\n     * @sample samples.random.Randoms.nextBytes\n     */\n    public open fun nextBytes(size: Int): ByteArray = nextBytes(ByteArray(size))\n\n\n    /**\n     * The default random number generator.\n     *\n     * On JVM this generator is thread-safe, its methods can be invoked from multiple threads.\n     *\n     * @sample samples.random.Randoms.defaultRandom\n     */\n    companion object Default : Random(), Serializable {\n        private val defaultRandom: Random = defaultPlatformRandom()\n\n        private object Serialized : Serializable {\n            private const val serialVersionUID = 0L\n\n            private fun readResolve(): Any = Random\n        }\n\n        private fun writeReplace(): Any = Serialized\n\n        override fun nextBits(bitCount: Int): Int = defaultRandom.nextBits(bitCount)\n        override fun nextInt(): Int = defaultRandom.nextInt()\n        override fun nextInt(until: Int): Int = defaultRandom.nextInt(until)\n        override fun nextInt(from: Int, until: Int): Int = defaultRandom.nextInt(from, until)\n\n        override fun nextLong(): Long = defaultRandom.nextLong()\n        override fun nextLong(until: Long): Long = defaultRandom.nextLong(until)\n        override fun nextLong(from: Long, until: Long): Long = defaultRandom.nextLong(from, until)\n\n        override fun nextBoolean(): Boolean = defaultRandom.nextBoolean()\n\n        override fun nextDouble(): Double = defaultRandom.nextDouble()\n        override fun nextDouble(until: Double): Double = defaultRandom.nextDouble(until)\n        override fun nextDouble(from: Double, until: Double): Double = defaultRandom.nextDouble(from, until)\n\n        override fun nextFloat(): Float = defaultRandom.nextFloat()\n\n        override fun nextBytes(array: ByteArray): ByteArray = defaultRandom.nextBytes(array)\n        override fun nextBytes(size: Int): ByteArray = defaultRandom.nextBytes(size)\n        override fun nextBytes(array: ByteArray, fromIndex: Int, toIndex: Int): ByteArray =\n            defaultRandom.nextBytes(array, fromIndex, toIndex)\n    }\n}\n\n/**\n * Returns a repeatable random number generator seeded with the given [seed] `Int` value.\n *\n * Two generators with the same seed produce the same sequence of values within the same version of Kotlin runtime.\n *\n * *Note:* Future versions of Kotlin may change the algorithm of this seeded number generator so that it will return\n * a sequence of values different from the current one for a given seed.\n *\n * On JVM the returned generator is NOT thread-safe. Do not invoke it from multiple threads without proper synchronization.\n *\n * @sample samples.random.Randoms.seededRandom\n */\n@SinceKotlin(\"1.3\")\npublic fun Random(seed: Int): Random = XorWowRandom(seed, seed.shr(31))\n\n/**\n * Returns a repeatable random number generator seeded with the given [seed] `Long` value.\n *\n * Two generators with the same seed produce the same sequence of values within the same version of Kotlin runtime.\n *\n * *Note:* Future versions of Kotlin may change the algorithm of this seeded number generator so that it will return\n * a sequence of values different from the current one for a given seed.\n *\n * On JVM the returned generator is NOT thread-safe. Do not invoke it from multiple threads without proper synchronization.\n *\n * @sample samples.random.Randoms.seededRandom\n */\n@SinceKotlin(\"1.3\")\npublic fun Random(seed: Long): Random = XorWowRandom(seed.toInt(), seed.shr(32).toInt())\n\n\n/**\n * Gets the next random `Int` from the random number generator in the specified [range].\n *\n * Generates an `Int` random value uniformly distributed in the specified [range]:\n * from `range.start` inclusive to `range.endInclusive` inclusive.\n *\n * @throws IllegalArgumentException if [range] is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun Random.nextInt(range: IntRange): Int = when {\n    range.isEmpty() -> throw IllegalArgumentException(\"Cannot get random in empty range: $range\")\n    range.last < Int.MAX_VALUE -> nextInt(range.first, range.last + 1)\n    range.first > Int.MIN_VALUE -> nextInt(range.first - 1, range.last) + 1\n    else -> nextInt()\n}\n\n/**\n * Gets the next random `Long` from the random number generator in the specified [range].\n *\n * Generates a `Long` random value uniformly distributed in the specified [range]:\n * from `range.start` inclusive to `range.endInclusive` inclusive.\n *\n * @throws IllegalArgumentException if [range] is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun Random.nextLong(range: LongRange): Long = when {\n    range.isEmpty() -> throw IllegalArgumentException(\"Cannot get random in empty range: $range\")\n    range.last < Long.MAX_VALUE -> nextLong(range.first, range.last + 1)\n    range.first > Long.MIN_VALUE -> nextLong(range.first - 1, range.last) + 1\n    else -> nextLong()\n}\n\n\ninternal expect fun defaultPlatformRandom(): Random\ninternal expect fun doubleFromParts(hi26: Int, low27: Int): Double\n\n@OptIn(ExperimentalStdlibApi::class)\ninternal fun fastLog2(value: Int): Int = 31 - value.countLeadingZeroBits()\n\n/** Takes upper [bitCount] bits (0..32) from this number. */\ninternal fun Int.takeUpperBits(bitCount: Int): Int =\n    this.ushr(32 - bitCount) and (-bitCount).shr(31)\n\ninternal fun checkRangeBounds(from: Int, until: Int) = require(until > from) { boundsErrorMessage(from, until) }\ninternal fun checkRangeBounds(from: Long, until: Long) = require(until > from) { boundsErrorMessage(from, until) }\ninternal fun checkRangeBounds(from: Double, until: Double) = require(until > from) { boundsErrorMessage(from, until) }\n\ninternal fun boundsErrorMessage(from: Any, until: Any) = \"Random range is empty: [$from, $until).\"\n","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.properties\n\nimport kotlin.reflect.KProperty\n\n/**\n * Base interface that can be used for implementing property delegates of read-only properties.\n *\n * This is provided only for convenience; you don't have to extend this interface\n * as long as your property delegate has methods with the same signatures.\n *\n * @param T the type of object which owns the delegated property.\n * @param V the type of the property value.\n */\npublic fun interface ReadOnlyProperty<in T, out V> {\n    /**\n     * Returns the value of the property for the given object.\n     * @param thisRef the object for which the value is requested.\n     * @param property the metadata for the property.\n     * @return the property value.\n     */\n    public operator fun getValue(thisRef: T, property: KProperty<*>): V\n}\n\n/**\n * Base interface that can be used for implementing property delegates of read-write properties.\n *\n * This is provided only for convenience; you don't have to extend this interface\n * as long as your property delegate has methods with the same signatures.\n *\n * @param T the type of object which owns the delegated property.\n * @param V the type of the property value.\n */\npublic interface ReadWriteProperty<in T, V> : ReadOnlyProperty<T, V> {\n    /**\n     * Returns the value of the property for the given object.\n     * @param thisRef the object for which the value is requested.\n     * @param property the metadata for the property.\n     * @return the property value.\n     */\n    public override operator fun getValue(thisRef: T, property: KProperty<*>): V\n\n    /**\n     * Sets the value of the property for the given object.\n     * @param thisRef the object for which the value is requested.\n     * @param property the metadata for the property.\n     * @param value the value to set.\n     */\n    public operator fun setValue(thisRef: T, property: KProperty<*>, value: V)\n}\n\n/**\n * Base interface that can be used for implementing property delegate providers.\n *\n * This is provided only for convenience; you don't have to extend this interface\n * as long as your delegate provider has a method with the same signature.\n *\n * @param T the type of object which owns the delegated property.\n * @param D the type of property delegates this provider provides.\n */\n@SinceKotlin(\"1.4\")\npublic fun interface PropertyDelegateProvider<in T, out D> {\n    /**\n     * Returns the delegate of the property for the given object.\n     *\n     * This function can be used to extend the logic of creating the object (e.g. perform validation checks)\n     * to which the property implementation is delegated.\n     *\n     * @param thisRef the object for which property delegate is requested.\n     * @param property the metadata for the property.\n     * @return the property delegate.\n     */\n    public operator fun provideDelegate(thisRef: T, property: KProperty<*>): D\n}\n","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:Suppress(\"PackageDirectoryMismatch\")\npackage kotlin\n\nimport kotlin.reflect.*\n\n/**\n * An extension operator that allows delegating a read-only property of type [V]\n * to a property reference to a property of type [V] or its subtype.\n *\n * @receiver A property reference to a read-only or mutable property of type [V] or its subtype.\n * The reference is without a receiver, i.e. it either references a top-level property or\n * has the receiver bound to it.\n *\n * Example:\n *\n * ```\n * class Login(val username: String)\n * val defaultLogin = Login(\"Admin\")\n * val defaultUsername by defaultLogin::username\n * // equivalent to\n * val defaultUserName get() = defaultLogin.username\n * ```\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <V> KProperty0<V>.getValue(thisRef: Any?, property: KProperty<*>): V {\n    return get()\n}\n\n/**\n * An extension operator that allows delegating a mutable property of type [V]\n * to a property reference to a mutable property of the same type [V].\n *\n * @receiver A property reference to a mutable property of type [V].\n * The reference is without a receiver, i.e. it either references a top-level property or\n * has the receiver bound to it.\n *\n * Example:\n *\n * ```\n * class Login(val username: String, var incorrectAttemptCounter: Int = 0)\n * val defaultLogin = Login(\"Admin\")\n * var defaultLoginAttempts by defaultLogin::incorrectAttemptCounter\n * // equivalent to\n * var defaultLoginAttempts: Int\n *     get() = defaultLogin.incorrectAttemptCounter\n *     set(value) { defaultLogin.incorrectAttemptCounter = value }\n * ```\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <V> KMutableProperty0<V>.setValue(thisRef: Any?, property: KProperty<*>, value: V) {\n    set(value)\n}\n\n\n/**\n * An extension operator that allows delegating a read-only member or extension property of type [V]\n * to a property reference to a member or extension property of type [V] or its subtype.\n *\n * @receiver A property reference to a read-only or mutable property of type [V] or its subtype.\n * The reference has an unbound receiver of type [T].\n *\n * Example:\n *\n * ```\n * class Login(val username: String)\n * val Login.user by Login::username\n * // equivalent to\n * val Login.user get() = this.username\n * ```\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <T, V> KProperty1<T, V>.getValue(thisRef: T, property: KProperty<*>): V {\n    return get(thisRef)\n}\n\n/**\n * An extension operator that allows delegating a mutable member or extension property of type [V]\n * to a property reference to a member or extension mutable property of the same type [V].\n *\n * @receiver A property reference to a read-only or mutable property of type [V] or its subtype.\n * The reference has an unbound receiver of type [T].\n *\n * Example:\n *\n * ```\n * class Login(val username: String, var incorrectAttemptCounter: Int)\n * var Login.attempts by Login::incorrectAttemptCounter\n * // equivalent to\n * var Login.attempts: Int\n *     get() = this.incorrectAttemptCounter\n *     set(value) { this.incorrectAttemptCounter = value }\n * ```\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <T, V> KMutableProperty1<T, V>.setValue(thisRef: T, property: KProperty<*>, value: V) {\n    set(thisRef, value)\n}","/*\n * Copyright 2010-2021 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.random\n\n\n/**\n * Gets the next random [UInt] from the random number generator.\n *\n * Generates a [UInt] random value uniformly distributed between [UInt.MIN_VALUE] and [UInt.MAX_VALUE] (inclusive).\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\npublic fun Random.nextUInt(): UInt = nextInt().toUInt()\n\n/**\n * Gets the next random [UInt] from the random number generator less than the specified [until] bound.\n *\n * Generates a [UInt] random value uniformly distributed between `0` (inclusive) and the specified [until] bound (exclusive).\n *\n * @throws IllegalArgumentException if [until] is zero.\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\npublic fun Random.nextUInt(until: UInt): UInt = nextUInt(0u, until)\n\n/**\n * Gets the next random [UInt] from the random number generator in the specified range.\n *\n * Generates a [UInt] random value uniformly distributed between the specified [from] (inclusive) and [until] (exclusive) bounds.\n *\n * @throws IllegalArgumentException if [from] is greater than or equal to [until].\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\npublic fun Random.nextUInt(from: UInt, until: UInt): UInt {\n    checkUIntRangeBounds(from, until)\n\n    val signedFrom = from.toInt() xor Int.MIN_VALUE\n    val signedUntil = until.toInt() xor Int.MIN_VALUE\n\n    val signedResult = nextInt(signedFrom, signedUntil) xor Int.MIN_VALUE\n    return signedResult.toUInt()\n}\n\n/**\n * Gets the next random [UInt] from the random number generator in the specified [range].\n *\n * Generates a [UInt] random value uniformly distributed in the specified [range]:\n * from `range.start` inclusive to `range.endInclusive` inclusive.\n *\n * @throws IllegalArgumentException if [range] is empty.\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\npublic fun Random.nextUInt(range: UIntRange): UInt = when {\n    range.isEmpty() -> throw IllegalArgumentException(\"Cannot get random in empty range: $range\")\n    range.last < UInt.MAX_VALUE -> nextUInt(range.first, range.last + 1u)\n    range.first > UInt.MIN_VALUE -> nextUInt(range.first - 1u, range.last) + 1u\n    else -> nextUInt()\n}\n\n/**\n * Gets the next random [ULong] from the random number generator.\n *\n * Generates a [ULong] random value uniformly distributed between [ULong.MIN_VALUE] and [ULong.MAX_VALUE] (inclusive).\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\npublic fun Random.nextULong(): ULong = nextLong().toULong()\n\n/**\n * Gets the next random [ULong] from the random number generator less than the specified [until] bound.\n *\n * Generates a [ULong] random value uniformly distributed between `0` (inclusive) and the specified [until] bound (exclusive).\n *\n * @throws IllegalArgumentException if [until] is zero.\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\npublic fun Random.nextULong(until: ULong): ULong = nextULong(0uL, until)\n\n/**\n * Gets the next random [ULong] from the random number generator in the specified range.\n *\n * Generates a [ULong] random value uniformly distributed between the specified [from] (inclusive) and [until] (exclusive) bounds.\n *\n * @throws IllegalArgumentException if [from] is greater than or equal to [until].\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\npublic fun Random.nextULong(from: ULong, until: ULong): ULong {\n    checkULongRangeBounds(from, until)\n\n    val signedFrom = from.toLong() xor Long.MIN_VALUE\n    val signedUntil = until.toLong() xor Long.MIN_VALUE\n\n    val signedResult = nextLong(signedFrom, signedUntil) xor Long.MIN_VALUE\n    return signedResult.toULong()\n}\n\n/**\n * Gets the next random [ULong] from the random number generator in the specified [range].\n *\n * Generates a [ULong] random value uniformly distributed in the specified [range]:\n * from `range.start` inclusive to `range.endInclusive` inclusive.\n *\n * @throws IllegalArgumentException if [range] is empty.\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\npublic fun Random.nextULong(range: ULongRange): ULong = when {\n    range.isEmpty() -> throw IllegalArgumentException(\"Cannot get random in empty range: $range\")\n    range.last < ULong.MAX_VALUE -> nextULong(range.first, range.last + 1u)\n    range.first > ULong.MIN_VALUE -> nextULong(range.first - 1u, range.last) + 1u\n    else -> nextULong()\n}\n\n/**\n * Fills the specified unsigned byte [array] with random bytes and returns it.\n *\n * @return [array] filled with random bytes.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun Random.nextUBytes(array: UByteArray): UByteArray {\n    nextBytes(array.asByteArray())\n    return array\n}\n\n/**\n * Creates an unsigned byte array of the specified [size], filled with random bytes.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun Random.nextUBytes(size: Int): UByteArray = nextBytes(size).asUByteArray()\n\n/**\n * Fills a subrange of the specified `UByte` [array] starting from [fromIndex] inclusive and ending [toIndex] exclusive with random UBytes.\n *\n * @return [array] with the subrange filled with random bytes.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun Random.nextUBytes(array: UByteArray, fromIndex: Int = 0, toIndex: Int = array.size): UByteArray {\n    nextBytes(array.asByteArray(), fromIndex, toIndex)\n    return array\n}\n\n\ninternal fun checkUIntRangeBounds(from: UInt, until: UInt) = require(until > from) { boundsErrorMessage(from, until) }\ninternal fun checkULongRangeBounds(from: ULong, until: ULong) = require(until > from) { boundsErrorMessage(from, until) }\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.random\n\n/**\n * Random number generator, using Marsaglia's \"xorwow\" algorithm\n *\n * Cycles after 2^192 - 2^32 repetitions.\n *\n * For more details, see Marsaglia, George (July 2003). \"Xorshift RNGs\". Journal of Statistical Software. 8 (14). doi:10.18637/jss.v008.i14\n *\n * Available at https://www.jstatsoft.org/v08/i14/paper\n *\n */\ninternal class XorWowRandom internal constructor(\n    private var x: Int,\n    private var y: Int,\n    private var z: Int,\n    private var w: Int,\n    private var v: Int,\n    private var addend: Int\n) : Random(), Serializable {\n\n    internal constructor(seed1: Int, seed2: Int) :\n            this(seed1, seed2, 0, 0, seed1.inv(), (seed1 shl 10) xor (seed2 ushr 4))\n\n    init {\n        require((x or y or z or w or v) != 0) { \"Initial state must have at least one non-zero element.\" }\n\n        // some trivial seeds can produce several values with zeroes in upper bits, so we discard first 64\n        repeat(64) { nextInt() }\n    }\n\n    override fun nextInt(): Int {\n        // Equivalent to the xorxow algorithm\n        // From Marsaglia, G. 2003. Xorshift RNGs. J. Statis. Soft. 8, 14, p. 5\n        var t = x\n        t = t xor (t ushr 2)\n        x = y\n        y = z\n        z = w\n        val v0 = v\n        w = v0\n        t = (t xor (t shl 1)) xor v0 xor (v0 shl 4)\n        v = t\n        addend += 362437\n        return t + addend\n    }\n\n    override fun nextBits(bitCount: Int): Int =\n        nextInt().takeUpperBits(bitCount)\n\n    private companion object {\n        private const val serialVersionUID: Long = 0L\n    }\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"RangesKt\")\n\npackage kotlin.ranges\n\n/**\n * Represents a range of [Comparable] values.\n */\nprivate open class ComparableRange<T : Comparable<T>>(\n    override val start: T,\n    override val endInclusive: T\n) : ClosedRange<T> {\n\n    override fun equals(other: Any?): Boolean {\n        return other is ComparableRange<*> && (isEmpty() && other.isEmpty() ||\n                start == other.start && endInclusive == other.endInclusive)\n    }\n\n    override fun hashCode(): Int {\n        return if (isEmpty()) -1 else 31 * start.hashCode() + endInclusive.hashCode()\n    }\n\n    override fun toString(): String = \"$start..$endInclusive\"\n}\n\n/**\n * Creates a range from this [Comparable] value to the specified [that] value.\n *\n * This value needs to be smaller than or equal to [that] value, otherwise the returned range will be empty.\n * @sample samples.ranges.Ranges.rangeFromComparable\n */\npublic operator fun <T : Comparable<T>> T.rangeTo(that: T): ClosedRange<T> = ComparableRange(this, that)\n\n\n/**\n * Represents a range of floating point numbers.\n * Extends [ClosedRange] interface providing custom operation [lessThanOrEquals] for comparing values of range domain type.\n *\n * This interface is implemented by floating point ranges returned by [Float.rangeTo] and [Double.rangeTo] operators to\n * achieve IEEE-754 comparison order instead of total order of floating point numbers.\n */\n@SinceKotlin(\"1.1\")\npublic interface ClosedFloatingPointRange<T : Comparable<T>> : ClosedRange<T> {\n    override fun contains(value: T): Boolean = lessThanOrEquals(start, value) && lessThanOrEquals(value, endInclusive)\n    override fun isEmpty(): Boolean = !lessThanOrEquals(start, endInclusive)\n\n    /**\n     * Compares two values of range domain type and returns true if first is less than or equal to second.\n     */\n    fun lessThanOrEquals(a: T, b: T): Boolean\n}\n\n\n/**\n * A closed range of values of type `Double`.\n *\n * Numbers are compared with the ends of this range according to IEEE-754.\n */\nprivate class ClosedDoubleRange(\n    start: Double,\n    endInclusive: Double\n) : ClosedFloatingPointRange<Double> {\n    private val _start = start\n    private val _endInclusive = endInclusive\n    override val start: Double get() = _start\n    override val endInclusive: Double get() = _endInclusive\n\n    override fun lessThanOrEquals(a: Double, b: Double): Boolean = a <= b\n\n    override fun contains(value: Double): Boolean = value >= _start && value <= _endInclusive\n    override fun isEmpty(): Boolean = !(_start <= _endInclusive)\n\n    override fun equals(other: Any?): Boolean {\n        return other is ClosedDoubleRange && (isEmpty() && other.isEmpty() ||\n                _start == other._start && _endInclusive == other._endInclusive)\n    }\n\n    override fun hashCode(): Int {\n        return if (isEmpty()) -1 else 31 * _start.hashCode() + _endInclusive.hashCode()\n    }\n\n    override fun toString(): String = \"$_start..$_endInclusive\"\n}\n\n/**\n * Creates a range from this [Double] value to the specified [that] value.\n *\n * Numbers are compared with the ends of this range according to IEEE-754.\n * @sample samples.ranges.Ranges.rangeFromDouble\n */\n@SinceKotlin(\"1.1\")\npublic operator fun Double.rangeTo(that: Double): ClosedFloatingPointRange<Double> = ClosedDoubleRange(this, that)\n\n\n/**\n * A closed range of values of type `Float`.\n *\n * Numbers are compared with the ends of this range according to IEEE-754.\n */\nprivate class ClosedFloatRange(\n    start: Float,\n    endInclusive: Float\n) : ClosedFloatingPointRange<Float> {\n    private val _start = start\n    private val _endInclusive = endInclusive\n    override val start: Float get() = _start\n    override val endInclusive: Float get() = _endInclusive\n\n    override fun lessThanOrEquals(a: Float, b: Float): Boolean = a <= b\n\n    override fun contains(value: Float): Boolean = value >= _start && value <= _endInclusive\n    override fun isEmpty(): Boolean = !(_start <= _endInclusive)\n\n    override fun equals(other: Any?): Boolean {\n        return other is ClosedFloatRange && (isEmpty() && other.isEmpty() ||\n                _start == other._start && _endInclusive == other._endInclusive)\n    }\n\n    override fun hashCode(): Int {\n        return if (isEmpty()) -1 else 31 * _start.hashCode() + _endInclusive.hashCode()\n    }\n\n    override fun toString(): String = \"$_start..$_endInclusive\"\n}\n\n/**\n * Creates a range from this [Float] value to the specified [that] value.\n *\n * Numbers are compared with the ends of this range according to IEEE-754.\n * @sample samples.ranges.Ranges.rangeFromFloat\n */\n@SinceKotlin(\"1.1\")\npublic operator fun Float.rangeTo(that: Float): ClosedFloatingPointRange<Float> = ClosedFloatRange(this, that)\n\n\n/**\n * Returns `true` if this iterable range contains the specified [element].\n *\n * Always returns `false` if the [element] is `null`.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <T, R> R.contains(element: T?): Boolean where T : Any, R : Iterable<T>, R : ClosedRange<T> =\n    element != null && contains(element)\n\n\ninternal fun checkStepIsPositive(isPositive: Boolean, step: Number) {\n    if (!isPositive) throw IllegalArgumentException(\"Step must be positive, was: $step.\")\n}\n","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.reflect\n\nimport kotlin.jvm.JvmField\nimport kotlin.jvm.JvmStatic\n\n\n\n/**\n * Represents a type projection. Type projection is usually the argument to another type in a type usage.\n * For example, in the type `Array<out Number>`, `out Number` is the covariant projection of the type represented by the class `Number`.\n *\n * Type projection is either the star projection, or an entity consisting of a specific type plus optional variance.\n *\n * See the [Kotlin language documentation](https://kotlinlang.org/docs/reference/generics.html#type-projections)\n * for more information.\n */\n@SinceKotlin(\"1.1\")\npublic data class KTypeProjection constructor(\n    /**\n     * The use-site variance specified in the projection, or `null` if this is a star projection.\n     */\n    public val variance: KVariance?,\n    /**\n     * The type specified in the projection, or `null` if this is a star projection.\n     */\n    public val type: KType?\n) {\n\n    init {\n        require((variance == null) == (type == null)) {\n            if (variance == null)\n                \"Star projection must have no type specified.\"\n            else\n                \"The projection variance $variance requires type to be specified.\"\n        }\n    }\n\n    override fun toString(): String = when (variance) {\n        null -> \"*\"\n        KVariance.INVARIANT -> type.toString()\n        KVariance.IN -> \"in $type\"\n        KVariance.OUT -> \"out $type\"\n    }\n\n    public companion object {\n        // provided for compiler access\n        @JvmField\n        @PublishedApi\n        internal val star: KTypeProjection = KTypeProjection(null, null)\n\n        /**\n         * Star projection, denoted by the `*` character.\n         * For example, in the type `KClass<*>`, `*` is the star projection.\n         * See the [Kotlin language documentation](https://kotlinlang.org/docs/reference/generics.html#star-projections)\n         * for more information.\n         */\n        public val STAR: KTypeProjection get() = star\n\n        /**\n         * Creates an invariant projection of a given type. Invariant projection is just the type itself,\n         * without any use-site variance modifiers applied to it.\n         * For example, in the type `Set<String>`, `String` is an invariant projection of the type represented by the class `String`.\n         */\n        @JvmStatic\n        public fun invariant(type: KType): KTypeProjection =\n            KTypeProjection(KVariance.INVARIANT, type)\n\n        /**\n         * Creates a contravariant projection of a given type, denoted by the `in` modifier applied to a type.\n         * For example, in the type `MutableList<in Number>`, `in Number` is a contravariant projection of the type of class `Number`.\n         */\n        @JvmStatic\n        public fun contravariant(type: KType): KTypeProjection =\n            KTypeProjection(KVariance.IN, type)\n\n        /**\n         * Creates a covariant projection of a given type, denoted by the `out` modifier applied to a type.\n         * For example, in the type `Array<out Number>`, `out Number` is a covariant projection of the type of class `Number`.\n         */\n        @JvmStatic\n        public fun covariant(type: KType): KTypeProjection =\n            KTypeProjection(KVariance.OUT, type)\n    }\n}","/*\n * Copyright 2010-2019 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.reflect\n\n/**\n * Represents variance applied to a type parameter on the declaration site (*declaration-site variance*),\n * or to a type in a projection (*use-site variance*).\n *\n * See the [Kotlin language documentation](https://kotlinlang.org/docs/reference/generics.html#variance)\n * for more information.\n *\n * @see [KTypeParameter.variance]\n * @see [KTypeProjection]\n */\n@SinceKotlin(\"1.1\")\nenum class KVariance {\n    /**\n     * The affected type parameter or type is *invariant*, which means it has no variance applied to it.\n     */\n    INVARIANT,\n\n    /**\n     * The affected type parameter or type is *contravariant*. Denoted by the `in` modifier in the source code.\n     */\n    IN,\n\n    /**\n     * The affected type parameter or type is *covariant*. Denoted by the `out` modifier in the source code.\n     */\n    OUT,\n}","/*\n * Copyright 2010-2019 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"StringsKt\")\n\npackage kotlin.text\n\n/**\n * An object to which char sequences and values can be appended.\n */\nexpect interface Appendable {\n    /**\n     * Appends the specified character [value] to this Appendable and returns this instance.\n     *\n     * @param value the character to append.\n     */\n    fun append(value: Char): Appendable\n\n    /**\n     * Appends the specified character sequence [value] to this Appendable and returns this instance.\n     *\n     * @param value the character sequence to append. If [value] is `null`, then the four characters `\"null\"` are appended to this Appendable.\n     */\n    fun append(value: CharSequence?): Appendable\n\n    /**\n     * Appends a subsequence of the specified character sequence [value] to this Appendable and returns this instance.\n     *\n     * @param value the character sequence from which a subsequence is appended. If [value] is `null`,\n     *  then characters are appended as if [value] contained the four characters `\"null\"`.\n     * @param startIndex the beginning (inclusive) of the subsequence to append.\n     * @param endIndex the end (exclusive) of the subsequence to append.\n     *\n     * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of the [value] character sequence indices or when `startIndex > endIndex`.\n     */\n    fun append(value: CharSequence?, startIndex: Int, endIndex: Int): Appendable\n}\n\n/**\n * Appends a subsequence of the specified character sequence [value] to this Appendable and returns this instance.\n *\n * @param value the character sequence from which a subsequence is appended.\n * @param startIndex the beginning (inclusive) of the subsequence to append.\n * @param endIndex the end (exclusive) of the subsequence to append.\n *\n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of the [value] character sequence indices or when `startIndex > endIndex`.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun <T : Appendable> T.appendRange(value: CharSequence, startIndex: Int, endIndex: Int): T {\n    @Suppress(\"UNCHECKED_CAST\")\n    return append(value, startIndex, endIndex) as T\n}\n\n/**\n * Appends all arguments to the given [Appendable].\n */\npublic fun <T : Appendable> T.append(vararg value: CharSequence?): T {\n    for (item in value)\n        append(item)\n    return this\n}\n\n/** Appends a line feed character (`\\n`) to this Appendable. */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun Appendable.appendLine(): Appendable = append('\\n')\n\n/** Appends value to the given Appendable and a line feed character (`\\n`) after it. */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun Appendable.appendLine(value: CharSequence?): Appendable = append(value).appendLine()\n\n/** Appends value to the given Appendable and a line feed character (`\\n`) after it. */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun Appendable.appendLine(value: Char): Appendable = append(value).appendLine()\n\n\ninternal fun <T> Appendable.appendElement(element: T, transform: ((T) -> CharSequence)?) {\n    when {\n        transform != null -> append(transform(element))\n        element is CharSequence? -> append(element)\n        element is Char -> append(element)\n        else -> append(element.toString())\n    }\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"StringsKt\")\n\npackage kotlin.text\n\n/**\n * Trims leading whitespace characters followed by [marginPrefix] from every line of a source string and removes\n * the first and the last lines if they are blank (notice difference blank vs empty).\n *\n * Doesn't affect a line if it doesn't contain [marginPrefix] except the first and the last blank lines.\n *\n * Doesn't preserve the original line endings.\n *\n * @param marginPrefix non-blank string, which is used as a margin delimiter. Default is `|` (pipe character).\n *\n * @sample samples.text.Strings.trimMargin\n * @see trimIndent\n * @see kotlin.text.isWhitespace\n */\npublic fun String.trimMargin(marginPrefix: String = \"|\"): String =\n    replaceIndentByMargin(\"\", marginPrefix)\n\n/**\n * Detects indent by [marginPrefix] as it does [trimMargin] and replace it with [newIndent].\n *\n * @param marginPrefix non-blank string, which is used as a margin delimiter. Default is `|` (pipe character).\n */\npublic fun String.replaceIndentByMargin(newIndent: String = \"\", marginPrefix: String = \"|\"): String {\n    require(marginPrefix.isNotBlank()) { \"marginPrefix must be non-blank string.\" }\n    val lines = lines()\n\n    return lines.reindent(length + newIndent.length * lines.size, getIndentFunction(newIndent), { line ->\n        val firstNonWhitespaceIndex = line.indexOfFirst { !it.isWhitespace() }\n\n        when {\n            firstNonWhitespaceIndex == -1 -> null\n            line.startsWith(marginPrefix, firstNonWhitespaceIndex) -> line.substring(firstNonWhitespaceIndex + marginPrefix.length)\n            else -> null\n        }\n    })\n}\n\n/**\n * Detects a common minimal indent of all the input lines, removes it from every line and also removes the first and the last\n * lines if they are blank (notice difference blank vs empty).\n *\n * Note that blank lines do not affect the detected indent level.\n *\n * In case if there are non-blank lines with no leading whitespace characters (no indent at all) then the\n * common indent is 0, and therefore this function doesn't change the indentation.\n *\n * Doesn't preserve the original line endings.\n *\n * @sample samples.text.Strings.trimIndent\n * @see trimMargin\n * @see kotlin.text.isBlank\n */\npublic fun String.trimIndent(): String = replaceIndent(\"\")\n\n/**\n * Detects a common minimal indent like it does [trimIndent] and replaces it with the specified [newIndent].\n */\npublic fun String.replaceIndent(newIndent: String = \"\"): String {\n    val lines = lines()\n\n    val minCommonIndent = lines\n        .filter(String::isNotBlank)\n        .map(String::indentWidth)\n        .minOrNull() ?: 0\n\n    return lines.reindent(length + newIndent.length * lines.size, getIndentFunction(newIndent), { line -> line.drop(minCommonIndent) })\n}\n\n/**\n * Prepends [indent] to every line of the original string.\n *\n * Doesn't preserve the original line endings.\n */\npublic fun String.prependIndent(indent: String = \"    \"): String =\n    lineSequence()\n        .map {\n            when {\n                it.isBlank() -> {\n                    when {\n                        it.length < indent.length -> indent\n                        else -> it\n                    }\n                }\n                else -> indent + it\n            }\n        }\n        .joinToString(\"\\n\")\n\nprivate fun String.indentWidth(): Int = indexOfFirst { !it.isWhitespace() }.let { if (it == -1) length else it }\n\nprivate fun getIndentFunction(indent: String) = when {\n    indent.isEmpty() -> { line: String -> line }\n    else -> { line: String -> indent + line }\n}\n\nprivate inline fun List<String>.reindent(\n    resultSizeEstimate: Int,\n    indentAddFunction: (String) -> String,\n    indentCutFunction: (String) -> String?\n): String {\n    val lastIndex = lastIndex\n    return mapIndexedNotNull { index, value ->\n        if ((index == 0 || index == lastIndex) && value.isBlank())\n            null\n        else\n            indentCutFunction(value)?.let(indentAddFunction) ?: value\n    }\n        .joinTo(StringBuilder(resultSizeEstimate), \"\\n\")\n        .toString()\n}\n","/*\n * Copyright 2010-2019 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.reflect\n\n/**\n * Returns a runtime representation of the given reified type [T] as an instance of [KType].\n */\n@Suppress(\"unused\") // KT-12448\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun <reified T> typeOf(): KType =\n    throw UnsupportedOperationException(\"This function is implemented as an intrinsic on all supported platforms.\")\n","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"StringsKt\")\n@file:Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\")\n\npackage kotlin.text\n\nimport kotlin.contracts.*\n\n/**\n * A mutable sequence of characters.\n *\n * String builder can be used to efficiently perform multiple string manipulation operations.\n */\nexpect class StringBuilder : Appendable, CharSequence {\n    /** Constructs an empty string builder. */\n    constructor()\n\n    /** Constructs an empty string builder with the specified initial [capacity]. */\n    constructor(capacity: Int)\n\n    /** Constructs a string builder that contains the same characters as the specified [content] char sequence. */\n    constructor(content: CharSequence)\n\n    /** Constructs a string builder that contains the same characters as the specified [content] string. */\n    @SinceKotlin(\"1.3\")\n//    @ExperimentalStdlibApi\n    constructor(content: String)\n\n    override val length: Int\n\n    override operator fun get(index: Int): Char\n\n    override fun subSequence(startIndex: Int, endIndex: Int): CharSequence\n\n    override fun append(value: Char): StringBuilder\n    override fun append(value: CharSequence?): StringBuilder\n    override fun append(value: CharSequence?, startIndex: Int, endIndex: Int): StringBuilder\n\n    /**\n     * Reverses the contents of this string builder and returns this instance.\n     *\n     * Surrogate pairs included in this string builder are treated as single characters.\n     * Therefore, the order of the high-low surrogates is never reversed.\n     *\n     * Note that the reverse operation may produce new surrogate pairs that were unpaired low-surrogates and high-surrogates before the operation.\n     * For example, reversing `\"\\uDC00\\uD800\"` produces `\"\\uD800\\uDC00\"` which is a valid surrogate pair.\n     */\n    fun reverse(): StringBuilder\n\n    /**\n     * Appends the string representation of the specified object [value] to this string builder and returns this instance.\n     *\n     * The overall effect is exactly as if the [value] were converted to a string by the `value.toString()` method,\n     * and then that string was appended to this string builder.\n     */\n    fun append(value: Any?): StringBuilder\n\n    /**\n     * Appends the string representation of the specified boolean [value] to this string builder and returns this instance.\n     *\n     * The overall effect is exactly as if the [value] were converted to a string by the `value.toString()` method,\n     * and then that string was appended to this string builder.\n     */\n    @SinceKotlin(\"1.3\")\n    fun append(value: Boolean): StringBuilder\n\n    /**\n     * Appends characters in the specified character array [value] to this string builder and returns this instance.\n     *\n     * Characters are appended in order, starting at the index 0.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    fun append(value: CharArray): StringBuilder\n\n    /**\n     * Appends the specified string [value] to this string builder and returns this instance.\n     *\n     * If [value] is `null`, then the four characters `\"null\"` are appended.\n     */\n    @SinceKotlin(\"1.3\")\n    fun append(value: String?): StringBuilder\n\n    /**\n     * Returns the current capacity of this string builder.\n     *\n     * The capacity is the maximum length this string builder can have before an allocation occurs.\n     */\n    @SinceKotlin(\"1.3\")\n//    @ExperimentalStdlibApi\n    @Deprecated(\"Obtaining StringBuilder capacity is not supported in JS and common code.\", level = DeprecationLevel.ERROR)\n    fun capacity(): Int\n\n    /**\n     * Ensures that the capacity of this string builder is at least equal to the specified [minimumCapacity].\n     *\n     * If the current capacity is less than the [minimumCapacity], a new backing storage is allocated with greater capacity.\n     * Otherwise, this method takes no action and simply returns.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    fun ensureCapacity(minimumCapacity: Int)\n\n    /**\n     * Returns the index within this string builder of the first occurrence of the specified [string].\n     *\n     * Returns `-1` if the specified [string] does not occur in this string builder.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    fun indexOf(string: String): Int\n\n    /**\n     * Returns the index within this string builder of the first occurrence of the specified [string],\n     * starting at the specified [startIndex].\n     *\n     * Returns `-1` if the specified [string] does not occur in this string builder starting at the specified [startIndex].\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    fun indexOf(string: String, startIndex: Int): Int\n\n    /**\n     * Returns the index within this string builder of the last occurrence of the specified [string].\n     * The last occurrence of empty string `\"\"` is considered to be at the index equal to `this.length`.\n     *\n     * Returns `-1` if the specified [string] does not occur in this string builder.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    fun lastIndexOf(string: String): Int\n\n    /**\n     * Returns the index within this string builder of the last occurrence of the specified [string],\n     * starting from the specified [startIndex] toward the beginning.\n     *\n     * Returns `-1` if the specified [string] does not occur in this string builder starting at the specified [startIndex].\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    fun lastIndexOf(string: String, startIndex: Int): Int\n\n    /**\n     * Inserts the string representation of the specified boolean [value] into this string builder at the specified [index] and returns this instance.\n     *\n     * The overall effect is exactly as if the [value] were converted to a string by the `value.toString()` method,\n     * and then that string was inserted into this string builder at the specified [index].\n     *\n     * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    fun insert(index: Int, value: Boolean): StringBuilder\n\n    /**\n     * Inserts the specified character [value] into this string builder at the specified [index] and returns this instance.\n     *\n     * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    fun insert(index: Int, value: Char): StringBuilder\n\n    /**\n     * Inserts characters in the specified character array [value] into this string builder at the specified [index] and returns this instance.\n     *\n     * The inserted characters go in same order as in the [value] character array, starting at [index].\n     *\n     * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    fun insert(index: Int, value: CharArray): StringBuilder\n\n    /**\n     * Inserts characters in the specified character sequence [value] into this string builder at the specified [index] and returns this instance.\n     *\n     * The inserted characters go in the same order as in the [value] character sequence, starting at [index].\n     *\n     * @param index the position in this string builder to insert at.\n     * @param value the character sequence from which characters are inserted. If [value] is `null`, then the four characters `\"null\"` are inserted.\n     *\n     * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    fun insert(index: Int, value: CharSequence?): StringBuilder\n\n    /**\n     * Inserts the string representation of the specified object [value] into this string builder at the specified [index] and returns this instance.\n     *\n     * The overall effect is exactly as if the [value] were converted to a string by the `value.toString()` method,\n     * and then that string was inserted into this string builder at the specified [index].\n     *\n     * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    fun insert(index: Int, value: Any?): StringBuilder\n\n    /**\n     * Inserts the string [value] into this string builder at the specified [index] and returns this instance.\n     *\n     * If [value] is `null`, then the four characters `\"null\"` are inserted.\n     *\n     * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    fun insert(index: Int, value: String?): StringBuilder\n\n    /**\n     *  Sets the length of this string builder to the specified [newLength].\n     *\n     *  If the [newLength] is less than the current length, it is changed to the specified [newLength].\n     *  Otherwise, null characters '\\u0000' are appended to this string builder until its length is less than the [newLength].\n     *\n     *  Note that in Kotlin/JS [set] operator function has non-constant execution time complexity.\n     *  Therefore, increasing length of this string builder and then updating each character by index may slow down your program.\n     *\n     *  @throws IndexOutOfBoundsException or [IllegalArgumentException] if [newLength] is less than zero.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    fun setLength(newLength: Int)\n\n    /**\n     * Returns a new [String] that contains characters in this string builder at [startIndex] (inclusive) and up to the [length] (exclusive).\n     *\n     * @throws IndexOutOfBoundsException if [startIndex] is less than zero or greater than the length of this string builder.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    fun substring(startIndex: Int): String\n\n    /**\n     * Returns a new [String] that contains characters in this string builder at [startIndex] (inclusive) and up to the [endIndex] (exclusive).\n     *\n     * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this string builder indices or when `startIndex > endIndex`.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    fun substring(startIndex: Int, endIndex: Int): String\n\n    /**\n     * Attempts to reduce storage used for this string builder.\n     *\n     * If the backing storage of this string builder is larger than necessary to hold its current contents,\n     * then it may be resized to become more space efficient.\n     * Calling this method may, but is not required to, affect the value of the [capacity] property.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    fun trimToSize()\n}\n\n\n/**\n * Clears the content of this string builder making it empty and returns this instance.\n *\n * @sample samples.text.Strings.clearStringBuilder\n */\n@SinceKotlin(\"1.3\")\npublic expect fun StringBuilder.clear(): StringBuilder\n\n/**\n * Sets the character at the specified [index] to the specified [value].\n *\n * @throws IndexOutOfBoundsException if [index] is out of bounds of this string builder.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic expect operator fun StringBuilder.set(index: Int, value: Char)\n\n/**\n * Replaces characters in the specified range of this string builder with characters in the specified string [value] and returns this instance.\n *\n * @param startIndex the beginning (inclusive) of the range to replace.\n * @param endIndex the end (exclusive) of the range to replace.\n * @param value the string to replace with.\n *\n * @throws IndexOutOfBoundsException or [IllegalArgumentException] if [startIndex] is less than zero, greater than the length of this string builder, or `startIndex > endIndex`.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic expect fun StringBuilder.setRange(startIndex: Int, endIndex: Int, value: String): StringBuilder\n\n/**\n * Removes the character at the specified [index] from this string builder and returns this instance.\n *\n * If the `Char` at the specified [index] is part of a supplementary code point, this method does not remove the entire supplementary character.\n *\n * @param index the index of `Char` to remove.\n *\n * @throws IndexOutOfBoundsException if [index] is out of bounds of this string builder.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic expect fun StringBuilder.deleteAt(index: Int): StringBuilder\n\n/**\n * Removes characters in the specified range from this string builder and returns this instance.\n *\n * @param startIndex the beginning (inclusive) of the range to remove.\n * @param endIndex the end (exclusive) of the range to remove.\n *\n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] is out of range of this string builder indices or when `startIndex > endIndex`.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic expect fun StringBuilder.deleteRange(startIndex: Int, endIndex: Int): StringBuilder\n\n/**\n * Copies characters from this string builder into the [destination] character array.\n *\n * @param destination the array to copy to.\n * @param destinationOffset the position in the array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the range to copy, 0 by default.\n * @param endIndex the end (exclusive) of the range to copy, length of this string builder by default.\n *\n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this string builder indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n *  or when that index is out of the [destination] array indices range.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic expect fun StringBuilder.toCharArray(destination: CharArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = this.length)\n\n/**\n * Appends characters in a subarray of the specified character array [value] to this string builder and returns this instance.\n *\n * Characters are appended in order, starting at specified [startIndex].\n *\n * @param value the array from which characters are appended.\n * @param startIndex the beginning (inclusive) of the subarray to append.\n * @param endIndex the end (exclusive) of the subarray to append.\n *\n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of the [value] array indices or when `startIndex > endIndex`.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic expect fun StringBuilder.appendRange(value: CharArray, startIndex: Int, endIndex: Int): StringBuilder\n\n/**\n * Appends a subsequence of the specified character sequence [value] to this string builder and returns this instance.\n *\n * @param value the character sequence from which a subsequence is appended.\n * @param startIndex the beginning (inclusive) of the subsequence to append.\n * @param endIndex the end (exclusive) of the subsequence to append.\n *\n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of the [value] character sequence indices or when `startIndex > endIndex`.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic expect fun StringBuilder.appendRange(value: CharSequence, startIndex: Int, endIndex: Int): StringBuilder\n\n/**\n * Inserts characters in a subarray of the specified character array [value] into this string builder at the specified [index] and returns this instance.\n *\n * The inserted characters go in same order as in the [value] array, starting at [index].\n *\n * @param index the position in this string builder to insert at.\n * @param value the array from which characters are inserted.\n * @param startIndex the beginning (inclusive) of the subarray to insert.\n * @param endIndex the end (exclusive) of the subarray to insert.\n *\n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of the [value] array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic expect fun StringBuilder.insertRange(index: Int, value: CharArray, startIndex: Int, endIndex: Int): StringBuilder\n\n/**\n * Inserts characters in a subsequence of the specified character sequence [value] into this string builder at the specified [index] and returns this instance.\n *\n * The inserted characters go in the same order as in the [value] character sequence, starting at [index].\n *\n * @param index the position in this string builder to insert at.\n * @param value the character sequence from which a subsequence is inserted.\n * @param startIndex the beginning (inclusive) of the subsequence to insert.\n * @param endIndex the end (exclusive) of the subsequence to insert.\n *\n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of the [value] character sequence indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic expect fun StringBuilder.insertRange(index: Int, value: CharSequence, startIndex: Int, endIndex: Int): StringBuilder\n\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\")\n@Deprecated(\"Use append(value: Any?) instead\", ReplaceWith(\"append(value = obj)\"), DeprecationLevel.WARNING)\n@kotlin.internal.InlineOnly\npublic inline fun StringBuilder.append(obj: Any?): StringBuilder = this.append(obj)\n\n/**\n * Builds new string by populating newly created [StringBuilder] using provided [builderAction]\n * and then converting it to [String].\n */\n@kotlin.internal.InlineOnly\npublic inline fun buildString(builderAction: StringBuilder.() -> Unit): String {\n    contract { callsInPlace(builderAction, InvocationKind.EXACTLY_ONCE) }\n    return StringBuilder().apply(builderAction).toString()\n}\n\n/**\n * Builds new string by populating newly created [StringBuilder] initialized with the given [capacity]\n * using provided [builderAction] and then converting it to [String].\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun buildString(capacity: Int, builderAction: StringBuilder.() -> Unit): String {\n    contract { callsInPlace(builderAction, InvocationKind.EXACTLY_ONCE) }\n    return StringBuilder(capacity).apply(builderAction).toString()\n}\n\n/**\n * Appends all arguments to the given StringBuilder.\n */\npublic fun StringBuilder.append(vararg value: String?): StringBuilder {\n    for (item in value)\n        append(item)\n    return this\n}\n\n/**\n * Appends all arguments to the given StringBuilder.\n */\npublic fun StringBuilder.append(vararg value: Any?): StringBuilder {\n    for (item in value)\n        append(item)\n    return this\n}\n\n/** Appends a line feed character (`\\n`) to this StringBuilder. */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun StringBuilder.appendLine(): StringBuilder = append('\\n')\n\n/** Appends [value] to this [StringBuilder], followed by a line feed character (`\\n`). */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun StringBuilder.appendLine(value: CharSequence?): StringBuilder = append(value).appendLine()\n\n/** Appends [value] to this [StringBuilder], followed by a line feed character (`\\n`). */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun StringBuilder.appendLine(value: String?): StringBuilder = append(value).appendLine()\n\n/** Appends [value] to this [StringBuilder], followed by a line feed character (`\\n`). */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun StringBuilder.appendLine(value: Any?): StringBuilder = append(value).appendLine()\n\n/** Appends [value] to this [StringBuilder], followed by a line feed character (`\\n`). */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun StringBuilder.appendLine(value: CharArray): StringBuilder = append(value).appendLine()\n\n/** Appends [value] to this [StringBuilder], followed by a line feed character (`\\n`). */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun StringBuilder.appendLine(value: Char): StringBuilder = append(value).appendLine()\n\n/** Appends [value] to this [StringBuilder], followed by a line feed character (`\\n`). */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun StringBuilder.appendLine(value: Boolean): StringBuilder = append(value).appendLine()\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.text\n\n/**\n * Defines names for Unicode symbols used in proper Typography.\n */\npublic object Typography {\n    /** The character &#x22; – quotation mark */\n    public const val quote: Char = '\\u0022'\n    /** The character &#x24; – dollar sign */\n    public const val dollar: Char = '\\u0024'\n    /** The character &#x26; – ampersand */\n    public const val amp: Char = '\\u0026'\n    /** The character &#x3C; – less-than sign */\n    public const val less: Char = '\\u003C'\n    /** The character &#x3E; – greater-than sign */\n    public const val greater: Char = '\\u003E'\n    /** The non-breaking space character */\n    public const val nbsp: Char = '\\u00A0'\n    /** The character &#xD7; */\n    public const val times: Char = '\\u00D7'\n    /** The character &#xA2; */\n    public const val cent: Char = '\\u00A2'\n    /** The character &#xA3; */\n    public const val pound: Char = '\\u00A3'\n    /** The character &#xA7; */\n    public const val section: Char = '\\u00A7'\n    /** The character &#xA9; */\n    public const val copyright: Char = '\\u00A9'\n    /** The character &#xAB; */\n    public const val leftGuillemete: Char = '\\u00AB'\n    /** The character &#xBB; */\n    public const val rightGuillemete: Char = '\\u00BB'\n    /** The character &#xAE; */\n    public const val registered: Char = '\\u00AE'\n    /** The character &#xB0; */\n    public const val degree: Char = '\\u00B0'\n    /** The character &#xB1; */\n    public const val plusMinus: Char = '\\u00B1'\n    /** The character &#xB6; */\n    public const val paragraph: Char = '\\u00B6'\n    /** The character &#xB7; */\n    public const val middleDot: Char = '\\u00B7'\n    /** The character &#xBD; */\n    public const val half: Char = '\\u00BD'\n    /** The character &#x2013; */\n    public const val ndash: Char = '\\u2013'\n    /** The character &#x2014; */\n    public const val mdash: Char = '\\u2014'\n    /** The character &#x2018; */\n    public const val leftSingleQuote: Char = '\\u2018'\n    /** The character &#x2019; */\n    public const val rightSingleQuote: Char = '\\u2019'\n    /** The character &#x201A; */\n    public const val lowSingleQuote: Char = '\\u201A'\n    /** The character &#x201C; */\n    public const val leftDoubleQuote: Char = '\\u201C'\n    /** The character &#x201D; */\n    public const val rightDoubleQuote: Char = '\\u201D'\n    /** The character &#x201E; */\n    public const val lowDoubleQuote: Char = '\\u201E'\n    /** The character &#x2020; */\n    public const val dagger: Char = '\\u2020'\n    /** The character &#x2021; */\n    public const val doubleDagger: Char = '\\u2021'\n    /** The character &#x2022; */\n    public const val bullet: Char = '\\u2022'\n    /** The character &#x2026; */\n    public const val ellipsis: Char = '\\u2026'\n    /** The character &#x2032; */\n    public const val prime: Char = '\\u2032'\n    /** The character &#x2033; */\n    public const val doublePrime: Char = '\\u2033'\n    /** The character &#x20AC; */\n    public const val euro: Char = '\\u20AC'\n    /** The character &#x2122; */\n    public const val tm: Char = '\\u2122'\n    /** The character &#x2248; */\n    public const val almostEqual: Char = '\\u2248'\n    /** The character &#x2260; */\n    public const val notEqual: Char = '\\u2260'\n    /** The character &#x2264; */\n    public const val lessOrEqual: Char = '\\u2264'\n    /** The character &#x2265; */\n    public const val greaterOrEqual: Char = '\\u2265'\n}","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.text\n\n/**\n * Represents a collection of captured groups in a single match of a regular expression.\n *\n * This collection has size of `groupCount + 1` where `groupCount` is the count of groups in the regular expression.\n * Groups are indexed from 1 to `groupCount` and group with the index 0 corresponds to the entire match.\n *\n * An element of the collection at the particular index can be `null`,\n * if the corresponding group in the regular expression is optional and\n * there was no match captured by that group.\n */\npublic interface MatchGroupCollection : Collection<MatchGroup?> {\n\n    /** Returns a group with the specified [index].\n     *\n     * @return An instance of [MatchGroup] if the group with the specified [index] was matched or `null` otherwise.\n     *\n     * Groups are indexed from 1 to the count of groups in the regular expression. A group with the index 0\n     * corresponds to the entire match.\n     */\n    public operator fun get(index: Int): MatchGroup?\n}\n\n/**\n * Extends [MatchGroupCollection] by introducing a way to get matched groups by name, when regex supports it.\n */\n@SinceKotlin(\"1.1\")\npublic interface MatchNamedGroupCollection : MatchGroupCollection {\n    /**\n     * Returns a named group with the specified [name].\n     * @return An instance of [MatchGroup] if the group with the specified [name] was matched or `null` otherwise.\n     * @throws IllegalArgumentException if there is no group with the specified [name] defined in the regex pattern.\n     * @throws UnsupportedOperationException if getting named groups isn't supported on the current platform.\n     */\n    public operator fun get(name: String): MatchGroup?\n}\n\n/**\n * Represents the results from a single regular expression match.\n */\npublic interface MatchResult {\n    /** The range of indices in the original string where match was captured. */\n    public val range: IntRange\n    /** The substring from the input string captured by this match. */\n    public val value: String\n    /**\n     * A collection of groups matched by the regular expression.\n     *\n     * This collection has size of `groupCount + 1` where `groupCount` is the count of groups in the regular expression.\n     * Groups are indexed from 1 to `groupCount` and group with the index 0 corresponds to the entire match.\n     */\n    public val groups: MatchGroupCollection\n    /**\n     * A list of matched indexed group values.\n     *\n     * This list has size of `groupCount + 1` where `groupCount` is the count of groups in the regular expression.\n     * Groups are indexed from 1 to `groupCount` and group with the index 0 corresponds to the entire match.\n     *\n     * If the group in the regular expression is optional and there were no match captured by that group,\n     * corresponding item in [groupValues] is an empty string.\n     *\n     * @sample samples.text.Regexps.matchDestructuringToGroupValues\n     */\n    public val groupValues: List<String>\n\n    /**\n     * An instance of [MatchResult.Destructured] wrapper providing components for destructuring assignment of group values.\n     *\n     * component1 corresponds to the value of the first group, component2 — of the second, and so on.\n     *\n     * @sample samples.text.Regexps.matchDestructuringToGroupValues\n     */\n    public val destructured: Destructured get() = Destructured(this)\n\n    /** Returns a new [MatchResult] with the results for the next match, starting at the position\n     *  at which the last match ended (at the character after the last matched character).\n     */\n    public fun next(): MatchResult?\n\n    /**\n     * Provides components for destructuring assignment of group values.\n     *\n     * [component1] corresponds to the value of the first group, [component2] — of the second, and so on.\n     *\n     * If the group in the regular expression is optional and there were no match captured by that group,\n     * corresponding component value is an empty string.\n     *\n     * @sample samples.text.Regexps.matchDestructuringToGroupValues\n     */\n    public class Destructured internal constructor(public val match: MatchResult) {\n        @kotlin.internal.InlineOnly\n        public operator inline fun component1():  String = match.groupValues[1]\n        @kotlin.internal.InlineOnly\n        public operator inline fun component2():  String = match.groupValues[2]\n        @kotlin.internal.InlineOnly\n        public operator inline fun component3():  String = match.groupValues[3]\n        @kotlin.internal.InlineOnly\n        public operator inline fun component4():  String = match.groupValues[4]\n        @kotlin.internal.InlineOnly\n        public operator inline fun component5():  String = match.groupValues[5]\n        @kotlin.internal.InlineOnly\n        public operator inline fun component6():  String = match.groupValues[6]\n        @kotlin.internal.InlineOnly\n        public operator inline fun component7():  String = match.groupValues[7]\n        @kotlin.internal.InlineOnly\n        public operator inline fun component8():  String = match.groupValues[8]\n        @kotlin.internal.InlineOnly\n        public operator inline fun component9():  String = match.groupValues[9]\n        @kotlin.internal.InlineOnly\n        public operator inline fun component10(): String = match.groupValues[10]\n\n        /**\n         *  Returns destructured group values as a list of strings.\n         *  First value in the returned list corresponds to the value of the first group, and so on.\n         *\n         * @sample samples.text.Regexps.matchDestructuringToGroupValues\n         */\n        public fun toList(): List<String> = match.groupValues.subList(1, match.groupValues.size)\n    }\n}","/*\n * Copyright 2010-2021 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass()\n@file:kotlin.jvm.JvmName(\"DurationUnitKt\")\n\npackage kotlin.time\n\n\n/**\n * The list of possible time measurement units, in which a duration can be expressed.\n *\n * The smallest time unit is [NANOSECONDS] and the largest is [DAYS], which corresponds to exactly 24 [HOURS].\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\npublic expect enum class DurationUnit {\n    /**\n     * Time unit representing one nanosecond, which is 1/1000 of a microsecond.\n     */\n    NANOSECONDS,\n    /**\n     * Time unit representing one microsecond, which is 1/1000 of a millisecond.\n     */\n    MICROSECONDS,\n    /**\n     * Time unit representing one millisecond, which is 1/1000 of a second.\n     */\n    MILLISECONDS,\n    /**\n     * Time unit representing one second.\n     */\n    SECONDS,\n    /**\n     * Time unit representing one minute.\n     */\n    MINUTES,\n    /**\n     * Time unit representing one hour.\n     */\n    HOURS,\n    /**\n     * Time unit representing one day, which is always equal to 24 hours.\n     */\n    DAYS;\n}\n\n/** Converts the given time duration [value] expressed in the specified [sourceUnit] into the specified [targetUnit]. */\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\ninternal expect fun convertDurationUnit(value: Double, sourceUnit: DurationUnit, targetUnit: DurationUnit): Double\n\n// overflown result is unspecified\n@SinceKotlin(\"1.5\")\n@ExperimentalTime\ninternal expect fun convertDurationUnitOverflow(value: Long, sourceUnit: DurationUnit, targetUnit: DurationUnit): Long\n\n// overflown result is coerced in the Long range boundaries\n@SinceKotlin(\"1.5\")\n@ExperimentalTime\ninternal expect fun convertDurationUnit(value: Long, sourceUnit: DurationUnit, targetUnit: DurationUnit): Long\n\n\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\n@Suppress(\"REDUNDANT_ELSE_IN_WHEN\")\ninternal fun DurationUnit.shortName(): String = when (this) {\n    DurationUnit.NANOSECONDS -> \"ns\"\n    DurationUnit.MICROSECONDS -> \"us\"\n    DurationUnit.MILLISECONDS -> \"ms\"\n    DurationUnit.SECONDS -> \"s\"\n    DurationUnit.MINUTES -> \"m\"\n    DurationUnit.HOURS -> \"h\"\n    DurationUnit.DAYS -> \"d\"\n    else -> error(\"Unknown unit: $this\")\n}\n","/*\n * Copyright 2010-2019 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.time\n\nimport kotlin.annotation.AnnotationTarget.*\n\n/**\n * This annotation marks the experimental preview of the standard library API for measuring time and working with durations.\n *\n * > Note that this API is in a preview state and has a very high chance of being changed in the future.\n * Do not use it if you develop a library since your library will become binary incompatible\n * with the future versions of the standard library.\n *\n * Any usage of a declaration annotated with `@ExperimentalTime` must be accepted either by\n * annotating that usage with the [OptIn] annotation, e.g. `@OptIn(ExperimentalTime::class)`,\n * or by using the compiler argument `-Xopt-in=kotlin.time.ExperimentalTime`.\n */\n@Suppress(\"DEPRECATION\")\n@Experimental(level = Experimental.Level.ERROR)\n@RequiresOptIn(level = RequiresOptIn.Level.ERROR)\n@MustBeDocumented\n@Retention(AnnotationRetention.BINARY)\n@Target(\n    CLASS,\n    ANNOTATION_CLASS,\n    PROPERTY,\n    FIELD,\n    LOCAL_VARIABLE,\n    VALUE_PARAMETER,\n    CONSTRUCTOR,\n    FUNCTION,\n    PROPERTY_GETTER,\n    PROPERTY_SETTER,\n    TYPEALIAS\n)\n@SinceKotlin(\"1.3\")\npublic annotation class ExperimentalTime\n","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.time\n\n/**\n * A source of time for measuring time intervals.\n *\n * The only operation provided by the time source is [markNow]. It returns a [TimeMark], which can be used to query the elapsed time later.\n *\n * @see [measureTime]\n * @see [measureTimedValue]\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\npublic interface TimeSource {\n    /**\n     * Marks a point in time on this time source.\n     *\n     * The returned [TimeMark] instance encapsulates the captured time point and allows querying\n     * the duration of time interval [elapsed][TimeMark.elapsedNow] from that point.\n     */\n    public fun markNow(): TimeMark\n\n    /**\n     * The most precise time source available in the platform.\n     *\n     * This time source returns its readings from a source of monotonic time when it is available in a target platform,\n     * and resorts to a non-monotonic time source otherwise.\n     */\n    public object Monotonic : TimeSource by MonotonicTimeSource {\n        override fun toString(): String = MonotonicTimeSource.toString()\n    }\n\n\n    public companion object {\n\n    }\n}\n\n/**\n * Represents a time point notched on a particular [TimeSource]. Remains bound to the time source it was taken from\n * and allows querying for the duration of time elapsed from that point (see the function [elapsedNow]).\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\npublic abstract class TimeMark {\n    /**\n     * Returns the amount of time passed from this mark measured with the time source from which this mark was taken.\n     *\n     * Note that the value returned by this function can change on subsequent invocations.\n     */\n    public abstract fun elapsedNow(): Duration\n\n    /**\n     * Returns a time mark on the same time source that is ahead of this time mark by the specified [duration].\n     *\n     * The returned time mark is more _late_ when the [duration] is positive, and more _early_ when the [duration] is negative.\n     */\n    public open operator fun plus(duration: Duration): TimeMark = AdjustedTimeMark(this, duration)\n\n    /**\n     * Returns a time mark on the same time source that is behind this time mark by the specified [duration].\n     *\n     * The returned time mark is more _early_ when the [duration] is positive, and more _late_ when the [duration] is negative.\n     */\n    public open operator fun minus(duration: Duration): TimeMark = plus(-duration)\n\n\n    /**\n     * Returns true if this time mark has passed according to the time source from which this mark was taken.\n     *\n     * Note that the value returned by this function can change on subsequent invocations.\n     * If the time source is monotonic, it can change only from `false` to `true`, namely, when the time mark becomes behind the current point of the time source.\n     */\n    public fun hasPassedNow(): Boolean = !elapsedNow().isNegative()\n\n    /**\n     * Returns false if this time mark has not passed according to the time source from which this mark was taken.\n     *\n     * Note that the value returned by this function can change on subsequent invocations.\n     * If the time source is monotonic, it can change only from `true` to `false`, namely, when the time mark becomes behind the current point of the time source.\n     */\n    public fun hasNotPassedNow(): Boolean = elapsedNow().isNegative()\n}\n\n\n@ExperimentalTime\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Deprecated(\n    \"Subtracting one TimeMark from another is not a well defined operation because these time marks could have been obtained from the different time sources.\",\n    level = DeprecationLevel.ERROR\n)\n@Suppress(\"UNUSED_PARAMETER\")\npublic inline operator fun TimeMark.minus(other: TimeMark): Duration = throw Error(\"Operation is disallowed.\")\n\n@ExperimentalTime\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Deprecated(\n    \"Comparing one TimeMark to another is not a well defined operation because these time marks could have been obtained from the different time sources.\",\n    level = DeprecationLevel.ERROR\n)\n@Suppress(\"UNUSED_PARAMETER\")\npublic inline operator fun TimeMark.compareTo(other: TimeMark): Int = throw Error(\"Operation is disallowed.\")\n\n\n@ExperimentalTime\nprivate class AdjustedTimeMark(val mark: TimeMark, val adjustment: Duration) : TimeMark() {\n    override fun elapsedNow(): Duration = mark.elapsedNow() - adjustment\n\n    override fun plus(duration: Duration): TimeMark = AdjustedTimeMark(mark, adjustment + duration)\n}\n","/*\n * Copyright 2010-2021 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.time\n\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\ninternal expect object MonotonicTimeSource : TimeSource\n\n/**\n * An abstract class used to implement time sources that return their readings as [Long] values in the specified [unit].\n *\n * @property unit The unit in which this time source's readings are expressed.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\npublic abstract class AbstractLongTimeSource(protected val unit: DurationUnit) : TimeSource {\n    /**\n     * This protected method should be overridden to return the current reading of the time source expressed as a [Long] number\n     * in the unit specified by the [unit] property.\n     */\n    protected abstract fun read(): Long\n\n    private class LongTimeMark(private val startedAt: Long, private val timeSource: AbstractLongTimeSource, private val offset: Duration) : TimeMark() {\n        override fun elapsedNow(): Duration = (timeSource.read() - startedAt).toDuration(timeSource.unit) - offset\n        override fun plus(duration: Duration): TimeMark = LongTimeMark(startedAt, timeSource, offset + duration)\n    }\n\n    override fun markNow(): TimeMark = LongTimeMark(read(), this, Duration.ZERO)\n}\n\n/**\n * An abstract class used to implement time sources that return their readings as [Double] values in the specified [unit].\n *\n * @property unit The unit in which this time source's readings are expressed.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\npublic abstract class AbstractDoubleTimeSource(protected val unit: DurationUnit) : TimeSource {\n    /**\n     * This protected method should be overridden to return the current reading of the time source expressed as a [Double] number\n     * in the unit specified by the [unit] property.\n     */\n    protected abstract fun read(): Double\n\n    private class DoubleTimeMark(private val startedAt: Double, private val timeSource: AbstractDoubleTimeSource, private val offset: Duration) : TimeMark() {\n        override fun elapsedNow(): Duration = (timeSource.read() - startedAt).toDuration(timeSource.unit) - offset\n        override fun plus(duration: Duration): TimeMark = DoubleTimeMark(startedAt, timeSource, offset + duration)\n    }\n\n    override fun markNow(): TimeMark = DoubleTimeMark(read(), this, Duration.ZERO)\n}\n\n/**\n * A time source that has programmatically updatable readings. It is useful as a predictable source of time in tests.\n *\n * The current reading value can be advanced by the specified duration amount with the operator [plusAssign]:\n *\n * ```\n * val timeSource = TestTimeSource()\n * timeSource += 10.seconds\n * ```\n *\n * Implementation note: the current reading value is stored as a [Long] number of nanoseconds,\n * thus it's capable to represent a time range of approximately ±292 years.\n * Should the reading value overflow as the result of [plusAssign] operation, an [IllegalStateException] is thrown.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\npublic class TestTimeSource : AbstractLongTimeSource(unit = DurationUnit.NANOSECONDS) {\n    private var reading: Long = 0L\n\n    override fun read(): Long = reading\n\n    /**\n     * Advances the current reading value of this time source by the specified [duration].\n     *\n     * [duration] value is rounded down towards zero when converting it to a [Long] number of nanoseconds.\n     * For example, if the duration being added is `0.6.nanoseconds`, the reading doesn't advance because\n     * the duration value is rounded to zero nanoseconds.\n     *\n     * @throws IllegalStateException when the reading value overflows as the result of this operation.\n     */\n    public operator fun plusAssign(duration: Duration) {\n        val longDelta = duration.toLong(unit)\n        reading = if (longDelta != Long.MIN_VALUE && longDelta != Long.MAX_VALUE) {\n            // when delta fits in long, add it as long\n            val newReading = reading + longDelta\n            if (reading xor longDelta >= 0 && reading xor newReading < 0) overflow(duration)\n            newReading\n        } else {\n            val delta = duration.toDouble(unit)\n            // when delta is greater than long, add it as double\n            val newReading = reading + delta\n            if (newReading > Long.MAX_VALUE || newReading < Long.MIN_VALUE) overflow(duration)\n            newReading.toLong()\n        }\n    }\n\n    private fun overflow(duration: Duration) {\n        throw IllegalStateException(\"TestTimeSource will overflow if its reading ${reading}ns is advanced by $duration.\")\n    }\n}\n","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.time\n\nimport kotlin.contracts.*\n\n/**\n * Executes the given function [block] and returns the duration of elapsed time interval.\n *\n * The elapsed time is measured with [TimeSource.Monotonic].\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\npublic inline fun measureTime(block: () -> Unit): Duration {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return TimeSource.Monotonic.measureTime(block)\n}\n\n\n/**\n * Executes the given function [block] and returns the duration of elapsed time interval.\n *\n * The elapsed time is measured with the specified `this` [TimeSource] instance.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\npublic inline fun TimeSource.measureTime(block: () -> Unit): Duration {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n\n    val mark = markNow()\n    block()\n    return mark.elapsedNow()\n}\n\n\n/**\n * Data class representing a result of executing an action, along with the duration of elapsed time interval.\n *\n * @property value the result of the action.\n * @property duration the time elapsed to execute the action.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\npublic data class TimedValue<T>(val value: T, val duration: Duration)\n\n/**\n * Executes the given function [block] and returns an instance of [TimedValue] class, containing both\n * the result of the function execution and the duration of elapsed time interval.\n *\n * The elapsed time is measured with [TimeSource.Monotonic].\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\npublic inline fun <T> measureTimedValue(block: () -> T): TimedValue<T> {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n\n    return TimeSource.Monotonic.measureTimedValue(block)\n}\n\n/**\n * Executes the given [block] and returns an instance of [TimedValue] class, containing both\n * the result of function execution and the duration of elapsed time interval.\n *\n * The elapsed time is measured with the specified `this` [TimeSource] instance.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\npublic inline fun <T> TimeSource.measureTimedValue(block: () -> T): TimedValue<T> {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n\n    val mark = markNow()\n    val result = block()\n    return TimedValue(result, mark.elapsedNow())\n}\n","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin\n\nimport kotlin.coroutines.*\nimport kotlin.coroutines.intrinsics.*\nimport kotlin.native.concurrent.SharedImmutable\n\n/**\n * Defines deep recursive function that keeps its stack on the heap,\n * which allows very deep recursive computations that do not use the actual call stack.\n * To initiate a call to this deep recursive function use its [invoke] function.\n * As a rule of thumb, it should be used if recursion goes deeper than a thousand calls.\n *\n * The [DeepRecursiveFunction] takes one parameter of type [T] and returns a result of type [R].\n * The [block] of code defines the body of a recursive function. In this block\n * [callRecursive][DeepRecursiveScope.callRecursive] function can be used to make a recursive call\n * to the declared function. Other instances of [DeepRecursiveFunction] can be called\n * in this scope with `callRecursive` extension, too.\n *\n * For example, take a look at the following recursive tree class and a deeply\n * recursive instance of this tree with 100K nodes:\n *\n * ```\n * class Tree(val left: Tree? = null, val right: Tree? = null)\n * val deepTree = generateSequence(Tree()) { Tree(it) }.take(100_000).last()\n * ```\n *\n * A regular recursive function can be defined to compute a depth of a tree:\n *\n * ```\n * fun depth(t: Tree?): Int =\n *     if (t == null) 0 else max(depth(t.left), depth(t.right)) + 1\n * println(depth(deepTree)) // StackOverflowError\n * ```\n *\n * If this `depth` function is called for a `deepTree` it produces [StackOverflowError] because of deep recursion.\n * However, the `depth` function can be rewritten using `DeepRecursiveFunction` in the following way, and then\n * it successfully computes [`depth(deepTree)`][DeepRecursiveFunction.invoke] expression:\n *\n * ```\n * val depth = DeepRecursiveFunction<Tree?, Int> { t ->\n *     if (t == null) 0 else max(callRecursive(t.left), callRecursive(t.right)) + 1\n * }\n * println(depth(deepTree)) // Ok\n * ```\n *\n * Deep recursive functions can also mutually call each other using a heap for the stack via\n * [callRecursive][DeepRecursiveScope.callRecursive] extension. For example, the\n * following pair of mutually recursive functions computes the number of tree nodes at even depth in the tree.\n *\n * ```\n * val mutualRecursion = object {\n *     val even: DeepRecursiveFunction<Tree?, Int> = DeepRecursiveFunction { t ->\n *         if (t == null) 0 else odd.callRecursive(t.left) + odd.callRecursive(t.right) + 1\n *     }\n *     val odd: DeepRecursiveFunction<Tree?, Int> = DeepRecursiveFunction { t ->\n *         if (t == null) 0 else even.callRecursive(t.left) + even.callRecursive(t.right)\n *     }\n * }\n * ```\n *\n * @param [T] the function parameter type.\n * @param [R] the function result type.\n * @param block the function body.\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalStdlibApi\npublic class DeepRecursiveFunction<T, R>(\n    internal val block: suspend DeepRecursiveScope<T, R>.(T) -> R\n)\n\n/**\n * Initiates a call to this deep recursive function, forming a root of the call tree.\n *\n * This operator should not be used from inside of [DeepRecursiveScope] as it uses the call stack slot for\n * initial recursive invocation. From inside of [DeepRecursiveScope] use\n * [callRecursive][DeepRecursiveScope.callRecursive].\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalStdlibApi\npublic operator fun <T, R> DeepRecursiveFunction<T, R>.invoke(value: T): R =\n    DeepRecursiveScopeImpl<T, R>(block, value).runCallLoop()\n\n/**\n * A scope class for [DeepRecursiveFunction] function declaration that defines [callRecursive] methods to\n * recursively call this function or another [DeepRecursiveFunction] putting the call activation frame on the heap.\n *\n * @param [T] function parameter type.\n * @param [R] function result type.\n */\n@RestrictsSuspension\n@SinceKotlin(\"1.4\")\n@ExperimentalStdlibApi\npublic sealed class DeepRecursiveScope<T, R> {\n    /**\n     * Makes recursive call to this [DeepRecursiveFunction] function putting the call activation frame on the heap,\n     * as opposed to the actual call stack that is used by a regular recursive call.\n     */\n    public abstract suspend fun callRecursive(value: T): R\n\n    /**\n     * Makes call to the specified [DeepRecursiveFunction] function putting the call activation frame on the heap,\n     * as opposed to the actual call stack that is used by a regular call.\n     */\n    public abstract suspend fun <U, S> DeepRecursiveFunction<U, S>.callRecursive(value: U): S\n\n    @Deprecated(\n        level = DeprecationLevel.ERROR,\n        message =\n        \"'invoke' should not be called from DeepRecursiveScope. \" +\n                \"Use 'callRecursive' to do recursion in the heap instead of the call stack.\",\n        replaceWith = ReplaceWith(\"this.callRecursive(value)\")\n    )\n    @Suppress(\"UNUSED_PARAMETER\")\n    public operator fun DeepRecursiveFunction<*, *>.invoke(value: Any?): Nothing =\n        throw UnsupportedOperationException(\"Should not be called from DeepRecursiveScope\")\n}\n\n// ================== Implementation ==================\n\n@ExperimentalStdlibApi\nprivate typealias DeepRecursiveFunctionBlock = suspend DeepRecursiveScope<*, *>.(Any?) -> Any?\n\n@SharedImmutable\nprivate val UNDEFINED_RESULT = Result.success(COROUTINE_SUSPENDED)\n\n@Suppress(\"UNCHECKED_CAST\")\n@ExperimentalStdlibApi\nprivate class DeepRecursiveScopeImpl<T, R>(\n    block: suspend DeepRecursiveScope<T, R>.(T) -> R,\n    value: T\n) : DeepRecursiveScope<T, R>(), Continuation<R> {\n    // Active function block\n    private var function: DeepRecursiveFunctionBlock = block as DeepRecursiveFunctionBlock\n\n    // Value to call function with\n    private var value: Any? = value\n\n    // Continuation of the current call\n    private var cont: Continuation<Any?>? = this as Continuation<Any?>\n\n    // Completion result (completion of the whole call stack)\n    private var result: Result<Any?> = UNDEFINED_RESULT\n\n    override val context: CoroutineContext\n        get() = EmptyCoroutineContext\n\n    override fun resumeWith(result: Result<R>) {\n        this.cont = null\n        this.result = result\n    }\n\n    override suspend fun callRecursive(value: T): R = suspendCoroutineUninterceptedOrReturn { cont ->\n        // calling the same function that is currently active\n        this.cont = cont as Continuation<Any?>\n        this.value = value\n        COROUTINE_SUSPENDED\n    }\n\n    override suspend fun <U, S> DeepRecursiveFunction<U, S>.callRecursive(value: U): S = suspendCoroutineUninterceptedOrReturn { cont ->\n        // calling another recursive function\n        val function = block as DeepRecursiveFunctionBlock\n        with(this@DeepRecursiveScopeImpl) {\n            val currentFunction = this.function\n            if (function !== currentFunction) {\n                // calling a different function -- create a trampoline to restore function ref\n                this.function = function\n                this.cont = crossFunctionCompletion(currentFunction, cont as Continuation<Any?>)\n            } else {\n                // calling the same function -- direct\n                this.cont = cont as Continuation<Any?>\n            }\n            this.value = value\n        }\n        COROUTINE_SUSPENDED\n    }\n\n    private fun crossFunctionCompletion(\n        currentFunction: DeepRecursiveFunctionBlock,\n        cont: Continuation<Any?>\n    ): Continuation<Any?> = Continuation(EmptyCoroutineContext) {\n        this.function = currentFunction\n        // When going back from a trampoline we cannot just call cont.resume (stack usage!)\n        // We delegate the cont.resumeWith(it) call to runCallLoop\n        this.cont = cont\n        this.result = it\n    }\n\n    @Suppress(\"UNCHECKED_CAST\")\n    fun runCallLoop(): R {\n        while (true) {\n            // Note: cont is set to null in DeepRecursiveScopeImpl.resumeWith when the whole computation completes\n            val result = this.result\n            val cont = this.cont\n                ?: return (result as Result<R>).getOrThrow() // done -- final result\n            // The order of comparison is important here for that case of rogue class with broken equals\n            if (UNDEFINED_RESULT == result) {\n                // call \"function\" with \"value\" using \"cont\" as completion\n                val r = try {\n                    // This is block.startCoroutine(this, value, cont)\n                    function.startCoroutineUninterceptedOrReturn(this, value, cont)\n                } catch (e: Throwable) {\n                    cont.resumeWithException(e)\n                    continue\n                }\n                // If the function returns without suspension -- calls its continuation immediately\n                if (r !== COROUTINE_SUSPENDED)\n                    cont.resume(r as R)\n            } else {\n                // we returned from a crossFunctionCompletion trampoline -- call resume here\n                this.result = UNDEFINED_RESULT // reset result back\n                cont.resumeWith(result)\n            }\n        }\n    }\n}\n","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin\n\n/**\n * Represents a version of the Kotlin standard library.\n *\n * [major], [minor] and [patch] are integer components of a version,\n * they must be non-negative and not greater than 255 ([MAX_COMPONENT_VALUE]).\n *\n * @constructor Creates a version from all three components.\n */\n@SinceKotlin(\"1.1\")\npublic class KotlinVersion(val major: Int, val minor: Int, val patch: Int) : Comparable<KotlinVersion> {\n    /**\n     * Creates a version from [major] and [minor] components, leaving [patch] component zero.\n     */\n    public constructor(major: Int, minor: Int) : this(major, minor, 0)\n\n    private val version = versionOf(major, minor, patch)\n\n    private fun versionOf(major: Int, minor: Int, patch: Int): Int {\n        require(major in 0..MAX_COMPONENT_VALUE && minor in 0..MAX_COMPONENT_VALUE && patch in 0..MAX_COMPONENT_VALUE) {\n            \"Version components are out of range: $major.$minor.$patch\"\n        }\n        return major.shl(16) + minor.shl(8) + patch\n    }\n\n    /**\n     * Returns the string representation of this version\n     */\n    override fun toString(): String = \"$major.$minor.$patch\"\n\n    override fun equals(other: Any?): Boolean {\n        if (this === other) return true\n        val otherVersion = (other as? KotlinVersion) ?: return false\n        return this.version == otherVersion.version\n    }\n\n    override fun hashCode(): Int = version\n\n    override fun compareTo(other: KotlinVersion): Int = version - other.version\n\n    /**\n     * Returns `true` if this version is not less than the version specified\n     * with the provided [major] and [minor] components.\n     */\n    public fun isAtLeast(major: Int, minor: Int): Boolean = // this.version >= versionOf(major, minor, 0)\n        this.major > major || (this.major == major &&\n                this.minor >= minor)\n\n    /**\n     * Returns `true` if this version is not less than the version specified\n     * with the provided [major], [minor] and [patch] components.\n     */\n    public fun isAtLeast(major: Int, minor: Int, patch: Int): Boolean = // this.version >= versionOf(major, minor, patch)\n        this.major > major || (this.major == major &&\n                (this.minor > minor || this.minor == minor &&\n                        this.patch >= patch))\n\n    companion object {\n        /**\n         * Maximum value a version component can have, a constant value 255.\n         */\n        // NOTE: Must be placed before CURRENT because its initialization requires this field being initialized in JS\n        public const val MAX_COMPONENT_VALUE = 255\n\n        /**\n         * Returns the current version of the Kotlin standard library.\n         */\n        @kotlin.jvm.JvmField\n        public val CURRENT: KotlinVersion = KotlinVersionCurrentValue.get()\n    }\n}\n\n// this class is ignored during classpath normalization when considering whether to recompile dependencies in Kotlin build\nprivate object KotlinVersionCurrentValue {\n    @kotlin.jvm.JvmStatic\n    fun get(): KotlinVersion = KotlinVersion(1, 5, 10) // value is written here automatically during build\n}","/*\n * Copyright 2010-2021 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n// Auto-generated file. DO NOT EDIT!\n\n@file:kotlin.jvm.JvmName(\"NumbersKt\")\n@file:kotlin.jvm.JvmMultifileClass\npackage kotlin\n\nimport kotlin.math.sign\n\n/** Divides this value by the other value, flooring the result to an integer that is closer to negative infinity. */\n@SinceKotlin(\"1.5\")\n@kotlin.internal.InlineOnly\npublic inline fun Byte.floorDiv(other: Byte): Int = \n    this.toInt().floorDiv(other.toInt())\n\n/**\n * Calculates the remainder of flooring division of this value by the other value.\n * \n * The result is either zero or has the same sign as the _divisor_ and has the absolute value less than the absolute value of the divisor.\n */\n@SinceKotlin(\"1.5\")\n@kotlin.internal.InlineOnly\npublic inline fun Byte.mod(other: Byte): Byte = \n    this.toInt().mod(other.toInt()).toByte()\n\n/** Divides this value by the other value, flooring the result to an integer that is closer to negative infinity. */\n@SinceKotlin(\"1.5\")\n@kotlin.internal.InlineOnly\npublic inline fun Byte.floorDiv(other: Short): Int = \n    this.toInt().floorDiv(other.toInt())\n\n/**\n * Calculates the remainder of flooring division of this value by the other value.\n * \n * The result is either zero or has the same sign as the _divisor_ and has the absolute value less than the absolute value of the divisor.\n */\n@SinceKotlin(\"1.5\")\n@kotlin.internal.InlineOnly\npublic inline fun Byte.mod(other: Short): Short = \n    this.toInt().mod(other.toInt()).toShort()\n\n/** Divides this value by the other value, flooring the result to an integer that is closer to negative infinity. */\n@SinceKotlin(\"1.5\")\n@kotlin.internal.InlineOnly\npublic inline fun Byte.floorDiv(other: Int): Int = \n    this.toInt().floorDiv(other)\n\n/**\n * Calculates the remainder of flooring division of this value by the other value.\n * \n * The result is either zero or has the same sign as the _divisor_ and has the absolute value less than the absolute value of the divisor.\n */\n@SinceKotlin(\"1.5\")\n@kotlin.internal.InlineOnly\npublic inline fun Byte.mod(other: Int): Int = \n    this.toInt().mod(other)\n\n/** Divides this value by the other value, flooring the result to an integer that is closer to negative infinity. */\n@SinceKotlin(\"1.5\")\n@kotlin.internal.InlineOnly\npublic inline fun Byte.floorDiv(other: Long): Long = \n    this.toLong().floorDiv(other)\n\n/**\n * Calculates the remainder of flooring division of this value by the other value.\n * \n * The result is either zero or has the same sign as the _divisor_ and has the absolute value less than the absolute value of the divisor.\n */\n@SinceKotlin(\"1.5\")\n@kotlin.internal.InlineOnly\npublic inline fun Byte.mod(other: Long): Long = \n    this.toLong().mod(other)\n\n/** Divides this value by the other value, flooring the result to an integer that is closer to negative infinity. */\n@SinceKotlin(\"1.5\")\n@kotlin.internal.InlineOnly\npublic inline fun Short.floorDiv(other: Byte): Int = \n    this.toInt().floorDiv(other.toInt())\n\n/**\n * Calculates the remainder of flooring division of this value by the other value.\n * \n * The result is either zero or has the same sign as the _divisor_ and has the absolute value less than the absolute value of the divisor.\n */\n@SinceKotlin(\"1.5\")\n@kotlin.internal.InlineOnly\npublic inline fun Short.mod(other: Byte): Byte = \n    this.toInt().mod(other.toInt()).toByte()\n\n/** Divides this value by the other value, flooring the result to an integer that is closer to negative infinity. */\n@SinceKotlin(\"1.5\")\n@kotlin.internal.InlineOnly\npublic inline fun Short.floorDiv(other: Short): Int = \n    this.toInt().floorDiv(other.toInt())\n\n/**\n * Calculates the remainder of flooring division of this value by the other value.\n * \n * The result is either zero or has the same sign as the _divisor_ and has the absolute value less than the absolute value of the divisor.\n */\n@SinceKotlin(\"1.5\")\n@kotlin.internal.InlineOnly\npublic inline fun Short.mod(other: Short): Short = \n    this.toInt().mod(other.toInt()).toShort()\n\n/** Divides this value by the other value, flooring the result to an integer that is closer to negative infinity. */\n@SinceKotlin(\"1.5\")\n@kotlin.internal.InlineOnly\npublic inline fun Short.floorDiv(other: Int): Int = \n    this.toInt().floorDiv(other)\n\n/**\n * Calculates the remainder of flooring division of this value by the other value.\n * \n * The result is either zero or has the same sign as the _divisor_ and has the absolute value less than the absolute value of the divisor.\n */\n@SinceKotlin(\"1.5\")\n@kotlin.internal.InlineOnly\npublic inline fun Short.mod(other: Int): Int = \n    this.toInt().mod(other)\n\n/** Divides this value by the other value, flooring the result to an integer that is closer to negative infinity. */\n@SinceKotlin(\"1.5\")\n@kotlin.internal.InlineOnly\npublic inline fun Short.floorDiv(other: Long): Long = \n    this.toLong().floorDiv(other)\n\n/**\n * Calculates the remainder of flooring division of this value by the other value.\n * \n * The result is either zero or has the same sign as the _divisor_ and has the absolute value less than the absolute value of the divisor.\n */\n@SinceKotlin(\"1.5\")\n@kotlin.internal.InlineOnly\npublic inline fun Short.mod(other: Long): Long = \n    this.toLong().mod(other)\n\n/** Divides this value by the other value, flooring the result to an integer that is closer to negative infinity. */\n@SinceKotlin(\"1.5\")\n@kotlin.internal.InlineOnly\npublic inline fun Int.floorDiv(other: Byte): Int = \n    this.floorDiv(other.toInt())\n\n/**\n * Calculates the remainder of flooring division of this value by the other value.\n * \n * The result is either zero or has the same sign as the _divisor_ and has the absolute value less than the absolute value of the divisor.\n */\n@SinceKotlin(\"1.5\")\n@kotlin.internal.InlineOnly\npublic inline fun Int.mod(other: Byte): Byte = \n    this.mod(other.toInt()).toByte()\n\n/** Divides this value by the other value, flooring the result to an integer that is closer to negative infinity. */\n@SinceKotlin(\"1.5\")\n@kotlin.internal.InlineOnly\npublic inline fun Int.floorDiv(other: Short): Int = \n    this.floorDiv(other.toInt())\n\n/**\n * Calculates the remainder of flooring division of this value by the other value.\n * \n * The result is either zero or has the same sign as the _divisor_ and has the absolute value less than the absolute value of the divisor.\n */\n@SinceKotlin(\"1.5\")\n@kotlin.internal.InlineOnly\npublic inline fun Int.mod(other: Short): Short = \n    this.mod(other.toInt()).toShort()\n\n/** Divides this value by the other value, flooring the result to an integer that is closer to negative infinity. */\n@SinceKotlin(\"1.5\")\n@kotlin.internal.InlineOnly\npublic inline fun Int.floorDiv(other: Int): Int {\n    var q = this / other\n    if (this xor other < 0 && q * other != this) q-- \n    return q\n}\n\n/**\n * Calculates the remainder of flooring division of this value by the other value.\n * \n * The result is either zero or has the same sign as the _divisor_ and has the absolute value less than the absolute value of the divisor.\n */\n@SinceKotlin(\"1.5\")\n@kotlin.internal.InlineOnly\npublic inline fun Int.mod(other: Int): Int {\n    val r = this % other\n    return r + (other and (((r xor other) and (r or -r)) shr 31))\n}\n\n/** Divides this value by the other value, flooring the result to an integer that is closer to negative infinity. */\n@SinceKotlin(\"1.5\")\n@kotlin.internal.InlineOnly\npublic inline fun Int.floorDiv(other: Long): Long = \n    this.toLong().floorDiv(other)\n\n/**\n * Calculates the remainder of flooring division of this value by the other value.\n * \n * The result is either zero or has the same sign as the _divisor_ and has the absolute value less than the absolute value of the divisor.\n */\n@SinceKotlin(\"1.5\")\n@kotlin.internal.InlineOnly\npublic inline fun Int.mod(other: Long): Long = \n    this.toLong().mod(other)\n\n/** Divides this value by the other value, flooring the result to an integer that is closer to negative infinity. */\n@SinceKotlin(\"1.5\")\n@kotlin.internal.InlineOnly\npublic inline fun Long.floorDiv(other: Byte): Long = \n    this.floorDiv(other.toLong())\n\n/**\n * Calculates the remainder of flooring division of this value by the other value.\n * \n * The result is either zero or has the same sign as the _divisor_ and has the absolute value less than the absolute value of the divisor.\n */\n@SinceKotlin(\"1.5\")\n@kotlin.internal.InlineOnly\npublic inline fun Long.mod(other: Byte): Byte = \n    this.mod(other.toLong()).toByte()\n\n/** Divides this value by the other value, flooring the result to an integer that is closer to negative infinity. */\n@SinceKotlin(\"1.5\")\n@kotlin.internal.InlineOnly\npublic inline fun Long.floorDiv(other: Short): Long = \n    this.floorDiv(other.toLong())\n\n/**\n * Calculates the remainder of flooring division of this value by the other value.\n * \n * The result is either zero or has the same sign as the _divisor_ and has the absolute value less than the absolute value of the divisor.\n */\n@SinceKotlin(\"1.5\")\n@kotlin.internal.InlineOnly\npublic inline fun Long.mod(other: Short): Short = \n    this.mod(other.toLong()).toShort()\n\n/** Divides this value by the other value, flooring the result to an integer that is closer to negative infinity. */\n@SinceKotlin(\"1.5\")\n@kotlin.internal.InlineOnly\npublic inline fun Long.floorDiv(other: Int): Long = \n    this.floorDiv(other.toLong())\n\n/**\n * Calculates the remainder of flooring division of this value by the other value.\n * \n * The result is either zero or has the same sign as the _divisor_ and has the absolute value less than the absolute value of the divisor.\n */\n@SinceKotlin(\"1.5\")\n@kotlin.internal.InlineOnly\npublic inline fun Long.mod(other: Int): Int = \n    this.mod(other.toLong()).toInt()\n\n/** Divides this value by the other value, flooring the result to an integer that is closer to negative infinity. */\n@SinceKotlin(\"1.5\")\n@kotlin.internal.InlineOnly\npublic inline fun Long.floorDiv(other: Long): Long {\n    var q = this / other\n    if (this xor other < 0 && q * other != this) q-- \n    return q\n}\n\n/**\n * Calculates the remainder of flooring division of this value by the other value.\n * \n * The result is either zero or has the same sign as the _divisor_ and has the absolute value less than the absolute value of the divisor.\n */\n@SinceKotlin(\"1.5\")\n@kotlin.internal.InlineOnly\npublic inline fun Long.mod(other: Long): Long {\n    val r = this % other\n    return r + (other and (((r xor other) and (r or -r)) shr 63))\n}\n\n/**\n * Calculates the remainder of flooring division of this value by the other value.\n * \n * The result is either zero or has the same sign as the _divisor_ and has the absolute value less than the absolute value of the divisor.\n * \n * If the result cannot be represented exactly, it is rounded to the nearest representable number. In this case the absolute value of the result can be less than or _equal to_ the absolute value of the divisor.\n */\n@SinceKotlin(\"1.5\")\n@kotlin.internal.InlineOnly\npublic inline fun Float.mod(other: Float): Float {\n    val r = this % other\n    return if (r != 0.0.toFloat() && r.sign != other.sign) r + other else r\n}\n\n/**\n * Calculates the remainder of flooring division of this value by the other value.\n * \n * The result is either zero or has the same sign as the _divisor_ and has the absolute value less than the absolute value of the divisor.\n * \n * If the result cannot be represented exactly, it is rounded to the nearest representable number. In this case the absolute value of the result can be less than or _equal to_ the absolute value of the divisor.\n */\n@SinceKotlin(\"1.5\")\n@kotlin.internal.InlineOnly\npublic inline fun Float.mod(other: Double): Double = \n    this.toDouble().mod(other)\n\n/**\n * Calculates the remainder of flooring division of this value by the other value.\n * \n * The result is either zero or has the same sign as the _divisor_ and has the absolute value less than the absolute value of the divisor.\n * \n * If the result cannot be represented exactly, it is rounded to the nearest representable number. In this case the absolute value of the result can be less than or _equal to_ the absolute value of the divisor.\n */\n@SinceKotlin(\"1.5\")\n@kotlin.internal.InlineOnly\npublic inline fun Double.mod(other: Float): Double = \n    this.mod(other.toDouble())\n\n/**\n * Calculates the remainder of flooring division of this value by the other value.\n * \n * The result is either zero or has the same sign as the _divisor_ and has the absolute value less than the absolute value of the divisor.\n * \n * If the result cannot be represented exactly, it is rounded to the nearest representable number. In this case the absolute value of the result can be less than or _equal to_ the absolute value of the divisor.\n */\n@SinceKotlin(\"1.5\")\n@kotlin.internal.InlineOnly\npublic inline fun Double.mod(other: Double): Double {\n    val r = this % other\n    return if (r != 0.0 && r.sign != other.sign) r + other else r\n}\n\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin\n\nimport kotlin.internal.InlineOnly\n\n\n/**\n * Returns a hash code value for the object or zero if the object is `null`.\n *\n * @see Any.hashCode\n */\n@SinceKotlin(\"1.3\")\n@InlineOnly\npublic inline fun Any?.hashCode(): Int = this?.hashCode() ?: 0\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmName(\"LazyKt\")\n@file:kotlin.jvm.JvmMultifileClass\n\npackage kotlin\n\nimport kotlin.reflect.KProperty\n\n/**\n * Represents a value with lazy initialization.\n *\n * To create an instance of [Lazy] use the [lazy] function.\n */\npublic interface Lazy<out T> {\n    /**\n     * Gets the lazily initialized value of the current Lazy instance.\n     * Once the value was initialized it must not change during the rest of lifetime of this Lazy instance.\n     */\n    public val value: T\n\n    /**\n     * Returns `true` if a value for this Lazy instance has been already initialized, and `false` otherwise.\n     * Once this function has returned `true` it stays `true` for the rest of lifetime of this Lazy instance.\n     */\n    public fun isInitialized(): Boolean\n}\n\n/**\n * Creates a new instance of the [Lazy] that is already initialized with the specified [value].\n */\npublic fun <T> lazyOf(value: T): Lazy<T> = InitializedLazyImpl(value)\n\n/**\n * An extension to delegate a read-only property of type [T] to an instance of [Lazy].\n *\n * This extension allows to use instances of Lazy for property delegation:\n * `val property: String by lazy { initializer }`\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> Lazy<T>.getValue(thisRef: Any?, property: KProperty<*>): T = value\n\n/**\n * Specifies how a [Lazy] instance synchronizes initialization among multiple threads.\n */\npublic enum class LazyThreadSafetyMode {\n\n    /**\n     * Locks are used to ensure that only a single thread can initialize the [Lazy] instance.\n     */\n    SYNCHRONIZED,\n\n    /**\n     * Initializer function can be called several times on concurrent access to uninitialized [Lazy] instance value,\n     * but only the first returned value will be used as the value of [Lazy] instance.\n     */\n    PUBLICATION,\n\n    /**\n     * No locks are used to synchronize an access to the [Lazy] instance value; if the instance is accessed from multiple threads, its behavior is undefined.\n     *\n     * This mode should not be used unless the [Lazy] instance is guaranteed never to be initialized from more than one thread.\n     */\n    NONE,\n}\n\n\ninternal object UNINITIALIZED_VALUE\n\n// internal to be called from lazy in JS\ninternal class UnsafeLazyImpl<out T>(initializer: () -> T) : Lazy<T>, Serializable {\n    private var initializer: (() -> T)? = initializer\n    private var _value: Any? = UNINITIALIZED_VALUE\n\n    override val value: T\n        get() {\n            if (_value === UNINITIALIZED_VALUE) {\n                _value = initializer!!()\n                initializer = null\n            }\n            @Suppress(\"UNCHECKED_CAST\")\n            return _value as T\n        }\n\n    override fun isInitialized(): Boolean = _value !== UNINITIALIZED_VALUE\n\n    override fun toString(): String = if (isInitialized()) value.toString() else \"Lazy value not initialized yet.\"\n\n    private fun writeReplace(): Any = InitializedLazyImpl(value)\n}\n\ninternal class InitializedLazyImpl<out T>(override val value: T) : Lazy<T>, Serializable {\n\n    override fun isInitialized(): Boolean = true\n\n    override fun toString(): String = value.toString()\n\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmName(\"LateinitKt\")\n@file:Suppress(\"unused\")\n\npackage kotlin\n\nimport kotlin.internal.InlineOnly\nimport kotlin.internal.AccessibleLateinitPropertyLiteral\nimport kotlin.reflect.KProperty0\n\n/**\n * Returns `true` if this lateinit property has been assigned a value, and `false` otherwise.\n *\n * Cannot be used in an inline function, to avoid binary compatibility issues.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\ninline val @receiver:AccessibleLateinitPropertyLiteral KProperty0<*>.isInitialized: Boolean\n    get() = throw NotImplementedError(\"Implementation is intrinsic\")\n","/*\n * Copyright 2010-2019 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"NumbersKt\")\npackage kotlin\n\n/**\n * Counts the number of set bits in the binary representation of this [Int] number.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic expect fun Int.countOneBits(): Int\n\n/**\n * Counts the number of consecutive most significant bits that are zero in the binary representation of this [Int] number.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic expect fun Int.countLeadingZeroBits(): Int\n\n/**\n * Counts the number of consecutive least significant bits that are zero in the binary representation of this [Int] number.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic expect fun Int.countTrailingZeroBits(): Int\n\n/**\n * Returns a number having a single bit set in the position of the most significant set bit of this [Int] number,\n * or zero, if this number is zero.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic expect fun Int.takeHighestOneBit(): Int\n\n/**\n * Returns a number having a single bit set in the position of the least significant set bit of this [Int] number,\n * or zero, if this number is zero.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic expect fun Int.takeLowestOneBit(): Int\n\n/**\n * Rotates the binary representation of this [Int] number left by the specified [bitCount] number of bits.\n * The most significant bits pushed out from the left side reenter the number as the least significant bits on the right side.\n *\n * Rotating the number left by a negative bit count is the same as rotating it right by the negated bit count:\n * `number.rotateLeft(-n) == number.rotateRight(n)`\n *\n * Rotating by a multiple of [Int.SIZE_BITS] (32) returns the same number, or more generally\n * `number.rotateLeft(n) == number.rotateLeft(n % 32)`\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic expect fun Int.rotateLeft(bitCount: Int): Int\n\n\n/**\n * Rotates the binary representation of this [Int] number right by the specified [bitCount] number of bits.\n * The least significant bits pushed out from the right side reenter the number as the most significant bits on the left side.\n *\n * Rotating the number right by a negative bit count is the same as rotating it left by the negated bit count:\n * `number.rotateRight(-n) == number.rotateLeft(n)`\n *\n * Rotating by a multiple of [Int.SIZE_BITS] (32) returns the same number, or more generally\n * `number.rotateRight(n) == number.rotateRight(n % 32)`\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic expect fun Int.rotateRight(bitCount: Int): Int\n\n\n/**\n * Counts the number of set bits in the binary representation of this [Long] number.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic expect fun Long.countOneBits(): Int\n\n/**\n * Counts the number of consecutive most significant bits that are zero in the binary representation of this [Long] number.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic expect fun Long.countLeadingZeroBits(): Int\n\n/**\n * Counts the number of consecutive least significant bits that are zero in the binary representation of this [Long] number.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic expect fun Long.countTrailingZeroBits(): Int\n\n/**\n * Returns a number having a single bit set in the position of the most significant set bit of this [Long] number,\n * or zero, if this number is zero.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic expect fun Long.takeHighestOneBit(): Long\n\n/**\n * Returns a number having a single bit set in the position of the least significant set bit of this [Long] number,\n * or zero, if this number is zero.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic expect fun Long.takeLowestOneBit(): Long\n\n/**\n * Rotates the binary representation of this [Long] number left by the specified [bitCount] number of bits.\n * The most significant bits pushed out from the left side reenter the number as the least significant bits on the right side.\n *\n * Rotating the number left by a negative bit count is the same as rotating it right by the negated bit count:\n * `number.rotateLeft(-n) == number.rotateRight(n)`\n *\n * Rotating by a multiple of [Long.SIZE_BITS] (64) returns the same number, or more generally\n * `number.rotateLeft(n) == number.rotateLeft(n % 64)`\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic expect fun Long.rotateLeft(bitCount: Int): Long\n\n/**\n * Rotates the binary representation of this [Long] number right by the specified [bitCount] number of bits.\n * The least significant bits pushed out from the right side reenter the number as the most significant bits on the left side.\n *\n * Rotating the number right by a negative bit count is the same as rotating it left by the negated bit count:\n * `number.rotateRight(-n) == number.rotateLeft(n)`\n *\n * Rotating by a multiple of [Long.SIZE_BITS] (64) returns the same number, or more generally\n * `number.rotateRight(n) == number.rotateRight(n % 64)`\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic expect fun Long.rotateRight(bitCount: Int): Long\n\n/**\n * Counts the number of set bits in the binary representation of this [Byte] number.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun Byte.countOneBits(): Int = (toInt() and 0xFF).countOneBits()\n\n/**\n * Counts the number of consecutive most significant bits that are zero in the binary representation of this [Byte] number.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun Byte.countLeadingZeroBits(): Int = (toInt() and 0xFF).countLeadingZeroBits() - (Int.SIZE_BITS - Byte.SIZE_BITS)\n\n/**\n * Counts the number of consecutive least significant bits that are zero in the binary representation of this [Byte] number.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun Byte.countTrailingZeroBits(): Int = (toInt() or 0x100).countTrailingZeroBits()\n\n/**\n * Returns a number having a single bit set in the position of the most significant set bit of this [Byte] number,\n * or zero, if this number is zero.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun Byte.takeHighestOneBit(): Byte = (toInt() and 0xFF).takeHighestOneBit().toByte()\n\n/**\n * Returns a number having a single bit set in the position of the least significant set bit of this [Byte] number,\n * or zero, if this number is zero.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun Byte.takeLowestOneBit(): Byte = toInt().takeLowestOneBit().toByte()\n\n\n/**\n * Rotates the binary representation of this [Byte] number left by the specified [bitCount] number of bits.\n * The most significant bits pushed out from the left side reenter the number as the least significant bits on the right side.\n *\n * Rotating the number left by a negative bit count is the same as rotating it right by the negated bit count:\n * `number.rotateLeft(-n) == number.rotateRight(n)`\n *\n * Rotating by a multiple of [Byte.SIZE_BITS] (8) returns the same number, or more generally\n * `number.rotateLeft(n) == number.rotateLeft(n % 8)`\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic fun Byte.rotateLeft(bitCount: Int): Byte =\n    (toInt().shl(bitCount and 7) or (toInt() and 0xFF).ushr(8 - (bitCount and 7))).toByte()\n\n/**\n * Rotates the binary representation of this [Byte] number right by the specified [bitCount] number of bits.\n * The least significant bits pushed out from the right side reenter the number as the most significant bits on the left side.\n *\n * Rotating the number right by a negative bit count is the same as rotating it left by the negated bit count:\n * `number.rotateRight(-n) == number.rotateLeft(n)`\n *\n * Rotating by a multiple of [Byte.SIZE_BITS] (8) returns the same number, or more generally\n * `number.rotateRight(n) == number.rotateRight(n % 8)`\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic fun Byte.rotateRight(bitCount: Int): Byte =\n    (toInt().shl(8 - (bitCount and 7)) or (toInt() and 0xFF).ushr(bitCount and 7)).toByte()\n\n/**\n * Counts the number of set bits in the binary representation of this [Short] number.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun Short.countOneBits(): Int = (toInt() and 0xFFFF).countOneBits()\n\n/**\n * Counts the number of consecutive most significant bits that are zero in the binary representation of this [Short] number.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun Short.countLeadingZeroBits(): Int =\n    (toInt() and 0xFFFF).countLeadingZeroBits() - (Int.SIZE_BITS - Short.SIZE_BITS)\n\n/**\n * Counts the number of consecutive least significant bits that are zero in the binary representation of this [Short] number.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun Short.countTrailingZeroBits(): Int = (toInt() or 0x10000).countTrailingZeroBits()\n\n/**\n * Returns a number having a single bit set in the position of the most significant set bit of this [Short] number,\n * or zero, if this number is zero.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun Short.takeHighestOneBit(): Short = (toInt() and 0xFFFF).takeHighestOneBit().toShort()\n\n/**\n * Returns a number having a single bit set in the position of the least significant set bit of this [Short] number,\n * or zero, if this number is zero.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun Short.takeLowestOneBit(): Short = toInt().takeLowestOneBit().toShort()\n\n\n/**\n * Rotates the binary representation of this [Short] number left by the specified [bitCount] number of bits.\n * The most significant bits pushed out from the left side reenter the number as the least significant bits on the right side.\n *\n * Rotating the number left by a negative bit count is the same as rotating it right by the negated bit count:\n * `number.rotateLeft(-n) == number.rotateRight(n)`\n *\n * Rotating by a multiple of [Short.SIZE_BITS] (16) returns the same number, or more generally\n * `number.rotateLeft(n) == number.rotateLeft(n % 16)`\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic fun Short.rotateLeft(bitCount: Int): Short =\n    (toInt().shl(bitCount and 15) or (toInt() and 0xFFFF).ushr(16 - (bitCount and 15))).toShort()\n\n/**\n * Rotates the binary representation of this [Short] number right by the specified [bitCount] number of bits.\n * The least significant bits pushed out from the right side reenter the number as the most significant bits on the left side.\n *\n * Rotating the number right by a negative bit count is the same as rotating it left by the negated bit count:\n * `number.rotateRight(-n) == number.rotateLeft(n)`\n *\n * Rotating by a multiple of [Short.SIZE_BITS] (16) returns the same number, or more generally\n * `number.rotateRight(n) == number.rotateRight(n % 16)`\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic fun Short.rotateRight(bitCount: Int): Short =\n    (toInt().shl(16 - (bitCount and 15)) or (toInt() and 0xFFFF).ushr(bitCount and 15)).toShort()\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmName(\"TuplesKt\")\n\npackage kotlin\n\n\n/**\n * Represents a generic pair of two values.\n *\n * There is no meaning attached to values in this class, it can be used for any purpose.\n * Pair exhibits value semantics, i.e. two pairs are equal if both components are equal.\n *\n * An example of decomposing it into values:\n * @sample samples.misc.Tuples.pairDestructuring\n *\n * @param A type of the first value.\n * @param B type of the second value.\n * @property first First value.\n * @property second Second value.\n * @constructor Creates a new instance of Pair.\n */\npublic data class Pair<out A, out B>(\n    public val first: A,\n    public val second: B\n) : Serializable {\n\n    /**\n     * Returns string representation of the [Pair] including its [first] and [second] values.\n     */\n    public override fun toString(): String = \"($first, $second)\"\n}\n\n/**\n * Creates a tuple of type [Pair] from this and [that].\n *\n * This can be useful for creating [Map] literals with less noise, for example:\n * @sample samples.collections.Maps.Instantiation.mapFromPairs\n */\npublic infix fun <A, B> A.to(that: B): Pair<A, B> = Pair(this, that)\n\n/**\n * Converts this pair into a list.\n * @sample samples.misc.Tuples.pairToList\n */\npublic fun <T> Pair<T, T>.toList(): List<T> = listOf(first, second)\n\n/**\n * Represents a triad of values\n *\n * There is no meaning attached to values in this class, it can be used for any purpose.\n * Triple exhibits value semantics, i.e. two triples are equal if all three components are equal.\n * An example of decomposing it into values:\n * @sample samples.misc.Tuples.tripleDestructuring\n *\n * @param A type of the first value.\n * @param B type of the second value.\n * @param C type of the third value.\n * @property first First value.\n * @property second Second value.\n * @property third Third value.\n */\npublic data class Triple<out A, out B, out C>(\n    public val first: A,\n    public val second: B,\n    public val third: C\n) : Serializable {\n\n    /**\n     * Returns string representation of the [Triple] including its [first], [second] and [third] values.\n     */\n    public override fun toString(): String = \"($first, $second, $third)\"\n}\n\n/**\n * Converts this triple into a list.\n * @sample samples.misc.Tuples.tripleToList\n */\npublic fun <T> Triple<T, T, T>.toList(): List<T> = listOf(first, second, third)\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin\nimport kotlin.internal.RequireKotlin\nimport kotlin.internal.RequireKotlinVersionKind\n\n@kotlin.internal.InlineOnly\n@SinceKotlin(\"1.2\")\n@Suppress(\"INVISIBLE_MEMBER\", \"INVISIBLE_REFERENCE\")\n@RequireKotlin(\"1.2.30\", level = DeprecationLevel.HIDDEN, versionKind = RequireKotlinVersionKind.COMPILER_VERSION)\npublic inline fun <R> suspend(noinline block: suspend () -> R): suspend () -> R = block\n","/*\n * Copyright 2010-2021 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n// Auto-generated file. DO NOT EDIT!\n\npackage kotlin\n\nimport kotlin.jvm.*\n\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@JvmInline\npublic value class UByteArray\n@PublishedApi\ninternal constructor(@PublishedApi internal val storage: ByteArray) : Collection<UByte> {\n\n    /** Creates a new array of the specified [size], with all elements initialized to zero. */\n    public constructor(size: Int) : this(ByteArray(size))\n\n    /**\n     * Returns the array element at the given [index]. This method can be called using the index operator.\n     *\n     * If the [index] is out of bounds of this array, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n     * where the behavior is unspecified.\n     */\n    public operator fun get(index: Int): UByte = storage[index].toUByte()\n\n    /**\n     * Sets the element at the given [index] to the given [value]. This method can be called using the index operator.\n     *\n     * If the [index] is out of bounds of this array, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n     * where the behavior is unspecified.\n     */\n    public operator fun set(index: Int, value: UByte) {\n        storage[index] = value.toByte()\n    }\n\n    /** Returns the number of elements in the array. */\n    public override val size: Int get() = storage.size\n\n    /** Creates an iterator over the elements of the array. */\n    public override operator fun iterator(): kotlin.collections.Iterator<UByte> = Iterator(storage)\n\n    @Suppress(\"DEPRECATION_ERROR\")\n    private class Iterator(private val array: ByteArray) : UByteIterator() {\n        private var index = 0\n        override fun hasNext() = index < array.size\n        override fun nextUByte() = if (index < array.size) array[index++].toUByte() else throw NoSuchElementException(index.toString())\n    }\n\n    override fun contains(element: UByte): Boolean {\n        // TODO: Eliminate this check after KT-30016 gets fixed.\n        // Currently JS BE does not generate special bridge method for this method.\n        @Suppress(\"USELESS_CAST\")\n        if ((element as Any?) !is UByte) return false\n\n        return storage.contains(element.toByte())\n    }\n\n    override fun containsAll(elements: Collection<UByte>): Boolean {\n        return (elements as Collection<*>).all { it is UByte && storage.contains(it.toByte()) }\n    }\n\n    override fun isEmpty(): Boolean = this.storage.size == 0\n}\n\n/**\n * Creates a new array of the specified [size], where each element is calculated by calling the specified\n * [init] function.\n *\n * The function [init] is called for each array element sequentially starting from the first one.\n * It should return the value for an array element given its index.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray(size: Int, init: (Int) -> UByte): UByteArray {\n    return UByteArray(ByteArray(size) { index -> init(index).toByte() })\n}\n\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ubyteArrayOf(vararg elements: UByte): UByteArray = elements\n","/*\n * Copyright 2010-2021 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n// Auto-generated file. DO NOT EDIT!\n\npackage kotlin\n\nimport kotlin.jvm.*\n\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@JvmInline\npublic value class UIntArray\n@PublishedApi\ninternal constructor(@PublishedApi internal val storage: IntArray) : Collection<UInt> {\n\n    /** Creates a new array of the specified [size], with all elements initialized to zero. */\n    public constructor(size: Int) : this(IntArray(size))\n\n    /**\n     * Returns the array element at the given [index]. This method can be called using the index operator.\n     *\n     * If the [index] is out of bounds of this array, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n     * where the behavior is unspecified.\n     */\n    public operator fun get(index: Int): UInt = storage[index].toUInt()\n\n    /**\n     * Sets the element at the given [index] to the given [value]. This method can be called using the index operator.\n     *\n     * If the [index] is out of bounds of this array, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n     * where the behavior is unspecified.\n     */\n    public operator fun set(index: Int, value: UInt) {\n        storage[index] = value.toInt()\n    }\n\n    /** Returns the number of elements in the array. */\n    public override val size: Int get() = storage.size\n\n    /** Creates an iterator over the elements of the array. */\n    public override operator fun iterator(): kotlin.collections.Iterator<UInt> = Iterator(storage)\n\n    @Suppress(\"DEPRECATION_ERROR\")\n    private class Iterator(private val array: IntArray) : UIntIterator() {\n        private var index = 0\n        override fun hasNext() = index < array.size\n        override fun nextUInt() = if (index < array.size) array[index++].toUInt() else throw NoSuchElementException(index.toString())\n    }\n\n    override fun contains(element: UInt): Boolean {\n        // TODO: Eliminate this check after KT-30016 gets fixed.\n        // Currently JS BE does not generate special bridge method for this method.\n        @Suppress(\"USELESS_CAST\")\n        if ((element as Any?) !is UInt) return false\n\n        return storage.contains(element.toInt())\n    }\n\n    override fun containsAll(elements: Collection<UInt>): Boolean {\n        return (elements as Collection<*>).all { it is UInt && storage.contains(it.toInt()) }\n    }\n\n    override fun isEmpty(): Boolean = this.storage.size == 0\n}\n\n/**\n * Creates a new array of the specified [size], where each element is calculated by calling the specified\n * [init] function.\n *\n * The function [init] is called for each array element sequentially starting from the first one.\n * It should return the value for an array element given its index.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray(size: Int, init: (Int) -> UInt): UIntArray {\n    return UIntArray(IntArray(size) { index -> init(index).toInt() })\n}\n\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun uintArrayOf(vararg elements: UInt): UIntArray = elements\n","/*\n * Copyright 2010-2021 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n// Auto-generated file. DO NOT EDIT!\n\npackage kotlin.ranges\n\n\n\nimport kotlin.internal.*\n\n/**\n * A range of values of type `UInt`.\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\npublic class UIntRange(start: UInt, endInclusive: UInt) : UIntProgression(start, endInclusive, 1), ClosedRange<UInt> {\n    override val start: UInt get() = first\n    override val endInclusive: UInt get() = last\n\n    override fun contains(value: UInt): Boolean = first <= value && value <= last\n\n    override fun isEmpty(): Boolean = first > last\n\n    override fun equals(other: Any?): Boolean =\n        other is UIntRange && (isEmpty() && other.isEmpty() ||\n                first == other.first && last == other.last)\n\n    override fun hashCode(): Int =\n        if (isEmpty()) -1 else (31 * first.toInt() + last.toInt())\n\n    override fun toString(): String = \"$first..$last\"\n\n    companion object {\n        /** An empty range of values of type UInt. */\n        public val EMPTY: UIntRange = UIntRange(UInt.MAX_VALUE, UInt.MIN_VALUE)\n    }\n}\n\n/**\n * A progression of values of type `UInt`.\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\npublic open class UIntProgression\ninternal constructor(\n    start: UInt,\n    endInclusive: UInt,\n    step: Int\n) : Iterable<UInt> {\n    init {\n        if (step == 0.toInt()) throw kotlin.IllegalArgumentException(\"Step must be non-zero.\")\n        if (step == Int.MIN_VALUE) throw kotlin.IllegalArgumentException(\"Step must be greater than Int.MIN_VALUE to avoid overflow on negation.\")\n    }\n\n    /**\n     * The first element in the progression.\n     */\n    public val first: UInt = start\n\n    /**\n     * The last element in the progression.\n     */\n    public val last: UInt = getProgressionLastElement(start, endInclusive, step)\n\n    /**\n     * The step of the progression.\n     */\n    public val step: Int = step\n\n    final override fun iterator(): Iterator<UInt> = UIntProgressionIterator(first, last, step)\n\n    /** Checks if the progression is empty. */\n    public open fun isEmpty(): Boolean = if (step > 0) first > last else first < last\n\n    override fun equals(other: Any?): Boolean =\n        other is UIntProgression && (isEmpty() && other.isEmpty() ||\n                first == other.first && last == other.last && step == other.step)\n\n    override fun hashCode(): Int =\n        if (isEmpty()) -1 else (31 * (31 * first.toInt() + last.toInt()) + step.toInt())\n\n    override fun toString(): String = if (step > 0) \"$first..$last step $step\" else \"$first downTo $last step ${-step}\"\n\n    companion object {\n        /**\n         * Creates UIntProgression within the specified bounds of a closed range.\n\n         * The progression starts with the [rangeStart] value and goes toward the [rangeEnd] value not excluding it, with the specified [step].\n         * In order to go backwards the [step] must be negative.\n         *\n         * [step] must be greater than `Int.MIN_VALUE` and not equal to zero.\n         */\n        public fun fromClosedRange(rangeStart: UInt, rangeEnd: UInt, step: Int): UIntProgression = UIntProgression(rangeStart, rangeEnd, step)\n    }\n}\n\n\n/**\n * An iterator over a progression of values of type `UInt`.\n * @property step the number by which the value is incremented on each step.\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"DEPRECATION_ERROR\")\nprivate class UIntProgressionIterator(first: UInt, last: UInt, step: Int) : UIntIterator() {\n    private val finalElement = last\n    private var hasNext: Boolean = if (step > 0) first <= last else first >= last\n    private val step = step.toUInt() // use 2-complement math for negative steps\n    private var next = if (hasNext) first else finalElement\n\n    override fun hasNext(): Boolean = hasNext\n\n    override fun nextUInt(): UInt {\n        val value = next\n        if (value == finalElement) {\n            if (!hasNext) throw kotlin.NoSuchElementException()\n            hasNext = false\n        } else {\n            next += step\n        }\n        return value\n    }\n}\n\n","/*\n * Copyright 2010-2021 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n// Auto-generated file. DO NOT EDIT!\n\npackage kotlin.collections\n\n/** An iterator over a sequence of values of type `UByte`. */\n@Deprecated(\"This class is not going to be stabilized and is to be removed soon.\", level = DeprecationLevel.ERROR)\n@SinceKotlin(\"1.3\")\npublic abstract class UByteIterator : Iterator<UByte> {\n    final override fun next() = nextUByte()\n\n    /** Returns the next value in the sequence without boxing. */\n    public abstract fun nextUByte(): UByte\n}\n\n/** An iterator over a sequence of values of type `UShort`. */\n@Deprecated(\"This class is not going to be stabilized and is to be removed soon.\", level = DeprecationLevel.ERROR)\n@SinceKotlin(\"1.3\")\npublic abstract class UShortIterator : Iterator<UShort> {\n    final override fun next() = nextUShort()\n\n    /** Returns the next value in the sequence without boxing. */\n    public abstract fun nextUShort(): UShort\n}\n\n/** An iterator over a sequence of values of type `UInt`. */\n@Deprecated(\"This class is not going to be stabilized and is to be removed soon.\", level = DeprecationLevel.ERROR)\n@SinceKotlin(\"1.3\")\npublic abstract class UIntIterator : Iterator<UInt> {\n    final override fun next() = nextUInt()\n\n    /** Returns the next value in the sequence without boxing. */\n    public abstract fun nextUInt(): UInt\n}\n\n/** An iterator over a sequence of values of type `ULong`. */\n@Deprecated(\"This class is not going to be stabilized and is to be removed soon.\", level = DeprecationLevel.ERROR)\n@SinceKotlin(\"1.3\")\npublic abstract class ULongIterator : Iterator<ULong> {\n    final override fun next() = nextULong()\n\n    /** Returns the next value in the sequence without boxing. */\n    public abstract fun nextULong(): ULong\n}\n\n","/*\n * Copyright 2010-2021 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n// Auto-generated file. DO NOT EDIT!\n\npackage kotlin\n\nimport kotlin.jvm.*\n\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@JvmInline\npublic value class ULongArray\n@PublishedApi\ninternal constructor(@PublishedApi internal val storage: LongArray) : Collection<ULong> {\n\n    /** Creates a new array of the specified [size], with all elements initialized to zero. */\n    public constructor(size: Int) : this(LongArray(size))\n\n    /**\n     * Returns the array element at the given [index]. This method can be called using the index operator.\n     *\n     * If the [index] is out of bounds of this array, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n     * where the behavior is unspecified.\n     */\n    public operator fun get(index: Int): ULong = storage[index].toULong()\n\n    /**\n     * Sets the element at the given [index] to the given [value]. This method can be called using the index operator.\n     *\n     * If the [index] is out of bounds of this array, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n     * where the behavior is unspecified.\n     */\n    public operator fun set(index: Int, value: ULong) {\n        storage[index] = value.toLong()\n    }\n\n    /** Returns the number of elements in the array. */\n    public override val size: Int get() = storage.size\n\n    /** Creates an iterator over the elements of the array. */\n    public override operator fun iterator(): kotlin.collections.Iterator<ULong> = Iterator(storage)\n\n    @Suppress(\"DEPRECATION_ERROR\")\n    private class Iterator(private val array: LongArray) : ULongIterator() {\n        private var index = 0\n        override fun hasNext() = index < array.size\n        override fun nextULong() = if (index < array.size) array[index++].toULong() else throw NoSuchElementException(index.toString())\n    }\n\n    override fun contains(element: ULong): Boolean {\n        // TODO: Eliminate this check after KT-30016 gets fixed.\n        // Currently JS BE does not generate special bridge method for this method.\n        @Suppress(\"USELESS_CAST\")\n        if ((element as Any?) !is ULong) return false\n\n        return storage.contains(element.toLong())\n    }\n\n    override fun containsAll(elements: Collection<ULong>): Boolean {\n        return (elements as Collection<*>).all { it is ULong && storage.contains(it.toLong()) }\n    }\n\n    override fun isEmpty(): Boolean = this.storage.size == 0\n}\n\n/**\n * Creates a new array of the specified [size], where each element is calculated by calling the specified\n * [init] function.\n *\n * The function [init] is called for each array element sequentially starting from the first one.\n * It should return the value for an array element given its index.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray(size: Int, init: (Int) -> ULong): ULongArray {\n    return ULongArray(LongArray(size) { index -> init(index).toLong() })\n}\n\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ulongArrayOf(vararg elements: ULong): ULongArray = elements\n","/*\n * Copyright 2010-2021 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n// Auto-generated file. DO NOT EDIT!\n\npackage kotlin.ranges\n\n\n\nimport kotlin.internal.*\n\n/**\n * A range of values of type `ULong`.\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\npublic class ULongRange(start: ULong, endInclusive: ULong) : ULongProgression(start, endInclusive, 1), ClosedRange<ULong> {\n    override val start: ULong get() = first\n    override val endInclusive: ULong get() = last\n\n    override fun contains(value: ULong): Boolean = first <= value && value <= last\n\n    override fun isEmpty(): Boolean = first > last\n\n    override fun equals(other: Any?): Boolean =\n        other is ULongRange && (isEmpty() && other.isEmpty() ||\n                first == other.first && last == other.last)\n\n    override fun hashCode(): Int =\n        if (isEmpty()) -1 else (31 * (first xor (first shr 32)).toInt() + (last xor (last shr 32)).toInt())\n\n    override fun toString(): String = \"$first..$last\"\n\n    companion object {\n        /** An empty range of values of type ULong. */\n        public val EMPTY: ULongRange = ULongRange(ULong.MAX_VALUE, ULong.MIN_VALUE)\n    }\n}\n\n/**\n * A progression of values of type `ULong`.\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\npublic open class ULongProgression\ninternal constructor(\n    start: ULong,\n    endInclusive: ULong,\n    step: Long\n) : Iterable<ULong> {\n    init {\n        if (step == 0.toLong()) throw kotlin.IllegalArgumentException(\"Step must be non-zero.\")\n        if (step == Long.MIN_VALUE) throw kotlin.IllegalArgumentException(\"Step must be greater than Long.MIN_VALUE to avoid overflow on negation.\")\n    }\n\n    /**\n     * The first element in the progression.\n     */\n    public val first: ULong = start\n\n    /**\n     * The last element in the progression.\n     */\n    public val last: ULong = getProgressionLastElement(start, endInclusive, step)\n\n    /**\n     * The step of the progression.\n     */\n    public val step: Long = step\n\n    final override fun iterator(): Iterator<ULong> = ULongProgressionIterator(first, last, step)\n\n    /** Checks if the progression is empty. */\n    public open fun isEmpty(): Boolean = if (step > 0) first > last else first < last\n\n    override fun equals(other: Any?): Boolean =\n        other is ULongProgression && (isEmpty() && other.isEmpty() ||\n                first == other.first && last == other.last && step == other.step)\n\n    override fun hashCode(): Int =\n        if (isEmpty()) -1 else (31 * (31 * (first xor (first shr 32)).toInt() + (last xor (last shr 32)).toInt()) + (step xor (step ushr 32)).toInt())\n\n    override fun toString(): String = if (step > 0) \"$first..$last step $step\" else \"$first downTo $last step ${-step}\"\n\n    companion object {\n        /**\n         * Creates ULongProgression within the specified bounds of a closed range.\n\n         * The progression starts with the [rangeStart] value and goes toward the [rangeEnd] value not excluding it, with the specified [step].\n         * In order to go backwards the [step] must be negative.\n         *\n         * [step] must be greater than `Long.MIN_VALUE` and not equal to zero.\n         */\n        public fun fromClosedRange(rangeStart: ULong, rangeEnd: ULong, step: Long): ULongProgression = ULongProgression(rangeStart, rangeEnd, step)\n    }\n}\n\n\n/**\n * An iterator over a progression of values of type `ULong`.\n * @property step the number by which the value is incremented on each step.\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"DEPRECATION_ERROR\")\nprivate class ULongProgressionIterator(first: ULong, last: ULong, step: Long) : ULongIterator() {\n    private val finalElement = last\n    private var hasNext: Boolean = if (step > 0) first <= last else first >= last\n    private val step = step.toULong() // use 2-complement math for negative steps\n    private var next = if (hasNext) first else finalElement\n\n    override fun hasNext(): Boolean = hasNext\n\n    override fun nextULong(): ULong {\n        val value = next\n        if (value == finalElement) {\n            if (!hasNext) throw kotlin.NoSuchElementException()\n            hasNext = false\n        } else {\n            next += step\n        }\n        return value\n    }\n}\n\n","/*\n * Copyright 2010-2021 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.internal\n\n// (a - b) mod c\nprivate fun differenceModulo(a: UInt, b: UInt, c: UInt): UInt {\n    val ac = a % c\n    val bc = b % c\n    return if (ac >= bc) ac - bc else ac - bc + c\n}\n\nprivate fun differenceModulo(a: ULong, b: ULong, c: ULong): ULong {\n    val ac = a % c\n    val bc = b % c\n    return if (ac >= bc) ac - bc else ac - bc + c\n}\n\n/**\n * Calculates the final element of a bounded arithmetic progression, i.e. the last element of the progression which is in the range\n * from [start] to [end] in case of a positive [step], or from [end] to [start] in case of a negative\n * [step].\n *\n * No validation on passed parameters is performed. The given parameters should satisfy the condition:\n *\n * - either `step > 0` and `start <= end`,\n * - or `step < 0` and `start >= end`.\n *\n * @param start first element of the progression\n * @param end ending bound for the progression\n * @param step increment, or difference of successive elements in the progression\n * @return the final element of the progression\n * @suppress\n */\n@PublishedApi\n@SinceKotlin(\"1.3\")\ninternal fun getProgressionLastElement(start: UInt, end: UInt, step: Int): UInt = when {\n    step > 0 -> if (start >= end) end else end - differenceModulo(end, start, step.toUInt())\n    step < 0 -> if (start <= end) end else end + differenceModulo(start, end, (-step).toUInt())\n    else -> throw kotlin.IllegalArgumentException(\"Step is zero.\")\n}\n\n/**\n * Calculates the final element of a bounded arithmetic progression, i.e. the last element of the progression which is in the range\n * from [start] to [end] in case of a positive [step], or from [end] to [start] in case of a negative\n * [step].\n *\n * No validation on passed parameters is performed. The given parameters should satisfy the condition:\n *\n * - either `step > 0` and `start <= end`,\n * - or `step < 0` and `start >= end`.\n *\n * @param start first element of the progression\n * @param end ending bound for the progression\n * @param step increment, or difference of successive elements in the progression\n * @return the final element of the progression\n * @suppress\n */\n@PublishedApi\n@SinceKotlin(\"1.3\")\ninternal fun getProgressionLastElement(start: ULong, end: ULong, step: Long): ULong = when {\n    step > 0 -> if (start >= end) end else end - differenceModulo(end, start, step.toULong())\n    step < 0 -> if (start <= end) end else end + differenceModulo(start, end, (-step).toULong())\n    else -> throw kotlin.IllegalArgumentException(\"Step is zero.\")\n}\n","/*\n * Copyright 2010-2021 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.math\n\n/**\n * Returns the smaller of two values.\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun min(a: UInt, b: UInt): UInt {\n    return minOf(a, b)\n}\n\n/**\n * Returns the smaller of two values.\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun min(a: ULong, b: ULong): ULong {\n    return minOf(a, b)\n}\n\n/**\n * Returns the greater of two values.\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun max(a: UInt, b: UInt): UInt {\n    return maxOf(a, b)\n}\n\n/**\n * Returns the greater of two values.\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun max(a: ULong, b: ULong): ULong {\n    return maxOf(a, b)\n}","/*\n * Copyright 2010-2021 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmName(\"UNumbersKt\")\npackage kotlin\n\n/**\n * Counts the number of set bits in the binary representation of this [UInt] number.\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class, ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun UInt.countOneBits(): Int = toInt().countOneBits()\n\n/**\n * Counts the number of consecutive most significant bits that are zero in the binary representation of this [UInt] number.\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class, ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun UInt.countLeadingZeroBits(): Int = toInt().countLeadingZeroBits()\n\n/**\n * Counts the number of consecutive least significant bits that are zero in the binary representation of this [UInt] number.\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class, ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun UInt.countTrailingZeroBits(): Int = toInt().countTrailingZeroBits()\n\n/**\n * Returns a number having a single bit set in the position of the most significant set bit of this [UInt] number,\n * or zero, if this number is zero.\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class, ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun UInt.takeHighestOneBit(): UInt = toInt().takeHighestOneBit().toUInt()\n\n/**\n * Returns a number having a single bit set in the position of the least significant set bit of this [UInt] number,\n * or zero, if this number is zero.\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class, ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun UInt.takeLowestOneBit(): UInt = toInt().takeLowestOneBit().toUInt()\n\n/**\n * Rotates the binary representation of this [UInt] number left by the specified [bitCount] number of bits.\n * The most significant bits pushed out from the left side reenter the number as the least significant bits on the right side.\n *\n * Rotating the number left by a negative bit count is the same as rotating it right by the negated bit count:\n * `number.rotateLeft(-n) == number.rotateRight(n)`\n *\n * Rotating by a multiple of [UInt.SIZE_BITS] (32) returns the same number, or more generally\n * `number.rotateLeft(n) == number.rotateLeft(n % 32)`\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun UInt.rotateLeft(bitCount: Int): UInt = toInt().rotateLeft(bitCount).toUInt()\n\n\n/**\n * Rotates the binary representation of this [UInt] number right by the specified [bitCount] number of bits.\n * The least significant bits pushed out from the right side reenter the number as the most significant bits on the left side.\n *\n * Rotating the number right by a negative bit count is the same as rotating it left by the negated bit count:\n * `number.rotateRight(-n) == number.rotateLeft(n)`\n *\n * Rotating by a multiple of [UInt.SIZE_BITS] (32) returns the same number, or more generally\n * `number.rotateRight(n) == number.rotateRight(n % 32)`\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun UInt.rotateRight(bitCount: Int): UInt = toInt().rotateRight(bitCount).toUInt()\n\n\n/**\n * Counts the number of set bits in the binary representation of this [ULong] number.\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class, ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun ULong.countOneBits(): Int = toLong().countOneBits()\n\n/**\n * Counts the number of consecutive most significant bits that are zero in the binary representation of this [ULong] number.\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class, ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun ULong.countLeadingZeroBits(): Int = toLong().countLeadingZeroBits()\n\n/**\n * Counts the number of consecutive least significant bits that are zero in the binary representation of this [ULong] number.\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class, ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun ULong.countTrailingZeroBits(): Int = toLong().countTrailingZeroBits()\n\n/**\n * Returns a number having a single bit set in the position of the most significant set bit of this [ULong] number,\n * or zero, if this number is zero.\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class, ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun ULong.takeHighestOneBit(): ULong = toLong().takeHighestOneBit().toULong()\n\n/**\n * Returns a number having a single bit set in the position of the least significant set bit of this [ULong] number,\n * or zero, if this number is zero.\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class, ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun ULong.takeLowestOneBit(): ULong = toLong().takeLowestOneBit().toULong()\n\n/**\n * Rotates the binary representation of this [ULong] number left by the specified [bitCount] number of bits.\n * The most significant bits pushed out from the left side reenter the number as the least significant bits on the right side.\n *\n * Rotating the number left by a negative bit count is the same as rotating it right by the negated bit count:\n * `number.rotateLeft(-n) == number.rotateRight(n)`\n *\n * Rotating by a multiple of [ULong.SIZE_BITS] (64) returns the same number, or more generally\n * `number.rotateLeft(n) == number.rotateLeft(n % 64)`\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun ULong.rotateLeft(bitCount: Int): ULong = toLong().rotateLeft(bitCount).toULong()\n\n/**\n * Rotates the binary representation of this [ULong] number right by the specified [bitCount] number of bits.\n * The least significant bits pushed out from the right side reenter the number as the most significant bits on the left side.\n *\n * Rotating the number right by a negative bit count is the same as rotating it left by the negated bit count:\n * `number.rotateRight(-n) == number.rotateLeft(n)`\n *\n * Rotating by a multiple of [ULong.SIZE_BITS] (64) returns the same number, or more generally\n * `number.rotateRight(n) == number.rotateRight(n % 64)`\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun ULong.rotateRight(bitCount: Int): ULong = toLong().rotateRight(bitCount).toULong()\n\n/**\n * Counts the number of set bits in the binary representation of this [UByte] number.\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class, ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun UByte.countOneBits(): Int = toUInt().countOneBits()\n\n/**\n * Counts the number of consecutive most significant bits that are zero in the binary representation of this [UByte] number.\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class, ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun UByte.countLeadingZeroBits(): Int = toByte().countLeadingZeroBits()\n\n/**\n * Counts the number of consecutive least significant bits that are zero in the binary representation of this [UByte] number.\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class, ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun UByte.countTrailingZeroBits(): Int = toByte().countTrailingZeroBits()\n\n/**\n * Returns a number having a single bit set in the position of the most significant set bit of this [UByte] number,\n * or zero, if this number is zero.\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class, ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun UByte.takeHighestOneBit(): UByte = toInt().takeHighestOneBit().toUByte()\n\n/**\n * Returns a number having a single bit set in the position of the least significant set bit of this [UByte] number,\n * or zero, if this number is zero.\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class, ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun UByte.takeLowestOneBit(): UByte = toInt().takeLowestOneBit().toUByte()\n\n\n/**\n * Rotates the binary representation of this [UByte] number left by the specified [bitCount] number of bits.\n * The most significant bits pushed out from the left side reenter the number as the least significant bits on the right side.\n *\n * Rotating the number left by a negative bit count is the same as rotating it right by the negated bit count:\n * `number.rotateLeft(-n) == number.rotateRight(n)`\n *\n * Rotating by a multiple of [UByte.SIZE_BITS] (8) returns the same number, or more generally\n * `number.rotateLeft(n) == number.rotateLeft(n % 8)`\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun UByte.rotateLeft(bitCount: Int): UByte = toByte().rotateLeft(bitCount).toUByte()\n\n/**\n * Rotates the binary representation of this [UByte] number right by the specified [bitCount] number of bits.\n * The least significant bits pushed out from the right side reenter the number as the most significant bits on the left side.\n *\n * Rotating the number right by a negative bit count is the same as rotating it left by the negated bit count:\n * `number.rotateRight(-n) == number.rotateLeft(n)`\n *\n * Rotating by a multiple of [UByte.SIZE_BITS] (8) returns the same number, or more generally\n * `number.rotateRight(n) == number.rotateRight(n % 8)`\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun UByte.rotateRight(bitCount: Int): UByte = toByte().rotateRight(bitCount).toUByte()\n\n/**\n * Counts the number of set bits in the binary representation of this [UShort] number.\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class, ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun UShort.countOneBits(): Int = toUInt().countOneBits()\n\n/**\n * Counts the number of consecutive most significant bits that are zero in the binary representation of this [UShort] number.\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class, ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun UShort.countLeadingZeroBits(): Int = toShort().countLeadingZeroBits()\n\n/**\n * Counts the number of consecutive least significant bits that are zero in the binary representation of this [UShort] number.\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class, ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun UShort.countTrailingZeroBits(): Int = toShort().countTrailingZeroBits()\n\n/**\n * Returns a number having a single bit set in the position of the most significant set bit of this [UShort] number,\n * or zero, if this number is zero.\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class, ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun UShort.takeHighestOneBit(): UShort = toInt().takeHighestOneBit().toUShort()\n\n/**\n * Returns a number having a single bit set in the position of the least significant set bit of this [UShort] number,\n * or zero, if this number is zero.\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class, ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun UShort.takeLowestOneBit(): UShort = toInt().takeLowestOneBit().toUShort()\n\n\n/**\n * Rotates the binary representation of this [UShort] number left by the specified [bitCount] number of bits.\n * The most significant bits pushed out from the left side reenter the number as the least significant bits on the right side.\n *\n * Rotating the number left by a negative bit count is the same as rotating it right by the negated bit count:\n * `number.rotateLeft(-n) == number.rotateRight(n)`\n *\n * Rotating by a multiple of [UShort.SIZE_BITS] (16) returns the same number, or more generally\n * `number.rotateLeft(n) == number.rotateLeft(n % 16)`\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun UShort.rotateLeft(bitCount: Int): UShort = toShort().rotateLeft(bitCount).toUShort()\n\n/**\n * Rotates the binary representation of this [UShort] number right by the specified [bitCount] number of bits.\n * The least significant bits pushed out from the right side reenter the number as the most significant bits on the left side.\n *\n * Rotating the number right by a negative bit count is the same as rotating it left by the negated bit count:\n * `number.rotateRight(-n) == number.rotateLeft(n)`\n *\n * Rotating by a multiple of [UShort.SIZE_BITS] (16) returns the same number, or more generally\n * `number.rotateRight(n) == number.rotateRight(n % 16)`\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun UShort.rotateRight(bitCount: Int): UShort = toShort().rotateRight(bitCount).toUShort()\n","/*\n * Copyright 2010-2021 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n// Auto-generated file. DO NOT EDIT!\n\npackage kotlin\n\nimport kotlin.jvm.*\n\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@JvmInline\npublic value class UShortArray\n@PublishedApi\ninternal constructor(@PublishedApi internal val storage: ShortArray) : Collection<UShort> {\n\n    /** Creates a new array of the specified [size], with all elements initialized to zero. */\n    public constructor(size: Int) : this(ShortArray(size))\n\n    /**\n     * Returns the array element at the given [index]. This method can be called using the index operator.\n     *\n     * If the [index] is out of bounds of this array, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n     * where the behavior is unspecified.\n     */\n    public operator fun get(index: Int): UShort = storage[index].toUShort()\n\n    /**\n     * Sets the element at the given [index] to the given [value]. This method can be called using the index operator.\n     *\n     * If the [index] is out of bounds of this array, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n     * where the behavior is unspecified.\n     */\n    public operator fun set(index: Int, value: UShort) {\n        storage[index] = value.toShort()\n    }\n\n    /** Returns the number of elements in the array. */\n    public override val size: Int get() = storage.size\n\n    /** Creates an iterator over the elements of the array. */\n    public override operator fun iterator(): kotlin.collections.Iterator<UShort> = Iterator(storage)\n\n    @Suppress(\"DEPRECATION_ERROR\")\n    private class Iterator(private val array: ShortArray) : UShortIterator() {\n        private var index = 0\n        override fun hasNext() = index < array.size\n        override fun nextUShort() = if (index < array.size) array[index++].toUShort() else throw NoSuchElementException(index.toString())\n    }\n\n    override fun contains(element: UShort): Boolean {\n        // TODO: Eliminate this check after KT-30016 gets fixed.\n        // Currently JS BE does not generate special bridge method for this method.\n        @Suppress(\"USELESS_CAST\")\n        if ((element as Any?) !is UShort) return false\n\n        return storage.contains(element.toShort())\n    }\n\n    override fun containsAll(elements: Collection<UShort>): Boolean {\n        return (elements as Collection<*>).all { it is UShort && storage.contains(it.toShort()) }\n    }\n\n    override fun isEmpty(): Boolean = this.storage.size == 0\n}\n\n/**\n * Creates a new array of the specified [size], where each element is calculated by calling the specified\n * [init] function.\n *\n * The function [init] is called for each array element sequentially starting from the first one.\n * It should return the value for an array element given its index.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray(size: Int, init: (Int) -> UShort): UShortArray {\n    return UShortArray(ShortArray(size) { index -> init(index).toShort() })\n}\n\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ushortArrayOf(vararg elements: UShort): UShortArray = elements\n","/*\n * Copyright 2010-2021 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmName(\"UStringsKt\")  // string representation of unsigned numbers\n\npackage kotlin.text\n\n/**\n * Returns a string representation of this [Byte] value in the specified [radix].\n *\n * @throws IllegalArgumentException when [radix] is not a valid radix for number to string conversion.\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n//@kotlin.internal.InlineOnly\npublic /*inline*/ fun UByte.toString(radix: Int): String = this.toInt().toString(radix)\n\n/**\n * Returns a string representation of this [Short] value in the specified [radix].\n *\n * @throws IllegalArgumentException when [radix] is not a valid radix for number to string conversion.\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n//@kotlin.internal.InlineOnly\npublic /*inline*/ fun UShort.toString(radix: Int): String = this.toInt().toString(radix)\n\n\n/**\n * Returns a string representation of this [Int] value in the specified [radix].\n *\n * @throws IllegalArgumentException when [radix] is not a valid radix for number to string conversion.\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n//@kotlin.internal.InlineOnly\npublic /*inline*/ fun UInt.toString(radix: Int): String = this.toLong().toString(radix)\n\n/**\n * Returns a string representation of this [Long] value in the specified [radix].\n *\n * @throws IllegalArgumentException when [radix] is not a valid radix for number to string conversion.\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\npublic fun ULong.toString(radix: Int): String = ulongToString(this.toLong(), checkRadix(radix))\n\n\n/**\n * Parses the string as a signed [UByte] number and returns the result.\n * @throws NumberFormatException if the string is not a valid representation of a number.\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\npublic fun String.toUByte(): UByte = toUByteOrNull() ?: numberFormatError(this)\n\n/**\n * Parses the string as a signed [UByte] number and returns the result.\n * @throws NumberFormatException if the string is not a valid representation of a number.\n * @throws IllegalArgumentException when [radix] is not a valid radix for string to number conversion.\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\npublic fun String.toUByte(radix: Int): UByte = toUByteOrNull(radix) ?: numberFormatError(this)\n\n\n/**\n * Parses the string as a [UShort] number and returns the result.\n * @throws NumberFormatException if the string is not a valid representation of a number.\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\npublic fun String.toUShort(): UShort = toUShortOrNull() ?: numberFormatError(this)\n\n/**\n * Parses the string as a [UShort] number and returns the result.\n * @throws NumberFormatException if the string is not a valid representation of a number.\n * @throws IllegalArgumentException when [radix] is not a valid radix for string to number conversion.\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\npublic fun String.toUShort(radix: Int): UShort = toUShortOrNull(radix) ?: numberFormatError(this)\n\n/**\n * Parses the string as an [UInt] number and returns the result.\n * @throws NumberFormatException if the string is not a valid representation of a number.\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\npublic fun String.toUInt(): UInt = toUIntOrNull() ?: numberFormatError(this)\n\n/**\n * Parses the string as an [UInt] number and returns the result.\n * @throws NumberFormatException if the string is not a valid representation of a number.\n * @throws IllegalArgumentException when [radix] is not a valid radix for string to number conversion.\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\npublic fun String.toUInt(radix: Int): UInt = toUIntOrNull(radix) ?: numberFormatError(this)\n\n/**\n * Parses the string as a [ULong] number and returns the result.\n * @throws NumberFormatException if the string is not a valid representation of a number.\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\npublic fun String.toULong(): ULong = toULongOrNull() ?: numberFormatError(this)\n\n/**\n * Parses the string as a [ULong] number and returns the result.\n * @throws NumberFormatException if the string is not a valid representation of a number.\n * @throws IllegalArgumentException when [radix] is not a valid radix for string to number conversion.\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\npublic fun String.toULong(radix: Int): ULong = toULongOrNull(radix) ?: numberFormatError(this)\n\n\n\n\n\n/**\n * Parses the string as an [UByte] number and returns the result\n * or `null` if the string is not a valid representation of a number.\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\npublic fun String.toUByteOrNull(): UByte? = toUByteOrNull(radix = 10)\n\n/**\n * Parses the string as an [UByte] number and returns the result\n * or `null` if the string is not a valid representation of a number.\n *\n * @throws IllegalArgumentException when [radix] is not a valid radix for string to number conversion.\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\npublic fun String.toUByteOrNull(radix: Int): UByte? {\n    val int = this.toUIntOrNull(radix) ?: return null\n    if (int > UByte.MAX_VALUE) return null\n    return int.toUByte()\n}\n\n/**\n * Parses the string as an [UShort] number and returns the result\n * or `null` if the string is not a valid representation of a number.\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\npublic fun String.toUShortOrNull(): UShort? = toUShortOrNull(radix = 10)\n\n/**\n * Parses the string as an [UShort] number and returns the result\n * or `null` if the string is not a valid representation of a number.\n *\n * @throws IllegalArgumentException when [radix] is not a valid radix for string to number conversion.\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\npublic fun String.toUShortOrNull(radix: Int): UShort? {\n    val int = this.toUIntOrNull(radix) ?: return null\n    if (int > UShort.MAX_VALUE) return null\n    return int.toUShort()\n}\n\n/**\n * Parses the string as an [UInt] number and returns the result\n * or `null` if the string is not a valid representation of a number.\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\npublic fun String.toUIntOrNull(): UInt? = toUIntOrNull(radix = 10)\n\n/**\n * Parses the string as an [UInt] number and returns the result\n * or `null` if the string is not a valid representation of a number.\n *\n * @throws IllegalArgumentException when [radix] is not a valid radix for string to number conversion.\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\npublic fun String.toUIntOrNull(radix: Int): UInt? {\n    checkRadix(radix)\n\n    val length = this.length\n    if (length == 0) return null\n\n    val limit: UInt = UInt.MAX_VALUE\n    val start: Int\n\n    val firstChar = this[0]\n    if (firstChar < '0') {\n        if (length == 1 || firstChar != '+') return null\n        start = 1\n    } else {\n        start = 0\n    }\n\n    val limitForMaxRadix = 119304647u  //  limit / 36\n\n    var limitBeforeMul = limitForMaxRadix\n    val uradix = radix.toUInt()\n    var result = 0u\n    for (i in start until length) {\n        val digit = digitOf(this[i], radix)\n\n        if (digit < 0) return null\n        if (result > limitBeforeMul) {\n            if (limitBeforeMul == limitForMaxRadix) {\n                limitBeforeMul = limit / uradix\n\n                if (result > limitBeforeMul) {\n                    return null\n                }\n            } else {\n                return null\n            }\n        }\n\n        result *= uradix\n\n        val beforeAdding = result\n        result += digit.toUInt()\n        if (result < beforeAdding) return null // overflow has happened\n    }\n\n    return result\n}\n\n/**\n * Parses the string as an [ULong] number and returns the result\n * or `null` if the string is not a valid representation of a number.\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\npublic fun String.toULongOrNull(): ULong? = toULongOrNull(radix = 10)\n\n/**\n * Parses the string as an [ULong] number and returns the result\n * or `null` if the string is not a valid representation of a number.\n *\n * @throws IllegalArgumentException when [radix] is not a valid radix for string to number conversion.\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\npublic fun String.toULongOrNull(radix: Int): ULong? {\n    checkRadix(radix)\n\n    val length = this.length\n    if (length == 0) return null\n\n    val limit: ULong = ULong.MAX_VALUE\n    val start: Int\n\n    val firstChar = this[0]\n    if (firstChar < '0') {\n        if (length == 1 || firstChar != '+') return null\n        start = 1\n    } else {\n        start = 0\n    }\n\n\n    val limitForMaxRadix = 512409557603043100uL  //  limit / 36\n\n    var limitBeforeMul = limitForMaxRadix\n    val uradix = radix.toULong()\n    var result = 0uL\n    for (i in start until length) {\n        val digit = digitOf(this[i], radix)\n\n        if (digit < 0) return null\n        if (result > limitBeforeMul) {\n            if (limitBeforeMul == limitForMaxRadix) {\n                limitBeforeMul = limit / uradix\n\n                if (result > limitBeforeMul) {\n                    return null\n                }\n            } else {\n                return null\n            }\n        }\n\n        result *= uradix\n\n        val beforeAdding = result\n        result += digit.toUInt()\n        if (result < beforeAdding) return null // overflow has happened\n    }\n\n    return result\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:Suppress(\"INVISIBLE_REFERENCE\", \"INVISIBLE_MEMBER\")\npackage kotlin\n\nimport kotlin.annotation.AnnotationTarget.*\nimport kotlin.internal.RequireKotlin\nimport kotlin.internal.RequireKotlinVersionKind\n\n/**\n * Marks the API that is dependent on the experimental unsigned types, including those types themselves.\n *\n * Usages of such API will be reported as warnings unless an explicit opt-in with\n * the [OptIn] annotation, e.g. `@OptIn(ExperimentalUnsignedTypes::class)`,\n * or with the `-Xopt-in=kotlin.ExperimentalUnsignedTypes` compiler option is given.\n *\n * It's recommended to propagate the experimental status to the API that depends on unsigned types by annotating it with this annotation.\n */\n@Suppress(\"DEPRECATION\")\n@Experimental(level = Experimental.Level.WARNING)\n@RequiresOptIn(level = RequiresOptIn.Level.WARNING)\n@MustBeDocumented\n@Target(CLASS, ANNOTATION_CLASS, PROPERTY, FIELD, LOCAL_VARIABLE, VALUE_PARAMETER, CONSTRUCTOR, FUNCTION, PROPERTY_GETTER, PROPERTY_SETTER, TYPEALIAS)\n@Retention(AnnotationRetention.BINARY)\n@RequireKotlin(\"1.2.50\", versionKind = RequireKotlinVersionKind.COMPILER_VERSION)\npublic annotation class ExperimentalUnsignedTypes\n","/*\n * Copyright 2010-2021 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"UCollectionsKt\")\n\npackage kotlin.collections\n\n//\n// NOTE: THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.random.*\nimport kotlin.ranges.contains\nimport kotlin.ranges.reversed\n\n/**\n * Returns an array of UByte containing all of the elements of this collection.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun Collection<UByte>.toUByteArray(): UByteArray {\n    val result = UByteArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of UInt containing all of the elements of this collection.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun Collection<UInt>.toUIntArray(): UIntArray {\n    val result = UIntArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of ULong containing all of the elements of this collection.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun Collection<ULong>.toULongArray(): ULongArray {\n    val result = ULongArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of UShort containing all of the elements of this collection.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun Collection<UShort>.toUShortArray(): UShortArray {\n    val result = UShortArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfUInt\")\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\npublic fun Iterable<UInt>.sum(): UInt {\n    var sum: UInt = 0u\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfULong\")\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\npublic fun Iterable<ULong>.sum(): ULong {\n    var sum: ULong = 0uL\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfUByte\")\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\npublic fun Iterable<UByte>.sum(): UInt {\n    var sum: UInt = 0u\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfUShort\")\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\npublic fun Iterable<UShort>.sum(): UInt {\n    var sum: UInt = 0u\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n","/*\n * Copyright 2010-2021 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"USequencesKt\")\n\npackage kotlin.sequences\n\n//\n// NOTE: THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.random.*\n\n/**\n * Returns the sum of all elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"sumOfUInt\")\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\npublic fun Sequence<UInt>.sum(): UInt {\n    var sum: UInt = 0u\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"sumOfULong\")\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\npublic fun Sequence<ULong>.sum(): ULong {\n    var sum: ULong = 0uL\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"sumOfUByte\")\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\npublic fun Sequence<UByte>.sum(): UInt {\n    var sum: UInt = 0u\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"sumOfUShort\")\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\npublic fun Sequence<UShort>.sum(): UInt {\n    var sum: UInt = 0u\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin\n\n\npublic expect open class Error : Throwable {\n    constructor()\n    constructor(message: String?)\n    constructor(message: String?, cause: Throwable?)\n    constructor(cause: Throwable?)\n}\n\npublic expect open class Exception : Throwable {\n    constructor()\n    constructor(message: String?)\n    constructor(message: String?, cause: Throwable?)\n    constructor(cause: Throwable?)\n}\n\npublic expect open class RuntimeException : Exception {\n    constructor()\n    constructor(message: String?)\n    constructor(message: String?, cause: Throwable?)\n    constructor(cause: Throwable?)\n}\n\npublic expect open class IllegalArgumentException : RuntimeException {\n    constructor()\n    constructor(message: String?)\n    constructor(message: String?, cause: Throwable?)\n    constructor(cause: Throwable?)\n}\n\npublic expect open class IllegalStateException : RuntimeException {\n    constructor()\n    constructor(message: String?)\n    constructor(message: String?, cause: Throwable?)\n    constructor(cause: Throwable?)\n}\n\npublic expect open class IndexOutOfBoundsException : RuntimeException {\n    constructor()\n    constructor(message: String?)\n}\n\npublic expect open class ConcurrentModificationException : RuntimeException {\n    constructor()\n    constructor(message: String?)\n    @Deprecated(\"The constructor is not supported on all platforms and will be removed from kotlin-stdlib-common soon.\", level = DeprecationLevel.ERROR)\n    constructor(message: String?, cause: Throwable?)\n    @Deprecated(\"The constructor is not supported on all platforms and will be removed from kotlin-stdlib-common soon.\", level = DeprecationLevel.ERROR)\n    constructor(cause: Throwable?)\n}\n\npublic expect open class UnsupportedOperationException : RuntimeException {\n    constructor()\n    constructor(message: String?)\n    constructor(message: String?, cause: Throwable?)\n    constructor(cause: Throwable?)\n}\n\npublic expect open class NumberFormatException : IllegalArgumentException {\n    constructor()\n    constructor(message: String?)\n}\n\npublic expect open class NullPointerException : RuntimeException {\n    constructor()\n    constructor(message: String?)\n}\n\npublic expect open class ClassCastException : RuntimeException {\n    constructor()\n    constructor(message: String?)\n}\n\npublic expect open class AssertionError : Error {\n    constructor()\n    constructor(message: Any?)\n}\n\npublic expect open class NoSuchElementException : RuntimeException {\n    constructor()\n    constructor(message: String?)\n}\n\n@SinceKotlin(\"1.3\")\npublic expect open class ArithmeticException : RuntimeException {\n    constructor()\n    constructor(message: String?)\n}\n\n@Deprecated(\"This exception type is not supposed to be thrown or caught in common code and will be removed from kotlin-stdlib-common soon.\", level = DeprecationLevel.ERROR)\npublic expect open class NoWhenBranchMatchedException : RuntimeException {\n    constructor()\n    constructor(message: String?)\n    constructor(message: String?, cause: Throwable?)\n    constructor(cause: Throwable?)\n}\n\n@Deprecated(\"This exception type is not supposed to be thrown or caught in common code and will be removed from kotlin-stdlib-common soon.\", level = DeprecationLevel.ERROR)\npublic expect class UninitializedPropertyAccessException : RuntimeException {\n    constructor()\n    constructor(message: String?)\n    constructor(message: String?, cause: Throwable?)\n    constructor(cause: Throwable?)\n}\n\n/**\n * Thrown after invocation of a function or property that was expected to return `Nothing`, but returned something instead.\n */\n@SinceKotlin(\"1.4\")\n@PublishedApi\ninternal class KotlinNothingValueException : RuntimeException {\n    constructor() : super()\n    constructor(message: String?) : super(message)\n    constructor(message: String?, cause: Throwable?) : super(message, cause)\n    constructor(cause: Throwable?) : super(cause)\n}\n\n\n/**\n * Returns the detailed description of this throwable with its stack trace.\n *\n * The detailed description includes:\n * - the short description (see [Throwable.toString]) of this throwable;\n * - the complete stack trace;\n * - detailed descriptions of the exceptions that were [suppressed][suppressedExceptions] in order to deliver this exception;\n * - the detailed description of each throwable in the [Throwable.cause] chain.\n */\n@SinceKotlin(\"1.4\")\npublic expect fun Throwable.stackTraceToString(): String\n\n/**\n * Prints the [detailed description][Throwable.stackTraceToString] of this throwable to the standard output or standard error output.\n */\n@SinceKotlin(\"1.4\")\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\")\npublic expect fun Throwable.printStackTrace(): Unit\n\n/**\n * When supported by the platform, adds the specified exception to the list of exceptions that were\n * suppressed in order to deliver this exception.\n */\n@SinceKotlin(\"1.4\")\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\")\npublic expect fun Throwable.addSuppressed(exception: Throwable)\n\n/**\n * Returns a list of all exceptions that were suppressed in order to deliver this exception.\n *\n * The list can be empty:\n * - if no exceptions were suppressed;\n * - if the platform doesn't support suppressed exceptions;\n * - if this [Throwable] instance has disabled the suppression.\n */\n@SinceKotlin(\"1.4\")\npublic expect val Throwable.suppressedExceptions: List<Throwable>\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\npackage kotlin.math\n\n/**\n * Returns this value with the sign bit same as of the [sign] value.\n *\n * If [sign] is `NaN` the sign of the result is undefined.\n */\n@SinceKotlin(\"1.2\")\npublic actual fun Double.withSign(sign: Double): Double {\n    val thisSignBit = js(\"Kotlin\").doubleSignBit(this).unsafeCast<Int>()\n    val newSignBit = js(\"Kotlin\").doubleSignBit(sign).unsafeCast<Int>()\n    return if (thisSignBit == newSignBit) this else -this\n}","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\nimport kotlin.reflect.KClass\n\n@PublishedApi\ninternal fun <T : Annotation> KClass<*>.findAssociatedObject(@Suppress(\"UNUSED_PARAMETER\") annotationClass: KClass<T>): Any? {\n    // This API is not supported in js-v1. Return `null` to be source-compatible with js-ir.\n    return null\n}\n","/*\n * Copyright 2010-2021 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.text\n\n//\n// NOTE: THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.js.*\n\n/**\n * Returns a character at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this char sequence.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic actual fun CharSequence.elementAt(index: Int): Char {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, length: $length}\") }\n}\n\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.collections\n\n\n@OptIn(ExperimentalUnsignedTypes::class)\n@SinceKotlin(\"1.3\")\n@kotlin.js.JsName(\"contentDeepHashCodeImpl\")\ninternal fun <T> Array<out T>?.contentDeepHashCodeImpl(): Int {\n    if (this == null) return 0\n    var result = 1\n    for (element in this) {\n        val elementHash = when {\n            element == null -> 0\n            isArrayish(element) -> (element.unsafeCast<Array<*>>()).contentDeepHashCodeImpl()\n\n            element is UByteArray   -> element.contentHashCode()\n            element is UShortArray  -> element.contentHashCode()\n            element is UIntArray    -> element.contentHashCode()\n            element is ULongArray   -> element.contentHashCode()\n\n            else                    -> element.hashCode()\n        }\n\n        result = 31 * result + elementHash\n    }\n    return result\n}","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.coroutines.cancellation\n\n@SinceKotlin(\"1.4\")\npublic actual open class CancellationException : IllegalStateException {\n    actual constructor() : super()\n    actual constructor(message: String?) : super(message)\n    constructor(message: String?, cause: Throwable?) : super(message, cause)\n    constructor(cause: Throwable?) : super(cause)\n}","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlinx.dom\n\nimport org.w3c.dom.*\n\n/**\n * Gets a value indicating whether this node is a TEXT_NODE or a CDATA_SECTION_NODE.\n */\n@SinceKotlin(\"1.4\")\npublic val Node.isText: Boolean\n    get() = nodeType == Node.TEXT_NODE || nodeType == Node.CDATA_SECTION_NODE\n\n/**\n * Gets a value indicating whether this node is an [Element].\n */\n@SinceKotlin(\"1.4\")\npublic val Node.isElement: Boolean\n    get() = nodeType == Node.ELEMENT_NODE\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlinx.dom\n\nimport org.w3c.dom.*\n\n/** Removes all the children from this node. */\n@SinceKotlin(\"1.4\")\npublic fun Node.clear() {\n    while (hasChildNodes()) {\n        removeChild(firstChild!!)\n    }\n}\n\n/**\n * Creates text node and append it to the element.\n *\n * @return this element\n */\n@SinceKotlin(\"1.4\")\nfun Element.appendText(text: String): Element {\n    appendChild(ownerDocument!!.createTextNode(text))\n    return this\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\npackage kotlin.collections\n\n/**\n * Groups elements from the [Grouping] source by key and counts elements in each group.\n *\n * @return a [Map] associating the key of each group with the count of element in the group.\n */\n@SinceKotlin(\"1.1\")\npublic actual fun <T, K> Grouping<T, K>.eachCount(): Map<K, Int> =\n    fold(0) { acc, _ -> acc + 1 }\n\n/*\n/**\n * Groups elements from the [Grouping] source by key and sums values provided by the [valueSelector] function for elements in each group.\n *\n * @return a [Map] associating the key of each group with the count of element in the group.\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <T, K> Grouping<T, K>.eachSumOf(valueSelector: (T) -> Int): Map<K, Int> =\n        fold(0) { acc, e -> acc + valueSelector(e) }\n*/","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.js\n\nimport getKClass\nimport kotlin.reflect.KClass\nimport kotlin.reflect.js.internal.KClassImpl\n\n/**\n * Represents the constructor of a class. Instances of `JsClass` can be passed to JavaScript APIs that expect a constructor reference.\n */\nexternal interface JsClass<T : Any> {\n    /**\n     * Returns the unqualified name of the class represented by this instance.\n     */\n    val name: String\n}\n\n/**\n * Obtains a constructor reference for the given `KClass`.\n */\nval <T : Any> KClass<T>.js: JsClass<T>\n    get() = (this as KClassImpl<T>).jClass\n\n/**\n * Obtains a `KClass` instance for the given constructor reference.\n */\nval <T : Any> JsClass<T>.kotlin: KClass<T>\n    get() = getKClass(this)\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n// a package is omitted to get declarations directly under the module\n\n// TODO: Remove once JsReflectionAPICallChecker supports more reflection types\n@file:Suppress(\"Unsupported\")\n\nimport kotlin.reflect.*\nimport kotlin.reflect.js.internal.*\n\n@JsName(\"createKType\")\ninternal fun createKType(\n    classifier: KClassifier,\n    arguments: Array<KTypeProjection>,\n    isMarkedNullable: Boolean\n) =\n    KTypeImpl(classifier, arguments.asList(), isMarkedNullable)\n\n@JsName(\"createDynamicKType\")\ninternal fun createDynamicKType(): KType = DynamicKType\n\n@JsName(\"markKTypeNullable\")\ninternal fun markKTypeNullable(kType: KType) = KTypeImpl(kType.classifier!!, kType.arguments, true)\n\n@JsName(\"createKTypeParameter\")\ninternal fun createKTypeParameter(\n    name: String,\n    upperBounds: Array<KType>,\n    variance: String\n): KTypeParameter {\n    val kVariance = when (variance) {\n        \"in\" -> KVariance.IN\n        \"out\" -> KVariance.OUT\n        else -> KVariance.INVARIANT\n    }\n\n    return KTypeParameterImpl(name, upperBounds.asList(), kVariance, false)\n}\n\n@JsName(\"getStarKTypeProjection\")\ninternal fun getStarKTypeProjection(): KTypeProjection =\n    KTypeProjection.STAR\n\n@JsName(\"createCovariantKTypeProjection\")\ninternal fun createCovariantKTypeProjection(type: KType): KTypeProjection =\n    KTypeProjection.covariant(type)\n\n@JsName(\"createInvariantKTypeProjection\")\ninternal fun createInvariantKTypeProjection(type: KType): KTypeProjection =\n    KTypeProjection.invariant(type)\n\n@JsName(\"createContravariantKTypeProjection\")\ninternal fun createContravariantKTypeProjection(type: KType): KTypeProjection =\n    KTypeProjection.contravariant(type)\n","/*\n * Copyright 2010-2019 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage org.w3c.dom\n\n@Deprecated(\"Use UnionMessagePortOrWindowProxy instead.\", ReplaceWith(\"UnionMessagePortOrWindowProxy\"))\ntypealias UnionMessagePortOrWindow = UnionMessagePortOrWindowProxy\n\n@Deprecated(\"Use `as` instead.\", ReplaceWith(\"`as`\"))\nvar HTMLLinkElement.as_\n    get() = `as`\n    set(value) {\n        `as` = value\n    }\n\n@Deprecated(\"Use `is` instead.\", ReplaceWith(\"`is`\"))\nvar ElementCreationOptions.is_\n    get() = `is`\n    set(value) {\n        `is` = value\n    }","/*\n * Copyright 2010-2019 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmName(\"KClasses\")\n@file:Suppress(\"UNCHECKED_CAST\")\n\npackage kotlin.reflect\n\nimport kotlin.internal.LowPriorityInOverloadResolution\n\n/**\n * Casts the given [value] to the class represented by this [KClass] object.\n * Throws an exception if the value is `null` or if it is not an instance of this class.\n *\n * This is an experimental function that behaves as a similar function from kotlin.reflect.full on JVM.\n *\n * @see [KClass.isInstance]\n * @see [KClass.safeCast]\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@LowPriorityInOverloadResolution\nfun <T : Any> KClass<T>.cast(value: Any?): T {\n    if (!isInstance(value)) throw ClassCastException(\"Value cannot be cast to $qualifiedOrSimpleName\")\n    return value as T\n}\n\n// TODO: replace with qualifiedName when it is fully supported in K/JS\ninternal expect val KClass<*>.qualifiedOrSimpleName: String?\n\n/**\n * Casts the given [value] to the class represented by this [KClass] object.\n * Returns `null` if the value is `null` or if it is not an instance of this class.\n *\n * This is an experimental function that behaves as a similar function from kotlin.reflect.full on JVM.\n *\n * @see [KClass.isInstance]\n * @see [KClass.cast]\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@LowPriorityInOverloadResolution\nfun <T : Any> KClass<T>.safeCast(value: Any?): T? {\n    return if (isInstance(value)) value as T else null\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"MathKt\")\n\n\npackage kotlin.math\n\n\n\n// constants, can't use them from nativeMath as they are not constants there\n\n/** Ratio of the circumference of a circle to its diameter, approximately 3.14159. */\n@SinceKotlin(\"1.2\")\npublic const val PI: Double = 3.141592653589793\n/** Base of the natural logarithms, approximately 2.71828. */\n@SinceKotlin(\"1.2\")\npublic const val E: Double = 2.718281828459045\n\n// region ================ Double Math ========================================\n\n/** Computes the sine of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `sin(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\npublic expect fun sin(x: Double): Double\n\n/** Computes the cosine of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `cos(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\npublic expect fun cos(x: Double): Double\n\n/** Computes the tangent of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `tan(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\npublic expect fun tan(x: Double): Double\n\n/**\n * Computes the arc sine of the value [x];\n * the returned value is an angle in the range from `-PI/2` to `PI/2` radians.\n *\n * Special cases:\n *    - `asin(x)` is `NaN`, when `abs(x) > 1` or x is `NaN`\n */\n@SinceKotlin(\"1.2\")\npublic expect fun asin(x: Double): Double\n\n/**\n * Computes the arc cosine of the value [x];\n * the returned value is an angle in the range from `0.0` to `PI` radians.\n *\n * Special cases:\n *    - `acos(x)` is `NaN`, when `abs(x) > 1` or x is `NaN`\n */\n@SinceKotlin(\"1.2\")\npublic expect fun acos(x: Double): Double\n\n/**\n * Computes the arc tangent of the value [x];\n * the returned value is an angle in the range from `-PI/2` to `PI/2` radians.\n *\n * Special cases:\n *   - `atan(NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\npublic expect fun atan(x: Double): Double\n\n/**\n * Returns the angle `theta` of the polar coordinates `(r, theta)` that correspond\n * to the rectangular coordinates `(x, y)` by computing the arc tangent of the value [y] / [x];\n * the returned value is an angle in the range from `-PI` to `PI` radians.\n *\n * Special cases:\n *   - `atan2(0.0, 0.0)` is `0.0`\n *   - `atan2(0.0, x)` is  `0.0` for `x > 0` and `PI` for `x < 0`\n *   - `atan2(-0.0, x)` is `-0.0` for 'x > 0` and `-PI` for `x < 0`\n *   - `atan2(y, +Inf)` is `0.0` for `0 < y < +Inf` and `-0.0` for '-Inf < y < 0`\n *   - `atan2(y, -Inf)` is `PI` for `0 < y < +Inf` and `-PI` for `-Inf < y < 0`\n *   - `atan2(y, 0.0)` is `PI/2` for `y > 0` and `-PI/2` for `y < 0`\n *   - `atan2(+Inf, x)` is `PI/2` for finite `x`y\n *   - `atan2(-Inf, x)` is `-PI/2` for finite `x`\n *   - `atan2(NaN, x)` and `atan2(y, NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\npublic expect fun atan2(y: Double, x: Double): Double\n\n/**\n * Computes the hyperbolic sine of the value [x].\n *\n * Special cases:\n *   - `sinh(NaN)` is `NaN`\n *   - `sinh(+Inf)` is `+Inf`\n *   - `sinh(-Inf)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\npublic expect fun sinh(x: Double): Double\n\n/**\n * Computes the hyperbolic cosine of the value [x].\n *\n * Special cases:\n *   - `cosh(NaN)` is `NaN`\n *   - `cosh(+Inf|-Inf)` is `+Inf`\n */\n@SinceKotlin(\"1.2\")\npublic expect fun cosh(x: Double): Double\n\n/**\n * Computes the hyperbolic tangent of the value [x].\n *\n * Special cases:\n *   - `tanh(NaN)` is `NaN`\n *   - `tanh(+Inf)` is `1.0`\n *   - `tanh(-Inf)` is `-1.0`\n */\n@SinceKotlin(\"1.2\")\npublic expect fun tanh(x: Double): Double\n\n/**\n * Computes the inverse hyperbolic sine of the value [x].\n *\n * The returned value is `y` such that `sinh(y) == x`.\n *\n * Special cases:\n *   - `asinh(NaN)` is `NaN`\n *   - `asinh(+Inf)` is `+Inf`\n *   - `asinh(-Inf)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\npublic expect fun asinh(x: Double): Double\n\n/**\n * Computes the inverse hyperbolic cosine of the value [x].\n *\n * The returned value is positive `y` such that `cosh(y) == x`.\n *\n * Special cases:\n *   - `acosh(NaN)` is `NaN`\n *   - `acosh(x)` is `NaN` when `x < 1`\n *   - `acosh(+Inf)` is `+Inf`\n */\n@SinceKotlin(\"1.2\")\npublic expect fun acosh(x: Double): Double\n\n/**\n * Computes the inverse hyperbolic tangent of the value [x].\n *\n * The returned value is `y` such that `tanh(y) == x`.\n *\n * Special cases:\n *   - `tanh(NaN)` is `NaN`\n *   - `tanh(x)` is `NaN` when `x > 1` or `x < -1`\n *   - `tanh(1.0)` is `+Inf`\n *   - `tanh(-1.0)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\npublic expect fun atanh(x: Double): Double\n\n/**\n * Computes `sqrt(x^2 + y^2)` without intermediate overflow or underflow.\n *\n * Special cases:\n *   - returns `+Inf` if any of arguments is infinite\n *   - returns `NaN` if any of arguments is `NaN` and the other is not infinite\n */\n@SinceKotlin(\"1.2\")\npublic expect fun hypot(x: Double, y: Double): Double\n\n/**\n * Computes the positive square root of the value [x].\n *\n * Special cases:\n *   - `sqrt(x)` is `NaN` when `x < 0` or `x` is `NaN`\n */\n@SinceKotlin(\"1.2\")\npublic expect fun sqrt(x: Double): Double\n\n/**\n * Computes Euler's number `e` raised to the power of the value [x].\n *\n * Special cases:\n *   - `exp(NaN)` is `NaN`\n *   - `exp(+Inf)` is `+Inf`\n *   - `exp(-Inf)` is `0.0`\n */\n@SinceKotlin(\"1.2\")\npublic expect fun exp(x: Double): Double\n\n/**\n * Computes `exp(x) - 1`.\n *\n * This function can be implemented to produce more precise result for [x] near zero.\n *\n * Special cases:\n *   - `expm1(NaN)` is `NaN`\n *   - `expm1(+Inf)` is `+Inf`\n *   - `expm1(-Inf)` is `-1.0`\n *\n * @see [exp] function.\n */\n@SinceKotlin(\"1.2\")\npublic expect fun expm1(x: Double): Double\n\n/**\n * Computes the logarithm of the value [x] to the given [base].\n *\n * Special cases:\n *   - `log(x, b)` is `NaN` if either `x` or `b` are `NaN`\n *   - `log(x, b)` is `NaN` when `x < 0` or `b <= 0` or `b == 1.0`\n *   - `log(+Inf, +Inf)` is `NaN`\n *   - `log(+Inf, b)` is `+Inf` for `b > 1` and `-Inf` for `b < 1`\n *   - `log(0.0, b)` is `-Inf` for `b > 1` and `+Inf` for `b > 1`\n *\n * See also logarithm functions for common fixed bases: [ln], [log10] and [log2].\n */\n@SinceKotlin(\"1.2\")\npublic expect fun log(x: Double, base: Double): Double\n\n/**\n * Computes the natural logarithm (base `E`) of the value [x].\n *\n * Special cases:\n *   - `ln(NaN)` is `NaN`\n *   - `ln(x)` is `NaN` when `x < 0.0`\n *   - `ln(+Inf)` is `+Inf`\n *   - `ln(0.0)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\npublic expect fun ln(x: Double): Double\n\n/**\n * Computes the common logarithm (base 10) of the value [x].\n *\n * @see [ln] function for special cases.\n */\n@SinceKotlin(\"1.2\")\npublic expect fun log10(x: Double): Double\n\n/**\n * Computes the binary logarithm (base 2) of the value [x].\n *\n * @see [ln] function for special cases.\n */\n@SinceKotlin(\"1.2\")\npublic expect fun log2(x: Double): Double\n\n/**\n * Computes `ln(x + 1)`.\n *\n * This function can be implemented to produce more precise result for [x] near zero.\n *\n * Special cases:\n *   - `ln1p(NaN)` is `NaN`\n *   - `ln1p(x)` is `NaN` where `x < -1.0`\n *   - `ln1p(-1.0)` is `-Inf`\n *   - `ln1p(+Inf)` is `+Inf`\n *\n * @see [ln] function\n * @see [expm1] function\n */\n@SinceKotlin(\"1.2\")\npublic expect fun ln1p(x: Double): Double\n\n/**\n * Rounds the given value [x] to an integer towards positive infinity.\n\n * @return the smallest double value that is greater than or equal to the given value [x] and is a mathematical integer.\n *\n * Special cases:\n *   - `ceil(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\npublic expect fun ceil(x: Double): Double\n\n/**\n * Rounds the given value [x] to an integer towards negative infinity.\n\n * @return the largest double value that is smaller than or equal to the given value [x] and is a mathematical integer.\n *\n * Special cases:\n *   - `floor(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\npublic expect fun floor(x: Double): Double\n\n/**\n * Rounds the given value [x] to an integer towards zero.\n *\n * @return the value [x] having its fractional part truncated.\n *\n * Special cases:\n *   - `truncate(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\npublic expect fun truncate(x: Double): Double\n\n/**\n * Rounds the given value [x] towards the closest integer with ties rounded towards even integer.\n *\n * Special cases:\n *   - `round(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\npublic expect fun round(x: Double): Double\n\n/**\n * Returns the absolute value of the given value [x].\n *\n * Special cases:\n *   - `abs(NaN)` is `NaN`\n *\n * @see absoluteValue extension property for [Double]\n */\n@SinceKotlin(\"1.2\")\npublic expect fun abs(x: Double): Double\n\n/**\n * Returns the sign of the given value [x]:\n *   - `-1.0` if the value is negative,\n *   - zero if the value is zero,\n *   - `1.0` if the value is positive\n *\n * Special case:\n *   - `sign(NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\npublic expect fun sign(x: Double): Double\n\n\n/**\n * Returns the smaller of two values.\n *\n * If either value is `NaN`, then the result is `NaN`.\n */\n@SinceKotlin(\"1.2\")\npublic expect fun min(a: Double, b: Double): Double\n\n/**\n * Returns the greater of two values.\n *\n * If either value is `NaN`, then the result is `NaN`.\n */\n@SinceKotlin(\"1.2\")\npublic expect fun max(a: Double, b: Double): Double\n\n// extensions\n\n/**\n * Raises this value to the power [x].\n *\n * Special cases:\n *   - `b.pow(0.0)` is `1.0`\n *   - `b.pow(1.0) == b`\n *   - `b.pow(NaN)` is `NaN`\n *   - `NaN.pow(x)` is `NaN` for `x != 0.0`\n *   - `b.pow(Inf)` is `NaN` for `abs(b) == 1.0`\n *   - `b.pow(x)` is `NaN` for `b < 0` and `x` is finite and not an integer\n */\n@SinceKotlin(\"1.2\")\npublic expect fun Double.pow(x: Double): Double\n\n/**\n * Raises this value to the integer power [n].\n *\n * See the other overload of [pow] for details.\n */\n@SinceKotlin(\"1.2\")\npublic expect fun Double.pow(n: Int): Double\n\n/**\n * Returns the absolute value of this value.\n *\n * Special cases:\n *   - `NaN.absoluteValue` is `NaN`\n *\n * @see abs function\n */\n@SinceKotlin(\"1.2\")\npublic expect val Double.absoluteValue: Double\n\n/**\n * Returns the sign of this value:\n *   - `-1.0` if the value is negative,\n *   - zero if the value is zero,\n *   - `1.0` if the value is positive\n *\n * Special case:\n *   - `NaN.sign` is `NaN`\n */\n@SinceKotlin(\"1.2\")\npublic expect val Double.sign: Double\n\n/**\n * Returns this value with the sign bit same as of the [sign] value.\n *\n * If [sign] is `NaN` the sign of the result is undefined.\n */\n@SinceKotlin(\"1.2\")\npublic expect fun Double.withSign(sign: Double): Double\n\n/**\n * Returns this value with the sign bit same as of the [sign] value.\n */\n@SinceKotlin(\"1.2\")\npublic expect fun Double.withSign(sign: Int): Double\n\n/**\n * Returns the ulp (unit in the last place) of this value.\n *\n * An ulp is a positive distance between this value and the next nearest [Double] value larger in magnitude.\n *\n * Special Cases:\n *   - `NaN.ulp` is `NaN`\n *   - `x.ulp` is `+Inf` when `x` is `+Inf` or `-Inf`\n *   - `0.0.ulp` is `Double.MIN_VALUE`\n */\n@SinceKotlin(\"1.2\")\npublic expect val Double.ulp: Double\n\n/**\n * Returns the [Double] value nearest to this value in direction of positive infinity.\n */\n@SinceKotlin(\"1.2\")\npublic expect fun Double.nextUp(): Double\n\n/**\n * Returns the [Double] value nearest to this value in direction of negative infinity.\n */\n@SinceKotlin(\"1.2\")\npublic expect fun Double.nextDown(): Double\n\n/**\n * Returns the [Double] value nearest to this value in direction from this value towards the value [to].\n *\n * Special cases:\n *   - `x.nextTowards(y)` is `NaN` if either `x` or `y` are `NaN`\n *   - `x.nextTowards(x) == x`\n *\n */\n@SinceKotlin(\"1.2\")\npublic expect fun Double.nextTowards(to: Double): Double\n\n/**\n * Rounds this [Double] value to the nearest integer and converts the result to [Int].\n * Ties are rounded towards positive infinity.\n *\n * Special cases:\n *   - `x.roundToInt() == Int.MAX_VALUE` when `x > Int.MAX_VALUE`\n *   - `x.roundToInt() == Int.MIN_VALUE` when `x < Int.MIN_VALUE`\n *\n * @throws IllegalArgumentException when this value is `NaN`\n */\n@SinceKotlin(\"1.2\")\npublic expect fun Double.roundToInt(): Int\n\n/**\n * Rounds this [Double] value to the nearest integer and converts the result to [Long].\n * Ties are rounded towards positive infinity.\n *\n * Special cases:\n *   - `x.roundToLong() == Long.MAX_VALUE` when `x > Long.MAX_VALUE`\n *   - `x.roundToLong() == Long.MIN_VALUE` when `x < Long.MIN_VALUE`\n *\n * @throws IllegalArgumentException when this value is `NaN`\n */\n@SinceKotlin(\"1.2\")\npublic expect fun Double.roundToLong(): Long\n\n// endregion\n\n\n\n// region ================ Float Math ========================================\n\n/** Computes the sine of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `sin(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\npublic expect fun sin(x: Float): Float\n\n/** Computes the cosine of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `cos(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\npublic expect fun cos(x: Float): Float\n\n/** Computes the tangent of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `tan(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\npublic expect fun tan(x: Float): Float\n\n/**\n * Computes the arc sine of the value [x];\n * the returned value is an angle in the range from `-PI/2` to `PI/2` radians.\n *\n * Special cases:\n *    - `asin(x)` is `NaN`, when `abs(x) > 1` or x is `NaN`\n */\n@SinceKotlin(\"1.2\")\npublic expect fun asin(x: Float): Float\n\n/**\n * Computes the arc cosine of the value [x];\n * the returned value is an angle in the range from `0.0` to `PI` radians.\n *\n * Special cases:\n *    - `acos(x)` is `NaN`, when `abs(x) > 1` or x is `NaN`\n */\n@SinceKotlin(\"1.2\")\npublic expect fun acos(x: Float): Float\n\n/**\n * Computes the arc tangent of the value [x];\n * the returned value is an angle in the range from `-PI/2` to `PI/2` radians.\n *\n * Special cases:\n *   - `atan(NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\npublic expect fun atan(x: Float): Float\n\n/**\n * Returns the angle `theta` of the polar coordinates `(r, theta)` that correspond\n * to the rectangular coordinates `(x, y)` by computing the arc tangent of the value [y] / [x];\n * the returned value is an angle in the range from `-PI` to `PI` radians.\n *\n * Special cases:\n *   - `atan2(0.0, 0.0)` is `0.0`\n *   - `atan2(0.0, x)` is  `0.0` for `x > 0` and `PI` for `x < 0`\n *   - `atan2(-0.0, x)` is `-0.0` for 'x > 0` and `-PI` for `x < 0`\n *   - `atan2(y, +Inf)` is `0.0` for `0 < y < +Inf` and `-0.0` for '-Inf < y < 0`\n *   - `atan2(y, -Inf)` is `PI` for `0 < y < +Inf` and `-PI` for `-Inf < y < 0`\n *   - `atan2(y, 0.0)` is `PI/2` for `y > 0` and `-PI/2` for `y < 0`\n *   - `atan2(+Inf, x)` is `PI/2` for finite `x`y\n *   - `atan2(-Inf, x)` is `-PI/2` for finite `x`\n *   - `atan2(NaN, x)` and `atan2(y, NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\npublic expect fun atan2(y: Float, x: Float): Float\n\n/**\n * Computes the hyperbolic sine of the value [x].\n *\n * Special cases:\n *   - `sinh(NaN)` is `NaN`\n *   - `sinh(+Inf)` is `+Inf`\n *   - `sinh(-Inf)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\npublic expect fun sinh(x: Float): Float\n\n/**\n * Computes the hyperbolic cosine of the value [x].\n *\n * Special cases:\n *   - `cosh(NaN)` is `NaN`\n *   - `cosh(+Inf|-Inf)` is `+Inf`\n */\n@SinceKotlin(\"1.2\")\npublic expect fun cosh(x: Float): Float\n\n/**\n * Computes the hyperbolic tangent of the value [x].\n *\n * Special cases:\n *   - `tanh(NaN)` is `NaN`\n *   - `tanh(+Inf)` is `1.0`\n *   - `tanh(-Inf)` is `-1.0`\n */\n@SinceKotlin(\"1.2\")\npublic expect fun tanh(x: Float): Float\n\n/**\n * Computes the inverse hyperbolic sine of the value [x].\n *\n * The returned value is `y` such that `sinh(y) == x`.\n *\n * Special cases:\n *   - `asinh(NaN)` is `NaN`\n *   - `asinh(+Inf)` is `+Inf`\n *   - `asinh(-Inf)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\npublic expect fun asinh(x: Float): Float\n\n/**\n * Computes the inverse hyperbolic cosine of the value [x].\n *\n * The returned value is positive `y` such that `cosh(y) == x`.\n *\n * Special cases:\n *   - `acosh(NaN)` is `NaN`\n *   - `acosh(x)` is `NaN` when `x < 1`\n *   - `acosh(+Inf)` is `+Inf`\n */\n@SinceKotlin(\"1.2\")\npublic expect fun acosh(x: Float): Float\n\n/**\n * Computes the inverse hyperbolic tangent of the value [x].\n *\n * The returned value is `y` such that `tanh(y) == x`.\n *\n * Special cases:\n *   - `tanh(NaN)` is `NaN`\n *   - `tanh(x)` is `NaN` when `x > 1` or `x < -1`\n *   - `tanh(1.0)` is `+Inf`\n *   - `tanh(-1.0)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\npublic expect fun atanh(x: Float): Float\n\n/**\n * Computes `sqrt(x^2 + y^2)` without intermediate overflow or underflow.\n *\n * Special cases:\n *   - returns `+Inf` if any of arguments is infinite\n *   - returns `NaN` if any of arguments is `NaN` and the other is not infinite\n */\n@SinceKotlin(\"1.2\")\npublic expect fun hypot(x: Float, y: Float): Float\n\n/**\n * Computes the positive square root of the value [x].\n *\n * Special cases:\n *   - `sqrt(x)` is `NaN` when `x < 0` or `x` is `NaN`\n */\n@SinceKotlin(\"1.2\")\npublic expect fun sqrt(x: Float): Float\n\n/**\n * Computes Euler's number `e` raised to the power of the value [x].\n *\n * Special cases:\n *   - `exp(NaN)` is `NaN`\n *   - `exp(+Inf)` is `+Inf`\n *   - `exp(-Inf)` is `0.0`\n */\n@SinceKotlin(\"1.2\")\npublic expect fun exp(x: Float): Float\n\n/**\n * Computes `exp(x) - 1`.\n *\n * This function can be implemented to produce more precise result for [x] near zero.\n *\n * Special cases:\n *   - `expm1(NaN)` is `NaN`\n *   - `expm1(+Inf)` is `+Inf`\n *   - `expm1(-Inf)` is `-1.0`\n *\n * @see [exp] function.\n */\n@SinceKotlin(\"1.2\")\npublic expect fun expm1(x: Float): Float\n\n/**\n * Computes the logarithm of the value [x] to the given [base].\n *\n * Special cases:\n *   - `log(x, b)` is `NaN` if either `x` or `b` are `NaN`\n *   - `log(x, b)` is `NaN` when `x < 0` or `b <= 0` or `b == 1.0`\n *   - `log(+Inf, +Inf)` is `NaN`\n *   - `log(+Inf, b)` is `+Inf` for `b > 1` and `-Inf` for `b < 1`\n *   - `log(0.0, b)` is `-Inf` for `b > 1` and `+Inf` for `b > 1`\n *\n * See also logarithm functions for common fixed bases: [ln], [log10] and [log2].\n */\n@SinceKotlin(\"1.2\")\npublic expect fun log(x: Float, base: Float): Float\n\n/**\n * Computes the natural logarithm (base `E`) of the value [x].\n *\n * Special cases:\n *   - `ln(NaN)` is `NaN`\n *   - `ln(x)` is `NaN` when `x < 0.0`\n *   - `ln(+Inf)` is `+Inf`\n *   - `ln(0.0)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\npublic expect fun ln(x: Float): Float\n\n/**\n * Computes the common logarithm (base 10) of the value [x].\n *\n * @see [ln] function for special cases.\n */\n@SinceKotlin(\"1.2\")\npublic expect fun log10(x: Float): Float\n\n/**\n * Computes the binary logarithm (base 2) of the value [x].\n *\n * @see [ln] function for special cases.\n */\n@SinceKotlin(\"1.2\")\npublic expect fun log2(x: Float): Float\n\n/**\n * Computes `ln(a + 1)`.\n *\n * This function can be implemented to produce more precise result for [x] near zero.\n *\n * Special cases:\n *   - `ln1p(NaN)` is `NaN`\n *   - `ln1p(x)` is `NaN` where `x < -1.0`\n *   - `ln1p(-1.0)` is `-Inf`\n *   - `ln1p(+Inf)` is `+Inf`\n *\n * @see [ln] function\n * @see [expm1] function\n */\n@SinceKotlin(\"1.2\")\npublic expect fun ln1p(x: Float): Float\n\n/**\n * Rounds the given value [x] to an integer towards positive infinity.\n\n * @return the smallest Float value that is greater than or equal to the given value [x] and is a mathematical integer.\n *\n * Special cases:\n *   - `ceil(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\npublic expect fun ceil(x: Float): Float\n\n/**\n * Rounds the given value [x] to an integer towards negative infinity.\n\n * @return the largest Float value that is smaller than or equal to the given value [x] and is a mathematical integer.\n *\n * Special cases:\n *   - `floor(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\npublic expect fun floor(x: Float): Float\n\n/**\n * Rounds the given value [x] to an integer towards zero.\n *\n * @return the value [x] having its fractional part truncated.\n *\n * Special cases:\n *   - `truncate(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\npublic expect fun truncate(x: Float): Float\n\n/**\n * Rounds the given value [x] towards the closest integer with ties rounded towards even integer.\n *\n * Special cases:\n *   - `round(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\npublic expect fun round(x: Float): Float\n\n\n/**\n * Returns the absolute value of the given value [x].\n *\n * Special cases:\n *   - `abs(NaN)` is `NaN`\n *\n * @see absoluteValue extension property for [Float]\n */\n@SinceKotlin(\"1.2\")\npublic expect fun abs(x: Float): Float\n\n/**\n * Returns the sign of the given value [x]:\n *   - `-1.0` if the value is negative,\n *   - zero if the value is zero,\n *   - `1.0` if the value is positive\n *\n * Special case:\n *   - `sign(NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\npublic expect fun sign(x: Float): Float\n\n\n\n/**\n * Returns the smaller of two values.\n *\n * If either value is `NaN`, then the result is `NaN`.\n */\n@SinceKotlin(\"1.2\")\npublic expect fun min(a: Float, b: Float): Float\n\n/**\n * Returns the greater of two values.\n *\n * If either value is `NaN`, then the result is `NaN`.\n */\n@SinceKotlin(\"1.2\")\npublic expect fun max(a: Float, b: Float): Float\n\n// extensions\n\n\n/**\n * Raises this value to the power [x].\n *\n * Special cases:\n *   - `b.pow(0.0)` is `1.0`\n *   - `b.pow(1.0) == b`\n *   - `b.pow(NaN)` is `NaN`\n *   - `NaN.pow(x)` is `NaN` for `x != 0.0`\n *   - `b.pow(Inf)` is `NaN` for `abs(b) == 1.0`\n *   - `b.pow(x)` is `NaN` for `b < 0` and `x` is finite and not an integer\n */\n@SinceKotlin(\"1.2\")\npublic expect fun Float.pow(x: Float): Float\n\n/**\n * Raises this value to the integer power [n].\n *\n * See the other overload of [pow] for details.\n */\n@SinceKotlin(\"1.2\")\npublic expect fun Float.pow(n: Int): Float\n\n/**\n * Returns the absolute value of this value.\n *\n * Special cases:\n *   - `NaN.absoluteValue` is `NaN`\n *\n * @see abs function\n */\n@SinceKotlin(\"1.2\")\npublic expect val Float.absoluteValue: Float\n\n/**\n * Returns the sign of this value:\n *   - `-1.0` if the value is negative,\n *   - zero if the value is zero,\n *   - `1.0` if the value is positive\n *\n * Special case:\n *   - `NaN.sign` is `NaN`\n */\n@SinceKotlin(\"1.2\")\npublic expect val Float.sign: Float\n\n/**\n * Returns this value with the sign bit same as of the [sign] value.\n *\n * If [sign] is `NaN` the sign of the result is undefined.\n */\n@SinceKotlin(\"1.2\")\npublic expect fun Float.withSign(sign: Float): Float\n\n/**\n * Returns this value with the sign bit same as of the [sign] value.\n */\n@SinceKotlin(\"1.2\")\npublic expect fun Float.withSign(sign: Int): Float\n\n\n/**\n * Rounds this [Float] value to the nearest integer and converts the result to [Int].\n * Ties are rounded towards positive infinity.\n *\n * Special cases:\n *   - `x.roundToInt() == Int.MAX_VALUE` when `x > Int.MAX_VALUE`\n *   - `x.roundToInt() == Int.MIN_VALUE` when `x < Int.MIN_VALUE`\n *\n * @throws IllegalArgumentException when this value is `NaN`\n */\n@SinceKotlin(\"1.2\")\npublic expect fun Float.roundToInt(): Int\n\n/**\n * Rounds this [Float] value to the nearest integer and converts the result to [Long].\n * Ties are rounded towards positive infinity.\n *\n * Special cases:\n *   - `x.roundToLong() == Long.MAX_VALUE` when `x > Long.MAX_VALUE`\n *   - `x.roundToLong() == Long.MIN_VALUE` when `x < Long.MIN_VALUE`\n *\n * @throws IllegalArgumentException when this value is `NaN`\n */\n@SinceKotlin(\"1.2\")\npublic expect fun Float.roundToLong(): Long\n\n\n// endregion\n\n// region ================ Integer Math ========================================\n\n\n/**\n * Returns the absolute value of the given value [n].\n *\n * Special cases:\n *   - `abs(Int.MIN_VALUE)` is `Int.MIN_VALUE` due to an overflow\n *\n * @see absoluteValue extension property for [Int]\n */\n@SinceKotlin(\"1.2\")\npublic expect fun abs(n: Int): Int\n\n/**\n * Returns the smaller of two values.\n */\n@SinceKotlin(\"1.2\")\npublic expect fun min(a: Int, b: Int): Int\n\n/**\n * Returns the greater of two values.\n */\n@SinceKotlin(\"1.2\")\npublic expect fun max(a: Int, b: Int): Int\n\n/**\n * Returns the absolute value of this value.\n *\n * Special cases:\n *   - `Int.MIN_VALUE.absoluteValue` is `Int.MIN_VALUE` due to an overflow\n *\n * @see abs function\n */\n@SinceKotlin(\"1.2\")\npublic expect val Int.absoluteValue: Int\n\n/**\n * Returns the sign of this value:\n *   - `-1` if the value is negative,\n *   - `0` if the value is zero,\n *   - `1` if the value is positive\n */\n@SinceKotlin(\"1.2\")\npublic expect val Int.sign: Int\n\n\n\n/**\n * Returns the absolute value of the given value [n].\n *\n * Special cases:\n *   - `abs(Long.MIN_VALUE)` is `Long.MIN_VALUE` due to an overflow\n *\n * @see absoluteValue extension property for [Long]\n */\n@SinceKotlin(\"1.2\")\npublic expect fun abs(n: Long): Long\n\n/**\n * Returns the smaller of two values.\n */\n@SinceKotlin(\"1.2\")\npublic expect fun min(a: Long, b: Long): Long\n\n/**\n * Returns the greater of two values.\n */\n@SinceKotlin(\"1.2\")\npublic expect fun max(a: Long, b: Long): Long\n\n/**\n * Returns the absolute value of this value.\n *\n * Special cases:\n *   - `Long.MIN_VALUE.absoluteValue` is `Long.MIN_VALUE` due to an overflow\n *\n * @see abs function\n */\n@SinceKotlin(\"1.2\")\npublic expect val Long.absoluteValue: Long\n\n/**\n * Returns the sign of this value:\n *   - `-1` if the value is negative,\n *   - `0` if the value is zero,\n *   - `1` if the value is positive\n */\n@SinceKotlin(\"1.2\")\npublic expect val Long.sign: Int\n\n\n// endregion\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.coroutines.js.internal\n\nimport kotlin.coroutines.Continuation\nimport kotlin.coroutines.EmptyCoroutineContext\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\ninternal val EmptyContinuation = Continuation<Any?>(EmptyCoroutineContext) { result ->\n    result.getOrThrow()\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(597);\n"],"sourceRoot":""}